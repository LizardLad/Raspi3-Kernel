
build/kernel.elf:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000080000 <_start>:

_start:	
//"================================================================"
//  Initilize MPID/MPIDR registers for all Cores
//"================================================================"
	mrs	x0, midr_el1
   80000:	d5380000 	mrs	x0, midr_el1
	mrs	x1, mpidr_el1
   80004:	d53800a1 	mrs	x1, mpidr_el1
	msr	vpidr_el2, x0
   80008:	d51c0000 	msr	vpidr_el2, x0
	msr	vmpidr_el2, x1
   8000c:	d51c00a1 	msr	vmpidr_el2, x1

//"================================================================"
//  Disable coprocessor traps for all Cores
//"================================================================"
	mov	x0, #0x33ff
   80010:	d2867fe0 	mov	x0, #0x33ff                	// #13311
	msr	cptr_el2, x0						// Disable coprocessor traps to EL2
   80014:	d51c1140 	msr	cptr_el2, x0
	msr	hstr_el2, xzr						// Disable coprocessor traps to EL2
   80018:	d51c117f 	msr	hstr_el2, xzr
	mov	x0, #3 << 20
   8001c:	d2a00600 	mov	x0, #0x300000              	// #3145728
	msr	cpacr_el1, x0						// Enable FP/SIMD at EL1
   80020:	d5181040 	msr	cpacr_el1, x0

//"================================================================"
//  Enable CNTP for EL1
//"================================================================"
	mrs	x0, cnthctl_el2
   80024:	d53ce100 	mrs	x0, cnthctl_el2
	orr	x0, x0, #3
   80028:	b2400400 	orr	x0, x0, #0x3
	msr	cnthctl_el2, x0
   8002c:	d51ce100 	msr	cnthctl_el2, x0
	msr	cntvoff_el2, xzr
   80030:	d51ce07f 	msr	cntvoff_el2, xzr

//"================================================================"
//  Initialize HCR_EL2 so EL1 is 64 bits for all Cores
//"================================================================"
	mov	x0, #(1 << 31)						// 64bit EL1
   80034:	d2b00000 	mov	x0, #0x80000000            	// #2147483648
	msr	hcr_el2, x0
   80038:	d51c1100 	msr	hcr_el2, x0
//"================================================================"
	/*  RES1 bits (29,28,23,22,20,11) to 1
	 *  RES0 bits (31,30,27,21,17,13,10,6) +
	 *  UCI,EE,EOE,WXN,nTWE,nTWI,UCT,DZE,I,UMA,SED,ITD,
	 *  CP15BEN,SA0,SA,C,A,M to 0 */
	mov	x0, #0x0800
   8003c:	d2810000 	mov	x0, #0x800                 	// #2048
	movk	x0, #0x30d0, lsl #16
   80040:	f2a61a00 	movk	x0, #0x30d0, lsl #16
	orr    x0, x0, #(0x1 << 2)            // The C bit on (data cache). 
   80044:	b27e0000 	orr	x0, x0, #0x4
	orr    x0, x0, #(0x1 << 12)           // The I bit on (instruction cache)
   80048:	b2740000 	orr	x0, x0, #0x1000
	msr	sctlr_el1, x0
   8004c:	d5181000 	msr	sctlr_el1, x0

//"================================================================"
//  Set up exception handlers
//"================================================================"
	ldr	x0, =_vectors
   80050:	58005ac0 	ldr	x0, 80ba8 <_vectors+0x3a8>
	msr	vbar_el1, x0
   80054:	d518c000 	msr	vbar_el1, x0

//"================================================================"
//  Set up stack pointers
//"================================================================"
	mrs 	x1, mpidr_el1	// Read core id on AARCH64
   80058:	d53800a1 	mrs	x1, mpidr_el1
	and 	x1, x1, #0x3	// Make core 2 bit bitmask in x1
   8005c:	92400421 	and	x1, x1, #0x3
	cmp	x1, #0
   80060:	f100003f 	cmp	x1, #0x0
	beq	Core0StackPointers
   80064:	540003a0 	b.eq	800d8 <Core0StackPointers>  // b.none
	cmp	x1, #1
   80068:	f100043f 	cmp	x1, #0x1
	beq	Core1StackPointers
   8006c:	540000c0 	b.eq	80084 <Core1StackPointers>  // b.none
	cmp	x1, #2
   80070:	f100083f 	cmp	x1, #0x2
	beq	Core2StackPointers
   80074:	54000160 	b.eq	800a0 <Core2StackPointers>  // b.none
	cmp	x1, #3
   80078:	f1000c3f 	cmp	x1, #0x3
	beq	Core3StackPointers
   8007c:	54000200 	b.eq	800bc <Core3StackPointers>  // b.none
	b	_hang
   80080:	1400003a 	b	80168 <_hang>

0000000000080084 <Core1StackPointers>:

//Core 1 stack pointers
Core1StackPointers:
	ldr	x1, =__EL0_stack_core1
   80084:	58005961 	ldr	x1, 80bb0 <_vectors+0x3b0>
	ldr     x2, =__EL1_stack_core1
   80088:	58005982 	ldr	x2, 80bb8 <_vectors+0x3b8>
	ldr	x3, =__EL2_stack_core1
   8008c:	580059a3 	ldr	x3, 80bc0 <_vectors+0x3c0>
	msr	sp_el0, x1
   80090:	d5184101 	msr	sp_el0, x1
	msr     sp_el1, x2
   80094:	d51c4102 	msr	sp_el1, x2
	mov	sp, x3
   80098:	9100007f 	mov	sp, x3
	b 	EL2_ret
   8009c:	14000016 	b	800f4 <EL2_ret>

00000000000800a0 <Core2StackPointers>:

//Core 2 stack pointers
Core2StackPointers:
	ldr	x1, =__EL0_stack_core2
   800a0:	58005941 	ldr	x1, 80bc8 <_vectors+0x3c8>
	ldr	x2, =__EL1_stack_core2
   800a4:	58005962 	ldr	x2, 80bd0 <_vectors+0x3d0>
	ldr	x3, =__EL2_stack_core2
   800a8:	58005983 	ldr	x3, 80bd8 <_vectors+0x3d8>
	msr	sp_el0, x1
   800ac:	d5184101 	msr	sp_el0, x1
	msr     sp_el1, x2
   800b0:	d51c4102 	msr	sp_el1, x2
	mov	sp, x3
   800b4:	9100007f 	mov	sp, x3
	b 	EL2_ret
   800b8:	1400000f 	b	800f4 <EL2_ret>

00000000000800bc <Core3StackPointers>:

//Core 3 stack pointers
Core3StackPointers:
	ldr	x1, =__EL0_stack_core3
   800bc:	58005921 	ldr	x1, 80be0 <_vectors+0x3e0>
	ldr	x2, =__EL1_stack_core3
   800c0:	58005942 	ldr	x2, 80be8 <_vectors+0x3e8>
	ldr	x3, =__EL2_stack_core3
   800c4:	58005963 	ldr	x3, 80bf0 <_vectors+0x3f0>
	msr	sp_el0, x1
   800c8:	d5184101 	msr	sp_el0, x1
	msr     sp_el1, x2
   800cc:	d51c4102 	msr	sp_el1, x2
	mov	sp, x3
   800d0:	9100007f 	mov	sp, x3
	b	EL2_ret
   800d4:	14000008 	b	800f4 <EL2_ret>

00000000000800d8 <Core0StackPointers>:

//Core 0 stack pointers
Core0StackPointers:
	ldr	x1, =__EL0_stack_core0
   800d8:	58005901 	ldr	x1, 80bf8 <_vectors+0x3f8>
	ldr     x2, =__EL1_stack_core0
   800dc:	58005922 	ldr	x2, 80c00 <_vectors+0x400>
	ldr	x3, =__EL2_stack_core0
   800e0:	58005943 	ldr	x3, 80c08 <_vectors+0x408>
	msr	sp_el0, x1
   800e4:	d5184101 	msr	sp_el0, x1
	msr     sp_el1, x2
   800e8:	d51c4102 	msr	sp_el1, x2
	mov	sp, x3
   800ec:	9100007f 	mov	sp, x3
	b	EL2_ret
   800f0:	14000001 	b	800f4 <EL2_ret>

00000000000800f4 <EL2_ret>:

//"================================================================"
//  Return to the EL1_SP1 mode from EL2 for all Cores
//"================================================================"
EL2_ret:
	mov	x0, #0x3c5					// EL1_SP1 | D | A | I | F
   800f4:	d28078a0 	mov	x0, #0x3c5                 	// #965
	msr	spsr_el2, x0					// Set spsr_el2 with settings
   800f8:	d51c4000 	msr	spsr_el2, x0
	adr	x0, exit_el1					// Address to exit EL2
   800fc:	10000060 	adr	x0, 80108 <exit_el1>
	msr	elr_el2, x0					// Set elevated return register
   80100:	d51c4020 	msr	elr_el2, x0
	eret							// Call elevated return
   80104:	d69f03e0 	eret

0000000000080108 <exit_el1>:

//"================================================================"
//  Branch all cores to their destination
//"================================================================"
exit_el1:	
	mrs 	x1, mpidr_el1	// Read core id on AARCH64
   80108:	d53800a1 	mrs	x1, mpidr_el1
	and 	x1, x1, #0x3	// Make core 2 bit bitmask in x1
   8010c:	92400421 	and	x1, x1, #0x3
	cbz  	x1, 4f		// Core 0 jumps out to label 2
   80110:	b40001c1 	cbz	x1, 80148 <exit_el1+0x40>
	cmp 	x1, #1		// Check for core1
   80114:	f100043f 	cmp	x1, #0x1
	beq  	1f		//Core 1 jumps out to lable 1
   80118:	540000c0 	b.eq	80130 <exit_el1+0x28>  // b.none
	cmp	x1, #2		//Check for Core 2
   8011c:	f100083f 	cmp	x1, #0x2
	beq	2f		//Core 2 jump to label 2
   80120:	540000c0 	b.eq	80138 <exit_el1+0x30>  // b.none
	cmp	x1, #3		//Check for Core 3
   80124:	f1000c3f 	cmp	x1, #0x3
	beq	3f		//Core 3 jump to label 3
   80128:	540000c0 	b.eq	80140 <exit_el1+0x38>  // b.none
	b 	_hang		//I don't know why this would actually happen
   8012c:	1400000f 	b	80168 <_hang>

//Core 1 main
1:
	bl       core1_main
   80130:	940044b6 	bl	91408 <core1_main>
	b 	_hang
   80134:	1400000d 	b	80168 <_hang>

//Core 2 main
2:
	bl	core2_main
   80138:	94000838 	bl	82218 <core2_main>
	b 	_hang
   8013c:	1400000b 	b	80168 <_hang>

//Core 3 main
3:
	bl	core3_main
   80140:	940002c4 	bl	80c50 <core3_main>
	b	_hang
   80144:	14000009 	b	80168 <_hang>
//Core 0 main
4:
//"================================================================"
//  About to go to into C kernel clear BSS (Core0 only)
//"================================================================"
	ldr x3, =__bss_end
   80148:	58005643 	ldr	x3, 80c10 <_vectors+0x410>
	ldr x0, =__bss_start
   8014c:	58005660 	ldr	x0, 80c18 <_vectors+0x418>
	cmp	x0, x3
   80150:	eb03001f 	cmp	x0, x3
	bcs	main
   80154:	5401d462 	b.cs	83be0 <main>  // b.hs, b.nlast

0000000000080158 <.bss_zero_loop>:
.bss_zero_loop:
	str	wzr, [x0], 4
   80158:	b800441f 	str	wzr, [x0], #4
	cmp	x3, x0
   8015c:	eb00007f 	cmp	x3, x0
	bhi	.bss_zero_loop
   80160:	54ffffc8 	b.hi	80158 <.bss_zero_loop>  // b.pmore

.global _asm_enter_main
	bl	main
   80164:	94000e9f 	bl	83be0 <main>

0000000000080168 <_hang>:

.global _hang
_hang:
	wfe
   80168:	d503205f 	wfe
	b _hang
   8016c:	17ffffff 	b	80168 <_hang>

0000000000080170 <dbg_saveregs>:


// save registers before we call any C code
dbg_saveregs:
	ldr     x29, =dbg_regs     // We saved this register before call so fine to use it
   80170:	5800559d 	ldr	x29, 80c20 <_vectors+0x420>
	str     x0, [x29], #8
   80174:	f80087a0 	str	x0, [x29], #8
	str     x1, [x29], #8
   80178:	f80087a1 	str	x1, [x29], #8
	str     x2, [x29], #8        // dbg_regs[2]=x2
   8017c:	f80087a2 	str	x2, [x29], #8
	str     x3, [x29], #8        // ...etc.
   80180:	f80087a3 	str	x3, [x29], #8
	str     x4, [x29], #8
   80184:	f80087a4 	str	x4, [x29], #8
	str     x5, [x29], #8
   80188:	f80087a5 	str	x5, [x29], #8
	str     x6, [x29], #8
   8018c:	f80087a6 	str	x6, [x29], #8
	str     x7, [x29], #8
   80190:	f80087a7 	str	x7, [x29], #8
	str     x8, [x29], #8
   80194:	f80087a8 	str	x8, [x29], #8
	str     x9, [x29], #8
   80198:	f80087a9 	str	x9, [x29], #8
	str     x10, [x29], #8
   8019c:	f80087aa 	str	x10, [x29], #8
	str     x11, [x29], #8
   801a0:	f80087ab 	str	x11, [x29], #8
	str     x12, [x29], #8
   801a4:	f80087ac 	str	x12, [x29], #8
	str     x13, [x29], #8
   801a8:	f80087ad 	str	x13, [x29], #8
	str     x14, [x29], #8
   801ac:	f80087ae 	str	x14, [x29], #8
	str     x15, [x29], #8
   801b0:	f80087af 	str	x15, [x29], #8
	str     x16, [x29], #8
   801b4:	f80087b0 	str	x16, [x29], #8
	str     x17, [x29], #8
   801b8:	f80087b1 	str	x17, [x29], #8
	str     x18, [x29], #8
   801bc:	f80087b2 	str	x18, [x29], #8
	str     x19, [x29], #8
   801c0:	f80087b3 	str	x19, [x29], #8
	str     x20, [x29], #8
   801c4:	f80087b4 	str	x20, [x29], #8
	str     x21, [x29], #8
   801c8:	f80087b5 	str	x21, [x29], #8
	str     x22, [x29], #8
   801cc:	f80087b6 	str	x22, [x29], #8
	str     x23, [x29], #8
   801d0:	f80087b7 	str	x23, [x29], #8
	str     x24, [x29], #8
   801d4:	f80087b8 	str	x24, [x29], #8
	str     x25, [x29], #8
   801d8:	f80087b9 	str	x25, [x29], #8
	str     x26, [x29], #8 
   801dc:	f80087ba 	str	x26, [x29], #8
	str     x27, [x29], #8
   801e0:	f80087bb 	str	x27, [x29], #8
	str     x28, [x29], #8
   801e4:	f80087bc 	str	x28, [x29], #8
	/* remember we pushed r29, r30 at irq start */
	mov	x0, sp            // current stack position
   801e8:	910003e0 	mov	x0, sp
	mov     x2, #(32*8)       // that is where stack was when we saved them (32registers * 8 bytes).. I think needs checking
   801ec:	d2802002 	mov	x2, #0x100                 	// #256
	add     x2,  x2, x0       // Now add current stack position
   801f0:	8b000042 	add	x2, x2, x0
	ldp	x0, x1, [x2], #0  // If I am right that is now original x29,x30 in x0, x1
   801f4:	a8c00440 	ldp	x0, x1, [x2], #0
	str     x0, [x29], #8
   801f8:	f80087a0 	str	x0, [x29], #8
	str     x1, [x29], #8
   801fc:	f80087a1 	str	x1, [x29], #8
   // also read and store some system registers
	mrs     x1, elr_el1
   80200:	d5384021 	mrs	x1, elr_el1
	str     x1, [x29], #8
   80204:	f80087a1 	str	x1, [x29], #8
	mrs     x1, spsr_el1
   80208:	d5384001 	mrs	x1, spsr_el1
	str     x1, [x29], #8
   8020c:	f80087a1 	str	x1, [x29], #8
	mrs     x1, esr_el1
   80210:	d5385201 	mrs	x1, esr_el1
	str     x1, [x29], #8
   80214:	f80087a1 	str	x1, [x29], #8
	mrs     x1, far_el1
   80218:	d5386001 	mrs	x1, far_el1
	str     x1, [x29], #8
   8021c:	f80087a1 	str	x1, [x29], #8
	mrs     x1, sctlr_el1
   80220:	d5381001 	mrs	x1, sctlr_el1
	str     x1, [x29], #8
   80224:	f80087a1 	str	x1, [x29], #8
	mrs     x1, tcr_el1
   80228:	d5382041 	mrs	x1, tcr_el1
	str     x1, [x29], #8
   8022c:	f80087a1 	str	x1, [x29], #8
	ret
   80230:	d65f03c0 	ret

0000000000080234 <register_save>:

// Save all corruptible registers (x29,x30 are assumed done before call)
register_save:
	stp	x27, x28, [sp, #-16]!
   80234:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
	stp	x25, x26, [sp, #-16]!
   80238:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
	stp	x23, x24, [sp, #-16]!
   8023c:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
	stp	x21, x22, [sp, #-16]!
   80240:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
	stp	x19, x20, [sp, #-16]!
   80244:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
	stp	x17, x18, [sp, #-16]!
   80248:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
	stp	x15, x16, [sp, #-16]!
   8024c:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
	stp	x13, x14, [sp, #-16]!
   80250:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
	stp	x11, x12, [sp, #-16]!
   80254:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
	stp	x9, x10, [sp, #-16]!
   80258:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
	stp	x7, x8, [sp, #-16]!
   8025c:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
	stp	x5, x6, [sp, #-16]!
   80260:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
	stp	x3, x4, [sp, #-16]!
   80264:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
	stp	x1, x2, [sp, #-16]!
   80268:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
	str	x0, [sp, #-16]!
   8026c:	f81f0fe0 	str	x0, [sp, #-16]!
	ret
   80270:	d65f03c0 	ret

0000000000080274 <register_restore>:

// Restore all corruptible registers
register_restore:
	ldr	x0, [sp], #16
   80274:	f84107e0 	ldr	x0, [sp], #16
	ldp	x1, x2, [sp], #16
   80278:	a8c10be1 	ldp	x1, x2, [sp], #16
	ldp	x3, x4, [sp], #16
   8027c:	a8c113e3 	ldp	x3, x4, [sp], #16
	ldp	x5, x6, [sp], #16
   80280:	a8c11be5 	ldp	x5, x6, [sp], #16
	ldp	x7, x8, [sp], #16
   80284:	a8c123e7 	ldp	x7, x8, [sp], #16
	ldp	x9, x10, [sp], #16
   80288:	a8c12be9 	ldp	x9, x10, [sp], #16
	ldp	x11, x12, [sp], #16
   8028c:	a8c133eb 	ldp	x11, x12, [sp], #16
	ldp	x13, x14, [sp], #16
   80290:	a8c13bed 	ldp	x13, x14, [sp], #16
	ldp	x15, x16, [sp], #16
   80294:	a8c143ef 	ldp	x15, x16, [sp], #16
	ldp	x17, x18, [sp], #16
   80298:	a8c14bf1 	ldp	x17, x18, [sp], #16
	ldp	x19, x20, [sp], #16
   8029c:	a8c153f3 	ldp	x19, x20, [sp], #16
	ldp	x21, x22, [sp], #16
   802a0:	a8c15bf5 	ldp	x21, x22, [sp], #16
	ldp	x23, x24, [sp], #16
   802a4:	a8c163f7 	ldp	x23, x24, [sp], #16
	ldp	x25, x26, [sp], #16
   802a8:	a8c16bf9 	ldp	x25, x26, [sp], #16
	ldp	x27, x28, [sp], #16
   802ac:	a8c173fb 	ldp	x27, x28, [sp], #16
	ret
   802b0:	d65f03c0 	ret
   802b4:	d503201f 	nop
   802b8:	d503201f 	nop
   802bc:	d503201f 	nop
   802c0:	d503201f 	nop
   802c4:	d503201f 	nop
   802c8:	d503201f 	nop
   802cc:	d503201f 	nop
   802d0:	d503201f 	nop
   802d4:	d503201f 	nop
   802d8:	d503201f 	nop
   802dc:	d503201f 	nop
   802e0:	d503201f 	nop
   802e4:	d503201f 	nop
   802e8:	d503201f 	nop
   802ec:	d503201f 	nop
   802f0:	d503201f 	nop
   802f4:	d503201f 	nop
   802f8:	d503201f 	nop
   802fc:	d503201f 	nop
   80300:	d503201f 	nop
   80304:	d503201f 	nop
   80308:	d503201f 	nop
   8030c:	d503201f 	nop
   80310:	d503201f 	nop
   80314:	d503201f 	nop
   80318:	d503201f 	nop
   8031c:	d503201f 	nop
   80320:	d503201f 	nop
   80324:	d503201f 	nop
   80328:	d503201f 	nop
   8032c:	d503201f 	nop
   80330:	d503201f 	nop
   80334:	d503201f 	nop
   80338:	d503201f 	nop
   8033c:	d503201f 	nop
   80340:	d503201f 	nop
   80344:	d503201f 	nop
   80348:	d503201f 	nop
   8034c:	d503201f 	nop
   80350:	d503201f 	nop
   80354:	d503201f 	nop
   80358:	d503201f 	nop
   8035c:	d503201f 	nop
   80360:	d503201f 	nop
   80364:	d503201f 	nop
   80368:	d503201f 	nop
   8036c:	d503201f 	nop
   80370:	d503201f 	nop
   80374:	d503201f 	nop
   80378:	d503201f 	nop
   8037c:	d503201f 	nop
   80380:	d503201f 	nop
   80384:	d503201f 	nop
   80388:	d503201f 	nop
   8038c:	d503201f 	nop
   80390:	d503201f 	nop
   80394:	d503201f 	nop
   80398:	d503201f 	nop
   8039c:	d503201f 	nop
   803a0:	d503201f 	nop
   803a4:	d503201f 	nop
   803a8:	d503201f 	nop
   803ac:	d503201f 	nop
   803b0:	d503201f 	nop
   803b4:	d503201f 	nop
   803b8:	d503201f 	nop
   803bc:	d503201f 	nop
   803c0:	d503201f 	nop
   803c4:	d503201f 	nop
   803c8:	d503201f 	nop
   803cc:	d503201f 	nop
   803d0:	d503201f 	nop
   803d4:	d503201f 	nop
   803d8:	d503201f 	nop
   803dc:	d503201f 	nop
   803e0:	d503201f 	nop
   803e4:	d503201f 	nop
   803e8:	d503201f 	nop
   803ec:	d503201f 	nop
   803f0:	d503201f 	nop
   803f4:	d503201f 	nop
   803f8:	d503201f 	nop
   803fc:	d503201f 	nop
   80400:	d503201f 	nop
   80404:	d503201f 	nop
   80408:	d503201f 	nop
   8040c:	d503201f 	nop
   80410:	d503201f 	nop
   80414:	d503201f 	nop
   80418:	d503201f 	nop
   8041c:	d503201f 	nop
   80420:	d503201f 	nop
   80424:	d503201f 	nop
   80428:	d503201f 	nop
   8042c:	d503201f 	nop
   80430:	d503201f 	nop
   80434:	d503201f 	nop
   80438:	d503201f 	nop
   8043c:	d503201f 	nop
   80440:	d503201f 	nop
   80444:	d503201f 	nop
   80448:	d503201f 	nop
   8044c:	d503201f 	nop
   80450:	d503201f 	nop
   80454:	d503201f 	nop
   80458:	d503201f 	nop
   8045c:	d503201f 	nop
   80460:	d503201f 	nop
   80464:	d503201f 	nop
   80468:	d503201f 	nop
   8046c:	d503201f 	nop
   80470:	d503201f 	nop
   80474:	d503201f 	nop
   80478:	d503201f 	nop
   8047c:	d503201f 	nop
   80480:	d503201f 	nop
   80484:	d503201f 	nop
   80488:	d503201f 	nop
   8048c:	d503201f 	nop
   80490:	d503201f 	nop
   80494:	d503201f 	nop
   80498:	d503201f 	nop
   8049c:	d503201f 	nop
   804a0:	d503201f 	nop
   804a4:	d503201f 	nop
   804a8:	d503201f 	nop
   804ac:	d503201f 	nop
   804b0:	d503201f 	nop
   804b4:	d503201f 	nop
   804b8:	d503201f 	nop
   804bc:	d503201f 	nop
   804c0:	d503201f 	nop
   804c4:	d503201f 	nop
   804c8:	d503201f 	nop
   804cc:	d503201f 	nop
   804d0:	d503201f 	nop
   804d4:	d503201f 	nop
   804d8:	d503201f 	nop
   804dc:	d503201f 	nop
   804e0:	d503201f 	nop
   804e4:	d503201f 	nop
   804e8:	d503201f 	nop
   804ec:	d503201f 	nop
   804f0:	d503201f 	nop
   804f4:	d503201f 	nop
   804f8:	d503201f 	nop
   804fc:	d503201f 	nop
   80500:	d503201f 	nop
   80504:	d503201f 	nop
   80508:	d503201f 	nop
   8050c:	d503201f 	nop
   80510:	d503201f 	nop
   80514:	d503201f 	nop
   80518:	d503201f 	nop
   8051c:	d503201f 	nop
   80520:	d503201f 	nop
   80524:	d503201f 	nop
   80528:	d503201f 	nop
   8052c:	d503201f 	nop
   80530:	d503201f 	nop
   80534:	d503201f 	nop
   80538:	d503201f 	nop
   8053c:	d503201f 	nop
   80540:	d503201f 	nop
   80544:	d503201f 	nop
   80548:	d503201f 	nop
   8054c:	d503201f 	nop
   80550:	d503201f 	nop
   80554:	d503201f 	nop
   80558:	d503201f 	nop
   8055c:	d503201f 	nop
   80560:	d503201f 	nop
   80564:	d503201f 	nop
   80568:	d503201f 	nop
   8056c:	d503201f 	nop
   80570:	d503201f 	nop
   80574:	d503201f 	nop
   80578:	d503201f 	nop
   8057c:	d503201f 	nop
   80580:	d503201f 	nop
   80584:	d503201f 	nop
   80588:	d503201f 	nop
   8058c:	d503201f 	nop
   80590:	d503201f 	nop
   80594:	d503201f 	nop
   80598:	d503201f 	nop
   8059c:	d503201f 	nop
   805a0:	d503201f 	nop
   805a4:	d503201f 	nop
   805a8:	d503201f 	nop
   805ac:	d503201f 	nop
   805b0:	d503201f 	nop
   805b4:	d503201f 	nop
   805b8:	d503201f 	nop
   805bc:	d503201f 	nop
   805c0:	d503201f 	nop
   805c4:	d503201f 	nop
   805c8:	d503201f 	nop
   805cc:	d503201f 	nop
   805d0:	d503201f 	nop
   805d4:	d503201f 	nop
   805d8:	d503201f 	nop
   805dc:	d503201f 	nop
   805e0:	d503201f 	nop
   805e4:	d503201f 	nop
   805e8:	d503201f 	nop
   805ec:	d503201f 	nop
   805f0:	d503201f 	nop
   805f4:	d503201f 	nop
   805f8:	d503201f 	nop
   805fc:	d503201f 	nop
   80600:	d503201f 	nop
   80604:	d503201f 	nop
   80608:	d503201f 	nop
   8060c:	d503201f 	nop
   80610:	d503201f 	nop
   80614:	d503201f 	nop
   80618:	d503201f 	nop
   8061c:	d503201f 	nop
   80620:	d503201f 	nop
   80624:	d503201f 	nop
   80628:	d503201f 	nop
   8062c:	d503201f 	nop
   80630:	d503201f 	nop
   80634:	d503201f 	nop
   80638:	d503201f 	nop
   8063c:	d503201f 	nop
   80640:	d503201f 	nop
   80644:	d503201f 	nop
   80648:	d503201f 	nop
   8064c:	d503201f 	nop
   80650:	d503201f 	nop
   80654:	d503201f 	nop
   80658:	d503201f 	nop
   8065c:	d503201f 	nop
   80660:	d503201f 	nop
   80664:	d503201f 	nop
   80668:	d503201f 	nop
   8066c:	d503201f 	nop
   80670:	d503201f 	nop
   80674:	d503201f 	nop
   80678:	d503201f 	nop
   8067c:	d503201f 	nop
   80680:	d503201f 	nop
   80684:	d503201f 	nop
   80688:	d503201f 	nop
   8068c:	d503201f 	nop
   80690:	d503201f 	nop
   80694:	d503201f 	nop
   80698:	d503201f 	nop
   8069c:	d503201f 	nop
   806a0:	d503201f 	nop
   806a4:	d503201f 	nop
   806a8:	d503201f 	nop
   806ac:	d503201f 	nop
   806b0:	d503201f 	nop
   806b4:	d503201f 	nop
   806b8:	d503201f 	nop
   806bc:	d503201f 	nop
   806c0:	d503201f 	nop
   806c4:	d503201f 	nop
   806c8:	d503201f 	nop
   806cc:	d503201f 	nop
   806d0:	d503201f 	nop
   806d4:	d503201f 	nop
   806d8:	d503201f 	nop
   806dc:	d503201f 	nop
   806e0:	d503201f 	nop
   806e4:	d503201f 	nop
   806e8:	d503201f 	nop
   806ec:	d503201f 	nop
   806f0:	d503201f 	nop
   806f4:	d503201f 	nop
   806f8:	d503201f 	nop
   806fc:	d503201f 	nop
   80700:	d503201f 	nop
   80704:	d503201f 	nop
   80708:	d503201f 	nop
   8070c:	d503201f 	nop
   80710:	d503201f 	nop
   80714:	d503201f 	nop
   80718:	d503201f 	nop
   8071c:	d503201f 	nop
   80720:	d503201f 	nop
   80724:	d503201f 	nop
   80728:	d503201f 	nop
   8072c:	d503201f 	nop
   80730:	d503201f 	nop
   80734:	d503201f 	nop
   80738:	d503201f 	nop
   8073c:	d503201f 	nop
   80740:	d503201f 	nop
   80744:	d503201f 	nop
   80748:	d503201f 	nop
   8074c:	d503201f 	nop
   80750:	d503201f 	nop
   80754:	d503201f 	nop
   80758:	d503201f 	nop
   8075c:	d503201f 	nop
   80760:	d503201f 	nop
   80764:	d503201f 	nop
   80768:	d503201f 	nop
   8076c:	d503201f 	nop
   80770:	d503201f 	nop
   80774:	d503201f 	nop
   80778:	d503201f 	nop
   8077c:	d503201f 	nop
   80780:	d503201f 	nop
   80784:	d503201f 	nop
   80788:	d503201f 	nop
   8078c:	d503201f 	nop
   80790:	d503201f 	nop
   80794:	d503201f 	nop
   80798:	d503201f 	nop
   8079c:	d503201f 	nop
   807a0:	d503201f 	nop
   807a4:	d503201f 	nop
   807a8:	d503201f 	nop
   807ac:	d503201f 	nop
   807b0:	d503201f 	nop
   807b4:	d503201f 	nop
   807b8:	d503201f 	nop
   807bc:	d503201f 	nop
   807c0:	d503201f 	nop
   807c4:	d503201f 	nop
   807c8:	d503201f 	nop
   807cc:	d503201f 	nop
   807d0:	d503201f 	nop
   807d4:	d503201f 	nop
   807d8:	d503201f 	nop
   807dc:	d503201f 	nop
   807e0:	d503201f 	nop
   807e4:	d503201f 	nop
   807e8:	d503201f 	nop
   807ec:	d503201f 	nop
   807f0:	d503201f 	nop
   807f4:	d503201f 	nop
   807f8:	d503201f 	nop
   807fc:	d503201f 	nop

0000000000080800 <_vectors>:
	// important, code has to be properly aligned
	.balign 0x800
_vectors:
	// synchronous
	.balign 0x80
	b _hang
   80800:	17fffe5a 	b	80168 <_hang>
   80804:	d503201f 	nop
   80808:	d503201f 	nop
   8080c:	d503201f 	nop
   80810:	d503201f 	nop
   80814:	d503201f 	nop
   80818:	d503201f 	nop
   8081c:	d503201f 	nop
   80820:	d503201f 	nop
   80824:	d503201f 	nop
   80828:	d503201f 	nop
   8082c:	d503201f 	nop
   80830:	d503201f 	nop
   80834:	d503201f 	nop
   80838:	d503201f 	nop
   8083c:	d503201f 	nop
   80840:	d503201f 	nop
   80844:	d503201f 	nop
   80848:	d503201f 	nop
   8084c:	d503201f 	nop
   80850:	d503201f 	nop
   80854:	d503201f 	nop
   80858:	d503201f 	nop
   8085c:	d503201f 	nop
   80860:	d503201f 	nop
   80864:	d503201f 	nop
   80868:	d503201f 	nop
   8086c:	d503201f 	nop
   80870:	d503201f 	nop
   80874:	d503201f 	nop
   80878:	d503201f 	nop
   8087c:	d503201f 	nop

	// IRQ
	.balign 0x80
	b _hang	
   80880:	17fffe3a 	b	80168 <_hang>
   80884:	d503201f 	nop
   80888:	d503201f 	nop
   8088c:	d503201f 	nop
   80890:	d503201f 	nop
   80894:	d503201f 	nop
   80898:	d503201f 	nop
   8089c:	d503201f 	nop
   808a0:	d503201f 	nop
   808a4:	d503201f 	nop
   808a8:	d503201f 	nop
   808ac:	d503201f 	nop
   808b0:	d503201f 	nop
   808b4:	d503201f 	nop
   808b8:	d503201f 	nop
   808bc:	d503201f 	nop
   808c0:	d503201f 	nop
   808c4:	d503201f 	nop
   808c8:	d503201f 	nop
   808cc:	d503201f 	nop
   808d0:	d503201f 	nop
   808d4:	d503201f 	nop
   808d8:	d503201f 	nop
   808dc:	d503201f 	nop
   808e0:	d503201f 	nop
   808e4:	d503201f 	nop
   808e8:	d503201f 	nop
   808ec:	d503201f 	nop
   808f0:	d503201f 	nop
   808f4:	d503201f 	nop
   808f8:	d503201f 	nop
   808fc:	d503201f 	nop

	// FIQ
	.balign 0x80
	b _hang	
   80900:	17fffe1a 	b	80168 <_hang>
   80904:	d503201f 	nop
   80908:	d503201f 	nop
   8090c:	d503201f 	nop
   80910:	d503201f 	nop
   80914:	d503201f 	nop
   80918:	d503201f 	nop
   8091c:	d503201f 	nop
   80920:	d503201f 	nop
   80924:	d503201f 	nop
   80928:	d503201f 	nop
   8092c:	d503201f 	nop
   80930:	d503201f 	nop
   80934:	d503201f 	nop
   80938:	d503201f 	nop
   8093c:	d503201f 	nop
   80940:	d503201f 	nop
   80944:	d503201f 	nop
   80948:	d503201f 	nop
   8094c:	d503201f 	nop
   80950:	d503201f 	nop
   80954:	d503201f 	nop
   80958:	d503201f 	nop
   8095c:	d503201f 	nop
   80960:	d503201f 	nop
   80964:	d503201f 	nop
   80968:	d503201f 	nop
   8096c:	d503201f 	nop
   80970:	d503201f 	nop
   80974:	d503201f 	nop
   80978:	d503201f 	nop
   8097c:	d503201f 	nop

	// SError
	.balign 0x80
	b _hang	
   80980:	17fffdfa 	b	80168 <_hang>
   80984:	d503201f 	nop
   80988:	d503201f 	nop
   8098c:	d503201f 	nop
   80990:	d503201f 	nop
   80994:	d503201f 	nop
   80998:	d503201f 	nop
   8099c:	d503201f 	nop
   809a0:	d503201f 	nop
   809a4:	d503201f 	nop
   809a8:	d503201f 	nop
   809ac:	d503201f 	nop
   809b0:	d503201f 	nop
   809b4:	d503201f 	nop
   809b8:	d503201f 	nop
   809bc:	d503201f 	nop
   809c0:	d503201f 	nop
   809c4:	d503201f 	nop
   809c8:	d503201f 	nop
   809cc:	d503201f 	nop
   809d0:	d503201f 	nop
   809d4:	d503201f 	nop
   809d8:	d503201f 	nop
   809dc:	d503201f 	nop
   809e0:	d503201f 	nop
   809e4:	d503201f 	nop
   809e8:	d503201f 	nop
   809ec:	d503201f 	nop
   809f0:	d503201f 	nop
   809f4:	d503201f 	nop
   809f8:	d503201f 	nop
   809fc:	d503201f 	nop

	// synchronous
	.balign 0x80
	stp	x29, x30, [sp, #-16]!	 // Save x30 link register and x29 just so we dont waste space
   80a00:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	register_save		 // Save corruptible registers .. it assumes x29,x30 saved
   80a04:	97fffe0c 	bl	80234 <register_save>
	bl      dbg_saveregs
   80a08:	97fffdda 	bl	80170 <dbg_saveregs>
	//mov     x0, #1
	//bl      set_ACT_LED
	mov     x0, #0
   80a0c:	d2800000 	mov	x0, #0x0                   	// #0
	bl      dbg_decodeexc
   80a10:	94003f28 	bl	906b0 <dbg_decodeexc>
	bl      dbg_main
   80a14:	940040eb 	bl	90dc0 <dbg_main>
	bl	register_restore	// restore corruptible registers .. does all but x29,x30
   80a18:	97fffe17 	bl	80274 <register_restore>
	ldp	x29, x30, [sp], #16		// restore x29,x30 pulling stack back up 16
   80a1c:	a8c17bfd 	ldp	x29, x30, [sp], #16
	eret
   80a20:	d69f03e0 	eret
   80a24:	d503201f 	nop
   80a28:	d503201f 	nop
   80a2c:	d503201f 	nop
   80a30:	d503201f 	nop
   80a34:	d503201f 	nop
   80a38:	d503201f 	nop
   80a3c:	d503201f 	nop
   80a40:	d503201f 	nop
   80a44:	d503201f 	nop
   80a48:	d503201f 	nop
   80a4c:	d503201f 	nop
   80a50:	d503201f 	nop
   80a54:	d503201f 	nop
   80a58:	d503201f 	nop
   80a5c:	d503201f 	nop
   80a60:	d503201f 	nop
   80a64:	d503201f 	nop
   80a68:	d503201f 	nop
   80a6c:	d503201f 	nop
   80a70:	d503201f 	nop
   80a74:	d503201f 	nop
   80a78:	d503201f 	nop
   80a7c:	d503201f 	nop

	// IRQ
	.balign  0x80
	stp	x29, x30, [sp, #-16]!	 // Save x30 link register and x29
   80a80:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl      dbg_saveregs
   80a84:	97fffdbb 	bl	80170 <dbg_saveregs>
	mov     x0, #1
   80a88:	d2800020 	mov	x0, #0x1                   	// #1
	bl      dbg_decodeexc
   80a8c:	94003f09 	bl	906b0 <dbg_decodeexc>
	bl      dbg_main
   80a90:	940040cc 	bl	90dc0 <dbg_main>
	bl	register_restore	// restore corruptible registers .. does all but x29,x30
   80a94:	97fffdf8 	bl	80274 <register_restore>
	ldp	x29, x30, [sp], #16		// restore x29,x30 pulling stack back up 16
   80a98:	a8c17bfd 	ldp	x29, x30, [sp], #16
	eret
   80a9c:	d69f03e0 	eret
   80aa0:	d503201f 	nop
   80aa4:	d503201f 	nop
   80aa8:	d503201f 	nop
   80aac:	d503201f 	nop
   80ab0:	d503201f 	nop
   80ab4:	d503201f 	nop
   80ab8:	d503201f 	nop
   80abc:	d503201f 	nop
   80ac0:	d503201f 	nop
   80ac4:	d503201f 	nop
   80ac8:	d503201f 	nop
   80acc:	d503201f 	nop
   80ad0:	d503201f 	nop
   80ad4:	d503201f 	nop
   80ad8:	d503201f 	nop
   80adc:	d503201f 	nop
   80ae0:	d503201f 	nop
   80ae4:	d503201f 	nop
   80ae8:	d503201f 	nop
   80aec:	d503201f 	nop
   80af0:	d503201f 	nop
   80af4:	d503201f 	nop
   80af8:	d503201f 	nop
   80afc:	d503201f 	nop

	// FIQ
	.balign  0x80
	stp	x29, x30, [sp, #-16]!	 // Save x30 link register and x29 just so we dont waste space
   80b00:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	register_save		 // Save corruptible registers .. it assumes x29,x30 saved
   80b04:	97fffdcc 	bl	80234 <register_save>
	bl      dbg_saveregs
   80b08:	97fffd9a 	bl	80170 <dbg_saveregs>
	mov     x0, #2
   80b0c:	d2800040 	mov	x0, #0x2                   	// #2
	bl      dbg_decodeexc
   80b10:	94003ee8 	bl	906b0 <dbg_decodeexc>
	bl      dbg_main
   80b14:	940040ab 	bl	90dc0 <dbg_main>
	bl	register_restore	// restore corruptible registers .. does all but x29,x30
   80b18:	97fffdd7 	bl	80274 <register_restore>
	ldp	x29, x30, [sp], #16		// restore x29,x30 pulling stack back up 16
   80b1c:	a8c17bfd 	ldp	x29, x30, [sp], #16
	eret
   80b20:	d69f03e0 	eret
   80b24:	d503201f 	nop
   80b28:	d503201f 	nop
   80b2c:	d503201f 	nop
   80b30:	d503201f 	nop
   80b34:	d503201f 	nop
   80b38:	d503201f 	nop
   80b3c:	d503201f 	nop
   80b40:	d503201f 	nop
   80b44:	d503201f 	nop
   80b48:	d503201f 	nop
   80b4c:	d503201f 	nop
   80b50:	d503201f 	nop
   80b54:	d503201f 	nop
   80b58:	d503201f 	nop
   80b5c:	d503201f 	nop
   80b60:	d503201f 	nop
   80b64:	d503201f 	nop
   80b68:	d503201f 	nop
   80b6c:	d503201f 	nop
   80b70:	d503201f 	nop
   80b74:	d503201f 	nop
   80b78:	d503201f 	nop
   80b7c:	d503201f 	nop

	// SError
	.balign  0x80
	stp	x29, x30, [sp, #-16]!	 // Save x30 link register and x29 just so we dont waste space
   80b80:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	bl	register_save		 // Save corruptible registers .. it assumes x29,x30 saved
   80b84:	97fffdac 	bl	80234 <register_save>
	bl      dbg_saveregs
   80b88:	97fffd7a 	bl	80170 <dbg_saveregs>
	mov     x0, #3
   80b8c:	d2800060 	mov	x0, #0x3                   	// #3
	bl      dbg_decodeexc
   80b90:	94003ec8 	bl	906b0 <dbg_decodeexc>
	bl      dbg_main
   80b94:	9400408b 	bl	90dc0 <dbg_main>
	bl	register_restore	// restore corruptible registers .. does all but x29,x30
   80b98:	97fffdb7 	bl	80274 <register_restore>
	ldp	x29, x30, [sp], #16		// restore x29,x30 pulling stack back up 16
   80b9c:	a8c17bfd 	ldp	x29, x30, [sp], #16
eret
   80ba0:	d69f03e0 	eret
   80ba4:	00000000 	.inst	0x00000000 ; undefined
   80ba8:	00080800 	.word	0x00080800
   80bac:	00000000 	.word	0x00000000
   80bb0:	015e6960 	.word	0x015e6960
   80bb4:	00000000 	.word	0x00000000
   80bb8:	015ee960 	.word	0x015ee960
   80bbc:	00000000 	.word	0x00000000
   80bc0:	015ef960 	.word	0x015ef960
   80bc4:	00000000 	.word	0x00000000
   80bc8:	015efb60 	.word	0x015efb60
   80bcc:	00000000 	.word	0x00000000
   80bd0:	015f7b60 	.word	0x015f7b60
   80bd4:	00000000 	.word	0x00000000
   80bd8:	015f8b60 	.word	0x015f8b60
   80bdc:	00000000 	.word	0x00000000
   80be0:	015f8d60 	.word	0x015f8d60
   80be4:	00000000 	.word	0x00000000
   80be8:	01600d60 	.word	0x01600d60
   80bec:	00000000 	.word	0x00000000
   80bf0:	01601d60 	.word	0x01601d60
   80bf4:	00000000 	.word	0x00000000
   80bf8:	015dd760 	.word	0x015dd760
   80bfc:	00000000 	.word	0x00000000
   80c00:	015e5760 	.word	0x015e5760
   80c04:	00000000 	.word	0x00000000
   80c08:	015e6760 	.word	0x015e6760
   80c0c:	00000000 	.word	0x00000000
   80c10:	015dd560 	.word	0x015dd560
   80c14:	00000000 	.word	0x00000000
   80c18:	013de000 	.word	0x013de000
   80c1c:	00000000 	.word	0x00000000
   80c20:	015dd268 	.word	0x015dd268
   80c24:	00000000 	.word	0x00000000

0000000000080c28 <semaphore_inc>:
.section .text.semaphore_inc, "ax", %progbits
.balign	4
.globl semaphore_inc;
.type semaphore_inc, %function
semaphore_inc:
      mov   w2, 1
   80c28:	52800022 	mov	w2, #0x1                   	// #1

0000000000080c2c <.lockloop>:
	.p2align 2
.lockloop:
    ldaxr   w1, [x0]
   80c2c:	885ffc01 	ldaxr	w1, [x0]
    stxr    w3, w2, [x0]
   80c30:	88037c02 	stxr	w3, w2, [x0]
    cbnz    w3, .lockloop
   80c34:	35ffffc3 	cbnz	w3, 80c2c <.lockloop>
    cbnz    w1, .lockloop
   80c38:	35ffffa1 	cbnz	w1, 80c2c <.lockloop>
	dmb ish
   80c3c:	d5033bbf 	dmb	ish
    ret
   80c40:	d65f03c0 	ret

0000000000080c44 <semaphore_dec>:
.section .text.semaphore_dec, "ax", %progbits
.balign	4
.globl semaphore_dec;
.type semaphore_dec, %function
semaphore_dec:
	stlrb	wzr, [x0]
   80c44:	089ffc1f 	stlrb	wzr, [x0]
	dmb ish
   80c48:	d5033bbf 	dmb	ish
	ret
   80c4c:	d65f03c0 	ret

0000000000080c50 <core3_main>:
#include "headers/project.h"

//Well use the servos

void core3_main()
{
   80c50:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	*core3_ready = true;
   80c54:	b0009ae0 	adrp	x0, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   80c58:	52800021 	mov	w1, #0x1                   	// #1
{
   80c5c:	910003fd 	mov	x29, sp
	*core3_ready = true;
   80c60:	f947d400 	ldr	x0, [x0, #4008]
   80c64:	39000001 	strb	w1, [x0]
	mmu_init();
   80c68:	94000802 	bl	82c70 <mmu_init>

	while(1)
	{
		asm volatile ("nop");
   80c6c:	d503201f 	nop
   80c70:	d503201f 	nop
   80c74:	17fffffe 	b	80c6c <core3_main+0x1c>

0000000000080c78 <ammount_to_alloc_with_symbols>:
	free(s);
	semaphore_dec(&printf_lock);
}

size_t ammount_to_alloc_with_symbols(char *str, __builtin_va_list args)
{
   80c78:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   80c7c:	910003fd 	mov	x29, sp
   80c80:	a90153f3 	stp	x19, x20, [sp, #16]
   80c84:	aa0003f4 	mov	x20, x0
   80c88:	a9025bf5 	stp	x21, x22, [sp, #32]
   80c8c:	aa0103f5 	mov	x21, x1
	//The purpose of this function is to determine how much memory needs to be allocated to
	//contain the output of vsprintf
	uint64_t val = 0, len, counter;

	val = strlen(str);
   80c90:	940006ae 	bl	82748 <strlen>

	while(*str)
   80c94:	39400282 	ldrb	w2, [x20]
	val = strlen(str);
   80c98:	93407c00 	sxtw	x0, w0
	while(*str)
   80c9c:	35000082 	cbnz	w2, 80cac <ammount_to_alloc_with_symbols+0x34>
   80ca0:	1400002b 	b	80d4c <ammount_to_alloc_with_symbols+0xd4>
			{
				val -= 2;       
	        		val += strlen((char *)__builtin_va_arg(args, char *));
			}	
		}
		str++;
   80ca4:	aa1303f4 	mov	x20, x19
	while(*str)
   80ca8:	34000522 	cbz	w2, 80d4c <ammount_to_alloc_with_symbols+0xd4>
		if(*str == '%')
   80cac:	7100945f 	cmp	w2, #0x25
   80cb0:	91000693 	add	x19, x20, #0x1
   80cb4:	39400682 	ldrb	w2, [x20, #1]
   80cb8:	54ffff61 	b.ne	80ca4 <ammount_to_alloc_with_symbols+0x2c>  // b.any
			if(*str == '%')
   80cbc:	7100945f 	cmp	w2, #0x25
   80cc0:	54000800 	b.eq	80dc0 <ammount_to_alloc_with_symbols+0x148>  // b.none
			while(*str >= '0' && *str <= '9')
   80cc4:	5100c044 	sub	w4, w2, #0x30
   80cc8:	12001c81 	and	w1, w4, #0xff
   80ccc:	7100243f 	cmp	w1, #0x9
   80cd0:	540001e8 	b.hi	80d0c <ammount_to_alloc_with_symbols+0x94>  // b.pmore
			counter = 0;
   80cd4:	d2800005 	mov	x5, #0x0                   	// #0
			len = 0;
   80cd8:	d2800003 	mov	x3, #0x0                   	// #0
   80cdc:	d503201f 	nop
			while(*str >= '0' && *str <= '9')
   80ce0:	38401e62 	ldrb	w2, [x19, #1]!
				len += *str - '0';
   80ce4:	93407c87 	sxtw	x7, w4
				len *= 10;
   80ce8:	8b030863 	add	x3, x3, x3, lsl #2
				counter++;
   80cec:	910004a5 	add	x5, x5, #0x1
			while(*str >= '0' && *str <= '9')
   80cf0:	5100c044 	sub	w4, w2, #0x30
   80cf4:	12001c86 	and	w6, w4, #0xff
				len += *str - '0';
   80cf8:	8b0304e3 	add	x3, x7, x3, lsl #1
			while(*str >= '0' && *str <= '9')
   80cfc:	710024df 	cmp	w6, #0x9
   80d00:	54ffff09 	b.ls	80ce0 <ammount_to_alloc_with_symbols+0x68>  // b.plast
   80d04:	8b000063 	add	x3, x3, x0
   80d08:	cb050060 	sub	x0, x3, x5
			if(*str == 'c')
   80d0c:	71018c5f 	cmp	w2, #0x63
   80d10:	54000260 	b.eq	80d5c <ammount_to_alloc_with_symbols+0xe4>  // b.none
			if(*str == 'd')
   80d14:	7101905f 	cmp	w2, #0x64
   80d18:	54000580 	b.eq	80dc8 <ammount_to_alloc_with_symbols+0x150>  // b.none
			if(*str == 'x')
   80d1c:	7101e05f 	cmp	w2, #0x78
   80d20:	540002c1 	b.ne	80d78 <ammount_to_alloc_with_symbols+0x100>  // b.any
				__builtin_va_arg(args, int64_t);	//because %x already has space
   80d24:	b9401aa2 	ldr	w2, [x21, #24]
				val += 18;				//Was 20 but reduced by two
   80d28:	91004800 	add	x0, x0, #0x12
				__builtin_va_arg(args, int64_t);	//because %x already has space
   80d2c:	f94002a1 	ldr	x1, [x21]
   80d30:	37f808c2 	tbnz	w2, #31, 80e48 <ammount_to_alloc_with_symbols+0x1d0>
   80d34:	38401e62 	ldrb	w2, [x19, #1]!
   80d38:	91003c21 	add	x1, x1, #0xf
   80d3c:	927df021 	and	x1, x1, #0xfffffffffffffff8
   80d40:	f90002a1 	str	x1, [x21]
		str++;
   80d44:	aa1303f4 	mov	x20, x19
	while(*str)
   80d48:	35fffb22 	cbnz	w2, 80cac <ammount_to_alloc_with_symbols+0x34>
	}
	__builtin_va_end(args);
	
	return (size_t)val;
}
   80d4c:	a94153f3 	ldp	x19, x20, [sp, #16]
   80d50:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80d54:	a8c37bfd 	ldp	x29, x30, [sp], #48
   80d58:	d65f03c0 	ret
				__builtin_va_arg(args, int32_t);	//denoting a char %c and only one is
   80d5c:	b9401aa3 	ldr	w3, [x21, #24]
				val--;				//Becuase there are two characters 
   80d60:	d1000400 	sub	x0, x0, #0x1
				__builtin_va_arg(args, int32_t);	//denoting a char %c and only one is
   80d64:	f94002a1 	ldr	x1, [x21]
   80d68:	37f80663 	tbnz	w3, #31, 80e34 <ammount_to_alloc_with_symbols+0x1bc>
   80d6c:	91002c21 	add	x1, x1, #0xb
   80d70:	927df021 	and	x1, x1, #0xfffffffffffffff8
   80d74:	f90002a1 	str	x1, [x21]
   80d78:	aa1303f4 	mov	x20, x19
			if(*str == 's')
   80d7c:	91000673 	add	x19, x19, #0x1
   80d80:	7101cc5f 	cmp	w2, #0x73
   80d84:	54000060 	b.eq	80d90 <ammount_to_alloc_with_symbols+0x118>  // b.none
   80d88:	39400682 	ldrb	w2, [x20, #1]
   80d8c:	17ffffc6 	b	80ca4 <ammount_to_alloc_with_symbols+0x2c>
	        		val += strlen((char *)__builtin_va_arg(args, char *));
   80d90:	b9401aa1 	ldr	w1, [x21, #24]
				val -= 2;       
   80d94:	d1000816 	sub	x22, x0, #0x2
	        		val += strlen((char *)__builtin_va_arg(args, char *));
   80d98:	f94002a0 	ldr	x0, [x21]
   80d9c:	37f803e1 	tbnz	w1, #31, 80e18 <ammount_to_alloc_with_symbols+0x1a0>
   80da0:	91003c01 	add	x1, x0, #0xf
   80da4:	927df021 	and	x1, x1, #0xfffffffffffffff8
   80da8:	f90002a1 	str	x1, [x21]
   80dac:	f9400000 	ldr	x0, [x0]
   80db0:	94000666 	bl	82748 <strlen>
   80db4:	8b20c2c0 	add	x0, x22, w0, sxtw
   80db8:	39400682 	ldrb	w2, [x20, #1]
   80dbc:	17ffffba 	b	80ca4 <ammount_to_alloc_with_symbols+0x2c>
				val--;	//Becuase two bytes have already been allocated for a one byte
   80dc0:	d1000400 	sub	x0, x0, #0x1
			if(*str == 'c')
   80dc4:	17ffffed 	b	80d78 <ammount_to_alloc_with_symbols+0x100>
				__builtin_va_arg(args, int32_t);	//because %d already has space
   80dc8:	b9401aa3 	ldr	w3, [x21, #24]
				val += 18;			//Was 20 but reduced by two 
   80dcc:	91004800 	add	x0, x0, #0x12
				__builtin_va_arg(args, int32_t);	//because %d already has space
   80dd0:	f94002a1 	ldr	x1, [x21]
   80dd4:	36f80183 	tbz	w3, #31, 80e04 <ammount_to_alloc_with_symbols+0x18c>
   80dd8:	11002063 	add	w3, w3, #0x8
   80ddc:	b9001aa3 	str	w3, [x21, #24]
   80de0:	7100007f 	cmp	w3, #0x0
   80de4:	5400008d 	b.le	80df4 <ammount_to_alloc_with_symbols+0x17c>
   80de8:	91002c21 	add	x1, x1, #0xb
   80dec:	927df021 	and	x1, x1, #0xfffffffffffffff8
   80df0:	f90002a1 	str	x1, [x21]
			if(*str == 's')
   80df4:	aa1303f4 	mov	x20, x19
   80df8:	91000673 	add	x19, x19, #0x1
   80dfc:	39400682 	ldrb	w2, [x20, #1]
   80e00:	17ffffa9 	b	80ca4 <ammount_to_alloc_with_symbols+0x2c>
				__builtin_va_arg(args, int32_t);	//because %d already has space
   80e04:	91002c21 	add	x1, x1, #0xb
   80e08:	aa1303f4 	mov	x20, x19
   80e0c:	927df021 	and	x1, x1, #0xfffffffffffffff8
   80e10:	f90002a1 	str	x1, [x21]
			if(*str == 'x')
   80e14:	17ffffda 	b	80d7c <ammount_to_alloc_with_symbols+0x104>
	        		val += strlen((char *)__builtin_va_arg(args, char *));
   80e18:	11002022 	add	w2, w1, #0x8
   80e1c:	b9001aa2 	str	w2, [x21, #24]
   80e20:	7100005f 	cmp	w2, #0x0
   80e24:	54fffbec 	b.gt	80da0 <ammount_to_alloc_with_symbols+0x128>
   80e28:	f94006a0 	ldr	x0, [x21, #8]
   80e2c:	8b21c000 	add	x0, x0, w1, sxtw
   80e30:	17ffffdf 	b	80dac <ammount_to_alloc_with_symbols+0x134>
				__builtin_va_arg(args, int32_t);	//denoting a char %c and only one is
   80e34:	11002063 	add	w3, w3, #0x8
   80e38:	b9001aa3 	str	w3, [x21, #24]
   80e3c:	7100007f 	cmp	w3, #0x0
   80e40:	54fff96c 	b.gt	80d6c <ammount_to_alloc_with_symbols+0xf4>
   80e44:	17ffffcd 	b	80d78 <ammount_to_alloc_with_symbols+0x100>
				__builtin_va_arg(args, int64_t);	//because %x already has space
   80e48:	11002042 	add	w2, w2, #0x8
   80e4c:	b9001aa2 	str	w2, [x21, #24]
   80e50:	7100005f 	cmp	w2, #0x0
   80e54:	54fff70c 	b.gt	80d34 <ammount_to_alloc_with_symbols+0xbc>
			if(*str == 's')
   80e58:	38401e62 	ldrb	w2, [x19, #1]!
   80e5c:	17ffffba 	b	80d44 <ammount_to_alloc_with_symbols+0xcc>

0000000000080e60 <printf>:
{
   80e60:	a9ab7bfd 	stp	x29, x30, [sp, #-336]!
   80e64:	910003fd 	mov	x29, sp
   80e68:	a90153f3 	stp	x19, x20, [sp, #16]
	semaphore_inc(&printf_lock);
   80e6c:	d0009af3 	adrp	x19, 13de000 <__bss_start>
   80e70:	91000273 	add	x19, x19, #0x0
{
   80e74:	f90013f5 	str	x21, [sp, #32]
   80e78:	aa0003f5 	mov	x21, x0
	semaphore_inc(&printf_lock);
   80e7c:	aa1303e0 	mov	x0, x19
{
   80e80:	3d8027e0 	str	q0, [sp, #144]
   80e84:	3d802be1 	str	q1, [sp, #160]
   80e88:	3d802fe2 	str	q2, [sp, #176]
   80e8c:	3d8033e3 	str	q3, [sp, #192]
   80e90:	3d8037e4 	str	q4, [sp, #208]
   80e94:	3d803be5 	str	q5, [sp, #224]
   80e98:	3d803fe6 	str	q6, [sp, #240]
   80e9c:	3d8043e7 	str	q7, [sp, #256]
   80ea0:	a9118be1 	stp	x1, x2, [sp, #280]
   80ea4:	a91293e3 	stp	x3, x4, [sp, #296]
   80ea8:	a9139be5 	stp	x5, x6, [sp, #312]
   80eac:	f900a7e7 	str	x7, [sp, #328]
	semaphore_inc(&printf_lock);
   80eb0:	97ffff5e 	bl	80c28 <semaphore_inc>
	lfb_print(0, 0, "Made it here 2");
   80eb4:	52800001 	mov	w1, #0x0                   	// #0
   80eb8:	52800000 	mov	w0, #0x0                   	// #0
   80ebc:	d0000082 	adrp	x2, 92000 <sd_readblock+0x158>
   80ec0:	91214042 	add	x2, x2, #0x850
   80ec4:	9400023b 	bl	817b0 <lfb_print>
	__builtin_va_start(args, fmt);
   80ec8:	910443e4 	add	x4, sp, #0x110
   80ecc:	910543e0 	add	x0, sp, #0x150
   80ed0:	128006e3 	mov	w3, #0xffffffc8            	// #-56
   80ed4:	12800fe2 	mov	w2, #0xffffff80            	// #-128
   80ed8:	a90503e0 	stp	x0, x0, [sp, #80]
	char *s = malloc(ammount_to_alloc_with_symbols(fmt, args2));
   80edc:	9100c3e1 	add	x1, sp, #0x30
   80ee0:	aa1503e0 	mov	x0, x21
	__builtin_va_start(args, fmt);
   80ee4:	f90033e4 	str	x4, [sp, #96]
   80ee8:	290d0be3 	stp	w3, w2, [sp, #104]
	__builtin_va_copy(args2, args);
   80eec:	a94517e4 	ldp	x4, x5, [sp, #80]
	char *s = malloc(ammount_to_alloc_with_symbols(fmt, args2));
   80ef0:	a90317e4 	stp	x4, x5, [sp, #48]
	__builtin_va_copy(args2, args);
   80ef4:	a9460fe2 	ldp	x2, x3, [sp, #96]
	char *s = malloc(ammount_to_alloc_with_symbols(fmt, args2));
   80ef8:	a9040fe2 	stp	x2, x3, [sp, #64]
	__builtin_va_copy(args2, args);
   80efc:	a90717e4 	stp	x4, x5, [sp, #112]
   80f00:	a9080fe2 	stp	x2, x3, [sp, #128]
	char *s = malloc(ammount_to_alloc_with_symbols(fmt, args2));
   80f04:	97ffff5d 	bl	80c78 <ammount_to_alloc_with_symbols>
   80f08:	940040e2 	bl	91290 <malloc>
   80f0c:	aa0003f4 	mov	x20, x0
	vsprintf(s,fmt,args);
   80f10:	a94517e4 	ldp	x4, x5, [sp, #80]
   80f14:	a90317e4 	stp	x4, x5, [sp, #48]
   80f18:	9100c3e2 	add	x2, sp, #0x30
   80f1c:	a94617e4 	ldp	x4, x5, [sp, #96]
   80f20:	aa1503e1 	mov	x1, x21
   80f24:	a90417e4 	stp	x4, x5, [sp, #64]
   80f28:	940003b2 	bl	81df0 <vsprintf>
	console_print(s);
   80f2c:	aa1403e0 	mov	x0, x20
   80f30:	940007be 	bl	82e28 <console_print>
	free(s);
   80f34:	aa1403e0 	mov	x0, x20
   80f38:	9400410c 	bl	91368 <free>
	semaphore_dec(&printf_lock);
   80f3c:	aa1303e0 	mov	x0, x19
   80f40:	97ffff41 	bl	80c44 <semaphore_dec>
}
   80f44:	a94153f3 	ldp	x19, x20, [sp, #16]
   80f48:	f94013f5 	ldr	x21, [sp, #32]
   80f4c:	a8d57bfd 	ldp	x29, x30, [sp], #336
   80f50:	d65f03c0 	ret
   80f54:	00000000 	.inst	0x00000000 ; undefined

0000000000080f58 <Stepper2WireInit>:
#include "headers/project.h"

void Stepper2WireInit(int32_t number_of_steps, int32_t motor_pin_1, int32_t motor_pin_2, StepperMotor *Stepper)
{
   80f58:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80f5c:	910003fd 	mov	x29, sp
   80f60:	f9000bf3 	str	x19, [sp, #16]
   80f64:	aa0303f3 	mov	x19, x3
   80f68:	2a0103e3 	mov	w3, w1
	// Arduino pins for the motor control connection:
	Stepper->motor_pin_1 = motor_pin_1;
	Stepper->motor_pin_2 = motor_pin_2;

	// setup the pins on the microcontroller:
	pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   80f6c:	52800021 	mov	w1, #0x1                   	// #1
	Stepper->direction = 0;      // motor direction
   80f70:	b900027f 	str	wzr, [x19]
	Stepper->number_of_steps = number_of_steps; // total number of steps for this motor
   80f74:	b9001260 	str	w0, [x19, #16]
	pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   80f78:	2a0303e0 	mov	w0, w3
	Stepper->motor_pin_1 = motor_pin_1;
   80f7c:	29030e7f 	stp	wzr, w3, [x19, #24]
	Stepper->motor_pin_2 = motor_pin_2;
   80f80:	b9002262 	str	w2, [x19, #32]
	Stepper->last_step_time = 0; // time stamp in us of the last step taken
   80f84:	f9001a7f 	str	xzr, [x19, #48]
	pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   80f88:	940008e2 	bl	83310 <pinMode>
	pinMode(Stepper->motor_pin_2, GPIO_OUTPUT);
   80f8c:	b9402260 	ldr	w0, [x19, #32]
   80f90:	52800021 	mov	w1, #0x1                   	// #1
   80f94:	940008df 	bl	83310 <pinMode>

	// When there are only 2 pins, set the others to 0:
	Stepper->motor_pin_3 = 0;
   80f98:	b900267f 	str	wzr, [x19, #36]
	Stepper->motor_pin_4 = 0;
	Stepper->motor_pin_5 = 0;

	// pin_count is used by the stepMotor() method:
	Stepper->pin_count = 2;
   80f9c:	52800040 	mov	w0, #0x2                   	// #2
   80fa0:	b9001660 	str	w0, [x19, #20]
	Stepper->motor_pin_4 = 0;
   80fa4:	f900167f 	str	xzr, [x19, #40]
}
   80fa8:	f9400bf3 	ldr	x19, [sp, #16]
   80fac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80fb0:	d65f03c0 	ret
   80fb4:	d503201f 	nop

0000000000080fb8 <Stepper4WireInit>:
/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
void Stepper4WireInit(int32_t number_of_steps, int32_t motor_pin_1, int32_t motor_pin_2, int32_t motor_pin_3, int32_t motor_pin_4, StepperMotor *Stepper)
{
   80fb8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80fbc:	910003fd 	mov	x29, sp
   80fc0:	f9000bf3 	str	x19, [sp, #16]
   80fc4:	aa0503f3 	mov	x19, x5
   80fc8:	2a0103e5 	mov	w5, w1
	Stepper->motor_pin_2 = motor_pin_2;
	Stepper->motor_pin_3 = motor_pin_3;
	Stepper->motor_pin_4 = motor_pin_4;

	// setup the pins on the microcontroller:
	pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   80fcc:	52800021 	mov	w1, #0x1                   	// #1
	Stepper->direction = 0;      // motor direction
   80fd0:	b900027f 	str	wzr, [x19]
	Stepper->number_of_steps = number_of_steps; // total number of steps for this motor
   80fd4:	b9001260 	str	w0, [x19, #16]
	pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   80fd8:	2a0503e0 	mov	w0, w5
	Stepper->motor_pin_1 = motor_pin_1;
   80fdc:	2903167f 	stp	wzr, w5, [x19, #24]
	Stepper->motor_pin_3 = motor_pin_3;
   80fe0:	29040e62 	stp	w2, w3, [x19, #32]
	Stepper->motor_pin_4 = motor_pin_4;
   80fe4:	b9002a64 	str	w4, [x19, #40]
	Stepper->last_step_time = 0; // time stamp in us of the last step taken
   80fe8:	f9001a7f 	str	xzr, [x19, #48]
	pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   80fec:	940008c9 	bl	83310 <pinMode>
	pinMode(Stepper->motor_pin_2, GPIO_OUTPUT);
   80ff0:	b9402260 	ldr	w0, [x19, #32]
   80ff4:	52800021 	mov	w1, #0x1                   	// #1
   80ff8:	940008c6 	bl	83310 <pinMode>
	pinMode(Stepper->motor_pin_3, GPIO_OUTPUT);
   80ffc:	b9402660 	ldr	w0, [x19, #36]
   81000:	52800021 	mov	w1, #0x1                   	// #1
   81004:	940008c3 	bl	83310 <pinMode>
	pinMode(Stepper->motor_pin_4, GPIO_OUTPUT);
   81008:	b9402a60 	ldr	w0, [x19, #40]
   8100c:	52800021 	mov	w1, #0x1                   	// #1
   81010:	940008c0 	bl	83310 <pinMode>

	// When there are 4 pins, set the others to 0:
	Stepper->motor_pin_5 = 0;
   81014:	b9002e7f 	str	wzr, [x19, #44]

	// pin_count is used by the stepMotor() method:
	Stepper->pin_count = 4;
   81018:	52800080 	mov	w0, #0x4                   	// #4
   8101c:	b9001660 	str	w0, [x19, #20]
}
   81020:	f9400bf3 	ldr	x19, [sp, #16]
   81024:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81028:	d65f03c0 	ret
   8102c:	d503201f 	nop

0000000000081030 <Stepper5WireInit>:
/*
 *   constructor for five phase motor with five wires
 *   Sets which wires should control the motor.
 */
void Stepper5WireInit(int32_t number_of_steps, int32_t motor_pin_1, int32_t motor_pin_2, int32_t motor_pin_3, int32_t motor_pin_4, int32_t motor_pin_5, StepperMotor *Stepper)
{
   81030:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81034:	910003fd 	mov	x29, sp
   81038:	f9000bf3 	str	x19, [sp, #16]
   8103c:	aa0603f3 	mov	x19, x6
   81040:	2a0103e6 	mov	w6, w1
	Stepper->motor_pin_3 = motor_pin_3;
	Stepper->motor_pin_4 = motor_pin_4;
	Stepper->motor_pin_5 = motor_pin_5;

	// setup the pins on the microcontroller:
	pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   81044:	52800021 	mov	w1, #0x1                   	// #1
	Stepper->direction = 0;      // motor direction
   81048:	b900027f 	str	wzr, [x19]
	Stepper->number_of_steps = number_of_steps; // total number of steps for this motor
   8104c:	b9001260 	str	w0, [x19, #16]
	pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   81050:	2a0603e0 	mov	w0, w6
	Stepper->motor_pin_1 = motor_pin_1;
   81054:	29031a7f 	stp	wzr, w6, [x19, #24]
	Stepper->motor_pin_3 = motor_pin_3;
   81058:	29040e62 	stp	w2, w3, [x19, #32]
	Stepper->motor_pin_5 = motor_pin_5;
   8105c:	29051664 	stp	w4, w5, [x19, #40]
	Stepper->last_step_time = 0; // time stamp in us of the last step taken
   81060:	f9001a7f 	str	xzr, [x19, #48]
	pinMode(Stepper->motor_pin_1, GPIO_OUTPUT);
   81064:	940008ab 	bl	83310 <pinMode>
	pinMode(Stepper->motor_pin_2, GPIO_OUTPUT);
   81068:	b9402260 	ldr	w0, [x19, #32]
   8106c:	52800021 	mov	w1, #0x1                   	// #1
   81070:	940008a8 	bl	83310 <pinMode>
	pinMode(Stepper->motor_pin_3, GPIO_OUTPUT);
   81074:	b9402660 	ldr	w0, [x19, #36]
   81078:	52800021 	mov	w1, #0x1                   	// #1
   8107c:	940008a5 	bl	83310 <pinMode>
	pinMode(Stepper->motor_pin_4, GPIO_OUTPUT);
   81080:	b9402a60 	ldr	w0, [x19, #40]
   81084:	52800021 	mov	w1, #0x1                   	// #1
   81088:	940008a2 	bl	83310 <pinMode>
	pinMode(Stepper->motor_pin_5, GPIO_OUTPUT);
   8108c:	b9402e60 	ldr	w0, [x19, #44]
   81090:	52800021 	mov	w1, #0x1                   	// #1
   81094:	9400089f 	bl	83310 <pinMode>

	// pin_count is used by the stepStepperMotor() function:
	Stepper->pin_count = 5;
   81098:	528000a0 	mov	w0, #0x5                   	// #5
   8109c:	b9001660 	str	w0, [x19, #20]
}
   810a0:	f9400bf3 	ldr	x19, [sp, #16]
   810a4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   810a8:	d65f03c0 	ret
   810ac:	d503201f 	nop

00000000000810b0 <setStepperSpeed>:
/*
 * Sets the speed in revs per minute
 */
void setStepperSpeed(int64_t whatSpeed, StepperMotor *Stepper)
{
	Stepper->step_delay = 60L * 1000L * 1000L / Stepper->number_of_steps / whatSpeed;
   810b0:	b9801023 	ldrsw	x3, [x1, #16]
   810b4:	d290e002 	mov	x2, #0x8700                	// #34560
   810b8:	f2a07262 	movk	x2, #0x393, lsl #16
   810bc:	9ac30c42 	sdiv	x2, x2, x3
   810c0:	9ac00c40 	sdiv	x0, x2, x0
   810c4:	f9000420 	str	x0, [x1, #8]
}
   810c8:	d65f03c0 	ret
   810cc:	d503201f 	nop

00000000000810d0 <stepStepperMotor>:

/*
 * Moves the motor forward or backwards.
 */
void stepStepperMotor(int32_t thisStep, StepperMotor *Stepper)
{
   810d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   810d4:	910003fd 	mov	x29, sp
   810d8:	a90153f3 	stp	x19, x20, [sp, #16]
   810dc:	2a0003f4 	mov	w20, w0
	if (Stepper->pin_count == 2)
   810e0:	b9401420 	ldr	w0, [x1, #20]
{
   810e4:	aa0103f3 	mov	x19, x1
	if (Stepper->pin_count == 2)
   810e8:	7100081f 	cmp	w0, #0x2
   810ec:	54000600 	b.eq	811ac <stepStepperMotor+0xdc>  // b.none
				digitalWrite(Stepper->motor_pin_1, LOW);
				digitalWrite(Stepper->motor_pin_2, LOW);
				break;
		}
	}
	if (Stepper->pin_count == 4)
   810f0:	7100101f 	cmp	w0, #0x4
   810f4:	540000c0 	b.eq	8110c <stepStepperMotor+0x3c>  // b.none
				digitalWrite(Stepper->motor_pin_4, HIGH);
				break;
		}
	}

	if (Stepper->pin_count == 5)
   810f8:	7100141f 	cmp	w0, #0x5
   810fc:	54000ac0 	b.eq	81254 <stepStepperMotor+0x184>  // b.none
				digitalWrite(Stepper->motor_pin_4, LOW);
				digitalWrite(Stepper->motor_pin_5, HIGH);
				break;
		}
	}
}
   81100:	a94153f3 	ldp	x19, x20, [sp, #16]
   81104:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81108:	d65f03c0 	ret
		switch (thisStep)
   8110c:	7100069f 	cmp	w20, #0x1
   81110:	54001620 	b.eq	813d4 <stepStepperMotor+0x304>  // b.none
   81114:	540002ad 	b.le	81168 <stepStepperMotor+0x98>
   81118:	71000a9f 	cmp	w20, #0x2
   8111c:	540012a0 	b.eq	81370 <stepStepperMotor+0x2a0>  // b.none
   81120:	71000e9f 	cmp	w20, #0x3
   81124:	54fffee1 	b.ne	81100 <stepStepperMotor+0x30>  // b.any
				digitalWrite(Stepper->motor_pin_1, HIGH);
   81128:	b9401e60 	ldr	w0, [x19, #28]
   8112c:	52800021 	mov	w1, #0x1                   	// #1
   81130:	9400087e 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, LOW);
   81134:	b9402260 	ldr	w0, [x19, #32]
   81138:	52800001 	mov	w1, #0x0                   	// #0
   8113c:	9400087b 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_3, LOW);
   81140:	b9402660 	ldr	w0, [x19, #36]
   81144:	52800001 	mov	w1, #0x0                   	// #0
   81148:	94000878 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_4, HIGH);
   8114c:	b9402a60 	ldr	w0, [x19, #40]
   81150:	52800021 	mov	w1, #0x1                   	// #1
   81154:	94000875 	bl	83328 <digitalWrite>
	if (Stepper->pin_count == 5)
   81158:	b9401660 	ldr	w0, [x19, #20]
   8115c:	7100141f 	cmp	w0, #0x5
   81160:	54fffd01 	b.ne	81100 <stepStepperMotor+0x30>  // b.any
   81164:	14000024 	b	811f4 <stepStepperMotor+0x124>
   81168:	35fffcd4 	cbnz	w20, 81100 <stepStepperMotor+0x30>
				digitalWrite(Stepper->motor_pin_1, HIGH);
   8116c:	b9401e60 	ldr	w0, [x19, #28]
   81170:	52800021 	mov	w1, #0x1                   	// #1
   81174:	9400086d 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, LOW);
   81178:	b9402260 	ldr	w0, [x19, #32]
   8117c:	52800001 	mov	w1, #0x0                   	// #0
   81180:	9400086a 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_3, HIGH);
   81184:	b9402660 	ldr	w0, [x19, #36]
   81188:	52800021 	mov	w1, #0x1                   	// #1
   8118c:	94000867 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_4, LOW);
   81190:	b9402a60 	ldr	w0, [x19, #40]
   81194:	52800001 	mov	w1, #0x0                   	// #0
   81198:	94000864 	bl	83328 <digitalWrite>
	if (Stepper->pin_count == 5)
   8119c:	b9401660 	ldr	w0, [x19, #20]
   811a0:	7100141f 	cmp	w0, #0x5
   811a4:	54fffae1 	b.ne	81100 <stepStepperMotor+0x30>  // b.any
   811a8:	14000025 	b	8123c <stepStepperMotor+0x16c>
		switch (thisStep)
   811ac:	7100069f 	cmp	w20, #0x1
   811b0:	54001000 	b.eq	813b0 <stepStepperMotor+0x2e0>  // b.none
   811b4:	540002cd 	b.le	8120c <stepStepperMotor+0x13c>
   811b8:	71000a9f 	cmp	w20, #0x2
   811bc:	54000c80 	b.eq	8134c <stepStepperMotor+0x27c>  // b.none
   811c0:	71000e9f 	cmp	w20, #0x3
   811c4:	54fff9e1 	b.ne	81100 <stepStepperMotor+0x30>  // b.any
				digitalWrite(Stepper->motor_pin_1, LOW);
   811c8:	b9401e60 	ldr	w0, [x19, #28]
   811cc:	52800001 	mov	w1, #0x0                   	// #0
   811d0:	94000856 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, LOW);
   811d4:	b9402260 	ldr	w0, [x19, #32]
   811d8:	52800001 	mov	w1, #0x0                   	// #0
   811dc:	94000853 	bl	83328 <digitalWrite>
	if (Stepper->pin_count == 4)
   811e0:	b9401660 	ldr	w0, [x19, #20]
   811e4:	7100101f 	cmp	w0, #0x4
   811e8:	54fffa00 	b.eq	81128 <stepStepperMotor+0x58>  // b.none
	if (Stepper->pin_count == 5)
   811ec:	7100141f 	cmp	w0, #0x5
   811f0:	54fff881 	b.ne	81100 <stepStepperMotor+0x30>  // b.any
				digitalWrite(Stepper->motor_pin_1, LOW);
   811f4:	b9401e60 	ldr	w0, [x19, #28]
   811f8:	52800001 	mov	w1, #0x0                   	// #0
   811fc:	9400084b 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, HIGH);
   81200:	52800021 	mov	w1, #0x1                   	// #1
   81204:	b9402260 	ldr	w0, [x19, #32]
   81208:	14000088 	b	81428 <stepStepperMotor+0x358>
   8120c:	35fff7b4 	cbnz	w20, 81100 <stepStepperMotor+0x30>
				digitalWrite(Stepper->motor_pin_1, LOW);
   81210:	b9401e60 	ldr	w0, [x19, #28]
   81214:	52800001 	mov	w1, #0x0                   	// #0
   81218:	94000844 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, HIGH);
   8121c:	b9402260 	ldr	w0, [x19, #32]
   81220:	52800021 	mov	w1, #0x1                   	// #1
   81224:	94000841 	bl	83328 <digitalWrite>
	if (Stepper->pin_count == 4)
   81228:	b9401660 	ldr	w0, [x19, #20]
   8122c:	7100101f 	cmp	w0, #0x4
   81230:	54fff9e0 	b.eq	8116c <stepStepperMotor+0x9c>  // b.none
	if (Stepper->pin_count == 5)
   81234:	7100141f 	cmp	w0, #0x5
   81238:	54fff641 	b.ne	81100 <stepStepperMotor+0x30>  // b.any
				digitalWrite(Stepper->motor_pin_1, LOW);
   8123c:	b9401e60 	ldr	w0, [x19, #28]
   81240:	52800001 	mov	w1, #0x0                   	// #0
   81244:	94000839 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, HIGH);
   81248:	52800021 	mov	w1, #0x1                   	// #1
   8124c:	b9402260 	ldr	w0, [x19, #32]
   81250:	14000025 	b	812e4 <stepStepperMotor+0x214>
		switch (thisStep)
   81254:	7100129f 	cmp	w20, #0x4
   81258:	54001460 	b.eq	814e4 <stepStepperMotor+0x414>  // b.none
   8125c:	540005cd 	b.le	81314 <stepStepperMotor+0x244>
   81260:	71001e9f 	cmp	w20, #0x7
   81264:	54001280 	b.eq	814b4 <stepStepperMotor+0x3e4>  // b.none
   81268:	540002cc 	b.gt	812c0 <stepStepperMotor+0x1f0>
   8126c:	7100169f 	cmp	w20, #0x5
   81270:	54000d20 	b.eq	81414 <stepStepperMotor+0x344>  // b.none
   81274:	71001a9f 	cmp	w20, #0x6
   81278:	54fff441 	b.ne	81100 <stepStepperMotor+0x30>  // b.any
				digitalWrite(Stepper->motor_pin_1, HIGH);
   8127c:	b9401e60 	ldr	w0, [x19, #28]
   81280:	52800021 	mov	w1, #0x1                   	// #1
   81284:	94000829 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, LOW);
   81288:	b9402260 	ldr	w0, [x19, #32]
   8128c:	52800001 	mov	w1, #0x0                   	// #0
   81290:	94000826 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_3, HIGH);
   81294:	b9402660 	ldr	w0, [x19, #36]
   81298:	52800021 	mov	w1, #0x1                   	// #1
   8129c:	94000823 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_4, HIGH);
   812a0:	b9402a60 	ldr	w0, [x19, #40]
   812a4:	52800021 	mov	w1, #0x1                   	// #1
				digitalWrite(Stepper->motor_pin_4, LOW);
   812a8:	94000820 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_5, LOW);
   812ac:	b9402e60 	ldr	w0, [x19, #44]
   812b0:	52800001 	mov	w1, #0x0                   	// #0
}
   812b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   812b8:	a8c27bfd 	ldp	x29, x30, [sp], #32
				digitalWrite(Stepper->motor_pin_5, LOW);
   812bc:	1400081b 	b	83328 <digitalWrite>
   812c0:	7100229f 	cmp	w20, #0x8
   812c4:	54000c00 	b.eq	81444 <stepStepperMotor+0x374>  // b.none
   812c8:	7100269f 	cmp	w20, #0x9
   812cc:	54fff1a1 	b.ne	81100 <stepStepperMotor+0x30>  // b.any
				digitalWrite(Stepper->motor_pin_1, LOW);
   812d0:	b9401e60 	ldr	w0, [x19, #28]
   812d4:	52800001 	mov	w1, #0x0                   	// #0
   812d8:	94000814 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, LOW);
   812dc:	b9402260 	ldr	w0, [x19, #32]
   812e0:	52800001 	mov	w1, #0x0                   	// #0
   812e4:	94000811 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_3, HIGH);
   812e8:	b9402660 	ldr	w0, [x19, #36]
   812ec:	52800021 	mov	w1, #0x1                   	// #1
   812f0:	9400080e 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_4, LOW);
   812f4:	b9402a60 	ldr	w0, [x19, #40]
   812f8:	52800001 	mov	w1, #0x0                   	// #0
   812fc:	9400080b 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_5, HIGH);
   81300:	b9402e60 	ldr	w0, [x19, #44]
   81304:	52800021 	mov	w1, #0x1                   	// #1
}
   81308:	a94153f3 	ldp	x19, x20, [sp, #16]
   8130c:	a8c27bfd 	ldp	x29, x30, [sp], #32
				digitalWrite(Stepper->motor_pin_5, HIGH);
   81310:	14000806 	b	83328 <digitalWrite>
   81314:	7100069f 	cmp	w20, #0x1
   81318:	54000a00 	b.eq	81458 <stepStepperMotor+0x388>  // b.none
   8131c:	5400010d 	b.le	8133c <stepStepperMotor+0x26c>
   81320:	71000a9f 	cmp	w20, #0x2
   81324:	54000b00 	b.eq	81484 <stepStepperMotor+0x3b4>  // b.none
   81328:	71000e9f 	cmp	w20, #0x3
   8132c:	54fff640 	b.eq	811f4 <stepStepperMotor+0x124>  // b.none
}
   81330:	a94153f3 	ldp	x19, x20, [sp, #16]
   81334:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81338:	d65f03c0 	ret
   8133c:	34fff814 	cbz	w20, 8123c <stepStepperMotor+0x16c>
   81340:	a94153f3 	ldp	x19, x20, [sp, #16]
   81344:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81348:	d65f03c0 	ret
				digitalWrite(Stepper->motor_pin_1, HIGH);
   8134c:	b9401e60 	ldr	w0, [x19, #28]
   81350:	52800021 	mov	w1, #0x1                   	// #1
   81354:	940007f5 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, LOW);
   81358:	b9402260 	ldr	w0, [x19, #32]
   8135c:	52800001 	mov	w1, #0x0                   	// #0
   81360:	940007f2 	bl	83328 <digitalWrite>
	if (Stepper->pin_count == 4)
   81364:	b9401660 	ldr	w0, [x19, #20]
   81368:	7100101f 	cmp	w0, #0x4
   8136c:	54000881 	b.ne	8147c <stepStepperMotor+0x3ac>  // b.any
				digitalWrite(Stepper->motor_pin_1, LOW);
   81370:	b9401e60 	ldr	w0, [x19, #28]
   81374:	52800001 	mov	w1, #0x0                   	// #0
   81378:	940007ec 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, HIGH);
   8137c:	b9402260 	ldr	w0, [x19, #32]
   81380:	52800021 	mov	w1, #0x1                   	// #1
   81384:	940007e9 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_3, LOW);
   81388:	b9402660 	ldr	w0, [x19, #36]
   8138c:	52800001 	mov	w1, #0x0                   	// #0
   81390:	940007e6 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_4, HIGH);
   81394:	b9402a60 	ldr	w0, [x19, #40]
   81398:	52800021 	mov	w1, #0x1                   	// #1
   8139c:	940007e3 	bl	83328 <digitalWrite>
	if (Stepper->pin_count == 5)
   813a0:	b9401660 	ldr	w0, [x19, #20]
   813a4:	7100141f 	cmp	w0, #0x5
   813a8:	54ffeac1 	b.ne	81100 <stepStepperMotor+0x30>  // b.any
   813ac:	14000036 	b	81484 <stepStepperMotor+0x3b4>
				digitalWrite(Stepper->motor_pin_1, HIGH);
   813b0:	b9401e60 	ldr	w0, [x19, #28]
   813b4:	2a1403e1 	mov	w1, w20
   813b8:	940007dc 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, HIGH);
   813bc:	b9402260 	ldr	w0, [x19, #32]
   813c0:	2a1403e1 	mov	w1, w20
   813c4:	940007d9 	bl	83328 <digitalWrite>
	if (Stepper->pin_count == 4)
   813c8:	b9401660 	ldr	w0, [x19, #20]
   813cc:	7100101f 	cmp	w0, #0x4
   813d0:	54000401 	b.ne	81450 <stepStepperMotor+0x380>  // b.any
				digitalWrite(Stepper->motor_pin_1, LOW);
   813d4:	b9401e60 	ldr	w0, [x19, #28]
   813d8:	52800001 	mov	w1, #0x0                   	// #0
   813dc:	940007d3 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, HIGH);
   813e0:	b9402260 	ldr	w0, [x19, #32]
   813e4:	52800021 	mov	w1, #0x1                   	// #1
   813e8:	940007d0 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_3, HIGH);
   813ec:	b9402660 	ldr	w0, [x19, #36]
   813f0:	52800021 	mov	w1, #0x1                   	// #1
   813f4:	940007cd 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_4, LOW);
   813f8:	b9402a60 	ldr	w0, [x19, #40]
   813fc:	52800001 	mov	w1, #0x0                   	// #0
   81400:	940007ca 	bl	83328 <digitalWrite>
	if (Stepper->pin_count == 5)
   81404:	b9401660 	ldr	w0, [x19, #20]
   81408:	7100141f 	cmp	w0, #0x5
   8140c:	54ffe7a1 	b.ne	81100 <stepStepperMotor+0x30>  // b.any
   81410:	14000012 	b	81458 <stepStepperMotor+0x388>
				digitalWrite(Stepper->motor_pin_1, HIGH);
   81414:	b9401e60 	ldr	w0, [x19, #28]
   81418:	52800021 	mov	w1, #0x1                   	// #1
   8141c:	940007c3 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, LOW);
   81420:	b9402260 	ldr	w0, [x19, #32]
   81424:	52800001 	mov	w1, #0x0                   	// #0
   81428:	940007c0 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_3, LOW);
   8142c:	b9402660 	ldr	w0, [x19, #36]
   81430:	52800001 	mov	w1, #0x0                   	// #0
   81434:	940007bd 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_4, HIGH);
   81438:	52800021 	mov	w1, #0x1                   	// #1
   8143c:	b9402a60 	ldr	w0, [x19, #40]
   81440:	17ffff9a 	b	812a8 <stepStepperMotor+0x1d8>
				digitalWrite(Stepper->motor_pin_1, HIGH);
   81444:	52800021 	mov	w1, #0x1                   	// #1
   81448:	b9401e60 	ldr	w0, [x19, #28]
   8144c:	17ffffa3 	b	812d8 <stepStepperMotor+0x208>
	if (Stepper->pin_count == 5)
   81450:	7100141f 	cmp	w0, #0x5
   81454:	54ffe561 	b.ne	81100 <stepStepperMotor+0x30>  // b.any
				digitalWrite(Stepper->motor_pin_1, LOW);
   81458:	b9401e60 	ldr	w0, [x19, #28]
   8145c:	52800001 	mov	w1, #0x0                   	// #0
   81460:	940007b2 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, HIGH);
   81464:	b9402260 	ldr	w0, [x19, #32]
   81468:	52800021 	mov	w1, #0x1                   	// #1
   8146c:	940007af 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_3, LOW);
   81470:	52800001 	mov	w1, #0x0                   	// #0
   81474:	b9402660 	ldr	w0, [x19, #36]
   81478:	17ffff9e 	b	812f0 <stepStepperMotor+0x220>
	if (Stepper->pin_count == 5)
   8147c:	7100141f 	cmp	w0, #0x5
   81480:	54ffe401 	b.ne	81100 <stepStepperMotor+0x30>  // b.any
				digitalWrite(Stepper->motor_pin_1, LOW);
   81484:	b9401e60 	ldr	w0, [x19, #28]
   81488:	52800001 	mov	w1, #0x0                   	// #0
   8148c:	940007a7 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, HIGH);
   81490:	b9402260 	ldr	w0, [x19, #32]
   81494:	52800021 	mov	w1, #0x1                   	// #1
   81498:	940007a4 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_3, LOW);
   8149c:	b9402660 	ldr	w0, [x19, #36]
   814a0:	52800001 	mov	w1, #0x0                   	// #0
   814a4:	940007a1 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_4, HIGH);
   814a8:	52800021 	mov	w1, #0x1                   	// #1
   814ac:	b9402a60 	ldr	w0, [x19, #40]
   814b0:	17ffff93 	b	812fc <stepStepperMotor+0x22c>
				digitalWrite(Stepper->motor_pin_1, HIGH);
   814b4:	b9401e60 	ldr	w0, [x19, #28]
   814b8:	52800021 	mov	w1, #0x1                   	// #1
   814bc:	9400079b 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, LOW);
   814c0:	b9402260 	ldr	w0, [x19, #32]
   814c4:	52800001 	mov	w1, #0x0                   	// #0
   814c8:	94000798 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_3, HIGH);
   814cc:	b9402660 	ldr	w0, [x19, #36]
   814d0:	52800021 	mov	w1, #0x1                   	// #1
   814d4:	94000795 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_4, LOW);
   814d8:	52800001 	mov	w1, #0x0                   	// #0
   814dc:	b9402a60 	ldr	w0, [x19, #40]
   814e0:	17ffff72 	b	812a8 <stepStepperMotor+0x1d8>
				digitalWrite(Stepper->motor_pin_1, HIGH);
   814e4:	b9401e60 	ldr	w0, [x19, #28]
   814e8:	52800021 	mov	w1, #0x1                   	// #1
   814ec:	9400078f 	bl	83328 <digitalWrite>
				digitalWrite(Stepper->motor_pin_2, HIGH);
   814f0:	52800021 	mov	w1, #0x1                   	// #1
   814f4:	b9402260 	ldr	w0, [x19, #32]
   814f8:	17ffffcc 	b	81428 <stepStepperMotor+0x358>
   814fc:	d503201f 	nop

0000000000081500 <step>:
/*
 * Moves the motor steps_to_move steps.  If the number is negative,
 * the motor moves in the reverse direction.
 */
void step(int32_t steps_to_move, StepperMotor *Stepper)
{
   81500:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	int32_t steps_left = abs(steps_to_move);  // how many steps to take
   81504:	7100001f 	cmp	w0, #0x0
{
   81508:	910003fd 	mov	x29, sp
   8150c:	a90153f3 	stp	x19, x20, [sp, #16]
   81510:	aa0103f3 	mov	x19, x1
	int32_t steps_left = abs(steps_to_move);  // how many steps to take
   81514:	5a80a414 	cneg	w20, w0, lt  // lt = tstop
{
   81518:	f90013f5 	str	x21, [sp, #32]

	// determine direction based on whether steps_to_mode is + or -:
	if (steps_to_move > 0) { Stepper->direction = 1; }
   8151c:	540004cd 	b.le	815b4 <step+0xb4>
   81520:	52800020 	mov	w0, #0x1                   	// #1
   81524:	b9000020 	str	w0, [x1]
			}
			// decrement the steps left:
			steps_left--;
			// step the motor to step number 0, 1, ..., {3 or 10}
			if (Stepper->pin_count == 5)
			stepStepperMotor(Stepper->step_number % 10, Stepper);
   81528:	528cccf5 	mov	w21, #0x6667                	// #26215
   8152c:	72acccd5 	movk	w21, #0x6666, lsl #16
	while (steps_left > 0)
   81530:	34000374 	cbz	w20, 8159c <step+0x9c>
   81534:	d503201f 	nop
		uint64_t now = micros();
   81538:	940007e2 	bl	834c0 <micros>
		if (now - Stepper->last_step_time >= Stepper->step_delay)
   8153c:	f9401a61 	ldr	x1, [x19, #48]
   81540:	f9400662 	ldr	x2, [x19, #8]
   81544:	cb010001 	sub	x1, x0, x1
   81548:	eb02003f 	cmp	x1, x2
   8154c:	54ffff63 	b.cc	81538 <step+0x38>  // b.lo, b.ul, b.last
			if (Stepper->direction == 1)
   81550:	b9400261 	ldr	w1, [x19]
			Stepper->last_step_time = now;
   81554:	f9001a60 	str	x0, [x19, #48]
			if (Stepper->direction == 1)
   81558:	7100043f 	cmp	w1, #0x1
   8155c:	b9401a60 	ldr	w0, [x19, #24]
   81560:	54000400 	b.eq	815e0 <step+0xe0>  // b.none
				if (Stepper->step_number == 0)
   81564:	34000240 	cbz	w0, 815ac <step+0xac>
			Stepper->step_number--;
   81568:	51000400 	sub	w0, w0, #0x1
   8156c:	b9001a60 	str	w0, [x19, #24]
			if (Stepper->pin_count == 5)
   81570:	b9401661 	ldr	w1, [x19, #20]
			steps_left--;
   81574:	51000694 	sub	w20, w20, #0x1
			if (Stepper->pin_count == 5)
   81578:	7100143f 	cmp	w1, #0x5
   8157c:	54000220 	b.eq	815c0 <step+0xc0>  // b.none
			else
			stepStepperMotor(Stepper->step_number % 4, Stepper);
   81580:	6b0003e2 	negs	w2, w0
   81584:	12000400 	and	w0, w0, #0x3
   81588:	12000442 	and	w2, w2, #0x3
   8158c:	aa1303e1 	mov	x1, x19
   81590:	5a824400 	csneg	w0, w0, w2, mi  // mi = first
   81594:	97fffecf 	bl	810d0 <stepStepperMotor>
	while (steps_left > 0)
   81598:	35fffd14 	cbnz	w20, 81538 <step+0x38>
		}
	}
}
   8159c:	a94153f3 	ldp	x19, x20, [sp, #16]
   815a0:	f94013f5 	ldr	x21, [sp, #32]
   815a4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   815a8:	d65f03c0 	ret
					Stepper->step_number = Stepper->number_of_steps;
   815ac:	b9401260 	ldr	w0, [x19, #16]
   815b0:	17ffffee 	b	81568 <step+0x68>
	if (steps_to_move < 0) { Stepper->direction = 0; }
   815b4:	54fffba0 	b.eq	81528 <step+0x28>  // b.none
   815b8:	b900003f 	str	wzr, [x1]
   815bc:	17ffffdb 	b	81528 <step+0x28>
			stepStepperMotor(Stepper->step_number % 10, Stepper);
   815c0:	9b357c02 	smull	x2, w0, w21
   815c4:	aa1303e1 	mov	x1, x19
   815c8:	9362fc42 	asr	x2, x2, #34
   815cc:	4b807c42 	sub	w2, w2, w0, asr #31
   815d0:	0b020842 	add	w2, w2, w2, lsl #2
   815d4:	4b020400 	sub	w0, w0, w2, lsl #1
   815d8:	97fffebe 	bl	810d0 <stepStepperMotor>
   815dc:	17ffffd5 	b	81530 <step+0x30>
				Stepper->step_number++;
   815e0:	11000400 	add	w0, w0, #0x1
				if (Stepper->step_number == Stepper->number_of_steps)
   815e4:	b9401261 	ldr	w1, [x19, #16]
				Stepper->step_number++;
   815e8:	b9001a60 	str	w0, [x19, #24]
				if (Stepper->step_number == Stepper->number_of_steps)
   815ec:	6b01001f 	cmp	w0, w1
   815f0:	54fffc01 	b.ne	81570 <step+0x70>  // b.any
					Stepper->step_number = 0;
   815f4:	52800000 	mov	w0, #0x0                   	// #0
   815f8:	b9001a7f 	str	wzr, [x19, #24]
   815fc:	17ffffdd 	b	81570 <step+0x70>

0000000000081600 <lfb_init>:

/**
 * Set screen resolution to 1024x768
 */
void lfb_init()
{
   81600:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	mailbox[0] = 35*4;
   81604:	9000aae0 	adrp	x0, 15dd000 <allocated+0xfbdd0>
   81608:	52801181 	mov	w1, #0x8c                  	// #140
{
   8160c:	910003fd 	mov	x29, sp
   81610:	f9000bf3 	str	x19, [sp, #16]
	mailbox[0] = 35*4;
   81614:	91128013 	add	x19, x0, #0x4a0
   81618:	b904a001 	str	w1, [x0, #1184]
	mailbox[1] = MBOX_REQUEST;

	mailbox[2] = 0x48003;  //set phy wh
   8161c:	52900062 	mov	w2, #0x8003                	// #32771
   81620:	72a00082 	movk	w2, #0x4, lsl #16
	mailbox[3] = 8;
   81624:	52800101 	mov	w1, #0x8                   	// #8
	mailbox[1] = MBOX_REQUEST;
   81628:	b900067f 	str	wzr, [x19, #4]
	mailbox[4] = 8;
	mailbox[5] = 1024;         //FrameBufferInfo.width
   8162c:	52808003 	mov	w3, #0x400                 	// #1024
	mailbox[2] = 0x48003;  //set phy wh
   81630:	b9000a62 	str	w2, [x19, #8]
	mailbox[6] = 768;          //FrameBufferInfo.height
   81634:	52806000 	mov	w0, #0x300                 	// #768
	mailbox[3] = 8;
   81638:	b9000e61 	str	w1, [x19, #12]

	mailbox[7] = 0x48004;  //set virt wh
   8163c:	52900084 	mov	w4, #0x8004                	// #32772
	mailbox[4] = 8;
   81640:	b9001261 	str	w1, [x19, #16]
	mailbox[7] = 0x48004;  //set virt wh
   81644:	72a00084 	movk	w4, #0x4, lsl #16
	mailbox[5] = 1024;         //FrameBufferInfo.width
   81648:	b9001663 	str	w3, [x19, #20]
	mailbox[8] = 8;
	mailbox[9] = 8;
	mailbox[10] = 1024;        //FrameBufferInfo.virtual_width
	mailbox[11] = 768;         //FrameBufferInfo.virtual_height
	
	mailbox[12] = 0x48009; //set virt offset
   8164c:	5290012a 	mov	w10, #0x8009                	// #32777
	mailbox[6] = 768;          //FrameBufferInfo.height
   81650:	b9001a60 	str	w0, [x19, #24]
	mailbox[12] = 0x48009; //set virt offset
   81654:	72a0008a 	movk	w10, #0x4, lsl #16
	mailbox[7] = 0x48004;  //set virt wh
   81658:	b9001e64 	str	w4, [x19, #28]
	mailbox[13] = 8;
	mailbox[14] = 8;
	mailbox[15] = 0;           //FrameBufferInfo.x_offset
	mailbox[16] = 0;           //FrameBufferInfo.y.offset
	
	mailbox[17] = 0x48005; //set depth
   8165c:	529000a9 	mov	w9, #0x8005                	// #32773
	mailbox[8] = 8;
   81660:	b9002261 	str	w1, [x19, #32]
	mailbox[17] = 0x48005; //set depth
   81664:	72a00089 	movk	w9, #0x4, lsl #16
	mailbox[9] = 8;
   81668:	b9002661 	str	w1, [x19, #36]
	mailbox[18] = 4;
   8166c:	52800082 	mov	w2, #0x4                   	// #4
	mailbox[10] = 1024;        //FrameBufferInfo.virtual_width
   81670:	b9002a63 	str	w3, [x19, #40]
	mailbox[19] = 4;
	mailbox[20] = 32;          //FrameBufferInfo.depth
   81674:	52800408 	mov	w8, #0x20                  	// #32
	mailbox[11] = 768;         //FrameBufferInfo.virtual_height
   81678:	b9002e60 	str	w0, [x19, #44]

	mailbox[21] = 0x48006; //set pixel order
   8167c:	529000c7 	mov	w7, #0x8006                	// #32774
	mailbox[12] = 0x48009; //set virt offset
   81680:	b900326a 	str	w10, [x19, #48]
	mailbox[21] = 0x48006; //set pixel order
   81684:	72a00087 	movk	w7, #0x4, lsl #16
	mailbox[13] = 8;
   81688:	b9003661 	str	w1, [x19, #52]
	mailbox[22] = 4;
	mailbox[23] = 4;
	mailbox[24] = 1;           //RGB, not BGR preferably
   8168c:	52800026 	mov	w6, #0x1                   	// #1
	mailbox[14] = 8;
   81690:	b9003a61 	str	w1, [x19, #56]

	mailbox[25] = 0x40001; //get framebuffer, gets alignment on request
   81694:	52800025 	mov	w5, #0x1                   	// #1
	mailbox[15] = 0;           //FrameBufferInfo.x_offset
   81698:	b9003e7f 	str	wzr, [x19, #60]
	mailbox[25] = 0x40001; //get framebuffer, gets alignment on request
   8169c:	72a00085 	movk	w5, #0x4, lsl #16
	mailbox[16] = 0;           //FrameBufferInfo.y.offset
   816a0:	b900427f 	str	wzr, [x19, #64]
	mailbox[26] = 8;
	mailbox[27] = 8;
	mailbox[28] = 4096;        //FrameBufferInfo.pointer
   816a4:	52820004 	mov	w4, #0x1000                	// #4096
	mailbox[17] = 0x48005; //set depth
   816a8:	b9004669 	str	w9, [x19, #68]
	mailbox[29] = 0;           //FrameBufferInfo.size

	mailbox[30] = 0x40008; //get pitch
   816ac:	52800103 	mov	w3, #0x8                   	// #8
	mailbox[18] = 4;
   816b0:	b9004a62 	str	w2, [x19, #72]
	mailbox[30] = 0x40008; //get pitch
   816b4:	72a00083 	movk	w3, #0x4, lsl #16
	mailbox[19] = 4;
   816b8:	b9004e62 	str	w2, [x19, #76]
	mailbox[32] = 4;
	mailbox[33] = 0;           //FrameBufferInfo.pitch

	mailbox[34] = MBOX_TAG_LAST;

	if(mailbox_call(MBOX_CH_PROP) && mailbox[20]==32 && mailbox[28]!=0) {
   816bc:	2a0103e0 	mov	w0, w1
	mailbox[20] = 32;          //FrameBufferInfo.depth
   816c0:	b9005268 	str	w8, [x19, #80]
	mailbox[21] = 0x48006; //set pixel order
   816c4:	b9005667 	str	w7, [x19, #84]
	mailbox[22] = 4;
   816c8:	b9005a62 	str	w2, [x19, #88]
	mailbox[23] = 4;
   816cc:	b9005e62 	str	w2, [x19, #92]
	mailbox[24] = 1;           //RGB, not BGR preferably
   816d0:	b9006266 	str	w6, [x19, #96]
	mailbox[25] = 0x40001; //get framebuffer, gets alignment on request
   816d4:	b9006665 	str	w5, [x19, #100]
	mailbox[26] = 8;
   816d8:	b9006a61 	str	w1, [x19, #104]
	mailbox[27] = 8;
   816dc:	b9006e61 	str	w1, [x19, #108]
	mailbox[28] = 4096;        //FrameBufferInfo.pointer
   816e0:	b9007264 	str	w4, [x19, #112]
	mailbox[29] = 0;           //FrameBufferInfo.size
   816e4:	b900767f 	str	wzr, [x19, #116]
	mailbox[30] = 0x40008; //get pitch
   816e8:	b9007a63 	str	w3, [x19, #120]
	mailbox[31] = 4;
   816ec:	b9007e62 	str	w2, [x19, #124]
	mailbox[32] = 4;
   816f0:	b9008262 	str	w2, [x19, #128]
	mailbox[33] = 0;           //FrameBufferInfo.pitch
   816f4:	b900867f 	str	wzr, [x19, #132]
	mailbox[34] = MBOX_TAG_LAST;
   816f8:	b9008a7f 	str	wzr, [x19, #136]
	if(mailbox_call(MBOX_CH_PROP) && mailbox[20]==32 && mailbox[28]!=0) {
   816fc:	940040a9 	bl	919a0 <mailbox_call>
   81700:	34000080 	cbz	w0, 81710 <lfb_init+0x110>
   81704:	b9405260 	ldr	w0, [x19, #80]
   81708:	7100801f 	cmp	w0, #0x20
   8170c:	540000c0 	b.eq	81724 <lfb_init+0x124>  // b.none
		pitch=mailbox[33];
		lfb=(void*)((uint64_t)mailbox[28]);
	} else {
		uart_puts("Unable to set screen resolution to 1024x768x32\n");
	}
}
   81710:	f9400bf3 	ldr	x19, [sp, #16]
		uart_puts("Unable to set screen resolution to 1024x768x32\n");
   81714:	b0000080 	adrp	x0, 92000 <sd_readblock+0x158>
}
   81718:	a8c27bfd 	ldp	x29, x30, [sp], #32
		uart_puts("Unable to set screen resolution to 1024x768x32\n");
   8171c:	91218000 	add	x0, x0, #0x860
   81720:	1400036a 	b	824c8 <uart_puts>
	if(mailbox_call(MBOX_CH_PROP) && mailbox[20]==32 && mailbox[28]!=0) {
   81724:	b9407260 	ldr	w0, [x19, #112]
   81728:	34ffff40 	cbz	w0, 81710 <lfb_init+0x110>
		mailbox[28]&=0x3FFFFFFF;
   8172c:	b9407260 	ldr	w0, [x19, #112]
		lfb_width=mailbox[5];
   81730:	90009b26 	adrp	x6, 13e5000 <core_state>
		lfb_height=mailbox[6];
   81734:	90009b24 	adrp	x4, 13e5000 <core_state>
		lfb=(void*)((uint64_t)mailbox[28]);
   81738:	9000aae1 	adrp	x1, 15dd000 <allocated+0xfbdd0>
		mailbox[28]&=0x3FFFFFFF;
   8173c:	12007400 	and	w0, w0, #0x3fffffff
   81740:	b9007260 	str	w0, [x19, #112]
		pitch=mailbox[33];
   81744:	9000aae2 	adrp	x2, 15dd000 <allocated+0xfbdd0>
		lfb_width=mailbox[5];
   81748:	b9401667 	ldr	w7, [x19, #20]
		lfb_height=mailbox[6];
   8174c:	b9401a65 	ldr	w5, [x19, #24]
		pitch=mailbox[33];
   81750:	b9408663 	ldr	w3, [x19, #132]
		lfb=(void*)((uint64_t)mailbox[28]);
   81754:	b9407260 	ldr	w0, [x19, #112]
		lfb_width=mailbox[5];
   81758:	b9021cc7 	str	w7, [x6, #540]
		lfb_height=mailbox[6];
   8175c:	b9021885 	str	w5, [x4, #536]
		lfb=(void*)((uint64_t)mailbox[28]);
   81760:	2a0003e0 	mov	w0, w0
		pitch=mailbox[33];
   81764:	b9021843 	str	w3, [x2, #536]
		lfb=(void*)((uint64_t)mailbox[28]);
   81768:	f9010820 	str	x0, [x1, #528]
}
   8176c:	f9400bf3 	ldr	x19, [sp, #16]
   81770:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81774:	d65f03c0 	ret

0000000000081778 <lfb_draw_pixel>:
void lfb_draw_pixel(uint32_t x, uint32_t y, char r, char g, char b)
{
	unsigned char *ptr = lfb;
	uint32_t pixel;
	
	ptr += pitch * y;
   81778:	9000aae6 	adrp	x6, 15dd000 <allocated+0xfbdd0>
	unsigned char *ptr = lfb;
   8177c:	9000aae5 	adrp	x5, 15dd000 <allocated+0xfbdd0>
	ptr += (x<<2);
   81780:	531e7400 	lsl	w0, w0, #2
	
	pixel = (b<<16)|(g<<8)|r;
   81784:	53181c63 	ubfiz	w3, w3, #8, #8
	ptr += pitch * y;
   81788:	b94218c6 	ldr	w6, [x6, #536]
{
   8178c:	12001c42 	and	w2, w2, #0xff
	unsigned char *ptr = lfb;
   81790:	f94108a5 	ldr	x5, [x5, #528]
	pixel = (b<<16)|(g<<8)|r;
   81794:	2a020062 	orr	w2, w3, w2
   81798:	53101c84 	ubfiz	w4, w4, #16, #8
	ptr += pitch * y;
   8179c:	1b067c21 	mul	w1, w1, w6
	pixel = (b<<16)|(g<<8)|r;
   817a0:	2a040042 	orr	w2, w2, w4

	*((uint32_t *)ptr)=*((uint32_t *)&pixel);	
   817a4:	8b0100a5 	add	x5, x5, x1
   817a8:	b82048a2 	str	w2, [x5, w0, uxtw]
}
   817ac:	d65f03c0 	ret

00000000000817b0 <lfb_print>:
void lfb_print(int32_t x, int32_t y, char *s)
{
	// get our font
	psf_t *font = (psf_t*)&_binary_src_font_font_psf_start;
	// draw next character if it's not zero
	while(*s) {
   817b0:	39400043 	ldrb	w3, [x2]
   817b4:	34000983 	cbz	w3, 818e4 <lfb_print+0x134>
{
   817b8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
				line=offs;
				mask=1<<(font->width-1);
				for(i=0;i<font->width;i++)
				{
					// if bit set, we use white color, otherwise black
					*((uint32_t*)(lfb + line))=((int32_t)*glyph) & mask ? 0xFFFFFF : 0;
   817bc:	9000aae4 	adrp	x4, 15dd000 <allocated+0xfbdd0>
				mask=1<<(font->width-1);
   817c0:	5280002e 	mov	w14, #0x1                   	// #1
{
   817c4:	910003fd 	mov	x29, sp
   817c8:	a90153f3 	stp	x19, x20, [sp, #16]
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   817cc:	b00000b3 	adrp	x19, 96000 <sd_init+0x3ce8>
   817d0:	9129e273 	add	x19, x19, #0xa78
					*((uint32_t*)(lfb + line))=((int32_t)*glyph) & mask ? 0xFFFFFF : 0;
   817d4:	f9410890 	ldr	x16, [x4, #528]
		int32_t offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   817d8:	9000aaeb 	adrp	x11, 15dd000 <allocated+0xfbdd0>
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   817dc:	b9400a69 	ldr	w9, [x19, #8]
		int32_t offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   817e0:	9108616b 	add	x11, x11, #0x218
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   817e4:	b940127e 	ldr	w30, [x19, #16]
					*((uint32_t*)(lfb + line))=((int32_t)*glyph) & mask ? 0xFFFFFF : 0;
   817e8:	12bfe008 	mov	w8, #0xffffff              	// #16777215
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   817ec:	b9401672 	ldr	w18, [x19, #20]
   817f0:	91001211 	add	x17, x16, #0x4
		int32_t offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   817f4:	b9401a6c 	ldr	w12, [x19, #24]
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   817f8:	2a0903e9 	mov	w9, w9
		int32_t offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   817fc:	b9401e6a 	ldr	w10, [x19, #28]
{
   81800:	f90013f5 	str	x21, [sp, #32]
		int32_t i,j, line, mask, bytesperline=(font->width+7)/8;
   81804:	11001d4d 	add	w13, w10, #0x7
				mask=1<<(font->width-1);
   81808:	5100054f 	sub	w15, w10, #0x1
   8180c:	53037dad 	lsr	w13, w13, #3
   81810:	1acf21ce 	lsl	w14, w14, w15
   81814:	14000007 	b	81830 <lfb_print+0x80>
		else if(*s=='\n') 
   81818:	7100287f 	cmp	w3, #0xa
   8181c:	54000240 	b.eq	81864 <lfb_print+0xb4>  // b.none
		else if(*s != 255)
   81820:	7103fc7f 	cmp	w3, #0xff
   81824:	54000261 	b.ne	81870 <lfb_print+0xc0>  // b.any
	while(*s) {
   81828:	38401c43 	ldrb	w3, [x2, #1]!
   8182c:	34000143 	cbz	w3, 81854 <lfb_print+0xa4>
		unsigned char *glyph = (unsigned char*)&_binary_src_font_font_psf_start +
   81830:	1b127c66 	mul	w6, w3, w18
   81834:	6b1e007f 	cmp	w3, w30
   81838:	8b0900c6 	add	x6, x6, x9
   8183c:	9a8930c6 	csel	x6, x6, x9, cc  // cc = lo, ul, last
		if(*s=='\r') {
   81840:	7100347f 	cmp	w3, #0xd
   81844:	54fffea1 	b.ne	81818 <lfb_print+0x68>  // b.any
	while(*s) {
   81848:	38401c43 	ldrb	w3, [x2, #1]!
			x=0;
   8184c:	52800000 	mov	w0, #0x0                   	// #0
	while(*s) {
   81850:	35ffff03 	cbnz	w3, 81830 <lfb_print+0x80>
			x++;
		}
		// next character
		s++;
	}
}
   81854:	a94153f3 	ldp	x19, x20, [sp, #16]
   81858:	f94013f5 	ldr	x21, [sp, #32]
   8185c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81860:	d65f03c0 	ret
			x=0; y++;
   81864:	11000421 	add	w1, w1, #0x1
   81868:	52800000 	mov	w0, #0x0                   	// #0
   8186c:	17ffffef 	b	81828 <lfb_print+0x78>
			for(j=0;j<font->height;j++)
   81870:	3400036c 	cbz	w12, 818dc <lfb_print+0x12c>
		int32_t offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   81874:	b9400174 	ldr	w20, [x11]
   81878:	1b0a7c03 	mul	w3, w0, w10
		unsigned char *glyph = (unsigned char*)&_binary_src_font_font_psf_start +
   8187c:	8b060266 	add	x6, x19, x6
			for(j=0;j<font->height;j++)
   81880:	52800015 	mov	w21, #0x0                   	// #0
		int32_t offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   81884:	531e7463 	lsl	w3, w3, #2
   81888:	1b147d94 	mul	w20, w12, w20
   8188c:	1b010e94 	madd	w20, w20, w1, w3
				for(i=0;i<font->width;i++)
   81890:	340001aa 	cbz	w10, 818c4 <lfb_print+0x114>
   81894:	93407e83 	sxtw	x3, w20
				mask=1<<(font->width-1);
   81898:	2a0e03e4 	mov	w4, w14
   8189c:	8b2f4867 	add	x7, x3, w15, uxtw #2
   818a0:	8b030203 	add	x3, x16, x3
   818a4:	8b070227 	add	x7, x17, x7
					*((uint32_t*)(lfb + line))=((int32_t)*glyph) & mask ? 0xFFFFFF : 0;
   818a8:	394000c5 	ldrb	w5, [x6]
   818ac:	6a0400bf 	tst	w5, w4
					mask>>=1;
   818b0:	13017c84 	asr	w4, w4, #1
					*((uint32_t*)(lfb + line))=((int32_t)*glyph) & mask ? 0xFFFFFF : 0;
   818b4:	1a9f1105 	csel	w5, w8, wzr, ne  // ne = any
   818b8:	b8004465 	str	w5, [x3], #4
				for(i=0;i<font->width;i++)
   818bc:	eb07007f 	cmp	x3, x7
   818c0:	54ffff41 	b.ne	818a8 <lfb_print+0xf8>  // b.any
				offs+=pitch;
   818c4:	b9400163 	ldr	w3, [x11]
			for(j=0;j<font->height;j++)
   818c8:	110006b5 	add	w21, w21, #0x1
   818cc:	6b0c02bf 	cmp	w21, w12
				glyph+=bytesperline;
   818d0:	8b0d00c6 	add	x6, x6, x13
				offs+=pitch;
   818d4:	0b030294 	add	w20, w20, w3
			for(j=0;j<font->height;j++)
   818d8:	54fffdc1 	b.ne	81890 <lfb_print+0xe0>  // b.any
			x++;
   818dc:	11000400 	add	w0, w0, #0x1
   818e0:	17ffffd2 	b	81828 <lfb_print+0x78>
   818e4:	d65f03c0 	ret

00000000000818e8 <lfb_special_print>:


void lfb_special_print(int32_t x, int32_t y, char *s, bool set_background_color, char main_r, char main_g, char main_b, char back_r, char back_g, char back_b)
{
   818e8:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   818ec:	910003fd 	mov	x29, sp
   818f0:	a9025bf5 	stp	x21, x22, [sp, #32]
   818f4:	3942a3f6 	ldrb	w22, [sp, #168]
   818f8:	a90363f7 	stp	x23, x24, [sp, #48]
   818fc:	394283f7 	ldrb	w23, [sp, #160]
   81900:	291307e0 	stp	w0, w1, [sp, #152]
   81904:	12001c80 	and	w0, w4, #0xff
   81908:	b90067e0 	str	w0, [sp, #100]
   8190c:	12001ca0 	and	w0, w5, #0xff
   81910:	b9006be0 	str	w0, [sp, #104]
   81914:	12001cc1 	and	w1, w6, #0xff
	// get our font
	psf_t *font = (psf_t*)&_binary_src_font_font_psf_start;
	// draw next character if it's not zero
	while(*s) {
   81918:	39400040 	ldrb	w0, [x2]
{
   8191c:	b9006fe1 	str	w1, [sp, #108]
		// get the offset of the glyph. Need to adjust this to support unicode table
		unsigned char *glyph = (unsigned char*)&_binary_src_font_font_psf_start +
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
		// calculate the offset on screen
		int offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   81920:	9000aae1 	adrp	x1, 15dd000 <allocated+0xfbdd0>
   81924:	91086021 	add	x1, x1, #0x218
   81928:	f90043e1 	str	x1, [sp, #128]
{
   8192c:	f9004be2 	str	x2, [sp, #144]
	while(*s) {
   81930:	34000400 	cbz	w0, 819b0 <lfb_special_print+0xc8>
   81934:	12001cf8 	and	w24, w7, #0xff
   81938:	9000aaf5 	adrp	x21, 15dd000 <allocated+0xfbdd0>
   8193c:	b00000a7 	adrp	x7, 96000 <sd_init+0x3ce8>
   81940:	a90153f3 	stp	x19, x20, [sp, #16]
   81944:	12001c74 	and	w20, w3, #0xff
   81948:	a9046bf9 	stp	x25, x26, [sp, #64]
   8194c:	a90573fb 	stp	x27, x28, [sp, #80]
   81950:	9129e0fc 	add	x28, x7, #0xa78
   81954:	1400000a 	b	8197c <lfb_special_print+0x94>
		// handle carrige return
		if(*s=='\r') {
			x=0;
		} else
		// new line
		if(*s=='\n') {
   81958:	7100281f 	cmp	w0, #0xa
   8195c:	54000321 	b.ne	819c0 <lfb_special_print+0xd8>  // b.any
			x=0; y++;
   81960:	b9409fe0 	ldr	w0, [sp, #156]
   81964:	11000400 	add	w0, w0, #0x1
   81968:	291303ff 	stp	wzr, w0, [sp, #152]
	while(*s) {
   8196c:	f9404be1 	ldr	x1, [sp, #144]
   81970:	38401c20 	ldrb	w0, [x1, #1]!
   81974:	f9004be1 	str	x1, [sp, #144]
   81978:	34000160 	cbz	w0, 819a4 <lfb_special_print+0xbc>
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   8197c:	b9401381 	ldr	w1, [x28, #16]
   81980:	6b01001f 	cmp	w0, w1
   81984:	1a9f3001 	csel	w1, w0, wzr, cc  // cc = lo, ul, last
		if(*s=='\r') {
   81988:	7100341f 	cmp	w0, #0xd
   8198c:	54fffe61 	b.ne	81958 <lfb_special_print+0x70>  // b.any
	while(*s) {
   81990:	f9404be1 	ldr	x1, [sp, #144]
			x=0;
   81994:	b9009bff 	str	wzr, [sp, #152]
	while(*s) {
   81998:	38401c20 	ldrb	w0, [x1, #1]!
   8199c:	f9004be1 	str	x1, [sp, #144]
   819a0:	35fffee0 	cbnz	w0, 8197c <lfb_special_print+0x94>
   819a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   819a8:	a9446bf9 	ldp	x25, x26, [sp, #64]
   819ac:	a94573fb 	ldp	x27, x28, [sp, #80]
			x++;
		}
		// next character
		s++;
	}
}
   819b0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   819b4:	a94363f7 	ldp	x23, x24, [sp, #48]
   819b8:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   819bc:	d65f03c0 	ret
		int offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   819c0:	b9401b82 	ldr	w2, [x28, #24]
			for(j=0;j<font->height;j++){
   819c4:	34000942 	cbz	w2, 81aec <lfb_special_print+0x204>
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   819c8:	b9401783 	ldr	w3, [x28, #20]
		int offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   819cc:	f94043e4 	ldr	x4, [sp, #128]
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   819d0:	b9400b93 	ldr	w19, [x28, #8]
   819d4:	1b037c21 	mul	w1, w1, w3
		int offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   819d8:	b9401f80 	ldr	w0, [x28, #28]
   819dc:	b9409be3 	ldr	w3, [sp, #152]
   819e0:	b9400084 	ldr	w4, [x4]
		int i,j, line, mask, bytesperline=(font->width+7)/8;
   819e4:	11001c05 	add	w5, w0, #0x7
		 font->headersize + (*((unsigned char*)s)<font->numglyph?*s:0)*font->bytesperglyph;
   819e8:	8b334021 	add	x1, x1, w19, uxtw
		unsigned char *glyph = (unsigned char*)&_binary_src_font_font_psf_start +
   819ec:	8b010393 	add	x19, x28, x1
   819f0:	53037ca5 	lsr	w5, w5, #3
		int offs = (y * font->height * pitch) + (x * (font->width) * 4); //There was a +1 on font->width
   819f4:	1b007c63 	mul	w3, w3, w0
   819f8:	f90047e5 	str	x5, [sp, #136]
   819fc:	1b047c42 	mul	w2, w2, w4
   81a00:	531e7461 	lsl	w1, w3, #2
   81a04:	b9409fe3 	ldr	w3, [sp, #156]
   81a08:	1b030441 	madd	w1, w2, w3, w1
			for(j=0;j<font->height;j++){
   81a0c:	290f7fe1 	stp	w1, wzr, [sp, #120]
				mask=1<<(font->width-1);
   81a10:	51000404 	sub	w4, w0, #0x1
   81a14:	52800021 	mov	w1, #0x1                   	// #1
				for(i=0;i<font->width;i++){
   81a18:	5280001a 	mov	w26, #0x0                   	// #0
   81a1c:	b9807bfb 	ldrsw	x27, [sp, #120]
				mask=1<<(font->width-1);
   81a20:	1ac42039 	lsl	w25, w1, w4
				for(i=0;i<font->width;i++){
   81a24:	35000220 	cbnz	w0, 81a68 <lfb_special_print+0x180>
   81a28:	14000022 	b	81ab0 <lfb_special_print+0x1c8>
				*((uint32_t*)(lfb + line))=((int)*glyph) & mask ? rgb_to_hex(main_r, main_g, main_b) : rgb_to_hex(back_r, back_g, back_b);
   81a2c:	2a1603e2 	mov	w2, w22
   81a30:	2a1703e1 	mov	w1, w23
   81a34:	2a1803e0 	mov	w0, w24
   81a38:	34000563 	cbz	w3, 81ae4 <lfb_special_print+0x1fc>
   81a3c:	3941b3e2 	ldrb	w2, [sp, #108]
   81a40:	3941a3e1 	ldrb	w1, [sp, #104]
   81a44:	394193e0 	ldrb	w0, [sp, #100]
   81a48:	94003fd0 	bl	91988 <rgb_to_hex>
   81a4c:	f9410aa1 	ldr	x1, [x21, #528]
   81a50:	b83b6820 	str	w0, [x1, x27]
				for(i=0;i<font->width;i++){
   81a54:	b9401f80 	ldr	w0, [x28, #28]
   81a58:	1100075a 	add	w26, w26, #0x1
   81a5c:	9100137b 	add	x27, x27, #0x4
   81a60:	6b1a001f 	cmp	w0, w26
   81a64:	54000269 	b.ls	81ab0 <lfb_special_print+0x1c8>  // b.plast
				if(((int)*glyph) & mask)
   81a68:	39400263 	ldrb	w3, [x19]
   81a6c:	0a190063 	and	w3, w3, w25
   81a70:	13017f39 	asr	w25, w25, #1
			if(set_background_color == true)
   81a74:	35fffdd4 	cbnz	w20, 81a2c <lfb_special_print+0x144>
				if(((int)*glyph) & mask)
   81a78:	34fffee3 	cbz	w3, 81a54 <lfb_special_print+0x16c>
					*((uint32_t*)(lfb + line))= rgb_to_hex(main_r, main_g, main_b);
   81a7c:	f9410aa3 	ldr	x3, [x21, #528]
   81a80:	f9003be3 	str	x3, [sp, #112]
   81a84:	3941b3e2 	ldrb	w2, [sp, #108]
				for(i=0;i<font->width;i++){
   81a88:	1100075a 	add	w26, w26, #0x1
					*((uint32_t*)(lfb + line))= rgb_to_hex(main_r, main_g, main_b);
   81a8c:	3941a3e1 	ldrb	w1, [sp, #104]
   81a90:	394193e0 	ldrb	w0, [sp, #100]
   81a94:	94003fbd 	bl	91988 <rgb_to_hex>
   81a98:	f9403be3 	ldr	x3, [sp, #112]
   81a9c:	b83b6860 	str	w0, [x3, x27]
									line+=4;	    
   81aa0:	9100137b 	add	x27, x27, #0x4
				for(i=0;i<font->width;i++){
   81aa4:	b9401f80 	ldr	w0, [x28, #28]
   81aa8:	6b1a001f 	cmp	w0, w26
   81aac:	54fffde8 	b.hi	81a68 <lfb_special_print+0x180>  // b.pmore
			for(j=0;j<font->height;j++){
   81ab0:	b9407fe0 	ldr	w0, [sp, #124]
   81ab4:	b9401b81 	ldr	w1, [x28, #24]
   81ab8:	11000402 	add	w2, w0, #0x1
				glyph+=bytesperline;
   81abc:	a9480fe0 	ldp	x0, x3, [sp, #128]
			for(j=0;j<font->height;j++){
   81ac0:	6b02003f 	cmp	w1, w2
				offs+=pitch;
   81ac4:	b9407be1 	ldr	w1, [sp, #120]
   81ac8:	b9400000 	ldr	w0, [x0]
				glyph+=bytesperline;
   81acc:	8b030273 	add	x19, x19, x3
				offs+=pitch;
   81ad0:	0b000020 	add	w0, w1, w0
			for(j=0;j<font->height;j++){
   81ad4:	290f0be0 	stp	w0, w2, [sp, #120]
   81ad8:	540000a9 	b.ls	81aec <lfb_special_print+0x204>  // b.plast
   81adc:	b9401f80 	ldr	w0, [x28, #28]
   81ae0:	17ffffcc 	b	81a10 <lfb_special_print+0x128>
				*((uint32_t*)(lfb + line))=((int)*glyph) & mask ? rgb_to_hex(main_r, main_g, main_b) : rgb_to_hex(back_r, back_g, back_b);
   81ae4:	94003fa9 	bl	91988 <rgb_to_hex>
   81ae8:	17ffffd9 	b	81a4c <lfb_special_print+0x164>
			x++;
   81aec:	b9409be0 	ldr	w0, [sp, #152]
   81af0:	11000400 	add	w0, w0, #0x1
   81af4:	b9009be0 	str	w0, [sp, #152]
   81af8:	17ffff9d 	b	8196c <lfb_special_print+0x84>
   81afc:	d503201f 	nop

0000000000081b00 <lfb_hex>:

void lfb_hex(uint32_t *x, uint32_t *y, uint32_t d)
{
   81b00:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   81b04:	910003fd 	mov	x29, sp
   81b08:	a90363f7 	stp	x23, x24, [sp, #48]
   81b0c:	aa0003f8 	mov	x24, x0
   81b10:	b9400000 	ldr	w0, [x0]
   81b14:	aa0103f7 	mov	x23, x1
   81b18:	a9025bf5 	stp	x21, x22, [sp, #32]
   81b1c:	2a0203f6 	mov	w22, w2
	uint32_t n;
	int32_t c;
	for(c=28;c>=0;c-=4)
	{
		n=(d>>c)&0xF;
		n+=n>9?0x37:0x30;
   81b20:	528006f5 	mov	w21, #0x37                  	// #55
{
   81b24:	a90153f3 	stp	x19, x20, [sp, #16]
	for(c=28;c>=0;c-=4)
   81b28:	52800393 	mov	w19, #0x1c                  	// #28
		n+=n>9?0x37:0x30;
   81b2c:	52800614 	mov	w20, #0x30                  	// #48
		n=(d>>c)&0xF;
   81b30:	1ad326c2 	lsr	w2, w22, w19
   81b34:	12000c42 	and	w2, w2, #0xf
		n+=n>9?0x37:0x30;
   81b38:	7100245f 	cmp	w2, #0x9
		lfb_print(*x, *y, (char *)&n);
   81b3c:	b94002e1 	ldr	w1, [x23]
		n+=n>9?0x37:0x30;
   81b40:	1a9482a3 	csel	w3, w21, w20, hi  // hi = pmore
	for(c=28;c>=0;c-=4)
   81b44:	51001273 	sub	w19, w19, #0x4
		n+=n>9?0x37:0x30;
   81b48:	0b030043 	add	w3, w2, w3
		lfb_print(*x, *y, (char *)&n);
   81b4c:	910133e2 	add	x2, sp, #0x4c
		n+=n>9?0x37:0x30;
   81b50:	b9004fe3 	str	w3, [sp, #76]
		lfb_print(*x, *y, (char *)&n);
   81b54:	97ffff17 	bl	817b0 <lfb_print>
		*x += 1;
   81b58:	b9400300 	ldr	w0, [x24]
	for(c=28;c>=0;c-=4)
   81b5c:	3100127f 	cmn	w19, #0x4
		*x += 1;
   81b60:	11000400 	add	w0, w0, #0x1
   81b64:	b9000300 	str	w0, [x24]
	for(c=28;c>=0;c-=4)
   81b68:	54fffe41 	b.ne	81b30 <lfb_hex+0x30>  // b.any
	}
}
   81b6c:	a94153f3 	ldp	x19, x20, [sp, #16]
   81b70:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81b74:	a94363f7 	ldp	x23, x24, [sp, #48]
   81b78:	a8c57bfd 	ldp	x29, x30, [sp], #80
   81b7c:	d65f03c0 	ret

0000000000081b80 <lfb_dump>:

void lfb_dump(void *ptr)
{
   81b80:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   81b84:	910003fd 	mov	x29, sp
   81b88:	a9025bf5 	stp	x21, x22, [sp, #32]
	uint64_t a,b,d, temp;
	uint32_t x = 0, y = 0;
	unsigned char c;
	for(a=(uint64_t)ptr;a<(uint64_t)ptr+512;a+=16) {
   81b8c:	aa0003f5 	mov	x21, x0
   81b90:	91080000 	add	x0, x0, #0x200
	uint32_t x = 0, y = 0;
   81b94:	290d7fff 	stp	wzr, wzr, [sp, #104]
	for(a=(uint64_t)ptr;a<(uint64_t)ptr+512;a+=16) {
   81b98:	eb15001f 	cmp	x0, x21
   81b9c:	54000c69 	b.ls	81d28 <lfb_dump+0x1a8>  // b.plast
   81ba0:	a90363f7 	stp	x23, x24, [sp, #48]
   81ba4:	910042b7 	add	x23, x21, #0x10
   81ba8:	eb17001f 	cmp	x0, x23
   81bac:	a9046bf9 	stp	x25, x26, [sp, #64]
   81bb0:	d2800419 	mov	x25, #0x20                  	// #32
   81bb4:	9a9f2739 	csinc	x25, x25, xzr, cs  // cs = hs, nlast
   81bb8:	b000009a 	adrp	x26, 92000 <sd_readblock+0x158>
   81bbc:	b0000096 	adrp	x22, 92000 <sd_readblock+0x158>
   81bc0:	9122435a 	add	x26, x26, #0x890
   81bc4:	8b1912b9 	add	x25, x21, x25, lsl #4
   81bc8:	913242d6 	add	x22, x22, #0xc90
			x++;
		}
		}
		for(b=0;b<16;b++) {
			c=*((unsigned char*)(a+b));
		temp = (c<32 || c >= 127? '.' : c);
   81bcc:	528005d8 	mov	w24, #0x2e                  	// #46
   81bd0:	a90153f3 	stp	x19, x20, [sp, #16]
			d=(uint32_t)c;d>>=4;d&=0xF;d+=d>9?0x37:0x30;
   81bd4:	d28006f4 	mov	x20, #0x37                  	// #55
   81bd8:	d2800613 	mov	x19, #0x30                  	// #48
   81bdc:	a90573fb 	stp	x27, x28, [sp, #80]
		lfb_hex(&x, &y, a); 
   81be0:	2a1503e2 	mov	w2, w21
   81be4:	9101b3e1 	add	x1, sp, #0x6c
   81be8:	9101a3e0 	add	x0, sp, #0x68
   81bec:	97ffffc5 	bl	81b00 <lfb_hex>
		for(b=0;b<16;b++) {
   81bf0:	d280001c 	mov	x28, #0x0                   	// #0
	lfb_print(x, y, ": ");
   81bf4:	294d07e0 	ldp	w0, w1, [sp, #104]
   81bf8:	aa1a03e2 	mov	x2, x26
   81bfc:	97fffeed 	bl	817b0 <lfb_print>
	x++;
   81c00:	b9406be0 	ldr	w0, [sp, #104]
   81c04:	11000800 	add	w0, w0, #0x2
   81c08:	b9006be0 	str	w0, [sp, #104]
		for(b=0;b<16;b++) {
   81c0c:	14000003 	b	81c18 <lfb_dump+0x98>
   81c10:	f100439f 	cmp	x28, #0x10
   81c14:	54000540 	b.eq	81cbc <lfb_dump+0x13c>  // b.none
			c=*((unsigned char*)(a+b));
   81c18:	387c6abb 	ldrb	w27, [x21, x28]
		lfb_print(x, y, (char *)&d);
   81c1c:	9101c3e2 	add	x2, sp, #0x70
   81c20:	b9406fe1 	ldr	w1, [sp, #108]
			d=(uint32_t)c;d>>=4;d&=0xF;d+=d>9?0x37:0x30;
   81c24:	d3441f63 	ubfx	x3, x27, #4, #4
   81c28:	12000f7b 	and	w27, w27, #0xf
   81c2c:	f100247f 	cmp	x3, #0x9
   81c30:	9a938284 	csel	x4, x20, x19, hi  // hi = pmore
   81c34:	8b040063 	add	x3, x3, x4
   81c38:	f9003be3 	str	x3, [sp, #112]
		lfb_print(x, y, (char *)&d);
   81c3c:	97fffedd 	bl	817b0 <lfb_print>
		lfb_print(x, y, (char *)&d);
   81c40:	294d07e3 	ldp	w3, w1, [sp, #104]
			d=(uint32_t)c;d&=0xF;d+=d>9?0x37:0x30;
   81c44:	71002b7f 	cmp	w27, #0xa
   81c48:	9a943260 	csel	x0, x19, x20, cc  // cc = lo, ul, last
   81c4c:	92401f7b 	and	x27, x27, #0xff
		x++;
   81c50:	11000463 	add	w3, w3, #0x1
		lfb_print(x, y, (char *)&d);
   81c54:	9101c3e2 	add	x2, sp, #0x70
			d=(uint32_t)c;d&=0xF;d+=d>9?0x37:0x30;
   81c58:	8b00037b 	add	x27, x27, x0
		lfb_print(x, y, (char *)&d);
   81c5c:	2a0303e0 	mov	w0, w3
		x++;
   81c60:	b9006be3 	str	w3, [sp, #104]
			d=(uint32_t)c;d&=0xF;d+=d>9?0x37:0x30;
   81c64:	f9003bfb 	str	x27, [sp, #112]
		lfb_print(x, y, (char *)&d);
   81c68:	97fffed2 	bl	817b0 <lfb_print>
			lfb_print(x, y, " ");
   81c6c:	294d07e0 	ldp	w0, w1, [sp, #104]
   81c70:	aa1603e2 	mov	x2, x22
		x++;
   81c74:	11000400 	add	w0, w0, #0x1
   81c78:	b9006be0 	str	w0, [sp, #104]
			lfb_print(x, y, " ");
   81c7c:	97fffecd 	bl	817b0 <lfb_print>
		x++;
   81c80:	b9406be0 	ldr	w0, [sp, #104]
			if(b%4==3)
   81c84:	92400781 	and	x1, x28, #0x3
   81c88:	f1000c3f 	cmp	x1, #0x3
   81c8c:	9100079c 	add	x28, x28, #0x1
		x++;
   81c90:	11000400 	add	w0, w0, #0x1
   81c94:	b9006be0 	str	w0, [sp, #104]
			if(b%4==3)
   81c98:	54fffbc1 	b.ne	81c10 <lfb_dump+0x90>  // b.any
				lfb_print(x, y, " ");
   81c9c:	b9406fe1 	ldr	w1, [sp, #108]
   81ca0:	aa1603e2 	mov	x2, x22
   81ca4:	97fffec3 	bl	817b0 <lfb_print>
			x++;
   81ca8:	b9406be0 	ldr	w0, [sp, #104]
		for(b=0;b<16;b++) {
   81cac:	f100439f 	cmp	x28, #0x10
			x++;
   81cb0:	11000400 	add	w0, w0, #0x1
   81cb4:	b9006be0 	str	w0, [sp, #104]
		for(b=0;b<16;b++) {
   81cb8:	54fffb01 	b.ne	81c18 <lfb_dump+0x98>  // b.any
   81cbc:	aa1503fb 	mov	x27, x21
			c=*((unsigned char*)(a+b));
   81cc0:	38401763 	ldrb	w3, [x27], #1
			lfb_print(x, y, (char *)&temp);
   81cc4:	9101e3e2 	add	x2, sp, #0x78
   81cc8:	b9406fe1 	ldr	w1, [sp, #108]
		temp = (c<32 || c >= 127? '.' : c);
   81ccc:	51008064 	sub	w4, w3, #0x20
   81cd0:	12001c84 	and	w4, w4, #0xff
   81cd4:	71017c9f 	cmp	w4, #0x5f
   81cd8:	1a983063 	csel	w3, w3, w24, cc  // cc = lo, ul, last
   81cdc:	92401c63 	and	x3, x3, #0xff
   81ce0:	f9003fe3 	str	x3, [sp, #120]
			lfb_print(x, y, (char *)&temp);
   81ce4:	97fffeb3 	bl	817b0 <lfb_print>
		x++;
   81ce8:	b9406be0 	ldr	w0, [sp, #104]
		for(b=0;b<16;b++) {
   81cec:	eb1b02ff 	cmp	x23, x27
		x++;
   81cf0:	11000400 	add	w0, w0, #0x1
   81cf4:	b9006be0 	str	w0, [sp, #104]
		for(b=0;b<16;b++) {
   81cf8:	54fffe41 	b.ne	81cc0 <lfb_dump+0x140>  // b.any
		}
		x = 0;
		y++;
   81cfc:	b9406fe0 	ldr	w0, [sp, #108]
	for(a=(uint64_t)ptr;a<(uint64_t)ptr+512;a+=16) {
   81d00:	910042b5 	add	x21, x21, #0x10
   81d04:	eb1902bf 	cmp	x21, x25
   81d08:	910042f7 	add	x23, x23, #0x10
		y++;
   81d0c:	11000400 	add	w0, w0, #0x1
   81d10:	290d03ff 	stp	wzr, w0, [sp, #104]
	for(a=(uint64_t)ptr;a<(uint64_t)ptr+512;a+=16) {
   81d14:	54fff661 	b.ne	81be0 <lfb_dump+0x60>  // b.any
   81d18:	a94153f3 	ldp	x19, x20, [sp, #16]
   81d1c:	a94363f7 	ldp	x23, x24, [sp, #48]
   81d20:	a9446bf9 	ldp	x25, x26, [sp, #64]
   81d24:	a94573fb 	ldp	x27, x28, [sp, #80]
	}
}
   81d28:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81d2c:	a8c87bfd 	ldp	x29, x30, [sp], #128
   81d30:	d65f03c0 	ret
   81d34:	d503201f 	nop

0000000000081d38 <lfb_clear>:

void lfb_clear()
{
	mailbox[0] = 7*4;
   81d38:	9000aae0 	adrp	x0, 15dd000 <allocated+0xfbdd0>
   81d3c:	91128001 	add	x1, x0, #0x4a0
   81d40:	52800382 	mov	w2, #0x1c                  	// #28
	mailbox[1] = MBOX_REQUEST;
	mailbox[2] = 0x00040002;
   81d44:	52800043 	mov	w3, #0x2                   	// #2
	mailbox[0] = 7*4;
   81d48:	b904a002 	str	w2, [x0, #1184]
	mailbox[2] = 0x00040002;
   81d4c:	72a00083 	movk	w3, #0x4, lsl #16
	mailbox[1] = MBOX_REQUEST;
   81d50:	b900043f 	str	wzr, [x1, #4]
	mailbox[3] = 4;
   81d54:	52800082 	mov	w2, #0x4                   	// #4
	mailbox[2] = 0x00040002;
   81d58:	b9000823 	str	w3, [x1, #8]
	mailbox[4] = 4;
	mailbox[5] = 0;
	mailbox[6] = MBOX_TAG_LAST;
	mailbox_call(MBOX_CH_PROP);
   81d5c:	52800100 	mov	w0, #0x8                   	// #8
	mailbox[3] = 4;
   81d60:	b9000c22 	str	w2, [x1, #12]
	mailbox[4] = 4;
   81d64:	b9001022 	str	w2, [x1, #16]
	mailbox[5] = 0;
   81d68:	b900143f 	str	wzr, [x1, #20]
	mailbox[6] = MBOX_TAG_LAST;
   81d6c:	b900183f 	str	wzr, [x1, #24]
	mailbox_call(MBOX_CH_PROP);
   81d70:	14003f0c 	b	919a0 <mailbox_call>
   81d74:	d503201f 	nop

0000000000081d78 <lfb_clear_rect>:

void lfb_clear_rect()
{
	unsigned char *ptr = lfb;
	//Clearing the whole screen
	for(uint32_t y = 0; y < lfb_height; y++)
   81d78:	90009b26 	adrp	x6, 13e5000 <core_state>
	unsigned char *ptr = lfb;
   81d7c:	9000aae1 	adrp	x1, 15dd000 <allocated+0xfbdd0>
	for(uint32_t y = 0; y < lfb_height; y++)
   81d80:	b94218c0 	ldr	w0, [x6, #536]
	unsigned char *ptr = lfb;
   81d84:	f9410822 	ldr	x2, [x1, #528]
	for(uint32_t y = 0; y < lfb_height; y++)
   81d88:	34000320 	cbz	w0, 81dec <lfb_clear_rect+0x74>
   81d8c:	90009b23 	adrp	x3, 13e5000 <core_state>
   81d90:	9000aae7 	adrp	x7, 15dd000 <allocated+0xfbdd0>
   81d94:	910860c6 	add	x6, x6, #0x218
   81d98:	91087063 	add	x3, x3, #0x21c
   81d9c:	910860e7 	add	x7, x7, #0x218
   81da0:	52800004 	mov	w4, #0x0                   	// #0
   81da4:	d503201f 	nop
	{
		for(uint32_t x = 0; x < lfb_width; x++)
   81da8:	b9400061 	ldr	w1, [x3]
   81dac:	52800000 	mov	w0, #0x0                   	// #0
   81db0:	34000101 	cbz	w1, 81dd0 <lfb_clear_rect+0x58>
   81db4:	d503201f 	nop
		{
			*((uint32_t*)ptr)=0x00000000;
   81db8:	b800445f 	str	wzr, [x2], #4
		for(uint32_t x = 0; x < lfb_width; x++)
   81dbc:	11000400 	add	w0, w0, #0x1
   81dc0:	b9400061 	ldr	w1, [x3]
   81dc4:	6b00003f 	cmp	w1, w0
   81dc8:	54ffff88 	b.hi	81db8 <lfb_clear_rect+0x40>  // b.pmore
   81dcc:	531e7421 	lsl	w1, w1, #2
			ptr += 4;
		}
		ptr+=pitch-lfb_width*4;
   81dd0:	b94000e0 	ldr	w0, [x7]
	for(uint32_t y = 0; y < lfb_height; y++)
   81dd4:	11000484 	add	w4, w4, #0x1
   81dd8:	b94000c5 	ldr	w5, [x6]
		ptr+=pitch-lfb_width*4;
   81ddc:	4b010001 	sub	w1, w0, w1
	for(uint32_t y = 0; y < lfb_height; y++)
   81de0:	6b0400bf 	cmp	w5, w4
		ptr+=pitch-lfb_width*4;
   81de4:	8b010042 	add	x2, x2, x1
	for(uint32_t y = 0; y < lfb_height; y++)
   81de8:	54fffe08 	b.hi	81da8 <lfb_clear_rect+0x30>  // b.pmore
	}
}
   81dec:	d65f03c0 	ret

0000000000081df0 <vsprintf>:
    int64_t arg;
    int32_t len, sign, i;
    char *p, *orig=dst, tmpstr[19];

    // failsafes
    if(dst==(void*)0 || fmt==(void*)0) {
   81df0:	f100001f 	cmp	x0, #0x0
   81df4:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
   81df8:	540009c0 	b.eq	81f30 <vsprintf+0x140>  // b.none
{
   81dfc:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
                i=16;
                tmpstr[i]=0;
                do {
                    char n=arg & 0xf;
                    // 0-9 => '0'-'9', 10-15 => 'A'-'F'
                    tmpstr[--i]=n+(n>9?0x37:0x30);
   81e00:	52800608 	mov	w8, #0x30                  	// #48
                    tmpstr[--i]='0'+(arg%10);
   81e04:	b203e7eb 	mov	x11, #0x6666666666666666    	// #7378697629483820646
{
   81e08:	910003fd 	mov	x29, sp
                p=&tmpstr[i];
                goto copystring;
            } else
            // string
            if(*fmt=='s') {
                p = __builtin_va_arg(args, char*);
   81e0c:	a9404049 	ldp	x9, x16, [x2]
   81e10:	aa0003e7 	mov	x7, x0
   81e14:	b940184a 	ldr	w10, [x2, #24]
                        tmpstr[--i]='0';
   81e18:	2a0803ee 	mov	w14, w8
copystring:     if(p==(void*)0) {
                    p="(null)";
   81e1c:	b000008f 	adrp	x15, 92000 <sd_readblock+0x158>
                    tmpstr[--i]=n+(n>9?0x37:0x30);
   81e20:	528006ec 	mov	w12, #0x37                  	// #55
                    while(i>16-len) {
   81e24:	5280021e 	mov	w30, #0x10                  	// #16
                i=18;
   81e28:	52800252 	mov	w18, #0x12                  	// #18
                    tmpstr[--i]='0'+(arg%10);
   81e2c:	f28ccceb 	movk	x11, #0x6667
                        tmpstr[--i]=' ';
   81e30:	5280040d 	mov	w13, #0x20                  	// #32
                    tmpstr[--i]='-';
   81e34:	528005b1 	mov	w17, #0x2d                  	// #45
    while(*fmt) {
   81e38:	39400022 	ldrb	w2, [x1]
   81e3c:	34000142 	cbz	w2, 81e64 <vsprintf+0x74>
        if(*fmt=='%') {
   81e40:	7100945f 	cmp	w2, #0x25
   81e44:	91000424 	add	x4, x1, #0x1
   81e48:	54000160 	b.eq	81e74 <vsprintf+0x84>  // b.none
                while(*p) {
                    *dst++ = *p++;
                }
            }
        } else {
put:        *dst++ = *fmt;
   81e4c:	aa0703e3 	mov	x3, x7
   81e50:	aa0403e1 	mov	x1, x4
   81e54:	38001462 	strb	w2, [x3], #1
    while(*fmt) {
   81e58:	39400022 	ldrb	w2, [x1]
put:        *dst++ = *fmt;
   81e5c:	aa0303e7 	mov	x7, x3
    while(*fmt) {
   81e60:	35ffff02 	cbnz	w2, 81e40 <vsprintf+0x50>
        }
        fmt++;
    }
    *dst=0;
   81e64:	390000ff 	strb	wzr, [x7]
    __builtin_va_end(args);
    // number of bytes written
    return dst-orig;
   81e68:	4b0000e0 	sub	w0, w7, w0
}
   81e6c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   81e70:	d65f03c0 	ret
            if(*fmt=='%') {
   81e74:	39400422 	ldrb	w2, [x1, #1]
   81e78:	91000821 	add	x1, x1, #0x2
   81e7c:	7100945f 	cmp	w2, #0x25
   81e80:	54000540 	b.eq	81f28 <vsprintf+0x138>  // b.none
            while(*fmt>='0' && *fmt<='9') {
   81e84:	5100c045 	sub	w5, w2, #0x30
   81e88:	12001ca3 	and	w3, w5, #0xff
   81e8c:	7100247f 	cmp	w3, #0x9
   81e90:	54000d88 	b.hi	82040 <vsprintf+0x250>  // b.pmore
            len=0;
   81e94:	52800003 	mov	w3, #0x0                   	// #0
   81e98:	14000002 	b	81ea0 <vsprintf+0xb0>
   81e9c:	aa0603e4 	mov	x4, x6
                len *= 10;
   81ea0:	0b030861 	add	w1, w3, w3, lsl #2
            while(*fmt>='0' && *fmt<='9') {
   81ea4:	39400482 	ldrb	w2, [x4, #1]
                fmt++;
   81ea8:	91000486 	add	x6, x4, #0x1
                len += *fmt-'0';
   81eac:	0b0104a3 	add	w3, w5, w1, lsl #1
            while(*fmt>='0' && *fmt<='9') {
   81eb0:	5100c045 	sub	w5, w2, #0x30
   81eb4:	12001ca1 	and	w1, w5, #0xff
   81eb8:	7100243f 	cmp	w1, #0x9
   81ebc:	54ffff09 	b.ls	81e9c <vsprintf+0xac>  // b.plast
   81ec0:	91000881 	add	x1, x4, #0x2
            if(*fmt=='l') {
   81ec4:	7101b05f 	cmp	w2, #0x6c
   81ec8:	54000061 	b.ne	81ed4 <vsprintf+0xe4>  // b.any
                fmt++;
   81ecc:	aa0103e6 	mov	x6, x1
            if(*fmt=='l') {
   81ed0:	91000421 	add	x1, x1, #0x1
            if(*fmt=='c') {
   81ed4:	394000c2 	ldrb	w2, [x6]
   81ed8:	71018c5f 	cmp	w2, #0x63
   81edc:	540002e0 	b.eq	81f38 <vsprintf+0x148>  // b.none
            if(*fmt=='d') {
   81ee0:	7101905f 	cmp	w2, #0x64
   81ee4:	540004c0 	b.eq	81f7c <vsprintf+0x18c>  // b.none
            if(*fmt=='x') {
   81ee8:	7101e05f 	cmp	w2, #0x78
   81eec:	54000b00 	b.eq	8204c <vsprintf+0x25c>  // b.none
            if(*fmt=='s') {
   81ef0:	7101cc5f 	cmp	w2, #0x73
   81ef4:	54fffa21 	b.ne	81e38 <vsprintf+0x48>  // b.any
                p = __builtin_va_arg(args, char*);
   81ef8:	37f8100a 	tbnz	w10, #31, 820f8 <vsprintf+0x308>
   81efc:	91003d23 	add	x3, x9, #0xf
   81f00:	aa0903e2 	mov	x2, x9
   81f04:	927df069 	and	x9, x3, #0xfffffffffffffff8
   81f08:	f9400042 	ldr	x2, [x2]
copystring:     if(p==(void*)0) {
   81f0c:	b5000942 	cbnz	x2, 82034 <vsprintf+0x244>
                    p="(null)";
   81f10:	912261e2 	add	x2, x15, #0x898
                while(*p) {
   81f14:	52800503 	mov	w3, #0x28                  	// #40
                    *dst++ = *p++;
   81f18:	380014e3 	strb	w3, [x7], #1
                while(*p) {
   81f1c:	38401c43 	ldrb	w3, [x2, #1]!
   81f20:	35ffffc3 	cbnz	w3, 81f18 <vsprintf+0x128>
   81f24:	17ffffc5 	b	81e38 <vsprintf+0x48>
   81f28:	aa0103e4 	mov	x4, x1
   81f2c:	17ffffc8 	b	81e4c <vsprintf+0x5c>
        return 0;
   81f30:	52800000 	mov	w0, #0x0                   	// #0
}
   81f34:	d65f03c0 	ret
                arg = __builtin_va_arg(args, int32_t);
   81f38:	37f8012a 	tbnz	w10, #31, 81f5c <vsprintf+0x16c>
   81f3c:	91002d23 	add	x3, x9, #0xb
   81f40:	aa0903e2 	mov	x2, x9
   81f44:	927df069 	and	x9, x3, #0xfffffffffffffff8
                *dst++ = (char)arg;
   81f48:	aa0703e3 	mov	x3, x7
   81f4c:	b9400042 	ldr	w2, [x2]
   81f50:	38001462 	strb	w2, [x3], #1
   81f54:	aa0303e7 	mov	x7, x3
                continue;
   81f58:	17ffffb8 	b	81e38 <vsprintf+0x48>
                arg = __builtin_va_arg(args, int32_t);
   81f5c:	11002143 	add	w3, w10, #0x8
   81f60:	7100007f 	cmp	w3, #0x0
   81f64:	54000dad 	b.le	82118 <vsprintf+0x328>
   81f68:	91002d24 	add	x4, x9, #0xb
   81f6c:	aa0903e2 	mov	x2, x9
   81f70:	2a0303ea 	mov	w10, w3
   81f74:	927df089 	and	x9, x4, #0xfffffffffffffff8
   81f78:	17fffff4 	b	81f48 <vsprintf+0x158>
                arg = __builtin_va_arg(args, int32_t);
   81f7c:	a90153f3 	stp	x19, x20, [sp, #16]
   81f80:	f90013f5 	str	x21, [sp, #32]
   81f84:	37f809aa 	tbnz	w10, #31, 820b8 <vsprintf+0x2c8>
   81f88:	91002d24 	add	x4, x9, #0xb
   81f8c:	aa0903e2 	mov	x2, x9
   81f90:	927df089 	and	x9, x4, #0xfffffffffffffff8
   81f94:	b9400042 	ldr	w2, [x2]
                sign=0;
   81f98:	52800015 	mov	w21, #0x0                   	// #0
                arg = __builtin_va_arg(args, int32_t);
   81f9c:	93407c45 	sxtw	x5, w2
                if((int32_t)arg<0) {
   81fa0:	36f80062 	tbz	w2, #31, 81fac <vsprintf+0x1bc>
                    arg*=-1;
   81fa4:	cb0503e5 	neg	x5, x5
                    sign++;
   81fa8:	52800035 	mov	w21, #0x1                   	// #1
                tmpstr[i]=0;
   81fac:	9100e3f3 	add	x19, sp, #0x38
                i=18;
   81fb0:	52800254 	mov	w20, #0x12                  	// #18
                tmpstr[i]=0;
   81fb4:	39012bff 	strb	wzr, [sp, #74]
   81fb8:	14000002 	b	81fc0 <vsprintf+0x1d0>
   81fbc:	2a0603f4 	mov	w20, w6
                    tmpstr[--i]='0'+(arg%10);
   81fc0:	9b4b7ca2 	smulh	x2, x5, x11
   81fc4:	51000686 	sub	w6, w20, #0x1
   81fc8:	d1000673 	sub	x19, x19, #0x1
   81fcc:	9342fc42 	asr	x2, x2, #2
   81fd0:	cb85fc42 	sub	x2, x2, x5, asr #63
                } while(arg!=0 && i>0);
   81fd4:	f100005f 	cmp	x2, #0x0
                    tmpstr[--i]='0'+(arg%10);
   81fd8:	8b020844 	add	x4, x2, x2, lsl #2
   81fdc:	cb0404a4 	sub	x4, x5, x4, lsl #1
                    arg/=10;
   81fe0:	aa0203e5 	mov	x5, x2
                    tmpstr[--i]='0'+(arg%10);
   81fe4:	1100c082 	add	w2, w4, #0x30
                } while(arg!=0 && i>0);
   81fe8:	1a9f07e4 	cset	w4, ne  // ne = any
   81fec:	710000df 	cmp	w6, #0x0
                    tmpstr[--i]='0'+(arg%10);
   81ff0:	39004a62 	strb	w2, [x19, #18]
                } while(arg!=0 && i>0);
   81ff4:	1a9fd7e2 	cset	w2, gt
   81ff8:	6a02009f 	tst	w4, w2
   81ffc:	54fffe01 	b.ne	81fbc <vsprintf+0x1cc>  // b.any
                if(sign) {
   82000:	93407cc2 	sxtw	x2, w6
   82004:	340000b5 	cbz	w21, 82018 <vsprintf+0x228>
                    tmpstr[--i]='-';
   82008:	51000a86 	sub	w6, w20, #0x2
   8200c:	9100e3e4 	add	x4, sp, #0x38
   82010:	93407cc2 	sxtw	x2, w6
   82014:	3826c891 	strb	w17, [x4, w6, sxtw]
                if(len>0 && len<18) {
   82018:	51000464 	sub	w4, w3, #0x1
   8201c:	7100409f 	cmp	w4, #0x10
   82020:	54000829 	b.ls	82124 <vsprintf+0x334>  // b.plast
                goto copystring;
   82024:	a94153f3 	ldp	x19, x20, [sp, #16]
                p=&tmpstr[i];
   82028:	9100e3e3 	add	x3, sp, #0x38
                goto copystring;
   8202c:	f94013f5 	ldr	x21, [sp, #32]
                p=&tmpstr[i];
   82030:	8b020062 	add	x2, x3, x2
                while(*p) {
   82034:	39400043 	ldrb	w3, [x2]
   82038:	35fff703 	cbnz	w3, 81f18 <vsprintf+0x128>
   8203c:	17ffff7f 	b	81e38 <vsprintf+0x48>
            fmt++;
   82040:	aa0403e6 	mov	x6, x4
            len=0;
   82044:	52800003 	mov	w3, #0x0                   	// #0
   82048:	17ffff9f 	b	81ec4 <vsprintf+0xd4>
                arg = __builtin_va_arg(args, int64_t);
   8204c:	a90153f3 	stp	x19, x20, [sp, #16]
   82050:	37f8044a 	tbnz	w10, #31, 820d8 <vsprintf+0x2e8>
   82054:	91003d24 	add	x4, x9, #0xf
   82058:	aa0903e2 	mov	x2, x9
   8205c:	927df089 	and	x9, x4, #0xfffffffffffffff8
   82060:	9100e3e6 	add	x6, sp, #0x38
                tmpstr[i]=0;
   82064:	390123ff 	strb	wzr, [sp, #72]
                arg = __builtin_va_arg(args, int64_t);
   82068:	f9400044 	ldr	x4, [x2]
                i=16;
   8206c:	52800202 	mov	w2, #0x10                  	// #16
                    char n=arg & 0xf;
   82070:	12000c93 	and	w19, w4, #0xf
                    arg>>=4;
   82074:	9344fc84 	asr	x4, x4, #4
                    tmpstr[--i]=n+(n>9?0x37:0x30);
   82078:	7100267f 	cmp	w19, #0x9
   8207c:	51000442 	sub	w2, w2, #0x1
   82080:	1a888185 	csel	w5, w12, w8, hi  // hi = pmore
                } while(arg!=0 && i>0);
   82084:	f100009f 	cmp	x4, #0x0
                    tmpstr[--i]=n+(n>9?0x37:0x30);
   82088:	0b1300a5 	add	w5, w5, w19
   8208c:	39003cc5 	strb	w5, [x6, #15]
                } while(arg!=0 && i>0);
   82090:	7a401844 	ccmp	w2, #0x0, #0x4, ne  // ne = any
   82094:	d10004c6 	sub	x6, x6, #0x1
   82098:	54fffecc 	b.gt	82070 <vsprintf+0x280>
                if(len>0 && len<=16) {
   8209c:	51000464 	sub	w4, w3, #0x1
   820a0:	71003c9f 	cmp	w4, #0xf
   820a4:	540005c9 	b.ls	8215c <vsprintf+0x36c>  // b.plast
                p=&tmpstr[i];
   820a8:	9100e3e3 	add	x3, sp, #0x38
   820ac:	8b22c062 	add	x2, x3, w2, sxtw
   820b0:	a94153f3 	ldp	x19, x20, [sp, #16]
                goto copystring;
   820b4:	17ffffe0 	b	82034 <vsprintf+0x244>
                arg = __builtin_va_arg(args, int32_t);
   820b8:	11002144 	add	w4, w10, #0x8
   820bc:	7100009f 	cmp	w4, #0x0
   820c0:	5400068d 	b.le	82190 <vsprintf+0x3a0>
   820c4:	91002d25 	add	x5, x9, #0xb
   820c8:	aa0903e2 	mov	x2, x9
   820cc:	2a0403ea 	mov	w10, w4
   820d0:	927df0a9 	and	x9, x5, #0xfffffffffffffff8
   820d4:	17ffffb0 	b	81f94 <vsprintf+0x1a4>
                arg = __builtin_va_arg(args, int64_t);
   820d8:	11002144 	add	w4, w10, #0x8
   820dc:	7100009f 	cmp	w4, #0x0
   820e0:	540005ed 	b.le	8219c <vsprintf+0x3ac>
   820e4:	91003d25 	add	x5, x9, #0xf
   820e8:	aa0903e2 	mov	x2, x9
   820ec:	2a0403ea 	mov	w10, w4
   820f0:	927df0a9 	and	x9, x5, #0xfffffffffffffff8
   820f4:	17ffffdb 	b	82060 <vsprintf+0x270>
                p = __builtin_va_arg(args, char*);
   820f8:	11002143 	add	w3, w10, #0x8
   820fc:	7100007f 	cmp	w3, #0x0
   82100:	5400028d 	b.le	82150 <vsprintf+0x360>
   82104:	91003d24 	add	x4, x9, #0xf
   82108:	aa0903e2 	mov	x2, x9
   8210c:	2a0303ea 	mov	w10, w3
   82110:	927df089 	and	x9, x4, #0xfffffffffffffff8
   82114:	17ffff7d 	b	81f08 <vsprintf+0x118>
                arg = __builtin_va_arg(args, int32_t);
   82118:	8b2ac202 	add	x2, x16, w10, sxtw
   8211c:	2a0303ea 	mov	w10, w3
   82120:	17ffff8a 	b	81f48 <vsprintf+0x158>
                    while(i>18-len) {
   82124:	4b030243 	sub	w3, w18, w3
   82128:	6b0300df 	cmp	w6, w3
   8212c:	54fff7cd 	b.le	82024 <vsprintf+0x234>
                        tmpstr[--i]=' ';
   82130:	9100e3e4 	add	x4, sp, #0x38
   82134:	8b020084 	add	x4, x4, x2
   82138:	d1000442 	sub	x2, x2, #0x1
                    while(i>18-len) {
   8213c:	6b02007f 	cmp	w3, w2
                        tmpstr[--i]=' ';
   82140:	381ff08d 	sturb	w13, [x4, #-1]
                    while(i>18-len) {
   82144:	54ffff6b 	b.lt	82130 <vsprintf+0x340>  // b.tstop
   82148:	93407c62 	sxtw	x2, w3
   8214c:	17ffffb6 	b	82024 <vsprintf+0x234>
                p = __builtin_va_arg(args, char*);
   82150:	8b2ac202 	add	x2, x16, w10, sxtw
   82154:	2a0303ea 	mov	w10, w3
   82158:	17ffff6c 	b	81f08 <vsprintf+0x118>
                    while(i>16-len) {
   8215c:	4b0303c3 	sub	w3, w30, w3
   82160:	6b03005f 	cmp	w2, w3
   82164:	54fffa2d 	b.le	820a8 <vsprintf+0x2b8>
   82168:	93407c42 	sxtw	x2, w2
   8216c:	d503201f 	nop
                        tmpstr[--i]='0';
   82170:	9100e3e4 	add	x4, sp, #0x38
   82174:	8b020084 	add	x4, x4, x2
   82178:	d1000442 	sub	x2, x2, #0x1
                    while(i>16-len) {
   8217c:	6b02007f 	cmp	w3, w2
                        tmpstr[--i]='0';
   82180:	381ff08e 	sturb	w14, [x4, #-1]
                    while(i>16-len) {
   82184:	54ffff6b 	b.lt	82170 <vsprintf+0x380>  // b.tstop
                        tmpstr[--i]='0';
   82188:	2a0303e2 	mov	w2, w3
   8218c:	17ffffc7 	b	820a8 <vsprintf+0x2b8>
                arg = __builtin_va_arg(args, int32_t);
   82190:	8b2ac202 	add	x2, x16, w10, sxtw
   82194:	2a0403ea 	mov	w10, w4
   82198:	17ffff7f 	b	81f94 <vsprintf+0x1a4>
                arg = __builtin_va_arg(args, int64_t);
   8219c:	8b2ac202 	add	x2, x16, w10, sxtw
   821a0:	2a0403ea 	mov	w10, w4
   821a4:	17ffffaf 	b	82060 <vsprintf+0x270>

00000000000821a8 <sprintf>:

/**
 * Variable length arguments
 */
uint32_t sprintf(char *dst, char* fmt, ...)
{
   821a8:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
    __builtin_va_list args;
    __builtin_va_start(args, fmt);
   821ac:	128005e9 	mov	w9, #0xffffffd0            	// #-48
   821b0:	12800fe8 	mov	w8, #0xffffff80            	// #-128
{
   821b4:	910003fd 	mov	x29, sp
    __builtin_va_start(args, fmt);
   821b8:	910343ea 	add	x10, sp, #0xd0
   821bc:	910403eb 	add	x11, sp, #0x100
   821c0:	a9032feb 	stp	x11, x11, [sp, #48]
   821c4:	f90023ea 	str	x10, [sp, #64]
   821c8:	290923e9 	stp	w9, w8, [sp, #72]
    return vsprintf(dst,fmt,args);
   821cc:	a9432fea 	ldp	x10, x11, [sp, #48]
   821d0:	a9012fea 	stp	x10, x11, [sp, #16]
   821d4:	a94427e8 	ldp	x8, x9, [sp, #64]
   821d8:	a90227e8 	stp	x8, x9, [sp, #32]
{
   821dc:	3d8017e0 	str	q0, [sp, #80]
   821e0:	3d801be1 	str	q1, [sp, #96]
   821e4:	3d801fe2 	str	q2, [sp, #112]
   821e8:	3d8023e3 	str	q3, [sp, #128]
   821ec:	3d8027e4 	str	q4, [sp, #144]
   821f0:	3d802be5 	str	q5, [sp, #160]
   821f4:	3d802fe6 	str	q6, [sp, #176]
   821f8:	3d8033e7 	str	q7, [sp, #192]
   821fc:	a90d0fe2 	stp	x2, x3, [sp, #208]
    return vsprintf(dst,fmt,args);
   82200:	910043e2 	add	x2, sp, #0x10
{
   82204:	a90e17e4 	stp	x4, x5, [sp, #224]
   82208:	a90f1fe6 	stp	x6, x7, [sp, #240]
    return vsprintf(dst,fmt,args);
   8220c:	97fffef9 	bl	81df0 <vsprintf>
}
   82210:	a8d07bfd 	ldp	x29, x30, [sp], #256
   82214:	d65f03c0 	ret

0000000000082218 <core2_main>:
#include "headers/project.h"

void core2_main()
{
   82218:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
	*core2_ready = true;
   8221c:	f0009ac0 	adrp	x0, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   82220:	52800021 	mov	w1, #0x1                   	// #1
{
   82224:	910003fd 	mov	x29, sp
	*core2_ready = true;
   82228:	f947d000 	ldr	x0, [x0, #4000]
{
   8222c:	a90153f3 	stp	x19, x20, [sp, #16]
   82230:	90000094 	adrp	x20, 92000 <sd_readblock+0x158>
   82234:	a9025bf5 	stp	x21, x22, [sp, #32]
   82238:	90000093 	adrp	x19, 92000 <sd_readblock+0x158>
   8223c:	90000096 	adrp	x22, 92000 <sd_readblock+0x158>
	*core2_ready = true;
   82240:	39000001 	strb	w1, [x0]
	mmu_init();
   82244:	90000095 	adrp	x21, 92000 <sd_readblock+0x158>
   82248:	9129e2d6 	add	x22, x22, #0xa78
   8224c:	912a82b5 	add	x21, x21, #0xaa0
   82250:	94000288 	bl	82c70 <mmu_init>

	printf("[CORE 2] [INFO] Hello From CORE 2!\n");
   82254:	912b4294 	add	x20, x20, #0xad0
   82258:	90000080 	adrp	x0, 92000 <sd_readblock+0x158>
   8225c:	91228000 	add	x0, x0, #0x8a0
   82260:	97fffb00 	bl	80e60 <printf>
	
	//Core 2 will be playing with the stepper motor!
	
	printf("[CORE 2] [INFO] Setting up gpio pins 5, 6, 13, 19 as outputs\n");
   82264:	912c0273 	add	x19, x19, #0xb00
   82268:	90000080 	adrp	x0, 92000 <sd_readblock+0x158>
   8226c:	91232000 	add	x0, x0, #0x8c8
   82270:	97fffafc 	bl	80e60 <printf>
	gpio_setup(5, GPIO_OUTPUT);
   82274:	52800021 	mov	w1, #0x1                   	// #1
   82278:	528000a0 	mov	w0, #0x5                   	// #5
   8227c:	940003f7 	bl	83258 <gpio_setup>
	gpio_setup(6, GPIO_OUTPUT);
   82280:	52800021 	mov	w1, #0x1                   	// #1
   82284:	528000c0 	mov	w0, #0x6                   	// #6
   82288:	940003f4 	bl	83258 <gpio_setup>
	gpio_setup(13, GPIO_OUTPUT);
   8228c:	52800021 	mov	w1, #0x1                   	// #1
   82290:	528001a0 	mov	w0, #0xd                   	// #13
   82294:	940003f1 	bl	83258 <gpio_setup>
	gpio_setup(19, GPIO_OUTPUT);
   82298:	52800021 	mov	w1, #0x1                   	// #1
   8229c:	52800260 	mov	w0, #0x13                  	// #19
   822a0:	940003ee 	bl	83258 <gpio_setup>
	printf("[CORE 2] [INFO] Finished setting up gpio pins 5, 6, 13, 19 as outputs\n");
   822a4:	90000080 	adrp	x0, 92000 <sd_readblock+0x158>
   822a8:	91242000 	add	x0, x0, #0x908
   822ac:	97fffaed 	bl	80e60 <printf>

	printf("[CORE 2] [INFO] Setting up 4 wire stepper motor on pins 5, 6, 13, 19\n");
   822b0:	90000080 	adrp	x0, 92000 <sd_readblock+0x158>
   822b4:	91254000 	add	x0, x0, #0x950
   822b8:	97fffaea 	bl	80e60 <printf>
	StepperMotor StepperMotor1;
	Stepper4WireInit(2048, 5, 6, 13, 19, &StepperMotor1);
   822bc:	9100e3e5 	add	x5, sp, #0x38
   822c0:	52800264 	mov	w4, #0x13                  	// #19
   822c4:	528001a3 	mov	w3, #0xd                   	// #13
   822c8:	528000c2 	mov	w2, #0x6                   	// #6
   822cc:	528000a1 	mov	w1, #0x5                   	// #5
   822d0:	52810000 	mov	w0, #0x800                 	// #2048
   822d4:	97fffb39 	bl	80fb8 <Stepper4WireInit>
	printf("[CORE 2] [INFO] Finished 4 wire stepper motor setup\n");
   822d8:	90000080 	adrp	x0, 92000 <sd_readblock+0x158>
   822dc:	91266000 	add	x0, x0, #0x998
   822e0:	97fffae0 	bl	80e60 <printf>

	printf("[CORE 2] [INFO] Set stepper motor speed 13rpm\n");
   822e4:	90000080 	adrp	x0, 92000 <sd_readblock+0x158>
   822e8:	91274000 	add	x0, x0, #0x9d0
   822ec:	97fffadd 	bl	80e60 <printf>
	setStepperSpeed(13, &StepperMotor1);
   822f0:	9100e3e1 	add	x1, sp, #0x38
   822f4:	d28001a0 	mov	x0, #0xd                   	// #13
   822f8:	97fffb6e 	bl	810b0 <setStepperSpeed>
	printf("[CORE 2] [INFO] Stepper motor speed set!\n");
   822fc:	90000080 	adrp	x0, 92000 <sd_readblock+0x158>
   82300:	91280000 	add	x0, x0, #0xa00
   82304:	97fffad7 	bl	80e60 <printf>
		
	printf("[CORE 2] [INFO] Starting run stepper motor on pins 5, 6, 13, 19\n");
   82308:	90000080 	adrp	x0, 92000 <sd_readblock+0x158>
   8230c:	9128c000 	add	x0, x0, #0xa30
   82310:	97fffad4 	bl	80e60 <printf>
   82314:	d503201f 	nop

	while(1)
	{
		step(2048, &StepperMotor1);
   82318:	9100e3e1 	add	x1, sp, #0x38
   8231c:	52810000 	mov	w0, #0x800                 	// #2048
   82320:	97fffc78 	bl	81500 <step>
		printf("[CORE 2] [INFO] Revolution Complete\n");
   82324:	aa1603e0 	mov	x0, x22
   82328:	97ffface 	bl	80e60 <printf>
		printf("[CORE 2] [INFO] Starting reverse revolution\n");
   8232c:	aa1503e0 	mov	x0, x21
   82330:	97fffacc 	bl	80e60 <printf>
		step(-2048, &StepperMotor1);
   82334:	9100e3e1 	add	x1, sp, #0x38
   82338:	1280ffe0 	mov	w0, #0xfffff800            	// #-2048
   8233c:	97fffc71 	bl	81500 <step>
		printf("[CORE 2] [INFO] Reverse revolution complete\n");
   82340:	aa1403e0 	mov	x0, x20
   82344:	97fffac7 	bl	80e60 <printf>
		printf("[CORE 2] [INFO] Starting forwards revolution\n");
   82348:	aa1303e0 	mov	x0, x19
   8234c:	97fffac5 	bl	80e60 <printf>
   82350:	17fffff2 	b	82318 <core2_main+0x100>
   82354:	00000000 	.inst	0x00000000 ; undefined

0000000000082358 <uart_init>:

/**
 * Set baud rate and characteristics (115200 8N1) and map to GPIO
 */
void uart_init()
{
   82358:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	
	/* initialize UART */
	*UART0_CR = 0;         // turn off UART0

	/* set up clock for consistent divisor values */
	mailbox[0] = 8*4;
   8235c:	f000aac0 	adrp	x0, 15dd000 <allocated+0xfbdd0>
   82360:	91128001 	add	x1, x0, #0x4a0
{
   82364:	910003fd 	mov	x29, sp
   82368:	a90153f3 	stp	x19, x20, [sp, #16]
	*UART0_CR = 0;         // turn off UART0
   8236c:	d2820613 	mov	x19, #0x1030                	// #4144
   82370:	f2a7e413 	movk	x19, #0x3f20, lsl #16
{
   82374:	f90013f5 	str	x21, [sp, #32]
	mailbox[0] = 8*4;
   82378:	52800402 	mov	w2, #0x20                  	// #32
	*UART0_CR = 0;         // turn off UART0
   8237c:	b900027f 	str	wzr, [x19]
	mailbox[1] = MBOX_REQUEST;
	mailbox[2] = MBOX_TAG_SETCLKRATE; // set clock rate
   82380:	52900043 	mov	w3, #0x8002                	// #32770
	mailbox[0] = 8*4;
   82384:	b904a002 	str	w2, [x0, #1184]
	mailbox[2] = MBOX_TAG_SETCLKRATE; // set clock rate
   82388:	72a00063 	movk	w3, #0x3, lsl #16
	mailbox[1] = MBOX_REQUEST;
   8238c:	b900043f 	str	wzr, [x1, #4]
	mailbox[3] = 12;
   82390:	52800182 	mov	w2, #0xc                   	// #12
	mailbox[2] = MBOX_TAG_SETCLKRATE; // set clock rate
   82394:	b9000823 	str	w3, [x1, #8]
	mailbox[4] = 8;
   82398:	52800100 	mov	w0, #0x8                   	// #8
	mailbox[3] = 12;
   8239c:	b9000c22 	str	w2, [x1, #12]
	mailbox[5] = 2;           // UART clock
	mailbox[6] = 4000000;     // 4Mhz
   823a0:	52812002 	mov	w2, #0x900                 	// #2304
	mailbox[4] = 8;
   823a4:	b9001020 	str	w0, [x1, #16]
	mailbox[5] = 2;           // UART clock
   823a8:	52800054 	mov	w20, #0x2                   	// #2
	mailbox[6] = 4000000;     // 4Mhz
   823ac:	72a007a2 	movk	w2, #0x3d, lsl #16
	mailbox[5] = 2;           // UART clock
   823b0:	b9001434 	str	w20, [x1, #20]
	mailbox[6] = 4000000;     // 4Mhz
   823b4:	b9001822 	str	w2, [x1, #24]
	r&=~((7<<12)|(7<<15)); // gpio14, gpio15
	r|=(4<<12)|(4<<15);    // alt0
	*GPFSEL1 = r;
	*GPPUD = 0;            // enable pins 14 and 15
	wait_cycles(150);
	*GPPUDCLK0 = (1<<14)|(1<<15);
   823b8:	d2801315 	mov	x21, #0x98                  	// #152
	mailbox[7] = MBOX_TAG_LAST;
   823bc:	b9001c3f 	str	wzr, [x1, #28]
	mailbox_call(MBOX_CH_PROP);
   823c0:	94003d78 	bl	919a0 <mailbox_call>
	r=*GPFSEL1;
   823c4:	d2800082 	mov	x2, #0x4                   	// #4
	*GPPUD = 0;            // enable pins 14 and 15
   823c8:	d2801283 	mov	x3, #0x94                  	// #148
	r=*GPFSEL1;
   823cc:	f2a7e402 	movk	x2, #0x3f20, lsl #16
	*GPPUD = 0;            // enable pins 14 and 15
   823d0:	f2a7e403 	movk	x3, #0x3f20, lsl #16
	r|=(4<<12)|(4<<15);    // alt0
   823d4:	52880004 	mov	w4, #0x4000                	// #16384
	*GPPUDCLK0 = (1<<14)|(1<<15);
   823d8:	f2a7e415 	movk	x21, #0x3f20, lsl #16
	r=*GPFSEL1;
   823dc:	b9400041 	ldr	w1, [x2]
	r|=(4<<12)|(4<<15);    // alt0
   823e0:	72a00044 	movk	w4, #0x2, lsl #16
	wait_cycles(150);
   823e4:	528012c0 	mov	w0, #0x96                  	// #150
	r&=~((7<<12)|(7<<15)); // gpio14, gpio15
   823e8:	120e6421 	and	w1, w1, #0xfffc0fff
	r|=(4<<12)|(4<<15);    // alt0
   823ec:	2a040021 	orr	w1, w1, w4
	*GPFSEL1 = r;
   823f0:	b9000041 	str	w1, [x2]
	*GPPUD = 0;            // enable pins 14 and 15
   823f4:	b900007f 	str	wzr, [x3]
	wait_cycles(150);
   823f8:	940003ea 	bl	833a0 <wait_cycles>
	*GPPUDCLK0 = (1<<14)|(1<<15);
   823fc:	52980000 	mov	w0, #0xc000                	// #49152
   82400:	b90002a0 	str	w0, [x21]
	wait_cycles(150);
   82404:	528012c0 	mov	w0, #0x96                  	// #150
   82408:	940003e6 	bl	833a0 <wait_cycles>
	*GPPUDCLK0 = 0;        // flush GPIO setup
   8240c:	b90002bf 	str	wzr, [x21]

	*UART0_ICR = 0x7FF;    // clear interrupts
   82410:	d2820880 	mov	x0, #0x1044                	// #4164
	*UART0_IBRD = 2;       // 115200 baud
   82414:	d2820482 	mov	x2, #0x1024                	// #4132
	*UART0_ICR = 0x7FF;    // clear interrupts
   82418:	f2a7e400 	movk	x0, #0x3f20, lsl #16
	*UART0_IBRD = 2;       // 115200 baud
   8241c:	f2a7e402 	movk	x2, #0x3f20, lsl #16
	*UART0_FBRD = 0xB;
   82420:	d2820501 	mov	x1, #0x1028                	// #4136
	*UART0_ICR = 0x7FF;    // clear interrupts
   82424:	5280ffe3 	mov	w3, #0x7ff                 	// #2047
	*UART0_FBRD = 0xB;
   82428:	f2a7e401 	movk	x1, #0x3f20, lsl #16
	*UART0_LCRH = 0b11<<5; // 8n1
	*UART0_CR = 0x301;     // enable Tx, Rx, FIFO
}
   8242c:	f94013f5 	ldr	x21, [sp, #32]
	*UART0_ICR = 0x7FF;    // clear interrupts
   82430:	b9000003 	str	w3, [x0]
	*UART0_LCRH = 0b11<<5; // 8n1
   82434:	d2820580 	mov	x0, #0x102c                	// #4140
	*UART0_IBRD = 2;       // 115200 baud
   82438:	b9000054 	str	w20, [x2]
	*UART0_LCRH = 0b11<<5; // 8n1
   8243c:	f2a7e400 	movk	x0, #0x3f20, lsl #16
	*UART0_FBRD = 0xB;
   82440:	52800162 	mov	w2, #0xb                   	// #11
   82444:	b9000022 	str	w2, [x1]
	*UART0_LCRH = 0b11<<5; // 8n1
   82448:	52800c01 	mov	w1, #0x60                  	// #96
   8244c:	b9000001 	str	w1, [x0]
	*UART0_CR = 0x301;     // enable Tx, Rx, FIFO
   82450:	52806020 	mov	w0, #0x301                 	// #769
   82454:	b9000260 	str	w0, [x19]
}
   82458:	a94153f3 	ldp	x19, x20, [sp, #16]
   8245c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82460:	d65f03c0 	ret
   82464:	d503201f 	nop

0000000000082468 <uart_send>:
/**
 * Send a character
 */
void uart_send(uint32_t c) {
	/* wait until we can send */
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82468:	d2820302 	mov	x2, #0x1018                	// #4120
   8246c:	f2a7e402 	movk	x2, #0x3f20, lsl #16
   82470:	d503201f 	nop
   82474:	b9400041 	ldr	w1, [x2]
   82478:	372fffc1 	tbnz	w1, #5, 82470 <uart_send+0x8>
	/* write the character to the buffer */
	*UART0_DR=c;
   8247c:	d2820001 	mov	x1, #0x1000                	// #4096
   82480:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   82484:	b9000020 	str	w0, [x1]
}
   82488:	d65f03c0 	ret
   8248c:	d503201f 	nop

0000000000082490 <uart_getc>:
 * Receive a character
 */
char uart_getc() {
	char r;
	/* wait until something is in the buffer */
	do{asm volatile("nop");}while(*UART0_FR&0x10);
   82490:	d2820301 	mov	x1, #0x1018                	// #4120
   82494:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   82498:	d503201f 	nop
   8249c:	b9400020 	ldr	w0, [x1]
   824a0:	3727ffc0 	tbnz	w0, #4, 82498 <uart_getc+0x8>
	/* read it and return */
	r=(char)(*UART0_DR);
   824a4:	d2820000 	mov	x0, #0x1000                	// #4096
	/* convert carrige return to newline */
	return r=='\r'?'\n':r;
   824a8:	52800141 	mov	w1, #0xa                   	// #10
	r=(char)(*UART0_DR);
   824ac:	f2a7e400 	movk	x0, #0x3f20, lsl #16
   824b0:	b9400000 	ldr	w0, [x0]
   824b4:	12001c00 	and	w0, w0, #0xff
	return r=='\r'?'\n':r;
   824b8:	7100341f 	cmp	w0, #0xd
}
   824bc:	1a811000 	csel	w0, w0, w1, ne  // ne = any
   824c0:	d65f03c0 	ret
   824c4:	d503201f 	nop

00000000000824c8 <uart_puts>:

/**
 * Display a string
 */
void uart_puts(char *s) {
	while(*s) {
   824c8:	39400001 	ldrb	w1, [x0]
   824cc:	34000221 	cbz	w1, 82510 <uart_puts+0x48>
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   824d0:	d2820302 	mov	x2, #0x1018                	// #4120
	*UART0_DR=c;
   824d4:	d2820004 	mov	x4, #0x1000                	// #4096
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   824d8:	f2a7e402 	movk	x2, #0x3f20, lsl #16
	*UART0_DR=c;
   824dc:	f2a7e404 	movk	x4, #0x3f20, lsl #16
   824e0:	528001a5 	mov	w5, #0xd                   	// #13
   824e4:	d503201f 	nop
		/* convert newline to carrige return + newline */
		if(*s=='\n')
   824e8:	7100283f 	cmp	w1, #0xa
   824ec:	54000140 	b.eq	82514 <uart_puts+0x4c>  // b.none
			uart_send('\r');
		uart_send(*s++);
   824f0:	38401403 	ldrb	w3, [x0], #1
void uart_send(uint32_t c) {
   824f4:	d503201f 	nop
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   824f8:	d503201f 	nop
   824fc:	b9400041 	ldr	w1, [x2]
   82500:	372fffc1 	tbnz	w1, #5, 824f8 <uart_puts+0x30>
	*UART0_DR=c;
   82504:	b9000083 	str	w3, [x4]
	while(*s) {
   82508:	39400001 	ldrb	w1, [x0]
   8250c:	35fffee1 	cbnz	w1, 824e8 <uart_puts+0x20>
	}
}
   82510:	d65f03c0 	ret
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82514:	d503201f 	nop
   82518:	b9400041 	ldr	w1, [x2]
   8251c:	372fffc1 	tbnz	w1, #5, 82514 <uart_puts+0x4c>
	*UART0_DR=c;
   82520:	b9000085 	str	w5, [x4]
   82524:	17fffff3 	b	824f0 <uart_puts+0x28>

0000000000082528 <uart_hex>:
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82528:	d2820302 	mov	x2, #0x1018                	// #4120
	*UART0_DR=c;
   8252c:	d2820005 	mov	x5, #0x1000                	// #4096
 * Display a binary value in hexadecimal
 */
void uart_hex(uint32_t d) {
	uint32_t n;
	int32_t c;
	for(c=28;c>=0;c-=4) {
   82530:	52800383 	mov	w3, #0x1c                  	// #28
		// get highest tetrad
		n=(d>>c)&0xF;
		// 0-9 => '0'-'9', 10-15 => 'A'-'F'
		n+=n>9?0x37:0x30;
   82534:	528006e7 	mov	w7, #0x37                  	// #55
   82538:	52800606 	mov	w6, #0x30                  	// #48
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   8253c:	f2a7e402 	movk	x2, #0x3f20, lsl #16
	*UART0_DR=c;
   82540:	f2a7e405 	movk	x5, #0x3f20, lsl #16
   82544:	d503201f 	nop
		n=(d>>c)&0xF;
   82548:	1ac32401 	lsr	w1, w0, w3
   8254c:	12000c21 	and	w1, w1, #0xf
		n+=n>9?0x37:0x30;
   82550:	7100243f 	cmp	w1, #0x9
   82554:	1a8680e4 	csel	w4, w7, w6, hi  // hi = pmore
   82558:	0b010084 	add	w4, w4, w1
void uart_send(uint32_t c) {
   8255c:	d503201f 	nop
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82560:	d503201f 	nop
   82564:	b9400041 	ldr	w1, [x2]
   82568:	372fffc1 	tbnz	w1, #5, 82560 <uart_hex+0x38>
	*UART0_DR=c;
   8256c:	b90000a4 	str	w4, [x5]
	for(c=28;c>=0;c-=4) {
   82570:	51001063 	sub	w3, w3, #0x4
   82574:	3100107f 	cmn	w3, #0x4
   82578:	54fffe81 	b.ne	82548 <uart_hex+0x20>  // b.any
		uart_send(n);
	}
}
   8257c:	d65f03c0 	ret

0000000000082580 <uart_dump>:

/**
 * Dump memory
 */
void uart_dump(void *ptr)
{
   82580:	aa0003e7 	mov	x7, x0
	uint64_t a,b,d;
	unsigned char c;
	for(a=(uint64_t)ptr;a<(uint64_t)ptr+512;a+=16) {
   82584:	91080000 	add	x0, x0, #0x200
   82588:	eb07001f 	cmp	x0, x7
   8258c:	54000da9 	b.ls	82740 <uart_dump+0x1c0>  // b.plast
   82590:	910040ed 	add	x13, x7, #0x10
   82594:	d2800409 	mov	x9, #0x20                  	// #32
   82598:	eb0d001f 	cmp	x0, x13
   8259c:	9000008a 	adrp	x10, 92000 <sd_readblock+0x158>
   825a0:	9a9f2529 	csinc	x9, x9, xzr, cs  // cs = hs, nlast
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   825a4:	d2820306 	mov	x6, #0x1018                	// #4120
	*UART0_DR=c;
   825a8:	d2820008 	mov	x8, #0x1000                	// #4096
   825ac:	aa0d03eb 	mov	x11, x13
   825b0:	9122414a 	add	x10, x10, #0x890
   825b4:	8b0910e9 	add	x9, x7, x9, lsl #4
{
   825b8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
		n+=n>9?0x37:0x30;
   825bc:	528006ec 	mov	w12, #0x37                  	// #55
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   825c0:	f2a7e406 	movk	x6, #0x3f20, lsl #16
	*UART0_DR=c;
   825c4:	f2a7e408 	movk	x8, #0x3f20, lsl #16
{
   825c8:	910003fd 	mov	x29, sp
		uart_hex(a); uart_puts(": ");
   825cc:	2a0703e4 	mov	w4, w7
	for(c=28;c>=0;c-=4) {
   825d0:	52800382 	mov	w2, #0x1c                  	// #28
		n+=n>9?0x37:0x30;
   825d4:	52800603 	mov	w3, #0x30                  	// #48
		n=(d>>c)&0xF;
   825d8:	1ac22480 	lsr	w0, w4, w2
   825dc:	12000c00 	and	w0, w0, #0xf
		n+=n>9?0x37:0x30;
   825e0:	7100241f 	cmp	w0, #0x9
   825e4:	1a838181 	csel	w1, w12, w3, hi  // hi = pmore
   825e8:	0b010001 	add	w1, w0, w1
void uart_send(uint32_t c) {
   825ec:	d503201f 	nop
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   825f0:	d503201f 	nop
   825f4:	b94000c0 	ldr	w0, [x6]
   825f8:	372fffc0 	tbnz	w0, #5, 825f0 <uart_dump+0x70>
	*UART0_DR=c;
   825fc:	b9000101 	str	w1, [x8]
	for(c=28;c>=0;c-=4) {
   82600:	51001042 	sub	w2, w2, #0x4
   82604:	3100105f 	cmn	w2, #0x4
   82608:	54fffe81 	b.ne	825d8 <uart_dump+0x58>  // b.any
		uart_hex(a); uart_puts(": ");
   8260c:	aa0a03e0 	mov	x0, x10
   82610:	97ffffae 	bl	824c8 <uart_puts>
		for(b=0;b<16;b++) {
   82614:	d2800002 	mov	x2, #0x0                   	// #0
			c=*((unsigned char*)(a+b));
			d=(uint32_t)c;d>>=4;d&=0xF;d+=d>9?0x37:0x30;uart_send(d);
   82618:	d28006e5 	mov	x5, #0x37                  	// #55
   8261c:	d2800604 	mov	x4, #0x30                  	// #48
	*UART0_DR=c;
   82620:	5280040e 	mov	w14, #0x20                  	// #32
   82624:	d503201f 	nop
			c=*((unsigned char*)(a+b));
   82628:	386268e1 	ldrb	w1, [x7, x2]
			d=(uint32_t)c;d>>=4;d&=0xF;d+=d>9?0x37:0x30;uart_send(d);
   8262c:	d3441c20 	ubfx	x0, x1, #4, #4
   82630:	f100241f 	cmp	x0, #0x9
   82634:	9a8480a3 	csel	x3, x5, x4, hi  // hi = pmore
   82638:	8b000063 	add	x3, x3, x0
void uart_send(uint32_t c) {
   8263c:	d503201f 	nop
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82640:	d503201f 	nop
   82644:	b94000c0 	ldr	w0, [x6]
   82648:	372fffc0 	tbnz	w0, #5, 82640 <uart_dump+0xc0>
	*UART0_DR=c;
   8264c:	12000c20 	and	w0, w1, #0xf
   82650:	b9000103 	str	w3, [x8]
			d=(uint32_t)c;d&=0xF;d+=d>9?0x37:0x30;uart_send(d);
   82654:	7100281f 	cmp	w0, #0xa
   82658:	92401c00 	and	x0, x0, #0xff
   8265c:	9a853081 	csel	x1, x4, x5, cc  // cc = lo, ul, last
   82660:	8b000021 	add	x1, x1, x0
void uart_send(uint32_t c) {
   82664:	d503201f 	nop
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82668:	d503201f 	nop
   8266c:	b94000c0 	ldr	w0, [x6]
   82670:	372fffc0 	tbnz	w0, #5, 82668 <uart_dump+0xe8>
	*UART0_DR=c;
   82674:	b9000101 	str	w1, [x8]
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82678:	d503201f 	nop
   8267c:	b94000c0 	ldr	w0, [x6]
   82680:	372fffc0 	tbnz	w0, #5, 82678 <uart_dump+0xf8>
	*UART0_DR=c;
   82684:	b900010e 	str	w14, [x8]
			uart_send(' ');
			if(b%4==3)
   82688:	92400440 	and	x0, x2, #0x3
   8268c:	f1000c1f 	cmp	x0, #0x3
   82690:	540004a0 	b.eq	82724 <uart_dump+0x1a4>  // b.none
		for(b=0;b<16;b++) {
   82694:	91000442 	add	x2, x2, #0x1
   82698:	f100405f 	cmp	x2, #0x10
   8269c:	54fffc61 	b.ne	82628 <uart_dump+0xa8>  // b.any
   826a0:	aa0703e2 	mov	x2, x7
				uart_send(' ');
		}
		for(b=0;b<16;b++) {
			c=*((unsigned char*)(a+b));
			uart_send(c<32||c>=127?'.':c);
   826a4:	528005c3 	mov	w3, #0x2e                  	// #46
			c=*((unsigned char*)(a+b));
   826a8:	39400041 	ldrb	w1, [x2]
			uart_send(c<32||c>=127?'.':c);
   826ac:	51008020 	sub	w0, w1, #0x20
   826b0:	12001c00 	and	w0, w0, #0xff
   826b4:	71017c1f 	cmp	w0, #0x5f
   826b8:	1a833021 	csel	w1, w1, w3, cc  // cc = lo, ul, last
void uart_send(uint32_t c) {
   826bc:	d503201f 	nop
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   826c0:	d503201f 	nop
   826c4:	b94000c0 	ldr	w0, [x6]
   826c8:	372fffc0 	tbnz	w0, #5, 826c0 <uart_dump+0x140>
	*UART0_DR=c;
   826cc:	b9000101 	str	w1, [x8]
   826d0:	91000442 	add	x2, x2, #0x1
		for(b=0;b<16;b++) {
   826d4:	eb02017f 	cmp	x11, x2
   826d8:	54fffe81 	b.ne	826a8 <uart_dump+0x128>  // b.any
   826dc:	d503201f 	nop
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   826e0:	d503201f 	nop
   826e4:	b94000c0 	ldr	w0, [x6]
   826e8:	372fffc0 	tbnz	w0, #5, 826e0 <uart_dump+0x160>
	*UART0_DR=c;
   826ec:	528001a0 	mov	w0, #0xd                   	// #13
   826f0:	b9000100 	str	w0, [x8]
   826f4:	d503201f 	nop
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   826f8:	d503201f 	nop
   826fc:	b94000c0 	ldr	w0, [x6]
   82700:	372fffc0 	tbnz	w0, #5, 826f8 <uart_dump+0x178>
	*UART0_DR=c;
   82704:	52800140 	mov	w0, #0xa                   	// #10
   82708:	b9000100 	str	w0, [x8]
   8270c:	9100416b 	add	x11, x11, #0x10
	for(a=(uint64_t)ptr;a<(uint64_t)ptr+512;a+=16) {
   82710:	eb0d013f 	cmp	x9, x13
   82714:	aa0d03e7 	mov	x7, x13
   82718:	54000100 	b.eq	82738 <uart_dump+0x1b8>  // b.none
   8271c:	910041ad 	add	x13, x13, #0x10
   82720:	17ffffab 	b	825cc <uart_dump+0x4c>
	do{asm volatile("nop");}while(*UART0_FR&0x20);
   82724:	d503201f 	nop
   82728:	b94000c0 	ldr	w0, [x6]
   8272c:	372fffc0 	tbnz	w0, #5, 82724 <uart_dump+0x1a4>
	*UART0_DR=c;
   82730:	b900010e 	str	w14, [x8]
   82734:	17ffffd8 	b	82694 <uart_dump+0x114>
		}
		uart_send('\r');
		uart_send('\n');
	}
}
   82738:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8273c:	d65f03c0 	ret
   82740:	d65f03c0 	ret
   82744:	00000000 	.inst	0x00000000 ; undefined

0000000000082748 <strlen>:
#include "headers/project.h"

int32_t strlen(char *s)
{
	int32_t i;
	for(i = 0; s[i] != '\0'; i++)
   82748:	39400001 	ldrb	w1, [x0]
   8274c:	34000101 	cbz	w1, 8276c <strlen+0x24>
   82750:	d1000403 	sub	x3, x0, #0x1
   82754:	d2800021 	mov	x1, #0x1                   	// #1
   82758:	2a0103e0 	mov	w0, w1
   8275c:	91000421 	add	x1, x1, #0x1
   82760:	38616862 	ldrb	w2, [x3, x1]
   82764:	35ffffa2 	cbnz	w2, 82758 <strlen+0x10>
	{
		;
	}
	return i;
}
   82768:	d65f03c0 	ret
	for(i = 0; s[i] != '\0'; i++)
   8276c:	52800000 	mov	w0, #0x0                   	// #0
}
   82770:	d65f03c0 	ret
   82774:	d503201f 	nop

0000000000082778 <reverse>:
	for(i = 0; s[i] != '\0'; i++)
   82778:	39400003 	ldrb	w3, [x0]
   8277c:	34000243 	cbz	w3, 827c4 <reverse+0x4c>
   82780:	d2800002 	mov	x2, #0x0                   	// #0
   82784:	d503201f 	nop
   82788:	93407c41 	sxtw	x1, w2
		;
   8278c:	91000442 	add	x2, x2, #0x1
	for(i = 0; s[i] != '\0'; i++)
   82790:	38626804 	ldrb	w4, [x0, x2]
   82794:	35ffffa4 	cbnz	w4, 82788 <reverse+0x10>

void reverse(char s[]) 
{ 
	int32_t c, i, j; 
	for (i = 0, j = strlen(s)-1; i < j; i++, j--)
   82798:	34000161 	cbz	w1, 827c4 <reverse+0x4c>
   8279c:	d2800002 	mov	x2, #0x0                   	// #0
   827a0:	14000002 	b	827a8 <reverse+0x30>
   827a4:	38626803 	ldrb	w3, [x0, x2]
	{ 
		c = s[i]; 
		s[i] = s[j]; 
   827a8:	38616804 	ldrb	w4, [x0, x1]
   827ac:	38226804 	strb	w4, [x0, x2]
		s[j] = c; 
   827b0:	91000442 	add	x2, x2, #0x1
   827b4:	38216803 	strb	w3, [x0, x1]
   827b8:	d1000421 	sub	x1, x1, #0x1
	for (i = 0, j = strlen(s)-1; i < j; i++, j--)
   827bc:	6b02003f 	cmp	w1, w2
   827c0:	54ffff2c 	b.gt	827a4 <reverse+0x2c>
	} 
} 
   827c4:	d65f03c0 	ret

00000000000827c8 <itoa>:

void itoa(int32_t n, char s[]) 
{ 
	int32_t i, sign; 
	if ((sign = n) < 0)  /* record sign */
   827c8:	7100001f 	cmp	w0, #0x0
		n = -n;          /* make n positive */
	} 
	i = 0; 
	do
	{      /* generate digits in reverse order */ 
		s[i++] = n % 10 + '0';  /* get next digit */ 
   827cc:	529999a8 	mov	w8, #0xcccd                	// #52429
   827d0:	5a80a405 	cneg	w5, w0, lt  // lt = tstop
   827d4:	d2800004 	mov	x4, #0x0                   	// #0
   827d8:	72b99988 	movk	w8, #0xcccc, lsl #16
   827dc:	d503201f 	nop
   827e0:	9ba87ca3 	umull	x3, w5, w8
	}
	while ((n /= 10) > 0);    /* delete it */ 
   827e4:	710024bf 	cmp	w5, #0x9
   827e8:	2a0403e7 	mov	w7, w4
		s[i++] = n % 10 + '0';  /* get next digit */ 
   827ec:	11000486 	add	w6, w4, #0x1
   827f0:	d363fc63 	lsr	x3, x3, #35
   827f4:	0b030862 	add	w2, w3, w3, lsl #2
   827f8:	4b0204a2 	sub	w2, w5, w2, lsl #1
	while ((n /= 10) > 0);    /* delete it */ 
   827fc:	2a0303e5 	mov	w5, w3
		s[i++] = n % 10 + '0';  /* get next digit */ 
   82800:	1100c042 	add	w2, w2, #0x30
   82804:	38246822 	strb	w2, [x1, x4]
   82808:	91000484 	add	x4, x4, #0x1
	while ((n /= 10) > 0);    /* delete it */ 
   8280c:	54fffeac 	b.gt	827e0 <itoa+0x18>
   82810:	8b26c022 	add	x2, x1, w6, sxtw
	if (sign < 0)
   82814:	36f800a0 	tbz	w0, #31, 82828 <itoa+0x60>
	{ 
		s[i++] = '-';
   82818:	110008e7 	add	w7, w7, #0x2
   8281c:	528005a0 	mov	w0, #0x2d                  	// #45
   82820:	3826c820 	strb	w0, [x1, w6, sxtw]
   82824:	8b27c022 	add	x2, x1, w7, sxtw
	} 
	s[i] = '\0'; 
   82828:	3900005f 	strb	wzr, [x2]
	for(i = 0; s[i] != '\0'; i++)
   8282c:	39400023 	ldrb	w3, [x1]
   82830:	34000223 	cbz	w3, 82874 <itoa+0xac>
   82834:	d2800002 	mov	x2, #0x0                   	// #0
   82838:	93407c40 	sxtw	x0, w2
		;
   8283c:	91000442 	add	x2, x2, #0x1
	for(i = 0; s[i] != '\0'; i++)
   82840:	38626824 	ldrb	w4, [x1, x2]
   82844:	35ffffa4 	cbnz	w4, 82838 <itoa+0x70>
	for (i = 0, j = strlen(s)-1; i < j; i++, j--)
   82848:	34000160 	cbz	w0, 82874 <itoa+0xac>
   8284c:	d2800002 	mov	x2, #0x0                   	// #0
   82850:	14000002 	b	82858 <itoa+0x90>
   82854:	38626823 	ldrb	w3, [x1, x2]
		s[i] = s[j]; 
   82858:	38606824 	ldrb	w4, [x1, x0]
   8285c:	38226824 	strb	w4, [x1, x2]
		s[j] = c; 
   82860:	91000442 	add	x2, x2, #0x1
   82864:	38206823 	strb	w3, [x1, x0]
   82868:	d1000400 	sub	x0, x0, #0x1
	for (i = 0, j = strlen(s)-1; i < j; i++, j--)
   8286c:	6b02001f 	cmp	w0, w2
   82870:	54ffff2c 	b.gt	82854 <itoa+0x8c>
	reverse(s); 
}
   82874:	d65f03c0 	ret

0000000000082878 <strtok_r>:

char *strtok_r(char *input, char *delim, char **save_ptr)
{
	char no = 0;
        if(input == NULL || delim == NULL || input[0] == '\0' || delim[0] == '\0') return NULL;
   82878:	f100001f 	cmp	x0, #0x0
   8287c:	fa401824 	ccmp	x1, #0x0, #0x4, ne  // ne = any
   82880:	54000440 	b.eq	82908 <strtok_r+0x90>  // b.none
   82884:	39400003 	ldrb	w3, [x0]
   82888:	34000403 	cbz	w3, 82908 <strtok_r+0x90>
   8288c:	39400029 	ldrb	w9, [x1]
   82890:	340003c9 	cbz	w9, 82908 <strtok_r+0x90>
   82894:	aa0003ea 	mov	x10, x0
			no = 0;
                        //I found the delimiter now if multi character delim figure out if this is the one
                        for(int32_t j = 0; delim[j] != '\0'; j++)
                        {
                                i++;
                                if(input[i] != delim[j]) 
   82898:	d1000408 	sub	x8, x0, #0x1
        for(int32_t i = 0; input[i] != '\0'; i++)
   8289c:	52800004 	mov	w4, #0x0                   	// #0
   828a0:	14000005 	b	828b4 <strtok_r+0x3c>
   828a4:	11000484 	add	w4, w4, #0x1
   828a8:	8b24c00a 	add	x10, x0, w4, sxtw
   828ac:	3864c803 	ldrb	w3, [x0, w4, sxtw]
   828b0:	340002c3 	cbz	w3, 82908 <strtok_r+0x90>
                if(input[i] == delim[0])
   828b4:	6b03013f 	cmp	w9, w3
   828b8:	54ffff61 	b.ne	828a4 <strtok_r+0x2c>  // b.any
                                if(input[i] != delim[j]) 
   828bc:	3864c803 	ldrb	w3, [x0, w4, sxtw]
   828c0:	93407c87 	sxtw	x7, w4
   828c4:	6b09007f 	cmp	w3, w9
   828c8:	54fffee1 	b.ne	828a4 <strtok_r+0x2c>  // b.any
   828cc:	11000483 	add	w3, w4, #0x1
   828d0:	cb070027 	sub	x7, x1, x7
   828d4:	93407c63 	sxtw	x3, w3
   828d8:	14000004 	b	828e8 <strtok_r+0x70>
   828dc:	38636906 	ldrb	w6, [x8, x3]
   828e0:	6b0500df 	cmp	w6, w5
   828e4:	54fffe01 	b.ne	828a4 <strtok_r+0x2c>  // b.any
                        for(int32_t j = 0; delim[j] != '\0'; j++)
   828e8:	386368e5 	ldrb	w5, [x7, x3]
   828ec:	2a0303e4 	mov	w4, w3
   828f0:	8b030006 	add	x6, x0, x3
   828f4:	91000463 	add	x3, x3, #0x1
   828f8:	35ffff25 	cbnz	w5, 828dc <strtok_r+0x64>
				}
                        }
			if(no == 0)
			{
				//If I get here it has succseeded
                        	input[save_point] = '\0';
   828fc:	3900015f 	strb	wzr, [x10]
                        	i++;
                        	*save_ptr = &(input[i++]);
   82900:	f9000046 	str	x6, [x2]
                        	return &(input[0]);
			}
                }
        }
        return NULL;
}
   82904:	d65f03c0 	ret
        if(input == NULL || delim == NULL || input[0] == '\0' || delim[0] == '\0') return NULL;
   82908:	d2800000 	mov	x0, #0x0                   	// #0
}
   8290c:	d65f03c0 	ret

0000000000082910 <set_cpu_clock>:
#include "headers/project.h"

void set_cpu_clock(uint32_t clock_rate)
{
	mailbox[0] = 8*4;
   82910:	f000aac2 	adrp	x2, 15dd000 <allocated+0xfbdd0>
   82914:	91128041 	add	x1, x2, #0x4a0
   82918:	52800403 	mov	w3, #0x20                  	// #32
	mailbox[7] = 0;
	mailbox[1] = 0;
	mailbox[2] = 0x00038002;
   8291c:	52900045 	mov	w5, #0x8002                	// #32770
	mailbox[0] = 8*4;
   82920:	b904a043 	str	w3, [x2, #1184]
	mailbox[2] = 0x00038002;
   82924:	72a00065 	movk	w5, #0x3, lsl #16
	mailbox[7] = 0;
   82928:	b9001c3f 	str	wzr, [x1, #28]
	mailbox[3] = 8;
   8292c:	52800102 	mov	w2, #0x8                   	// #8
	mailbox[1] = 0;
   82930:	b900043f 	str	wzr, [x1, #4]
	mailbox[4] = 8;
	mailbox[5] = 3;
   82934:	52800064 	mov	w4, #0x3                   	// #3
	mailbox[2] = 0x00038002;
   82938:	b9000825 	str	w5, [x1, #8]
{
   8293c:	2a0003e3 	mov	w3, w0
	mailbox[3] = 8;
   82940:	b9000c22 	str	w2, [x1, #12]
	mailbox[6] = clock_rate;
	mailbox_tag_write((uint32_t)((uintptr_t)&(mailbox[0])));
   82944:	2a0103e0 	mov	w0, w1
	mailbox[4] = 8;
   82948:	b9001022 	str	w2, [x1, #16]
	mailbox[5] = 3;
   8294c:	b9001424 	str	w4, [x1, #20]
	mailbox[6] = clock_rate;
   82950:	b9001823 	str	w3, [x1, #24]
	mailbox_tag_write((uint32_t)((uintptr_t)&(mailbox[0])));
   82954:	14003c37 	b	91a30 <mailbox_tag_write>

0000000000082958 <get_cpu_clock>:
}

void get_cpu_clock()
{
	;
}
   82958:	d65f03c0 	ret
   8295c:	d503201f 	nop

0000000000082960 <get_cpu_max_clock>:

uint32_t get_cpu_max_clock()
{
   82960:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	mailbox[0] = 8 * 4; //TAG is 0x00030004
   82964:	f000aac0 	adrp	x0, 15dd000 <allocated+0xfbdd0>
   82968:	52800401 	mov	w1, #0x20                  	// #32
{
   8296c:	910003fd 	mov	x29, sp
   82970:	a90153f3 	stp	x19, x20, [sp, #16]
	mailbox[0] = 8 * 4; //TAG is 0x00030004
   82974:	91128013 	add	x19, x0, #0x4a0
	mailbox[7] = 0;
	mailbox[1] = 0;
	mailbox[2] = 0x00038004;
   82978:	52900082 	mov	w2, #0x8004                	// #32772
	mailbox[0] = 8 * 4; //TAG is 0x00030004
   8297c:	b904a001 	str	w1, [x0, #1184]
	mailbox[2] = 0x00038004;
   82980:	72a00062 	movk	w2, #0x3, lsl #16
	mailbox[7] = 0;
   82984:	b9001e7f 	str	wzr, [x19, #28]
        mailbox[3] = 8;
   82988:	52800114 	mov	w20, #0x8                   	// #8
	mailbox[1] = 0;
   8298c:	b900067f 	str	wzr, [x19, #4]
        mailbox[4] = 8;
        mailbox[5] = 3;
   82990:	52800061 	mov	w1, #0x3                   	// #3
	mailbox[2] = 0x00038004;
   82994:	b9000a62 	str	w2, [x19, #8]
        mailbox[6] = 0;
	mailbox_tag_write((uint32_t)((uintptr_t)&(mailbox[0])));
   82998:	2a1303e0 	mov	w0, w19
        mailbox[3] = 8;
   8299c:	b9000e74 	str	w20, [x19, #12]
        mailbox[4] = 8;
   829a0:	b9001274 	str	w20, [x19, #16]
        mailbox[5] = 3;
   829a4:	b9001661 	str	w1, [x19, #20]
        mailbox[6] = 0;
   829a8:	b9001a7f 	str	wzr, [x19, #24]
	mailbox_tag_write((uint32_t)((uintptr_t)&(mailbox[0])));
   829ac:	94003c21 	bl	91a30 <mailbox_tag_write>
	mailbox_tag_read(0x8);
   829b0:	2a1403e0 	mov	w0, w20
   829b4:	94003c29 	bl	91a58 <mailbox_tag_read>

	if(mailbox[1] == 0x80000000)
   829b8:	b9400662 	ldr	w2, [x19, #4]
   829bc:	52b00001 	mov	w1, #0x80000000            	// #-2147483648
   829c0:	52800000 	mov	w0, #0x0                   	// #0
   829c4:	6b01005f 	cmp	w2, w1
   829c8:	54000080 	b.eq	829d8 <get_cpu_max_clock+0x78>  // b.none
	{
		return mailbox[6];
	}

	return 0; //Return 0 on error because returning non-zero is a clock rate!
}
   829cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   829d0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   829d4:	d65f03c0 	ret
		return mailbox[6];
   829d8:	b9401a60 	ldr	w0, [x19, #24]
}
   829dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   829e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   829e4:	d65f03c0 	ret

00000000000829e8 <clocks_init>:

void clocks_init()
{
   829e8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   829ec:	910003fd 	mov	x29, sp
	uint32_t max_clock = get_cpu_max_clock();
   829f0:	97ffffdc 	bl	82960 <get_cpu_max_clock>
	set_cpu_clock(max_clock);
}
   829f4:	a8c17bfd 	ldp	x29, x30, [sp], #16
	set_cpu_clock(max_clock);
   829f8:	17ffffc6 	b	82910 <set_cpu_clock>
   829fc:	00000000 	.inst	0x00000000 ; undefined

0000000000082a00 <setup_servo>:
uint32_t servo_c_servo_pin;

void setup_servo(uint32_t pin)
{
	//Do gpio setup
	servo_c_servo_pin = pin;
   82a00:	f000aac2 	adrp	x2, 15dd000 <allocated+0xfbdd0>
	gpio_setup(pin, GPIO_OUTPUT);
   82a04:	52800021 	mov	w1, #0x1                   	// #1
	servo_c_servo_pin = pin;
   82a08:	b9021c40 	str	w0, [x2, #540]
	gpio_setup(pin, GPIO_OUTPUT);
   82a0c:	14000213 	b	83258 <gpio_setup>

0000000000082a10 <move_servo>:
}
	
void move_servo(uint8_t angle)
{
   82a10:	12001c00 	and	w0, w0, #0xff
   82a14:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	//A servo pulse is expected every 20ms or 20,000us
	uint32_t i = 0;
	i = 13.333333333333 * angle;
   82a18:	90000081 	adrp	x1, 92000 <sd_readblock+0x158>
   82a1c:	1e620000 	scvtf	d0, w0
{
   82a20:	910003fd 	mov	x29, sp
	i = 13.333333333333 * angle;
   82a24:	fd459821 	ldr	d1, [x1, #2864]
{
   82a28:	a90153f3 	stp	x19, x20, [sp, #16]
	gpio_output(servo_c_servo_pin, true);
   82a2c:	f000aad4 	adrp	x20, 15dd000 <allocated+0xfbdd0>
   82a30:	52800021 	mov	w1, #0x1                   	// #1
	i = 13.333333333333 * angle;
   82a34:	1e610800 	fmul	d0, d0, d1
	gpio_output(servo_c_servo_pin, true);
   82a38:	b9421e80 	ldr	w0, [x20, #540]
	i = 13.333333333333 * angle;
   82a3c:	1e790013 	fcvtzu	w19, d0
	gpio_output(servo_c_servo_pin, true);
   82a40:	94000222 	bl	832c8 <gpio_output>
	wait_usec(i); //Goto 0 degrees if 180 is desired use 2400us
   82a44:	2a1303e0 	mov	w0, w19
   82a48:	9400025e 	bl	833c0 <wait_usec>
	gpio_output(servo_c_servo_pin, false);
   82a4c:	b9421e80 	ldr	w0, [x20, #540]
   82a50:	52800001 	mov	w1, #0x0                   	// #0
   82a54:	9400021d 	bl	832c8 <gpio_output>
	wait_usec(15000 - i);
   82a58:	52875300 	mov	w0, #0x3a98                	// #15000
   82a5c:	4b130000 	sub	w0, w0, w19
}
   82a60:	a94153f3 	ldp	x19, x20, [sp, #16]
   82a64:	a8c27bfd 	ldp	x29, x30, [sp], #32
	wait_usec(15000 - i);
   82a68:	14000256 	b	833c0 <wait_usec>
   82a6c:	00000000 	.inst	0x00000000 ; undefined

0000000000082a70 <init_page_table>:
/* Stage3 ... Virtual mapping stage3 (final) ... basic minimum of a single table */
static __attribute__((aligned(4096))) VMSAv8_64_STAGE2_BLOCK_DESCRIPTOR Stage3virtual[512] = { 0 };

void init_page_table (void) {
	uint32_t base = 0;
	uint32_t  __attribute__((aligned(16))) msg[8] =
   82a70:	90000081 	adrp	x1, 92000 <sd_readblock+0x158>
   82a74:	912ce021 	add	x1, x1, #0xb38
void init_page_table (void) {
   82a78:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   82a7c:	910003fd 	mov	x29, sp
	uint32_t  __attribute__((aligned(16))) msg[8] =
   82a80:	a9400c22 	ldp	x2, x3, [x1]
   82a84:	a9010fe2 	stp	x2, x3, [sp, #16]
		8,								// 8 byte response
		0,								// Zero base response
		0,								// Zero size response
		0								// Tag end marker
	};
	if (mailbox_tag_write((uint32_t)(uintptr_t)&msg[0])) 			// Write message to mailbox
   82a88:	110043e0 	add	w0, wsp, #0x10
	uint32_t  __attribute__((aligned(16))) msg[8] =
   82a8c:	a9410c22 	ldp	x2, x3, [x1, #16]
   82a90:	a9020fe2 	stp	x2, x3, [sp, #32]
	if (mailbox_tag_write((uint32_t)(uintptr_t)&msg[0])) 			// Write message to mailbox
   82a94:	94003be7 	bl	91a30 <mailbox_tag_write>
   82a98:	72001c1f 	tst	w0, #0xff
   82a9c:	54000e01 	b.ne	82c5c <init_page_table+0x1ec>  // b.any
		mailbox_tag_read();											// Read the status back
	msg[5] /= 0x200000;												// 2MB block to VC base addr
   82aa0:	b94027e2 	ldr	w2, [sp, #36]
   82aa4:	90009b01 	adrp	x1, 13e2000 <Stage2map1to1>

	// initialize 1:1 mapping for TTBR0
	/* The 21-12 entries are because that is only for 4K granual it makes it obvious to change for other granual sizes */

	/* Ram from 0 to VC base addr*/
	for (base = 0; base < msg[5] - 1; base++) {
   82aa8:	d2800000 	mov	x0, #0x0                   	// #0
   82aac:	91000021 	add	x1, x1, #0x0
   82ab0:	52800004 	mov	w4, #0x0                   	// #0
		// Each block descriptor (2 MB)
		Stage2map1to1[base] = (VMSAv8_64_STAGE2_BLOCK_DESCRIPTOR) 
   82ab4:	5280e226 	mov	w6, #0x711                 	// #1809
	msg[5] /= 0x200000;												// 2MB block to VC base addr
   82ab8:	53157c42 	lsr	w2, w2, #21
	for (base = 0; base < msg[5] - 1; base++) {
   82abc:	71000442 	subs	w2, w2, #0x1
   82ac0:	54000200 	b.eq	82b00 <init_page_table+0x90>  // b.none
   82ac4:	d503201f 	nop
		Stage2map1to1[base] = (VMSAv8_64_STAGE2_BLOCK_DESCRIPTOR) 
   82ac8:	2a0403e3 	mov	w3, w4
	for (base = 0; base < msg[5] - 1; base++) {
   82acc:	11000484 	add	w4, w4, #0x1
   82ad0:	6b02009f 	cmp	w4, w2
   82ad4:	d37df065 	lsl	x5, x3, #3
		Stage2map1to1[base] = (VMSAv8_64_STAGE2_BLOCK_DESCRIPTOR) 
   82ad8:	f823783f 	str	xzr, [x1, x3, lsl #3]
   82adc:	78256826 	strh	w6, [x1, x5]
   82ae0:	f8637825 	ldr	x5, [x1, x3, lsl #3]
   82ae4:	b3748c05 	bfi	x5, x0, #12, #36
   82ae8:	f8237825 	str	x5, [x1, x3, lsl #3]
   82aec:	91080000 	add	x0, x0, #0x200
   82af0:	92408c00 	and	x0, x0, #0xfffffffff
	for (base = 0; base < msg[5] - 1; base++) {
   82af4:	54fffea1 	b.ne	82ac8 <init_page_table+0x58>  // b.any
			.MemAttr = MT_NORMAL, .EntryType = 1,
		};
	}

	/* VC ram up to 0x3F000000 */
	for (; base < 512 - 8; base++) {
   82af8:	7107dc5f 	cmp	w2, #0x1f7
   82afc:	54000b48 	b.hi	82c64 <init_page_table+0x1f4>  // b.pmore
   82b00:	2a0203e0 	mov	w0, w2
		// Each block descriptor (2 MB)
		Stage2map1to1[base] = (VMSAv8_64_STAGE2_BLOCK_DESCRIPTOR) { 
   82b04:	528081a5 	mov	w5, #0x40d                 	// #1037
   82b08:	d3776803 	ubfiz	x3, x0, #9, #27
   82b0c:	d503201f 	nop
   82b10:	d37df004 	lsl	x4, x0, #3
   82b14:	f820783f 	str	xzr, [x1, x0, lsl #3]
	for (; base < 512 - 8; base++) {
   82b18:	11000442 	add	w2, w2, #0x1
   82b1c:	7107e05f 	cmp	w2, #0x1f8
		Stage2map1to1[base] = (VMSAv8_64_STAGE2_BLOCK_DESCRIPTOR) { 
   82b20:	78246825 	strh	w5, [x1, x4]
   82b24:	f8607824 	ldr	x4, [x1, x0, lsl #3]
   82b28:	b3748c64 	bfi	x4, x3, #12, #36
   82b2c:	f8207824 	str	x4, [x1, x0, lsl #3]
   82b30:	91080063 	add	x3, x3, #0x200
   82b34:	2a0203e0 	mov	w0, w2
   82b38:	92408c63 	and	x3, x3, #0xfffffffff
	for (; base < 512 - 8; base++) {
   82b3c:	54fffea1 	b.ne	82b10 <init_page_table+0xa0>  // b.any
   82b40:	2a0203e0 	mov	w0, w2

	/* 16 MB peripherals at 0x3F000000 - 0x40000000*/
	for (; base < 512; base++) 
	{
		// Each block descriptor (2 MB)
		Stage2map1to1[base] = (VMSAv8_64_STAGE2_BLOCK_DESCRIPTOR) { 
   82b44:	52808025 	mov	w5, #0x401                 	// #1025
   82b48:	d3776803 	ubfiz	x3, x0, #9, #27
   82b4c:	d503201f 	nop
   82b50:	d37df004 	lsl	x4, x0, #3
   82b54:	f820783f 	str	xzr, [x1, x0, lsl #3]
	for (; base < 512; base++) 
   82b58:	11000442 	add	w2, w2, #0x1
   82b5c:	7108005f 	cmp	w2, #0x200
		Stage2map1to1[base] = (VMSAv8_64_STAGE2_BLOCK_DESCRIPTOR) { 
   82b60:	78246825 	strh	w5, [x1, x4]
   82b64:	f8607824 	ldr	x4, [x1, x0, lsl #3]
   82b68:	b3748c64 	bfi	x4, x3, #12, #36
   82b6c:	f8207824 	str	x4, [x1, x0, lsl #3]
   82b70:	91080063 	add	x3, x3, #0x200
   82b74:	2a0203e0 	mov	w0, w2
   82b78:	92408c63 	and	x3, x3, #0xfffffffff
	for (; base < 512; base++) 
   82b7c:	54fffea1 	b.ne	82b50 <init_page_table+0xe0>  // b.any
		};
	}
	
	// 2 MB for mailboxes at 0x40000000
	// shared device, never execute
	Stage2map1to1[512] = (VMSAv8_64_STAGE2_BLOCK_DESCRIPTOR) { 
   82b80:	d2808023 	mov	x3, #0x401                 	// #1025
   82b84:	b0009b00 	adrp	x0, 13e3000 <Stage2map1to1+0x1000>
   82b88:	91400822 	add	x2, x1, #0x2, lsl #12
   82b8c:	91002000 	add	x0, x0, #0x8
   82b90:	f2a80003 	movk	x3, #0x4000, lsl #16
   82b94:	f9080023 	str	x3, [x1, #4096]
		.EntryType = 1,
	};

	// unused up to 0x7FFFFFFF
	for (base = 513; base < 1024; base++) {
		Stage2map1to1[base].Raw64 = 0;
   82b98:	f800841f 	str	xzr, [x0], #8
	for (base = 513; base < 1024; base++) {
   82b9c:	eb00005f 	cmp	x2, x0
   82ba0:	54ffffc1 	b.ne	82b98 <init_page_table+0x128>  // b.any
	}

	// Just 2 valid entries mapping the 2GB in stage2
	Stage1map1to1[0] = (VMSAv8_64_NEXTLEVEL_DESCRIPTOR) { 
   82ba4:	d0009b05 	adrp	x5, 13e4000 <Stage1map1to1>
   82ba8:	910000a4 	add	x4, x5, #0x0
		.Address = (uintptr_t)&Stage2map1to1[0] >> 12, 
		.EntryType = 3,
	};
	Stage1map1to1[1] = (VMSAv8_64_NEXTLEVEL_DESCRIPTOR) { 
		.NSTable = 1, 
		.Address = (uintptr_t)&Stage2map1to1[512] >> 12, 
   82bac:	b0009b03 	adrp	x3, 13e3000 <Stage2map1to1+0x1000>
   82bb0:	91000063 	add	x3, x3, #0x0
	Stage1map1to1[0] = (VMSAv8_64_NEXTLEVEL_DESCRIPTOR) { 
   82bb4:	92748c21 	and	x1, x1, #0xfffffffff000
	Stage1map1to1[1] = (VMSAv8_64_NEXTLEVEL_DESCRIPTOR) { 
   82bb8:	92748c63 	and	x3, x3, #0xfffffffff000
   82bbc:	d0009b00 	adrp	x0, 13e4000 <Stage1map1to1>
   82bc0:	91400482 	add	x2, x4, #0x1, lsl #12
   82bc4:	91004000 	add	x0, x0, #0x10
	Stage1map1to1[0] = (VMSAv8_64_NEXTLEVEL_DESCRIPTOR) { 
   82bc8:	b2410821 	orr	x1, x1, #0x8000000000000003
	Stage1map1to1[1] = (VMSAv8_64_NEXTLEVEL_DESCRIPTOR) { 
   82bcc:	b2410863 	orr	x3, x3, #0x8000000000000003
	Stage1map1to1[0] = (VMSAv8_64_NEXTLEVEL_DESCRIPTOR) { 
   82bd0:	f90000a1 	str	x1, [x5]
	Stage1map1to1[1] = (VMSAv8_64_NEXTLEVEL_DESCRIPTOR) { 
   82bd4:	f9000483 	str	x3, [x4, #8]
		.EntryType = 3,
	};
	
	// All the rest of L2 entries are empty 
	for (int i = 2; i < 512; i++) {
		Stage1map1to1[i].Raw64 = 0;
   82bd8:	f800841f 	str	xzr, [x0], #8
	for (int i = 2; i < 512; i++) {
   82bdc:	eb00005f 	cmp	x2, x0
   82be0:	54ffffc1 	b.ne	82bd8 <init_page_table+0x168>  // b.any
   82be4:	b0009ae3 	adrp	x3, 13df000 <Stage3virtual>
   82be8:	91000063 	add	x3, x3, #0x0
   82bec:	aa0303e0 	mov	x0, x3
   82bf0:	91400461 	add	x1, x3, #0x1, lsl #12
   82bf4:	d503201f 	nop
	// initialize virtual mapping for TTBR1 .. basic 1 page  .. 512 entries x 4096
	// 2MB of ram memory memory  0xFFFFFFFFFFE00000 to 0xFFFFFFFFFFFFFFFF
	
	// Initially no valid entry maps in 512 entries in Stage3 virtual table we will add them via virtualmap call
	for (int i = 0; i < 512; i++) {
		Stage3virtual[i].Raw64 = 0;
   82bf8:	f800841f 	str	xzr, [x0], #8
	for (int i = 0; i < 512; i++) {
   82bfc:	eb00003f 	cmp	x1, x0
   82c00:	54ffffc1 	b.ne	82bf8 <init_page_table+0x188>  // b.any
	}

	// Stage2 virtual has just 1 valid entry (the last) of the 512 entries pointing to the Stage3 virtual table
	Stage2virtual[511] = (VMSAv8_64_NEXTLEVEL_DESCRIPTOR) { 
   82c04:	d0009ae2 	adrp	x2, 13e0000 <Stage2virtual>
   82c08:	91000042 	add	x2, x2, #0x0
   82c0c:	92748c63 	and	x3, x3, #0xfffffffff000
   82c10:	aa0203e0 	mov	x0, x2
   82c14:	913fe041 	add	x1, x2, #0xff8
   82c18:	b2410863 	orr	x3, x3, #0x8000000000000003
   82c1c:	f907fc43 	str	x3, [x2, #4088]
		.NSTable = 1, 
		.Address = (uintptr_t)&Stage3virtual[0] >> 12, 
		.EntryType = 3,
	};
	for (int i = 0; i < 511; i++) {
		Stage2virtual[i].Raw64 = 0;
   82c20:	f800841f 	str	xzr, [x0], #8
	for (int i = 0; i < 511; i++) {
   82c24:	eb00003f 	cmp	x1, x0
   82c28:	54ffffc1 	b.ne	82c20 <init_page_table+0x1b0>  // b.any
	}

	// Stage1 virtual has just 1 valid entry (the last) of 512 entries pointing to the Stage2 virtual table
	Stage1virtual[511] = (VMSAv8_64_NEXTLEVEL_DESCRIPTOR) { 
   82c2c:	f0009ae3 	adrp	x3, 13e1000 <Stage1virtual>
   82c30:	91000063 	add	x3, x3, #0x0
   82c34:	92748c42 	and	x2, x2, #0xfffffffff000
   82c38:	aa0303e0 	mov	x0, x3
   82c3c:	913fe061 	add	x1, x3, #0xff8
   82c40:	b2410842 	orr	x2, x2, #0x8000000000000003
   82c44:	f907fc62 	str	x2, [x3, #4088]
		.NSTable = 1, 
		.Address = (uintptr_t)&Stage2virtual[0] >> 12, 
		.EntryType = 3,
	};
	for (int i = 0; i < 511; i++) {
		Stage1virtual[i].Raw64 = 0;
   82c48:	f800841f 	str	xzr, [x0], #8
	for (int i = 0; i < 511; i++) {
   82c4c:	eb00003f 	cmp	x1, x0
   82c50:	54ffffc1 	b.ne	82c48 <init_page_table+0x1d8>  // b.any
	}

}
   82c54:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82c58:	d65f03c0 	ret
		mailbox_tag_read();											// Read the status back
   82c5c:	94003b7f 	bl	91a58 <mailbox_tag_read>
   82c60:	17ffff90 	b	82aa0 <init_page_table+0x30>
	for (; base < 512; base++) 
   82c64:	7107fc5f 	cmp	w2, #0x1ff
   82c68:	54fff8c8 	b.hi	82b80 <init_page_table+0x110>  // b.pmore
   82c6c:	17ffffb5 	b	82b40 <init_page_table+0xd0>

0000000000082c70 <mmu_init>:

static void set_ttbr_tcr_mair (int el, void* table, void* table1, uint64_t tcr, uint64_t attr)
{
	asm volatile("dsb sy");
   82c70:	d5033f9f 	dsb	sy
	if (el == 1) {
		asm volatile("msr ttbr0_el1, %0" : : "r" (table) : "memory");
   82c74:	d0009b00 	adrp	x0, 13e4000 <Stage1map1to1>
   82c78:	91000000 	add	x0, x0, #0x0
   82c7c:	d5182000 	msr	ttbr0_el1, x0
		asm volatile("msr ttbr1_el1, %0" : : "r" (table1) : "memory");
   82c80:	f0009ae0 	adrp	x0, 13e1000 <Stage1virtual>
   82c84:	91000000 	add	x0, x0, #0x0
   82c88:	d5182020 	msr	ttbr1_el1, x0
		asm volatile("msr tcr_el1, %0" : : "r" (tcr) : "memory");
   82c8c:	d286a320 	mov	x0, #0x3519                	// #13593
   82c90:	f2b6a320 	movk	x0, #0xb519, lsl #16
   82c94:	d5182040 	msr	tcr_el1, x0
		asm volatile("msr mair_el1, %0" : : "r" (attr) : "memory");
   82c98:	d2808000 	mov	x0, #0x400                 	// #1024
   82c9c:	f2a88180 	movk	x0, #0x440c, lsl #16
   82ca0:	f2d77fe0 	movk	x0, #0xbbff, lsl #32
   82ca4:	d518a200 	msr	mair_el1, x0
		asm volatile("msr mair_el3, %0" : : "r" (attr) : "memory");
	}
	else {
		while (1); // hang ... we have a problem
	}
	asm volatile("isb");
   82ca8:	d5033fdf 	isb
		(1 << 4) |   // SA0, tack Alignment Check Enable for EL0
		(1 << 3) |   // SA, Stack Alignment Check Enable
		(1 << 2) |   // C, Data cache enable. This is an enable bit for data caches at EL0 and EL1
		(1 << 1) |   // A, Alignment check enable bit
		(1 << 0);     // set M, enable MMU
	asm volatile ("msr sctlr_el1, %0; isb" : : "r" (r));
   82cac:	d28303e0 	mov	x0, #0x181f                	// #6175
   82cb0:	f2a01800 	movk	x0, #0xc0, lsl #16
   82cb4:	d5181000 	msr	sctlr_el1, x0
   82cb8:	d5033fdf 	isb

}
   82cbc:	d65f03c0 	ret

0000000000082cc0 <virtualmap>:


uint64_t virtualmap (uint32_t phys_addr, uint8_t memattrs) {
	uint64_t addr = 0;
	for (int i = 0; i < 512; i++)
   82cc0:	b0009ae4 	adrp	x4, 13df000 <Stage3virtual>
uint64_t virtualmap (uint32_t phys_addr, uint8_t memattrs) {
   82cc4:	12001c21 	and	w1, w1, #0xff
   82cc8:	91000084 	add	x4, x4, #0x0
   82ccc:	d2800002 	mov	x2, #0x0                   	// #0
   82cd0:	14000002 	b	82cd8 <virtualmap+0x18>
	for (int i = 0; i < 512; i++)
   82cd4:	54000320 	b.eq	82d38 <virtualmap+0x78>  // b.none
	{
		if (Stage3virtual[i].Raw64 == 0) {							// Find the first vacant stage3 table slot
   82cd8:	f8627883 	ldr	x3, [x4, x2, lsl #3]
   82cdc:	2a0203e5 	mov	w5, w2
   82ce0:	91000442 	add	x2, x2, #0x1
	for (int i = 0; i < 512; i++)
   82ce4:	f108005f 	cmp	x2, #0x200
		if (Stage3virtual[i].Raw64 == 0) {							// Find the first vacant stage3 table slot
   82ce8:	b5ffff63 	cbnz	x3, 82cd4 <virtualmap+0x14>
			uint64_t offset;
			Stage3virtual[i] = (VMSAv8_64_STAGE2_BLOCK_DESCRIPTOR) { .Address = (uintptr_t)phys_addr << (21 - 12), .AF = 1, .MemAttr = memattrs, .EntryType = 3 };
   82cec:	93407ca2 	sxtw	x2, w5
   82cf0:	52800066 	mov	w6, #0x3                   	// #3
   82cf4:	331e0c26 	bfi	w6, w1, #2, #4
   82cf8:	d3777c00 	ubfiz	x0, x0, #9, #32
   82cfc:	d37df041 	lsl	x1, x2, #3
   82d00:	8b010083 	add	x3, x4, x1
   82d04:	f822789f 	str	xzr, [x4, x2, lsl #3]
   82d08:	38216886 	strb	w6, [x4, x1]
   82d0c:	39400461 	ldrb	w1, [x3, #1]
   82d10:	321e0021 	orr	w1, w1, #0x4
   82d14:	39000461 	strb	w1, [x3, #1]
   82d18:	f8627881 	ldr	x1, [x4, x2, lsl #3]
   82d1c:	b3748c01 	bfi	x1, x0, #12, #36
   82d20:	f8227881 	str	x1, [x4, x2, lsl #3]
			asm volatile ("dmb sy" ::: "memory");
   82d24:	d5033fbf 	dmb	sy
			offset = ((512 - i) * 4096) - 1;
   82d28:	53144ca0 	lsl	w0, w5, #12
			addr = 0xFFFFFFFFFFFFFFFFul;
			addr = addr - offset;
   82d2c:	51480000 	sub	w0, w0, #0x200, lsl #12
   82d30:	93407c00 	sxtw	x0, w0
			return(addr);
		}
	}
	return (addr);													// error
}
   82d34:	d65f03c0 	ret
	return (addr);													// error
   82d38:	d2800000 	mov	x0, #0x0                   	// #0
}
   82d3c:	d65f03c0 	ret

0000000000082d40 <console_init>:

char *console_rollback_buffer;
psf_t *font;

void console_init()
{
   82d40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	//Need to allocate memory
	//lfb_init needs to be called before this will work properly
	font = (psf_t*)&_binary_src_font_font_psf_start;
   82d44:	900000a1 	adrp	x1, 96000 <sd_init+0x3ce8>
   82d48:	9129e021 	add	x1, x1, #0xa78
{
   82d4c:	910003fd 	mov	x29, sp
   82d50:	a90153f3 	stp	x19, x20, [sp, #16]
	console_rollback_buffer = malloc((lfb_width / font->width) * (lfb_height / font->height) + 1);
   82d54:	f0009b14 	adrp	x20, 13e5000 <core_state>
   82d58:	f0009b13 	adrp	x19, 13e5000 <core_state>
   82d5c:	b9401c24 	ldr	w4, [x1, #28]
   82d60:	b9421a62 	ldr	w2, [x19, #536]
   82d64:	b9401823 	ldr	w3, [x1, #24]
   82d68:	b9421e80 	ldr	w0, [x20, #540]
{
   82d6c:	f90013f5 	str	x21, [sp, #32]
	font = (psf_t*)&_binary_src_font_font_psf_start;
   82d70:	f000aad5 	adrp	x21, 15dd000 <allocated+0xfbdd0>
   82d74:	f90116a1 	str	x1, [x21, #552]
	console_rollback_buffer = malloc((lfb_width / font->width) * (lfb_height / font->height) + 1);
   82d78:	1ac40800 	udiv	w0, w0, w4
   82d7c:	1ac30841 	udiv	w1, w2, w3
   82d80:	1b017c00 	mul	w0, w0, w1
   82d84:	11000400 	add	w0, w0, #0x1
   82d88:	94003942 	bl	91290 <malloc>
	{
		;//Eventually raise error
	}
	//Yay we now have the allocated memory
	//Now we have that memory we can initialise the array to 255 because lfb_print ignores it
	for(uint64_t i = 0; i < (lfb_width / font->width) * (lfb_height / font->height); i++)
   82d8c:	f94116a3 	ldr	x3, [x21, #552]
	console_rollback_buffer = malloc((lfb_width / font->width) * (lfb_height / font->height) + 1);
   82d90:	f000aac8 	adrp	x8, 15dd000 <allocated+0xfbdd0>
	for(uint64_t i = 0; i < (lfb_width / font->width) * (lfb_height / font->height); i++)
   82d94:	b9421e81 	ldr	w1, [x20, #540]
   82d98:	b9421a62 	ldr	w2, [x19, #536]
   82d9c:	29430c64 	ldp	w4, w3, [x3, #24]
	console_rollback_buffer = malloc((lfb_width / font->width) * (lfb_height / font->height) + 1);
   82da0:	f9011100 	str	x0, [x8, #544]
	for(uint64_t i = 0; i < (lfb_width / font->width) * (lfb_height / font->height); i++)
   82da4:	1ac40842 	udiv	w2, w2, w4
   82da8:	1ac30821 	udiv	w1, w1, w3
   82dac:	1b027c21 	mul	w1, w1, w2
   82db0:	34000301 	cbz	w1, 82e10 <console_init+0xd0>
   82db4:	9108a2a7 	add	x7, x21, #0x228
   82db8:	91087286 	add	x6, x20, #0x21c
   82dbc:	91086265 	add	x5, x19, #0x218
   82dc0:	d2800002 	mov	x2, #0x0                   	// #0
	{
		console_rollback_buffer[i] = 255;
   82dc4:	12800009 	mov	w9, #0xffffffff            	// #-1
   82dc8:	38226809 	strb	w9, [x0, x2]
	for(uint64_t i = 0; i < (lfb_width / font->width) * (lfb_height / font->height); i++)
   82dcc:	91000442 	add	x2, x2, #0x1
   82dd0:	f94000e3 	ldr	x3, [x7]
   82dd4:	b94000a0 	ldr	w0, [x5]
   82dd8:	b94000c1 	ldr	w1, [x6]
   82ddc:	29430c64 	ldp	w4, w3, [x3, #24]
   82de0:	1ac40800 	udiv	w0, w0, w4
   82de4:	1ac30821 	udiv	w1, w1, w3
   82de8:	1b007c21 	mul	w1, w1, w0
   82dec:	f9411100 	ldr	x0, [x8, #544]
   82df0:	eb21405f 	cmp	x2, w1, uxtw
   82df4:	54fffea3 	b.cc	82dc8 <console_init+0x88>  // b.lo, b.ul, b.last
   82df8:	11000421 	add	w1, w1, #0x1
	}
	console_rollback_buffer[(lfb_width / font->width) * (lfb_height / font->height) + 1] = '\0';
   82dfc:	3821681f 	strb	wzr, [x0, x1]
	//We are done here!
}
   82e00:	a94153f3 	ldp	x19, x20, [sp, #16]
   82e04:	f94013f5 	ldr	x21, [sp, #32]
   82e08:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82e0c:	d65f03c0 	ret
	for(uint64_t i = 0; i < (lfb_width / font->width) * (lfb_height / font->height); i++)
   82e10:	d2800021 	mov	x1, #0x1                   	// #1
	console_rollback_buffer[(lfb_width / font->width) * (lfb_height / font->height) + 1] = '\0';
   82e14:	3821681f 	strb	wzr, [x0, x1]
}
   82e18:	a94153f3 	ldp	x19, x20, [sp, #16]
   82e1c:	f94013f5 	ldr	x21, [sp, #32]
   82e20:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82e24:	d65f03c0 	ret

0000000000082e28 <console_print>:

void console_print(char *input)
{
   82e28:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   82e2c:	910003fd 	mov	x29, sp
   82e30:	a90363f7 	stp	x23, x24, [sp, #48]
	//be shifted left to right by the input length
	//
	//I also need to take into account once the number of newline characters already in the array
	//lfb_print ignores anything that is a 255 so anything that should't be taken into consideration
	//by lfb_print shall be set to a 255
	uint16_t number_of_lines = (lfb_height / font->height);	
   82e34:	f000aad7 	adrp	x23, 15dd000 <allocated+0xfbdd0>
{
   82e38:	a90153f3 	stp	x19, x20, [sp, #16]
   82e3c:	aa0003f3 	mov	x19, x0
   82e40:	a9025bf5 	stp	x21, x22, [sp, #32]
   82e44:	a9046bf9 	stp	x25, x26, [sp, #64]
	uint64_t input_length = strlen(input);
   82e48:	97fffe40 	bl	82748 <strlen>
	uint16_t number_of_lines = (lfb_height / font->height);	
   82e4c:	f0009b19 	adrp	x25, 13e5000 <core_state>
   82e50:	f94116e1 	ldr	x1, [x23, #552]
	uint64_t input_length = strlen(input);
   82e54:	93407c00 	sxtw	x0, w0
	uint16_t number_of_lines = (lfb_height / font->height);	
   82e58:	b9421b23 	ldr	w3, [x25, #536]
   82e5c:	b9401825 	ldr	w5, [x1, #24]
   82e60:	1ac50867 	udiv	w7, w3, w5
	//If there are more well they need to be removed along with all previous characters so they 
	//need to be set to the value 255
	//
	//There always needs to be checking that I am not allocating to a negative array index
	
	for(int64_t i = 1; i <= input_length; i++) //I need to shift everything by the input_length
   82e64:	b4001b20 	cbz	x0, 831c8 <console_print+0x3a0>
   82e68:	f0009b18 	adrp	x24, 13e5000 <core_state>
   82e6c:	b9401c24 	ldr	w4, [x1, #28]
   82e70:	f000aada 	adrp	x26, 15dd000 <allocated+0xfbdd0>
   82e74:	2a0703e3 	mov	w3, w7
   82e78:	b9421f01 	ldr	w1, [x24, #540]
   82e7c:	91087316 	add	x22, x24, #0x21c
   82e80:	aa1a03ea 	mov	x10, x26
   82e84:	91000409 	add	x9, x0, #0x1
   82e88:	9108a2f5 	add	x21, x23, #0x228
   82e8c:	91086334 	add	x20, x25, #0x218
   82e90:	d2800028 	mov	x8, #0x1                   	// #1
   82e94:	1ac40821 	udiv	w1, w1, w4
	{
		for(int64_t j = 1; j < (lfb_width / font->width) * (lfb_height / font->height); j++)
   82e98:	1b017c64 	mul	w4, w3, w1
   82e9c:	2a0103e5 	mov	w5, w1
   82ea0:	d2800022 	mov	x2, #0x1                   	// #1
   82ea4:	91088146 	add	x6, x10, #0x220
   82ea8:	7100049f 	cmp	w4, #0x1
   82eac:	54000209 	b.ls	82eec <console_print+0xc4>  // b.plast
		{
			console_rollback_buffer[j-1] = console_rollback_buffer[j];
   82eb0:	f94000c1 	ldr	x1, [x6]
   82eb4:	8b020023 	add	x3, x1, x2
   82eb8:	38626821 	ldrb	w1, [x1, x2]
		for(int64_t j = 1; j < (lfb_width / font->width) * (lfb_height / font->height); j++)
   82ebc:	91000442 	add	x2, x2, #0x1
			console_rollback_buffer[j-1] = console_rollback_buffer[j];
   82ec0:	381ff061 	sturb	w1, [x3, #-1]
		for(int64_t j = 1; j < (lfb_width / font->width) * (lfb_height / font->height); j++)
   82ec4:	f94002a4 	ldr	x4, [x21]
   82ec8:	b9400283 	ldr	w3, [x20]
   82ecc:	b94002c1 	ldr	w1, [x22]
   82ed0:	29431085 	ldp	w5, w4, [x4, #24]
   82ed4:	1ac50863 	udiv	w3, w3, w5
   82ed8:	1ac40821 	udiv	w1, w1, w4
   82edc:	1b017c64 	mul	w4, w3, w1
   82ee0:	2a0103e5 	mov	w5, w1
   82ee4:	eb02009f 	cmp	x4, x2
   82ee8:	54fffe4c 	b.gt	82eb0 <console_print+0x88>
	for(int64_t i = 1; i <= input_length; i++) //I need to shift everything by the input_length
   82eec:	91000508 	add	x8, x8, #0x1
   82ef0:	eb09011f 	cmp	x8, x9
   82ef4:	54fffd21 	b.ne	82e98 <console_print+0x70>  // b.any
		}
	}
	
	int64_t j = input_length;
	for(int64_t i = (lfb_width / font->width) * (lfb_height / font->height); (i > 0 || i == 0) && (j > 0 || j == 0); i--)
   82ef8:	b7f80220 	tbnz	x0, #63, 82f3c <console_print+0x114>
   82efc:	cb040000 	sub	x0, x0, x4
   82f00:	f000aac6 	adrp	x6, 15dd000 <allocated+0xfbdd0>
	{
		console_rollback_buffer[i] = input[j];
   82f04:	8b000273 	add	x19, x19, x0
   82f08:	910880c6 	add	x6, x6, #0x220
   82f0c:	d503201f 	nop
   82f10:	f94000c1 	ldr	x1, [x6]
   82f14:	38646a62 	ldrb	w2, [x19, x4]
   82f18:	38246822 	strb	w2, [x1, x4]
	for(int64_t i = (lfb_width / font->width) * (lfb_height / font->height); (i > 0 || i == 0) && (j > 0 || j == 0); i--)
   82f1c:	d1000484 	sub	x4, x4, #0x1
   82f20:	ab00009f 	cmn	x4, x0
   82f24:	fa405881 	ccmp	x4, #0x0, #0x1, pl  // pl = nfrst
   82f28:	54ffff4a 	b.ge	82f10 <console_print+0xe8>  // b.tcont
   82f2c:	f94116e0 	ldr	x0, [x23, #552]
   82f30:	b9421f05 	ldr	w5, [x24, #540]
   82f34:	b9401c00 	ldr	w0, [x0, #28]
   82f38:	1ac008a5 	udiv	w5, w5, w0
   82f3c:	f9411340 	ldr	x0, [x26, #544]
		j--;
	}
	
	uint16_t characters_since_newline = 0;
	for(uint64_t i = 0; i <= (lfb_width / font->width) * (lfb_height / font->height); i++)
   82f40:	d2800002 	mov	x2, #0x0                   	// #0
	uint16_t characters_since_newline = 0;
   82f44:	52800004 	mov	w4, #0x0                   	// #0
   82f48:	f000aac9 	adrp	x9, 15dd000 <allocated+0xfbdd0>
					{
						if(console_rollback_buffer[k] == '\n')
						{
							while(k)
							{
								console_rollback_buffer[k] = 255;
   82f4c:	12800008 	mov	w8, #0xffffffff            	// #-1
					//Now do the same as the above
					for(uint64_t k = 1; k <= i; k++)
					{
						console_rollback_buffer[k-1] = console_rollback_buffer[k];
					}
					console_rollback_buffer[i] = '\n';
   82f50:	5280014a 	mov	w10, #0xa                   	// #10
   82f54:	3940000b 	ldrb	w11, [x0]
	int64_t j = input_length;
   82f58:	2a0b03e1 	mov	w1, w11
   82f5c:	14000013 	b	82fa8 <console_print+0x180>
		else if(console_rollback_buffer[i] != 255)
   82f60:	7103fc3f 	cmp	w1, #0xff
   82f64:	540000c0 	b.eq	82f7c <console_print+0x154>  // b.none
			if(characters_since_newline == (lfb_width / font->width) - 1)
   82f68:	510004a5 	sub	w5, w5, #0x1
   82f6c:	6b05009f 	cmp	w4, w5
   82f70:	54000240 	b.eq	82fb8 <console_print+0x190>  // b.none
   82f74:	11000484 	add	w4, w4, #0x1
   82f78:	12003c84 	and	w4, w4, #0xffff
	for(uint64_t i = 0; i <= (lfb_width / font->width) * (lfb_height / font->height); i++)
   82f7c:	f94002a3 	ldr	x3, [x21]
   82f80:	91000442 	add	x2, x2, #0x1
   82f84:	b9400281 	ldr	w1, [x20]
   82f88:	b94002c5 	ldr	w5, [x22]
   82f8c:	29430c66 	ldp	w6, w3, [x3, #24]
   82f90:	1ac60821 	udiv	w1, w1, w6
   82f94:	1ac308a5 	udiv	w5, w5, w3
   82f98:	1b057c21 	mul	w1, w1, w5
   82f9c:	eb02003f 	cmp	x1, x2
   82fa0:	54000423 	b.cc	83024 <console_print+0x1fc>  // b.lo, b.ul, b.last
   82fa4:	38626801 	ldrb	w1, [x0, x2]
		if(console_rollback_buffer[i] == '\n')
   82fa8:	7100283f 	cmp	w1, #0xa
   82fac:	54fffda1 	b.ne	82f60 <console_print+0x138>  // b.any
			characters_since_newline = 0;
   82fb0:	52800004 	mov	w4, #0x0                   	// #0
   82fb4:	17fffff2 	b	82f7c <console_print+0x154>
				if(console_rollback_buffer[0] == 255) //Enough just to copy
   82fb8:	7103fd7f 	cmp	w11, #0xff
					for(uint64_t k = 0; k <= (lfb_width / font->width) * (lfb_height / font->height); k++)
   82fbc:	d2800001 	mov	x1, #0x0                   	// #0
   82fc0:	91088126 	add	x6, x9, #0x220
				if(console_rollback_buffer[0] == 255) //Enough just to copy
   82fc4:	540001a1 	b.ne	82ff8 <console_print+0x1d0>  // b.any
   82fc8:	1400006e 	b	83180 <console_print+0x358>
   82fcc:	91000421 	add	x1, x1, #0x1
					for(uint64_t k = 0; k <= (lfb_width / font->width) * (lfb_height / font->height); k++)
   82fd0:	f94002a5 	ldr	x5, [x21]
   82fd4:	b9400284 	ldr	w4, [x20]
   82fd8:	b94002c3 	ldr	w3, [x22]
   82fdc:	294314ab 	ldp	w11, w5, [x5, #24]
   82fe0:	1acb0884 	udiv	w4, w4, w11
   82fe4:	1ac50863 	udiv	w3, w3, w5
   82fe8:	1b047c63 	mul	w3, w3, w4
   82fec:	eb01007f 	cmp	x3, x1
   82ff0:	54000523 	b.cc	83094 <console_print+0x26c>  // b.lo, b.ul, b.last
   82ff4:	3861680b 	ldrb	w11, [x0, x1]
						if(console_rollback_buffer[k] == '\n')
   82ff8:	7100297f 	cmp	w11, #0xa
   82ffc:	54fffe81 	b.ne	82fcc <console_print+0x1a4>  // b.any
							while(k)
   83000:	b5000061 	cbnz	x1, 8300c <console_print+0x1e4>
   83004:	1400007c 	b	831f4 <console_print+0x3cc>
   83008:	f94000c0 	ldr	x0, [x6]
								console_rollback_buffer[k] = 255;
   8300c:	38216808 	strb	w8, [x0, x1]
							while(k)
   83010:	f1000421 	subs	x1, x1, #0x1
   83014:	54ffffa1 	b.ne	83008 <console_print+0x1e0>  // b.any
   83018:	d2800021 	mov	x1, #0x1                   	// #1
   8301c:	f94000c0 	ldr	x0, [x6]
   83020:	17ffffec 	b	82fd0 <console_print+0x1a8>
   83024:	91000421 	add	x1, x1, #0x1
   83028:	91000402 	add	x2, x0, #0x1
   8302c:	8b010000 	add	x0, x0, x1
			}
		characters_since_newline++;
		}
	}

	uint64_t number_of_newlines = 0;
   83030:	d2800001 	mov	x1, #0x0                   	// #0
   83034:	14000002 	b	8303c <console_print+0x214>
   83038:	3840144b 	ldrb	w11, [x2], #1
	for(uint64_t i = 0; i <= (lfb_width / font->width) * (lfb_height / font->height); i++)
	{
		if(console_rollback_buffer[i] == '\n')
		{
			number_of_newlines++;
   8303c:	7100297f 	cmp	w11, #0xa
   83040:	9a811421 	cinc	x1, x1, eq  // eq = none
	for(uint64_t i = 0; i <= (lfb_width / font->width) * (lfb_height / font->height); i++)
   83044:	eb00005f 	cmp	x2, x0
   83048:	54ffff81 	b.ne	83038 <console_print+0x210>  // b.any
		}
	}

	int64_t number_of_newlines_req_diff = (number_of_lines - 1) - number_of_newlines;
   8304c:	12003cf3 	and	w19, w7, #0xffff
   83050:	51000673 	sub	w19, w19, #0x1
   83054:	93407e73 	sxtw	x19, w19
   83058:	cb010273 	sub	x19, x19, x1
	
	//Just before printing clear the screen for now until the mailbox is done just draw
	//a big black rectangle
	lfb_clear_rect();
   8305c:	97fffb47 	bl	81d78 <lfb_clear_rect>

	if(number_of_newlines_req_diff < 0) //Have too many newlines!
   83060:	f100027f 	cmp	x19, #0x0
   83064:	5400038b 	b.lt	830d4 <console_print+0x2ac>  // b.tstop

	else if(number_of_newlines_req_diff > 0) //Don't have enough!
	{
		//So instead of adding more newlines use the print offset in lfb_print
		//number_of_newlines_req_diff will work as the y input
		lfb_print(0, number_of_newlines_req_diff - 3, console_rollback_buffer);
   83068:	f9411342 	ldr	x2, [x26, #544]
   8306c:	51000e61 	sub	w1, w19, #0x3
	else if(number_of_newlines_req_diff > 0) //Don't have enough!
   83070:	54000041 	b.ne	83078 <console_print+0x250>  // b.any
	}
	//Ok so in the case of not having enough newlines is done
	if(number_of_newlines_req_diff == 0)
	{
		lfb_print(0, 0, console_rollback_buffer);
   83074:	52800001 	mov	w1, #0x0                   	// #0
	}
}	
   83078:	a94153f3 	ldp	x19, x20, [sp, #16]
		lfb_print(0, 0, console_rollback_buffer);
   8307c:	52800000 	mov	w0, #0x0                   	// #0
}	
   83080:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83084:	a94363f7 	ldp	x23, x24, [sp, #48]
   83088:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8308c:	a8c57bfd 	ldp	x29, x30, [sp], #80
		lfb_print(0, 0, console_rollback_buffer);
   83090:	17fff9c8 	b	817b0 <lfb_print>
					for(uint64_t k = 1; k <= i; k++)
   83094:	b4000162 	cbz	x2, 830c0 <console_print+0x298>
   83098:	d2800021 	mov	x1, #0x1                   	// #1
   8309c:	14000002 	b	830a4 <console_print+0x27c>
   830a0:	f94000c0 	ldr	x0, [x6]
						console_rollback_buffer[k-1] = console_rollback_buffer[k];
   830a4:	8b010003 	add	x3, x0, x1
   830a8:	38616800 	ldrb	w0, [x0, x1]
					for(uint64_t k = 1; k <= i; k++)
   830ac:	eb01005f 	cmp	x2, x1
   830b0:	91000421 	add	x1, x1, #0x1
						console_rollback_buffer[k-1] = console_rollback_buffer[k];
   830b4:	381ff060 	sturb	w0, [x3, #-1]
					for(uint64_t k = 1; k <= i; k++)
   830b8:	54ffff41 	b.ne	830a0 <console_print+0x278>  // b.any
   830bc:	f9411120 	ldr	x0, [x9, #544]
					console_rollback_buffer[i] = '\n';
   830c0:	3822680a 	strb	w10, [x0, x2]
   830c4:	52800024 	mov	w4, #0x1                   	// #1
		characters_since_newline++;
   830c8:	f9411120 	ldr	x0, [x9, #544]
   830cc:	3940000b 	ldrb	w11, [x0]
   830d0:	17ffffab 	b	82f7c <console_print+0x154>
		for(uint64_t i = 0; i < (lfb_width / font->width) * (lfb_height / font->height); i++)
   830d4:	f94116e2 	ldr	x2, [x23, #552]
   830d8:	b9421b20 	ldr	w0, [x25, #536]
   830dc:	b9421f01 	ldr	w1, [x24, #540]
   830e0:	29430843 	ldp	w3, w2, [x2, #24]
   830e4:	1ac30800 	udiv	w0, w0, w3
   830e8:	1ac20821 	udiv	w1, w1, w2
   830ec:	1b017c00 	mul	w0, w0, w1
   830f0:	340003c0 	cbz	w0, 83168 <console_print+0x340>
   830f4:	d000aac6 	adrp	x6, 15dd000 <allocated+0xfbdd0>
   830f8:	d2800000 	mov	x0, #0x0                   	// #0
   830fc:	910880c6 	add	x6, x6, #0x220
					console_rollback_buffer[i] = 255;
   83100:	12800004 	mov	w4, #0xffffffff            	// #-1
   83104:	1400000b 	b	83130 <console_print+0x308>
   83108:	91000400 	add	x0, x0, #0x1
		for(uint64_t i = 0; i < (lfb_width / font->width) * (lfb_height / font->height); i++)
   8310c:	f94002a3 	ldr	x3, [x21]
   83110:	b9400281 	ldr	w1, [x20]
   83114:	b94002c2 	ldr	w2, [x22]
   83118:	29430c65 	ldp	w5, w3, [x3, #24]
   8311c:	1ac50821 	udiv	w1, w1, w5
   83120:	1ac30842 	udiv	w2, w2, w3
   83124:	1b017c42 	mul	w2, w2, w1
   83128:	eb00005f 	cmp	x2, x0
   8312c:	540001c9 	b.ls	83164 <console_print+0x33c>  // b.plast
			if(console_rollback_buffer[i] == '\n')
   83130:	f94000c2 	ldr	x2, [x6]
   83134:	38606841 	ldrb	w1, [x2, x0]
				number_of_newlines_req_diff++;
   83138:	7100283f 	cmp	w1, #0xa
   8313c:	9a931673 	cinc	x19, x19, eq  // eq = none
			if(number_of_newlines_req_diff == 0)
   83140:	b5fffe53 	cbnz	x19, 83108 <console_print+0x2e0>
				while(i)
   83144:	b5000060 	cbnz	x0, 83150 <console_print+0x328>
   83148:	14000005 	b	8315c <console_print+0x334>
   8314c:	f94000c2 	ldr	x2, [x6]
					console_rollback_buffer[i] = 255;
   83150:	38206844 	strb	w4, [x2, x0]
				while(i)
   83154:	f1000400 	subs	x0, x0, #0x1
   83158:	54ffffa1 	b.ne	8314c <console_print+0x324>  // b.any
		for(uint64_t i = 0; i < (lfb_width / font->width) * (lfb_height / font->height); i++)
   8315c:	d2800020 	mov	x0, #0x1                   	// #1
   83160:	17ffffeb 	b	8310c <console_print+0x2e4>
	if(number_of_newlines_req_diff == 0)
   83164:	b40004d3 	cbz	x19, 831fc <console_print+0x3d4>
}	
   83168:	a94153f3 	ldp	x19, x20, [sp, #16]
   8316c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83170:	a94363f7 	ldp	x23, x24, [sp, #48]
   83174:	a9446bf9 	ldp	x25, x26, [sp, #64]
   83178:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8317c:	d65f03c0 	ret
					for(uint64_t k = 1; k <= i; k++)
   83180:	b40001a2 	cbz	x2, 831b4 <console_print+0x38c>
   83184:	91088126 	add	x6, x9, #0x220
   83188:	d2800021 	mov	x1, #0x1                   	// #1
   8318c:	14000002 	b	83194 <console_print+0x36c>
   83190:	f94000c0 	ldr	x0, [x6]
                                                console_rollback_buffer[k-1] = console_rollback_buffer[k];
   83194:	8b010003 	add	x3, x0, x1
   83198:	38616800 	ldrb	w0, [x0, x1]
					for(uint64_t k = 1; k <= i; k++)
   8319c:	eb01005f 	cmp	x2, x1
   831a0:	91000421 	add	x1, x1, #0x1
                                                console_rollback_buffer[k-1] = console_rollback_buffer[k];
   831a4:	381ff060 	sturb	w0, [x3, #-1]
					for(uint64_t k = 1; k <= i; k++)
   831a8:	54ffff41 	b.ne	83190 <console_print+0x368>  // b.any
   831ac:	f9411120 	ldr	x0, [x9, #544]
   831b0:	8b020000 	add	x0, x0, x2
                                        console_rollback_buffer[i] = '\n';
   831b4:	3900000a 	strb	w10, [x0]
   831b8:	52800024 	mov	w4, #0x1                   	// #1
   831bc:	f94000c0 	ldr	x0, [x6]
   831c0:	3940000b 	ldrb	w11, [x0]
   831c4:	17ffff6e 	b	82f7c <console_print+0x154>
	for(int64_t i = (lfb_width / font->width) * (lfb_height / font->height); (i > 0 || i == 0) && (j > 0 || j == 0); i--)
   831c8:	d0009b18 	adrp	x24, 13e5000 <core_state>
   831cc:	b9401c21 	ldr	w1, [x1, #28]
   831d0:	91087316 	add	x22, x24, #0x21c
	int64_t j = input_length;
   831d4:	d2800000 	mov	x0, #0x0                   	// #0
	for(int64_t i = (lfb_width / font->width) * (lfb_height / font->height); (i > 0 || i == 0) && (j > 0 || j == 0); i--)
   831d8:	b9421f04 	ldr	w4, [x24, #540]
   831dc:	d000aada 	adrp	x26, 15dd000 <allocated+0xfbdd0>
   831e0:	9108a2f5 	add	x21, x23, #0x228
   831e4:	91086334 	add	x20, x25, #0x218
   831e8:	1ac10884 	udiv	w4, w4, w1
   831ec:	1b077c84 	mul	w4, w4, w7
   831f0:	17ffff43 	b	82efc <console_print+0xd4>
							while(k)
   831f4:	d2800021 	mov	x1, #0x1                   	// #1
   831f8:	17ffff76 	b	82fd0 <console_print+0x1a8>
   831fc:	f9411342 	ldr	x2, [x26, #544]
		lfb_print(0, 0, console_rollback_buffer);
   83200:	52800001 	mov	w1, #0x0                   	// #0
   83204:	17ffff9d 	b	83078 <console_print+0x250>

0000000000083208 <gpio_setup.part.0>:
 * 5. Clear GPIO mode bits for the pin we want to set
 * 6. Use a logical or to write to the read of the register
 * 7. Write the value from the previous instruction or the register
 * 8. Return true
 */
bool gpio_setup(uint32_t gpio_pin, GPIOMODE mode)
   83208:	2a0003e6 	mov	w6, w0
{
	uint32_t *GPFSEL = (uint32_t *)(MMIO_BASE + 0x200000 + 0x0); //Get register address
	if(gpio_pin > 54 || mode < 0 || mode > GPIO_ALTFUNC3) return false; //Check inputs
	uint32_t bit_mask = ((gpio_pin % 10) * 3); //Create bit mask
   8320c:	529999a3 	mov	w3, #0xcccd                	// #52429
   83210:	72b99983 	movk	w3, #0xcccc, lsl #16
	uint32_t register_read = GPFSEL[gpio_pin / 10]; //Read the correct register
   83214:	d2a7e405 	mov	x5, #0x3f200000            	// #1059061760
	register_read &= ~(7 << bit_mask); //Clear the mode bits of the pin we want to set
   83218:	528000e4 	mov	w4, #0x7                   	// #7
	register_read |= (mode << bit_mask); //Set the gpio mode
	GPFSEL[gpio_pin / 10] = register_read; // Write to the register
	return true;
}
   8321c:	52800020 	mov	w0, #0x1                   	// #1
	uint32_t bit_mask = ((gpio_pin % 10) * 3); //Create bit mask
   83220:	9ba37cc3 	umull	x3, w6, w3
   83224:	d363fc63 	lsr	x3, x3, #35
   83228:	0b030862 	add	w2, w3, w3, lsl #2
	uint32_t register_read = GPFSEL[gpio_pin / 10]; //Read the correct register
   8322c:	2a0303e3 	mov	w3, w3
	uint32_t bit_mask = ((gpio_pin % 10) * 3); //Create bit mask
   83230:	4b0204c2 	sub	w2, w6, w2, lsl #1
	uint32_t register_read = GPFSEL[gpio_pin / 10]; //Read the correct register
   83234:	b86378a6 	ldr	w6, [x5, x3, lsl #2]
	uint32_t bit_mask = ((gpio_pin % 10) * 3); //Create bit mask
   83238:	0b020442 	add	w2, w2, w2, lsl #1
	register_read &= ~(7 << bit_mask); //Clear the mode bits of the pin we want to set
   8323c:	1ac22084 	lsl	w4, w4, w2
   83240:	0a2400c4 	bic	w4, w6, w4
	register_read |= (mode << bit_mask); //Set the gpio mode
   83244:	1ac22021 	lsl	w1, w1, w2
   83248:	2a040021 	orr	w1, w1, w4
	GPFSEL[gpio_pin / 10] = register_read; // Write to the register
   8324c:	b82378a1 	str	w1, [x5, x3, lsl #2]
}
   83250:	d65f03c0 	ret
   83254:	d503201f 	nop

0000000000083258 <gpio_setup>:
	if(gpio_pin > 54 || mode < 0 || mode > GPIO_ALTFUNC3) return false; //Check inputs
   83258:	7100d81f 	cmp	w0, #0x36
   8325c:	7a479822 	ccmp	w1, #0x7, #0x2, ls  // ls = plast
   83260:	54000048 	b.hi	83268 <gpio_setup+0x10>  // b.pmore
   83264:	17ffffe9 	b	83208 <gpio_setup.part.0>
}
   83268:	52800000 	mov	w0, #0x0                   	// #0
   8326c:	d65f03c0 	ret

0000000000083270 <gpio_init>:
 * used
 * It doesn't have a return value and it has no inputs
 */
void gpio_init()
{
	gpio_pin_status.gpio_pin_1 = 0;
   83270:	d0009b00 	adrp	x0, 13e5000 <core_state>
   83274:	9108a000 	add	x0, x0, #0x228
	gpio_pin_status.gpio_pin_44 = 0;
	gpio_pin_status.gpio_pin_45 = 0;
	gpio_pin_status.gpio_pin_46 = 0;
	gpio_pin_status.gpio_pin_47 = 0;
	gpio_pin_status.gpio_pin_48 = 0;
	gpio_pin_status.gpio_pin_49 = 0;
   83278:	39401801 	ldrb	w1, [x0, #6]
	gpio_pin_status.gpio_pin_1 = 0;
   8327c:	b900001f 	str	wzr, [x0]
	gpio_pin_status.gpio_pin_49 = 0;
   83280:	121a6421 	and	w1, w1, #0xffffffc0
	gpio_pin_status.gpio_pin_33 = 0;
   83284:	7900081f 	strh	wzr, [x0, #4]
	gpio_pin_status.gpio_pin_49 = 0;
   83288:	39001801 	strb	w1, [x0, #6]
	gpio_pin_status.gpio_pin_50 = 0;
	gpio_pin_status.gpio_pin_51 = 0;
	gpio_pin_status.gpio_pin_52 = 0;
	gpio_pin_status.gpio_pin_53 = 0;
	gpio_pin_status.gpio_pin_54 = 0;
}
   8328c:	d65f03c0 	ret

0000000000083290 <gpio_input>:
	 //////////////////////////////TODO/////////////////////////

bool gpio_input(uint32_t gpio_pin)
{
	uint32_t *GPIO_LEVEL = (uint32_t *)(MMIO_BASE + 0x200000 + 0x34);
	if(gpio_pin < 54) //The gpio_pin cannot be negative it is unsigned
   83290:	7100d41f 	cmp	w0, #0x35
   83294:	54000148 	b.hi	832bc <gpio_input+0x2c>  // b.pmore
	{
		uint32_t bit_to_write = 1 << (gpio_pin % 32);
		uint32_t register_read = GPIO_LEVEL[gpio_pin / 32];
   83298:	53057c02 	lsr	w2, w0, #5
   8329c:	d2a7e403 	mov	x3, #0x3f200000            	// #1059061760
		uint32_t bit_to_write = 1 << (gpio_pin % 32);
   832a0:	52800021 	mov	w1, #0x1                   	// #1
		uint32_t register_read = GPIO_LEVEL[gpio_pin / 32];
   832a4:	8b020862 	add	x2, x3, x2, lsl #2
		uint32_t bit_to_write = 1 << (gpio_pin % 32);
   832a8:	1ac02020 	lsl	w0, w1, w0
		if(register_read & bit_to_write) return true; //If the bit isn't set this evaluates to 0
   832ac:	b9403441 	ldr	w1, [x2, #52]
   832b0:	6a01001f 	tst	w0, w1
   832b4:	1a9f07e0 	cset	w0, ne  // ne = any
	}
	return false;
}
   832b8:	d65f03c0 	ret
	return false;
   832bc:	52800000 	mov	w0, #0x0                   	// #0
}
   832c0:	d65f03c0 	ret
   832c4:	d503201f 	nop

00000000000832c8 <gpio_output>:
 * 7. Output the bitmask to the selected register
 * 8. Return true on sucsess
 * 9. Return false if the GPIO set failed
 */
bool gpio_output(uint32_t gpio_pin, bool on)
{
   832c8:	12001c21 	and	w1, w1, #0xff
	if(gpio_pin < 54)
   832cc:	7100d41f 	cmp	w0, #0x35
   832d0:	54000069 	b.ls	832dc <gpio_output+0x14>  // b.plast
			clear_or_set_register_pointer = (uint32_t *)(GPCLR0);
		}
		clear_or_set_register_pointer[register_number] = bit_to_write;
		return true;
	}
	return false;
   832d4:	52800000 	mov	w0, #0x0                   	// #0
}
   832d8:	d65f03c0 	ret
			clear_or_set_register_pointer = (uint32_t *)(GPCLR0);
   832dc:	7100003f 	cmp	w1, #0x0
   832e0:	d2800383 	mov	x3, #0x1c                  	// #28
   832e4:	d2800501 	mov	x1, #0x28                  	// #40
		clear_or_set_register_pointer[register_number] = bit_to_write;
   832e8:	53057c04 	lsr	w4, w0, #5
			clear_or_set_register_pointer = (uint32_t *)(GPCLR0);
   832ec:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   832f0:	f2a7e403 	movk	x3, #0x3f20, lsl #16
   832f4:	9a811063 	csel	x3, x3, x1, ne  // ne = any
		uint32_t bit_to_write = 1 << (gpio_pin % 32);
   832f8:	52800022 	mov	w2, #0x1                   	// #1
   832fc:	1ac02041 	lsl	w1, w2, w0
		clear_or_set_register_pointer[register_number] = bit_to_write;
   83300:	2a0203e0 	mov	w0, w2
   83304:	b8247861 	str	w1, [x3, x4, lsl #2]
}
   83308:	d65f03c0 	ret
   8330c:	d503201f 	nop

0000000000083310 <pinMode>:
	if(gpio_pin > 54 || mode < 0 || mode > GPIO_ALTFUNC3) return false; //Check inputs
   83310:	7100d81f 	cmp	w0, #0x36
   83314:	7a479822 	ccmp	w1, #0x7, #0x2, ls  // ls = plast
   83318:	54000048 	b.hi	83320 <pinMode+0x10>  // b.pmore
   8331c:	17ffffbb 	b	83208 <gpio_setup.part.0>
 */

void pinMode(uint32_t gpio_pin, GPIOMODE mode)
{
	gpio_setup(gpio_pin, mode);
}
   83320:	d65f03c0 	ret
   83324:	d503201f 	nop

0000000000083328 <digitalWrite>:

void digitalWrite(uint32_t gpio_pin, bool value)
{
   83328:	12001c21 	and	w1, w1, #0xff
	if(gpio_pin < 54)
   8332c:	7100d41f 	cmp	w0, #0x35
   83330:	54000049 	b.ls	83338 <digitalWrite+0x10>  // b.plast
	gpio_output(gpio_pin, value);
}
   83334:	d65f03c0 	ret
			clear_or_set_register_pointer = (uint32_t *)(GPCLR0);
   83338:	7100003f 	cmp	w1, #0x0
   8333c:	d2800502 	mov	x2, #0x28                  	// #40
   83340:	d2800381 	mov	x1, #0x1c                  	// #28
		clear_or_set_register_pointer[register_number] = bit_to_write;
   83344:	53057c03 	lsr	w3, w0, #5
			clear_or_set_register_pointer = (uint32_t *)(GPCLR0);
   83348:	f2a7e402 	movk	x2, #0x3f20, lsl #16
   8334c:	f2a7e401 	movk	x1, #0x3f20, lsl #16
   83350:	9a821021 	csel	x1, x1, x2, ne  // ne = any
		uint32_t bit_to_write = 1 << (gpio_pin % 32);
   83354:	52800022 	mov	w2, #0x1                   	// #1
   83358:	1ac02040 	lsl	w0, w2, w0
		clear_or_set_register_pointer[register_number] = bit_to_write;
   8335c:	b8237820 	str	w0, [x1, x3, lsl #2]
}
   83360:	d65f03c0 	ret
   83364:	d503201f 	nop

0000000000083368 <digitalRead>:
	if(gpio_pin < 54) //The gpio_pin cannot be negative it is unsigned
   83368:	7100d41f 	cmp	w0, #0x35
   8336c:	54000148 	b.hi	83394 <digitalRead+0x2c>  // b.pmore
		uint32_t register_read = GPIO_LEVEL[gpio_pin / 32];
   83370:	53057c02 	lsr	w2, w0, #5
   83374:	d2a7e403 	mov	x3, #0x3f200000            	// #1059061760
		uint32_t bit_to_write = 1 << (gpio_pin % 32);
   83378:	52800021 	mov	w1, #0x1                   	// #1
		uint32_t register_read = GPIO_LEVEL[gpio_pin / 32];
   8337c:	8b020862 	add	x2, x3, x2, lsl #2
		uint32_t bit_to_write = 1 << (gpio_pin % 32);
   83380:	1ac02020 	lsl	w0, w1, w0
		if(register_read & bit_to_write) return true; //If the bit isn't set this evaluates to 0
   83384:	b9403441 	ldr	w1, [x2, #52]
   83388:	6a01001f 	tst	w0, w1
   8338c:	1a9f07e0 	cset	w0, ne  // ne = any

bool digitalRead(uint32_t gpio_pin)
{
	return gpio_input(gpio_pin);
}
   83390:	d65f03c0 	ret
	return false;
   83394:	52800000 	mov	w0, #0x0                   	// #0
}
   83398:	d65f03c0 	ret
   8339c:	00000000 	.inst	0x00000000 ; undefined

00000000000833a0 <wait_cycles>:
 * Wait a certain number of cycles using the CPU with multiple nop commands
 * Works with QEMU
 */
void wait_cycles(uint32_t number_of_cycles_to_wait)
{
	if(number_of_cycles_to_wait) // If zero wasn't passed to the function
   833a0:	340000c0 	cbz	w0, 833b8 <wait_cycles+0x18>
	{
		while(number_of_cycles_to_wait--) // If the number of cycles isn't zero decrement the
   833a4:	51000400 	sub	w0, w0, #0x1
		{ 				  // number and run the loop if it is zero don't
			asm volatile ("nop");     // execute it
   833a8:	d503201f 	nop
		while(number_of_cycles_to_wait--) // If the number of cycles isn't zero decrement the
   833ac:	51000400 	sub	w0, w0, #0x1
   833b0:	3100041f 	cmn	w0, #0x1
   833b4:	54ffffa1 	b.ne	833a8 <wait_cycles+0x8>  // b.any
		}
	}
}
   833b8:	d65f03c0 	ret
   833bc:	d503201f 	nop

00000000000833c0 <wait_usec>:
 * Finaly in a do while loop continue reading the counter until it reaches the expire value
 */
void wait_usec(uint32_t usec)
{
	register unsigned long frequency, current_count, expire_value;	
	asm volatile ("mrs %0, cntfrq_el0" : "=r"(frequency)); // Get the frequency
   833c0:	d53be001 	mrs	x1, cntfrq_el0
	asm volatile ("mrs %0, cntpct_el0" : "=r"(expire_value)); //Get current value of counter
   833c4:	d53be024 	mrs	x4, cntpct_el0
	expire_value += ((frequency/1000)*usec)/1000; //Calculate expire value for counter
   833c8:	d29ef9e3 	mov	x3, #0xf7cf                	// #63439
   833cc:	d343fc21 	lsr	x1, x1, #3
   833d0:	f2bc6a63 	movk	x3, #0xe353, lsl #16
   833d4:	2a0003e2 	mov	w2, w0
   833d8:	f2d374a3 	movk	x3, #0x9ba5, lsl #32
   833dc:	f2e41883 	movk	x3, #0x20c4, lsl #48
   833e0:	9bc37c20 	umulh	x0, x1, x3
   833e4:	d344fc00 	lsr	x0, x0, #4
   833e8:	9b027c00 	mul	x0, x0, x2
   833ec:	d343fc00 	lsr	x0, x0, #3
   833f0:	9bc37c00 	umulh	x0, x0, x3
   833f4:	8b401080 	add	x0, x4, x0, lsr #4
	do
	{
		asm volatile ("mrs %0, cntpct_el0" : "=r"(current_count));
   833f8:	d53be021 	mrs	x1, cntpct_el0
	}
	while(current_count < expire_value);
   833fc:	eb01001f 	cmp	x0, x1
   83400:	54ffffc8 	b.hi	833f8 <wait_usec+0x38>  // b.pmore
}
   83404:	d65f03c0 	ret

0000000000083408 <get_system_timer>:
uint64_t get_system_timer()
{
	uint32_t high_part, low_part;
	high_part = -1; //Only set this because it has the posibility of 
			//having 0 in the SYSTEM_TIMER_HIGH
	high_part = *SYSTEM_TIMER_HIGH;
   83408:	d2860102 	mov	x2, #0x3008                	// #12296
	low_part  = *SYSTEM_TIMER_LOW;
   8340c:	d2860083 	mov	x3, #0x3004                	// #12292
	high_part = *SYSTEM_TIMER_HIGH;
   83410:	f2a7e002 	movk	x2, #0x3f00, lsl #16
	low_part  = *SYSTEM_TIMER_LOW;
   83414:	f2a7e003 	movk	x3, #0x3f00, lsl #16
	high_part = *SYSTEM_TIMER_HIGH;
   83418:	b9400040 	ldr	w0, [x2]
	low_part  = *SYSTEM_TIMER_LOW;
   8341c:	b9400061 	ldr	w1, [x3]
	if(high_part != *SYSTEM_TIMER_HIGH)
   83420:	b9400044 	ldr	w4, [x2]
   83424:	6b00009f 	cmp	w4, w0
   83428:	54000060 	b.eq	83434 <get_system_timer+0x2c>  // b.none
	{
		high_part = *SYSTEM_TIMER_HIGH;
   8342c:	b9400040 	ldr	w0, [x2]
		low_part  = *SYSTEM_TIMER_LOW;
   83430:	b9400061 	ldr	w1, [x3]
	}
	return ((uint64_t)high_part << 32) | low_part; // Put the value of the high_part in the 
   83434:	2a0103e1 	mov	w1, w1
							    // 32 most significant bits and the
							    // low_part in the 32 least significant bits
}
   83438:	aa008020 	orr	x0, x1, x0, lsl #32
   8343c:	d65f03c0 	ret

0000000000083440 <wait_usec_system_timer>:
	high_part = *SYSTEM_TIMER_HIGH;
   83440:	d2860103 	mov	x3, #0x3008                	// #12296
	low_part  = *SYSTEM_TIMER_LOW;
   83444:	d2860084 	mov	x4, #0x3004                	// #12292
	high_part = *SYSTEM_TIMER_HIGH;
   83448:	f2a7e003 	movk	x3, #0x3f00, lsl #16
	low_part  = *SYSTEM_TIMER_LOW;
   8344c:	f2a7e004 	movk	x4, #0x3f00, lsl #16
	high_part = *SYSTEM_TIMER_HIGH;
   83450:	b9400065 	ldr	w5, [x3]
	low_part  = *SYSTEM_TIMER_LOW;
   83454:	b9400082 	ldr	w2, [x4]
	if(high_part != *SYSTEM_TIMER_HIGH)
   83458:	b9400061 	ldr	w1, [x3]
   8345c:	6b0100bf 	cmp	w5, w1
   83460:	54000060 	b.eq	8346c <wait_usec_system_timer+0x2c>  // b.none
		high_part = *SYSTEM_TIMER_HIGH;
   83464:	b9400061 	ldr	w1, [x3]
		low_part  = *SYSTEM_TIMER_LOW;
   83468:	b9400082 	ldr	w2, [x4]
	return ((uint64_t)high_part << 32) | low_part; // Put the value of the high_part in the 
   8346c:	2a0203e2 	mov	w2, w2
   83470:	aa018041 	orr	x1, x2, x1, lsl #32
 */
void wait_usec_system_timer(uint32_t number_of_micros_to_wait)
{
	uint64_t current_time;
	current_time = get_system_timer();
	if(current_time)
   83474:	b4000241 	cbz	x1, 834bc <wait_usec_system_timer+0x7c>
	high_part = *SYSTEM_TIMER_HIGH;
   83478:	d2860103 	mov	x3, #0x3008                	// #12296
	low_part  = *SYSTEM_TIMER_LOW;
   8347c:	d2860085 	mov	x5, #0x3004                	// #12292
   83480:	8b204020 	add	x0, x1, w0, uxtw
	high_part = *SYSTEM_TIMER_HIGH;
   83484:	f2a7e003 	movk	x3, #0x3f00, lsl #16
	low_part  = *SYSTEM_TIMER_LOW;
   83488:	f2a7e005 	movk	x5, #0x3f00, lsl #16
   8348c:	d503201f 	nop
	high_part = *SYSTEM_TIMER_HIGH;
   83490:	b9400064 	ldr	w4, [x3]
	low_part  = *SYSTEM_TIMER_LOW;
   83494:	b94000a2 	ldr	w2, [x5]
	if(high_part != *SYSTEM_TIMER_HIGH)
   83498:	b9400061 	ldr	w1, [x3]
   8349c:	6b01009f 	cmp	w4, w1
   834a0:	54000060 	b.eq	834ac <wait_usec_system_timer+0x6c>  // b.none
		high_part = *SYSTEM_TIMER_HIGH;
   834a4:	b9400061 	ldr	w1, [x3]
		low_part  = *SYSTEM_TIMER_LOW;
   834a8:	b94000a2 	ldr	w2, [x5]
	return ((uint64_t)high_part << 32) | low_part; // Put the value of the high_part in the 
   834ac:	2a0203e2 	mov	w2, w2
   834b0:	aa018041 	orr	x1, x2, x1, lsl #32
	{
		while(get_system_timer() < number_of_micros_to_wait + current_time);
   834b4:	eb00003f 	cmp	x1, x0
   834b8:	54fffec3 	b.cc	83490 <wait_usec_system_timer+0x50>  // b.lo, b.ul, b.last
	}
}
   834bc:	d65f03c0 	ret

00000000000834c0 <micros>:
	high_part = *SYSTEM_TIMER_HIGH;
   834c0:	d2860102 	mov	x2, #0x3008                	// #12296
	low_part  = *SYSTEM_TIMER_LOW;
   834c4:	d2860083 	mov	x3, #0x3004                	// #12292
	high_part = *SYSTEM_TIMER_HIGH;
   834c8:	f2a7e002 	movk	x2, #0x3f00, lsl #16
	low_part  = *SYSTEM_TIMER_LOW;
   834cc:	f2a7e003 	movk	x3, #0x3f00, lsl #16
	high_part = *SYSTEM_TIMER_HIGH;
   834d0:	b9400044 	ldr	w4, [x2]
	low_part  = *SYSTEM_TIMER_LOW;
   834d4:	b9400061 	ldr	w1, [x3]
	if(high_part != *SYSTEM_TIMER_HIGH)
   834d8:	b9400040 	ldr	w0, [x2]
   834dc:	6b00009f 	cmp	w4, w0
   834e0:	54000060 	b.eq	834ec <micros+0x2c>  // b.none
		high_part = *SYSTEM_TIMER_HIGH;
   834e4:	b9400040 	ldr	w0, [x2]
		low_part  = *SYSTEM_TIMER_LOW;
   834e8:	b9400061 	ldr	w1, [x3]
	return ((uint64_t)high_part << 32) | low_part; // Put the value of the high_part in the 
   834ec:	2a0103e1 	mov	w1, w1
   834f0:	aa008020 	orr	x0, x1, x0, lsl #32
 * and round the value to the closest multiple of four
 */
uint64_t micros()
{
	uint64_t current_time = get_system_timer();
	if(current_time)
   834f4:	b40000c0 	cbz	x0, 8350c <micros+0x4c>
	{
		uint64_t current_time_modulo = current_time % 4;
		if(!current_time_modulo)
   834f8:	f2400401 	ands	x1, x0, #0x3
   834fc:	54000080 	b.eq	8350c <micros+0x4c>  // b.none
		{
			return current_time;
		}
		else if(current_time_modulo <= 2)
		{
			return (current_time - current_time_modulo);
   83500:	f1000c3f 	cmp	x1, #0x3
   83504:	cb010001 	sub	x1, x0, x1
   83508:	9a801420 	csinc	x0, x1, x0, ne  // ne = any
		{
			return (current_time + 1);
		}
	}
	return 0;
}
   8350c:	d65f03c0 	ret

0000000000083510 <start_other_3_cores>:
volatile bool *core1_ready = &core_state[1];
volatile bool *core2_ready = &core_state[2];
volatile bool *core3_ready = &core_state[3];

void start_other_3_cores()
{
   83510:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83514:	910003fd 	mov	x29, sp
   83518:	f9000bf3 	str	x19, [sp, #16]
	asm(	"mov	x1, #0xe0\n"\
   8351c:	d2801c01 	mov	x1, #0xe0                  	// #224
   83520:	d2a00102 	mov	x2, #0x80000               	// #524288
   83524:	f9000022 	str	x2, [x1]
   83528:	d503209f 	sev
		"mov    x2, #0x80000\n"\
		"str    x2, [x1]\n"\
		"sev\n");
	
	printf("[CORE 0] [INFO] Waiting on core 1\n");
	while (*core1_ready == false) {};
   8352c:	d0009ad3 	adrp	x19, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
	printf("[CORE 0] [INFO] Waiting on core 1\n");
   83530:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83534:	912d6000 	add	x0, x0, #0xb58
   83538:	97fff64a 	bl	80e60 <printf>
	while (*core1_ready == false) {};
   8353c:	f947ce61 	ldr	x1, [x19, #3992]
   83540:	39400020 	ldrb	w0, [x1]
   83544:	72001c1f 	tst	w0, #0xff
   83548:	54ffffc0 	b.eq	83540 <start_other_3_cores+0x30>  // b.none
		
	asm(	"mov	x1, #0xe8\n"\
   8354c:	d2801d01 	mov	x1, #0xe8                  	// #232
   83550:	d2a00102 	mov	x2, #0x80000               	// #524288
   83554:	f9000022 	str	x2, [x1]
   83558:	d503209f 	sev
		"mov    x2, #0x80000\n"\
		"str	x2, [x1]\n"\
		"sev\n");
	
	printf("[CORE 0] [INFO] Waiting on core 2\n");
	while (*core2_ready == false) {};
   8355c:	913e6273 	add	x19, x19, #0xf98
	printf("[CORE 0] [INFO] Waiting on core 2\n");
   83560:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83564:	912e0000 	add	x0, x0, #0xb80
   83568:	97fff63e 	bl	80e60 <printf>
	while (*core2_ready == false) {};
   8356c:	f9400661 	ldr	x1, [x19, #8]
   83570:	39400020 	ldrb	w0, [x1]
   83574:	72001c1f 	tst	w0, #0xff
   83578:	54ffffc0 	b.eq	83570 <start_other_3_cores+0x60>  // b.none
	
	asm(	"mov	x1, 0xf0\n"\
   8357c:	d2801e01 	mov	x1, #0xf0                  	// #240
   83580:	d2a00102 	mov	x2, #0x80000               	// #524288
   83584:	f9000022 	str	x2, [x1]
   83588:	d503209f 	sev
		"mov    x2, #0x80000\n"\
		"str	x2, [x1]\n"\
		"sev");
	
	printf("[CORE 0] [INFO] Waiting on core 3\n");
   8358c:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83590:	912ea000 	add	x0, x0, #0xba8
   83594:	97fff633 	bl	80e60 <printf>
	while (*core3_ready == false) {};
   83598:	f9400a61 	ldr	x1, [x19, #16]
   8359c:	d503201f 	nop
   835a0:	39400020 	ldrb	w0, [x1]
   835a4:	72001c1f 	tst	w0, #0xff
   835a8:	54ffffc0 	b.eq	835a0 <start_other_3_cores+0x90>  // b.none
}
   835ac:	f9400bf3 	ldr	x19, [sp, #16]
   835b0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   835b4:	d65f03c0 	ret

00000000000835b8 <fat_getpartition>:
 * Get the starting LBA address of the first partition
 * so that we know where our FAT file system starts, and
 * read that volume's BIOS Parameter Block
 */
int32_t fat_getpartition()
{
   835b8:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
	cluster_size=0;
	cluster=0;
   835bc:	d000aac0 	adrp	x0, 15dd000 <allocated+0xfbdd0>
	unsigned char *master_boot_record=(unsigned char *)&master_boot_record_array;
	bpb_t *bpb=(bpb_t*)&master_boot_record_array;
	// read the partitioning table
	if(sd_readblock(0, master_boot_record, 1)) {
   835c0:	52800022 	mov	w2, #0x1                   	// #1
{
   835c4:	910003fd 	mov	x29, sp
   835c8:	a9025bf5 	stp	x21, x22, [sp, #32]
	cluster_size=0;
   835cc:	d000aad5 	adrp	x21, 15dd000 <allocated+0xfbdd0>
{
   835d0:	a90153f3 	stp	x19, x20, [sp, #16]
	if(sd_readblock(0, master_boot_record, 1)) {
   835d4:	d0009b13 	adrp	x19, 13e5000 <core_state>
   835d8:	91004273 	add	x19, x19, #0x10
	cluster=0;
   835dc:	b902381f 	str	wzr, [x0, #568]
	if(sd_readblock(0, master_boot_record, 1)) {
   835e0:	aa1303e1 	mov	x1, x19
	cluster_size=0;
   835e4:	b90256bf 	str	wzr, [x21, #596]
	if(sd_readblock(0, master_boot_record, 1)) {
   835e8:	52800000 	mov	w0, #0x0                   	// #0
   835ec:	94003a2f 	bl	91ea8 <sd_readblock>
   835f0:	2a0003f4 	mov	w20, w0
   835f4:	34000d80 	cbz	w0, 837a4 <fat_getpartition+0x1ec>
		// check magic
		if(master_boot_record[510]!=0x55 || master_boot_record[511]!=0xAA) {
   835f8:	3947fa60 	ldrb	w0, [x19, #510]
   835fc:	7101541f 	cmp	w0, #0x55
   83600:	54000dc1 	b.ne	837b8 <fat_getpartition+0x200>  // b.any
   83604:	3947fe60 	ldrb	w0, [x19, #511]
   83608:	7102a81f 	cmp	w0, #0xaa
   8360c:	54000d61 	b.ne	837b8 <fat_getpartition+0x200>  // b.any
			uart_puts("ERROR: Bad magic in MBR\n");
			return 0;
		}
		// check partition type
		if(master_boot_record[0x1C2]!=0xE/*FAT16 LBA*/ && master_boot_record[0x1C2]!=0xC/*FAT32 LBA*/) {
   83610:	39470a60 	ldrb	w0, [x19, #450]
   83614:	121e7800 	and	w0, w0, #0xfffffffd
   83618:	12001c00 	and	w0, w0, #0xff
   8361c:	7100301f 	cmp	w0, #0xc
   83620:	54001121 	b.ne	83844 <fat_getpartition+0x28c>  // b.any
			uart_puts("ERROR: Wrong partition type\n");
			return 0;
		}

		partitionlba = master_boot_record[0x1C6] + (master_boot_record[0x1C7] << 8) + (master_boot_record[0x1C8]<<16) + (master_boot_record[0x1C9]<<24);
   83624:	39471a60 	ldrb	w0, [x19, #454]
   83628:	d0009b16 	adrp	x22, 13e5000 <core_state>
   8362c:	39471e63 	ldrb	w3, [x19, #455]
   83630:	39472262 	ldrb	w2, [x19, #456]
   83634:	39472661 	ldrb	w1, [x19, #457]
   83638:	0b032003 	add	w3, w0, w3, lsl #8
			
		uint32_t s;
		// find the root directory's LBA
		root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   8363c:	79402e60 	ldrh	w0, [x19, #22]
		partitionlba = master_boot_record[0x1C6] + (master_boot_record[0x1C7] << 8) + (master_boot_record[0x1C8]<<16) + (master_boot_record[0x1C9]<<24);
   83640:	0b024062 	add	w2, w3, w2, lsl #16
   83644:	a90363f7 	stp	x23, x24, [sp, #48]
   83648:	0b016041 	add	w1, w2, w1, lsl #24
   8364c:	b90232c1 	str	w1, [x22, #560]
		root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   83650:	f90023f9 	str	x25, [sp, #64]
   83654:	35000040 	cbnz	w0, 8365c <fat_getpartition+0xa4>
   83658:	b9402660 	ldr	w0, [x19, #36]
		s = (bpb->nr0 + (bpb->nr1 << 8)) * sizeof(fatdir_t);
   8365c:	39404a74 	ldrb	w20, [x19, #18]
		root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   83660:	d000aad8 	adrp	x24, 15dd000 <allocated+0xfbdd0>
		s = (bpb->nr0 + (bpb->nr1 << 8)) * sizeof(fatdir_t);
   83664:	39404663 	ldrb	w3, [x19, #17]
		
		rootdir = (fatdir_t *)malloc(((((s*32)+512 - 1)/512)*512));
   83668:	d000aad7 	adrp	x23, 15dd000 <allocated+0xfbdd0>
		root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   8366c:	39404261 	ldrb	w1, [x19, #16]
   83670:	79401e62 	ldrh	w2, [x19, #14]
		s = (bpb->nr0 + (bpb->nr1 << 8)) * sizeof(fatdir_t);
   83674:	0b142074 	add	w20, w3, w20, lsl #8
   83678:	531b6a94 	lsl	w20, w20, #5
		root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   8367c:	1b000820 	madd	w0, w1, w0, w2
		rootdir = (fatdir_t *)malloc(((((s*32)+512 - 1)/512)*512));
   83680:	531b6a81 	lsl	w1, w20, #5
		root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   83684:	b9023300 	str	w0, [x24, #560]
		rootdir = (fatdir_t *)malloc(((((s*32)+512 - 1)/512)*512));
   83688:	2a0103e0 	mov	w0, w1
   8368c:	94003701 	bl	91290 <malloc>
   83690:	f9012ee0 	str	x0, [x23, #600]
		fat32 = (uint32_t*)malloc((bpb->spf16?bpb->spf16:bpb->spf32)*512);
   83694:	79402e61 	ldrh	w1, [x19, #22]
   83698:	d3773c20 	ubfiz	x0, x1, #9, #16
   8369c:	35000061 	cbnz	w1, 836a8 <fat_getpartition+0xf0>
   836a0:	b9402660 	ldr	w0, [x19, #36]
   836a4:	53175800 	lsl	w0, w0, #9
   836a8:	940036fa 	bl	91290 <malloc>
   836ac:	d000aad9 	adrp	x25, 15dd000 <allocated+0xfbdd0>

		if(bpb->spf16==0) {
   836b0:	79402e61 	ldrh	w1, [x19, #22]
		fat32 = (uint32_t*)malloc((bpb->spf16?bpb->spf16:bpb->spf32)*512);
   836b4:	f9012320 	str	x0, [x25, #576]
		if(bpb->spf16==0) {
   836b8:	34000aa1 	cbz	w1, 8380c <fat_getpartition+0x254>
   836bc:	b9423300 	ldr	w0, [x24, #560]
			root_sec+=(bpb->rc-2)*bpb->spc;
		}

		// add partition LBA
		root_sec+=partitionlba;
		sd_readblock(root_sec,(unsigned char*)rootdir,s/512+1);
   836c0:	f9412ee1 	ldr	x1, [x23, #600]
   836c4:	53097e97 	lsr	w23, w20, #9
		root_sec+=partitionlba;
   836c8:	b94232c3 	ldr	w3, [x22, #560]
		sd_readblock(root_sec,(unsigned char*)rootdir,s/512+1);
   836cc:	110006f7 	add	w23, w23, #0x1
   836d0:	2a1703e2 	mov	w2, w23
		root_sec+=partitionlba;
   836d4:	0b030000 	add	w0, w0, w3
   836d8:	b9023300 	str	w0, [x24, #560]
		sd_readblock(root_sec,(unsigned char*)rootdir,s/512+1);
   836dc:	940039f3 	bl	91ea8 <sd_readblock>

		data_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   836e0:	79402e60 	ldrh	w0, [x19, #22]
   836e4:	340008a0 	cbz	w0, 837f8 <fat_getpartition+0x240>
   836e8:	39404261 	ldrb	w1, [x19, #16]
		if(bpb->spf16>0)
		{
			// adjust for FAT16
			data_sec+=(s+511)>>9;
   836ec:	1107fe94 	add	w20, w20, #0x1ff
		data_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   836f0:	79401e62 	ldrh	w2, [x19, #14]
   836f4:	1b000820 	madd	w0, w1, w0, w2
			data_sec+=(s+511)>>9;
   836f8:	0b542414 	add	w20, w0, w20, lsr #9
		}
		// add partition LBA
		data_sec+=partitionlba;
   836fc:	b94232c3 	ldr	w3, [x22, #560]
   83700:	d000aac4 	adrp	x4, 15dd000 <allocated+0xfbdd0>
		sd_readblock(root_sec,(unsigned char*)fat32,s/512+1);
   83704:	f9412321 	ldr	x1, [x25, #576]
		data_sec+=partitionlba;
   83708:	0b140074 	add	w20, w3, w20
		sd_readblock(root_sec,(unsigned char*)fat32,s/512+1);
   8370c:	b9423300 	ldr	w0, [x24, #560]
   83710:	2a1703e2 	mov	w2, w23
		data_sec+=partitionlba;
   83714:	b9023494 	str	w20, [x4, #564]
		sd_readblock(root_sec,(unsigned char*)fat32,s/512+1);
   83718:	940039e4 	bl	91ea8 <sd_readblock>

		cluster_size=bpb->spc*(bpb->bps0 + (bpb->bps1 << 8));
   8371c:	39402e62 	ldrb	w2, [x19, #11]
   83720:	39403260 	ldrb	w0, [x19, #12]
   83724:	39403661 	ldrb	w1, [x19, #13]
   83728:	0b002040 	add	w0, w2, w0, lsl #8
   8372c:	1b017c00 	mul	w0, w0, w1
   83730:	b90256a0 	str	w0, [x21, #596]
		cluster_buf = (uint32_t*)malloc(cluster_size);
   83734:	93407c00 	sxtw	x0, w0
   83738:	940036d6 	bl	91290 <malloc>
   8373c:	d000aac1 	adrp	x1, 15dd000 <allocated+0xfbdd0>
		buf_size=cluster_size;
   83740:	b94256a4 	ldr	w4, [x21, #596]
   83744:	d000aac3 	adrp	x3, 15dd000 <allocated+0xfbdd0>

		// read the boot record
		if(!sd_readblock(partitionlba, master_boot_record, 1)) {
   83748:	52800022 	mov	w2, #0x1                   	// #1
		cluster_buf = (uint32_t*)malloc(cluster_size);
   8374c:	f9012420 	str	x0, [x1, #584]
		if(!sd_readblock(partitionlba, master_boot_record, 1)) {
   83750:	aa1303e1 	mov	x1, x19
   83754:	b94232c0 	ldr	w0, [x22, #560]
		buf_size=cluster_size;
   83758:	b9023c64 	str	w4, [x3, #572]
		if(!sd_readblock(partitionlba, master_boot_record, 1)) {
   8375c:	940039d3 	bl	91ea8 <sd_readblock>
   83760:	2a0003f4 	mov	w20, w0
   83764:	340007a0 	cbz	w0, 83858 <fat_getpartition+0x2a0>
			uart_puts("ERROR: Unable to read boot record\n");
			return 0;
		}
		// check file system type. We don't use cluster numbers for that, but magic bytes
		if( !(bpb->fst[0]=='F' && bpb->fst[1]=='A' && bpb->fst[2]=='T') &&
   83768:	39c0da60 	ldrsb	w0, [x19, #54]
   8376c:	7101181f 	cmp	w0, #0x46
   83770:	540005a0 	b.eq	83824 <fat_getpartition+0x26c>  // b.none
   83774:	39c14a60 	ldrsb	w0, [x19, #82]
   83778:	7101181f 	cmp	w0, #0x46
   8377c:	54000301 	b.ne	837dc <fat_getpartition+0x224>  // b.any
			!(bpb->fst2[0]=='F' && bpb->fst2[1]=='A' && bpb->fst2[2]=='T')) {
   83780:	39c14e60 	ldrsb	w0, [x19, #83]
   83784:	7101041f 	cmp	w0, #0x41
   83788:	540002a1 	b.ne	837dc <fat_getpartition+0x224>  // b.any
   8378c:	39c15260 	ldrsb	w0, [x19, #84]
			uart_puts("ERROR: Unknown file system type\n");
			return 0;
		}
		return 1;
   83790:	52800034 	mov	w20, #0x1                   	// #1
			!(bpb->fst2[0]=='F' && bpb->fst2[1]=='A' && bpb->fst2[2]=='T')) {
   83794:	7101501f 	cmp	w0, #0x54
   83798:	54000221 	b.ne	837dc <fat_getpartition+0x224>  // b.any
   8379c:	a94363f7 	ldp	x23, x24, [sp, #48]
   837a0:	f94023f9 	ldr	x25, [sp, #64]
	}
	return 0;
}
   837a4:	2a1403e0 	mov	w0, w20
   837a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   837ac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   837b0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   837b4:	d65f03c0 	ret
			return 0;
   837b8:	52800014 	mov	w20, #0x0                   	// #0
			uart_puts("ERROR: Bad magic in MBR\n");
   837bc:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   837c0:	912f4000 	add	x0, x0, #0xbd0
   837c4:	97fffb41 	bl	824c8 <uart_puts>
}
   837c8:	2a1403e0 	mov	w0, w20
   837cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   837d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   837d4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   837d8:	d65f03c0 	ret
			uart_puts("ERROR: Unknown file system type\n");
   837dc:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
			return 0;
   837e0:	52800014 	mov	w20, #0x0                   	// #0
			uart_puts("ERROR: Unknown file system type\n");
   837e4:	9130e000 	add	x0, x0, #0xc38
   837e8:	97fffb38 	bl	824c8 <uart_puts>
   837ec:	a94363f7 	ldp	x23, x24, [sp, #48]
   837f0:	f94023f9 	ldr	x25, [sp, #64]
			return 0;
   837f4:	17ffffec 	b	837a4 <fat_getpartition+0x1ec>
		data_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   837f8:	39404274 	ldrb	w20, [x19, #16]
   837fc:	79401e60 	ldrh	w0, [x19, #14]
   83800:	b9402661 	ldr	w1, [x19, #36]
   83804:	1b010294 	madd	w20, w20, w1, w0
		if(bpb->spf16>0)
   83808:	17ffffbd 	b	836fc <fat_getpartition+0x144>
			root_sec+=(bpb->rc-2)*bpb->spc;
   8380c:	b9402e60 	ldr	w0, [x19, #44]
   83810:	39403662 	ldrb	w2, [x19, #13]
   83814:	b9423301 	ldr	w1, [x24, #560]
   83818:	51000800 	sub	w0, w0, #0x2
   8381c:	1b020400 	madd	w0, w0, w2, w1
   83820:	17ffffa8 	b	836c0 <fat_getpartition+0x108>
		if( !(bpb->fst[0]=='F' && bpb->fst[1]=='A' && bpb->fst[2]=='T') &&
   83824:	39c0de60 	ldrsb	w0, [x19, #55]
   83828:	7101041f 	cmp	w0, #0x41
   8382c:	54fffa41 	b.ne	83774 <fat_getpartition+0x1bc>  // b.any
   83830:	39c0e260 	ldrsb	w0, [x19, #56]
		return 1;
   83834:	52800034 	mov	w20, #0x1                   	// #1
		if( !(bpb->fst[0]=='F' && bpb->fst[1]=='A' && bpb->fst[2]=='T') &&
   83838:	7101501f 	cmp	w0, #0x54
   8383c:	54fff9c1 	b.ne	83774 <fat_getpartition+0x1bc>  // b.any
   83840:	17ffffd7 	b	8379c <fat_getpartition+0x1e4>
			uart_puts("ERROR: Wrong partition type\n");
   83844:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
			return 0;
   83848:	52800014 	mov	w20, #0x0                   	// #0
			uart_puts("ERROR: Wrong partition type\n");
   8384c:	912fc000 	add	x0, x0, #0xbf0
   83850:	97fffb1e 	bl	824c8 <uart_puts>
			return 0;
   83854:	17ffffd4 	b	837a4 <fat_getpartition+0x1ec>
			uart_puts("ERROR: Unable to read boot record\n");
   83858:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   8385c:	91304000 	add	x0, x0, #0xc10
   83860:	97fffb1a 	bl	824c8 <uart_puts>
			return 0;
   83864:	a94363f7 	ldp	x23, x24, [sp, #48]
   83868:	f94023f9 	ldr	x25, [sp, #64]
   8386c:	17ffffce 	b	837a4 <fat_getpartition+0x1ec>

0000000000083870 <fat_getcluster>:

/**
 * Find a file in root directory entries
 */
uint32_t fat_getcluster(char *fn)
{
   83870:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
	//bpb_t *bpb=(bpb_t*)&(master_boot_record_array[0]);	
	fatdir_t *dir = rootdir;
   83874:	d000aac1 	adrp	x1, 15dd000 <allocated+0xfbdd0>
{
   83878:	910003fd 	mov	x29, sp
   8387c:	a90153f3 	stp	x19, x20, [sp, #16]
	fatdir_t *dir = rootdir;
   83880:	f9412c33 	ldr	x19, [x1, #600]

	// iterate on each entry and check if it's the one we're looking for
	for(;dir->name[0]!=0;dir++) {
   83884:	39c00261 	ldrsb	w1, [x19]
   83888:	34000241 	cbz	w1, 838d0 <fat_getcluster+0x60>
   8388c:	aa0003f4 	mov	x20, x0
   83890:	f90013f5 	str	x21, [sp, #32]
			//uart_puts("\n");
			// if so, return starting cluster
			file_size = dir->size;
			return ((uint32_t)dir->ch)<<16|dir->cl;
		}
		uart_puts("ERROR: file not found\n");
   83894:	f0000075 	adrp	x21, 92000 <sd_readblock+0x158>
   83898:	913182b5 	add	x21, x21, #0xc60
   8389c:	d503201f 	nop
		if(dir->name[0]==0xE5 || dir->attr[0]==0xF) continue;
   838a0:	39c02e61 	ldrsb	w1, [x19, #11]
		uart_puts("ERROR: file not found\n");
   838a4:	aa1503e0 	mov	x0, x21
		if(dir->name[0]==0xE5 || dir->attr[0]==0xF) continue;
   838a8:	71003c3f 	cmp	w1, #0xf
   838ac:	540000c0 	b.eq	838c4 <fat_getcluster+0x54>  // b.none
		if(!__builtin_memcmp(dir->name,fn,11)) {
   838b0:	f9400262 	ldr	x2, [x19]
   838b4:	f9400281 	ldr	x1, [x20]
   838b8:	eb01005f 	cmp	x2, x1
   838bc:	54000120 	b.eq	838e0 <fat_getcluster+0x70>  // b.none
		uart_puts("ERROR: file not found\n");
   838c0:	97fffb02 	bl	824c8 <uart_puts>
	for(;dir->name[0]!=0;dir++) {
   838c4:	38c20e61 	ldrsb	w1, [x19, #32]!
   838c8:	35fffec1 	cbnz	w1, 838a0 <fat_getcluster+0x30>
   838cc:	f94013f5 	ldr	x21, [sp, #32]
	}
	return 0;
   838d0:	52800000 	mov	w0, #0x0                   	// #0
}
   838d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   838d8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   838dc:	d65f03c0 	ret
		if(!__builtin_memcmp(dir->name,fn,11)) {
   838e0:	79401262 	ldrh	w2, [x19, #8]
   838e4:	79401281 	ldrh	w1, [x20, #8]
   838e8:	6b01005f 	cmp	w2, w1
   838ec:	54fffea1 	b.ne	838c0 <fat_getcluster+0x50>  // b.any
   838f0:	39402a62 	ldrb	w2, [x19, #10]
   838f4:	39402a81 	ldrb	w1, [x20, #10]
   838f8:	6b01005f 	cmp	w2, w1
   838fc:	54fffe21 	b.ne	838c0 <fat_getcluster+0x50>  // b.any
			return ((uint32_t)dir->ch)<<16|dir->cl;
   83900:	79402a60 	ldrh	w0, [x19, #20]
			file_size = dir->size;
   83904:	d000aac2 	adrp	x2, 15dd000 <allocated+0xfbdd0>
			return ((uint32_t)dir->ch)<<16|dir->cl;
   83908:	79403661 	ldrh	w1, [x19, #26]
			file_size = dir->size;
   8390c:	b9401e63 	ldr	w3, [x19, #28]
   83910:	b9026043 	str	w3, [x2, #608]
			return ((uint32_t)dir->ch)<<16|dir->cl;
   83914:	2a004020 	orr	w0, w1, w0, lsl #16
}
   83918:	a94153f3 	ldp	x19, x20, [sp, #16]
			return ((uint32_t)dir->ch)<<16|dir->cl;
   8391c:	f94013f5 	ldr	x21, [sp, #32]
}
   83920:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83924:	d65f03c0 	ret

0000000000083928 <fat_listdirectory>:

void fat_listdirectory()
{
   83928:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8392c:	910003fd 	mov	x29, sp
   83930:	a90153f3 	stp	x19, x20, [sp, #16]
   83934:	a90363f7 	stp	x23, x24, [sp, #48]
	unsigned char *master_boot_record=(unsigned char *)&master_boot_record_array;
	bpb_t *bpb=(bpb_t*)(master_boot_record);
	fatdir_t *dir=(fatdir_t*)(master_boot_record);
	uint32_t root_sec, s;
	// find the root directory's LBA
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   83938:	d0009b17 	adrp	x23, 13e5000 <core_state>
   8393c:	910042f3 	add	x19, x23, #0x10
{
   83940:	a9025bf5 	stp	x21, x22, [sp, #32]
   83944:	39404a74 	ldrb	w20, [x19, #18]
   83948:	39404662 	ldrb	w2, [x19, #17]
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   8394c:	79402e60 	ldrh	w0, [x19, #22]
   83950:	39404261 	ldrb	w1, [x19, #16]
   83954:	0b142054 	add	w20, w2, w20, lsl #8
   83958:	79401e76 	ldrh	w22, [x19, #14]
   8395c:	531b6a94 	lsl	w20, w20, #5
   83960:	34000be0 	cbz	w0, 83adc <fat_listdirectory+0x1b4>
   83964:	1b015816 	madd	w22, w0, w1, w22
	{
		// adjust for FAT32
		root_sec+=(bpb->rc-2)*bpb->spc;
	}
	// add partition LBA
	root_sec+=partitionlba;
   83968:	d0009b01 	adrp	x1, 13e5000 <core_state>
	uart_puts("\nFAT root directory LBA: ");
   8396c:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83970:	9131e000 	add	x0, x0, #0xc78
	uart_hex(root_sec);
	uart_puts("\n");
   83974:	f0000075 	adrp	x21, 92000 <sd_readblock+0x158>
	root_sec+=partitionlba;
   83978:	b9423021 	ldr	w1, [x1, #560]
	uart_puts("\n");
   8397c:	913422b5 	add	x21, x21, #0xd08
	root_sec+=partitionlba;
   83980:	0b0102d6 	add	w22, w22, w1
	uart_puts("\nFAT root directory LBA: ");
   83984:	97fffad1 	bl	824c8 <uart_puts>
	uart_hex(root_sec);
   83988:	2a1603e0 	mov	w0, w22
   8398c:	97fffae7 	bl	82528 <uart_hex>
	uart_puts("\n");
   83990:	aa1503e0 	mov	x0, x21
   83994:	97fffacd 	bl	824c8 <uart_puts>
	// load the root directory
	if(sd_readblock(root_sec,(unsigned char*)master_boot_record,s/512+1)) 
   83998:	53097e82 	lsr	w2, w20, #9
   8399c:	2a1603e0 	mov	w0, w22
   839a0:	11000442 	add	w2, w2, #0x1
   839a4:	aa1303e1 	mov	x1, x19
   839a8:	94003940 	bl	91ea8 <sd_readblock>
   839ac:	340008a0 	cbz	w0, 83ac0 <fat_listdirectory+0x198>
	{
		uart_puts("\nAttrib Cluster  Size     Name\n");
   839b0:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   839b4:	91326000 	add	x0, x0, #0xc98
   839b8:	97fffac4 	bl	824c8 <uart_puts>
		// iterate on each entry and print out
		int lfn_entries = 0;
		for(;dir->name[0]!=0;dir++) 
   839bc:	39c042e0 	ldrsb	w0, [x23, #16]
   839c0:	34000760 	cbz	w0, 83aac <fat_listdirectory+0x184>
				lfn_entries++;
			}
			// is it a valid entry?
			if((dir->name[0]==0xE5 || dir->attr[0]==0xF) && !(dir->attr[0]&1 && dir->attr[0]&2 && dir->attr[0]&4 && dir->attr[0]&8)) continue;
			// decode attributes
			uart_send(dir->attr[0]& 1?'R':'.');  // read-only
   839c4:	528005d4 	mov	w20, #0x2e                  	// #46
			uart_send(dir->attr[0]& 2?'H':'.');  // hidden
   839c8:	52800918 	mov	w24, #0x48                  	// #72
			uart_send(dir->attr[0]& 4?'S':'.');  // system
   839cc:	52800a77 	mov	w23, #0x53                  	// #83
			uart_send(dir->attr[0]& 8?'L':'.');  // volume label
   839d0:	52800996 	mov	w22, #0x4c                  	// #76
   839d4:	f90023f9 	str	x25, [sp, #64]
			uart_send(dir->attr[0]& 1?'R':'.');  // read-only
   839d8:	52800a59 	mov	w25, #0x52                  	// #82
   839dc:	d503201f 	nop
			if(dir->attr[0]&1 && dir->attr[0]&2 && dir->attr[0]&4 && dir->attr[0]&8) {
   839e0:	39c02e60 	ldrsb	w0, [x19, #11]
   839e4:	12001c01 	and	w1, w0, #0xff
			if((dir->name[0]==0xE5 || dir->attr[0]==0xF) && !(dir->attr[0]&1 && dir->attr[0]&2 && dir->attr[0]&4 && dir->attr[0]&8)) continue;
   839e8:	12000c22 	and	w2, w1, #0xf
   839ec:	71003c5f 	cmp	w2, #0xf
   839f0:	7a4f1800 	ccmp	w0, #0xf, #0x0, ne  // ne = any
   839f4:	54000560 	b.eq	83aa0 <fat_listdirectory+0x178>  // b.none
			uart_send(dir->attr[0]& 1?'R':'.');  // read-only
   839f8:	f240003f 	tst	x1, #0x1
   839fc:	1a941320 	csel	w0, w25, w20, ne  // ne = any
   83a00:	97fffa9a 	bl	82468 <uart_send>
			uart_send(dir->attr[0]& 2?'H':'.');  // hidden
   83a04:	39402e60 	ldrb	w0, [x19, #11]
   83a08:	f27f001f 	tst	x0, #0x2
   83a0c:	1a941300 	csel	w0, w24, w20, ne  // ne = any
   83a10:	97fffa96 	bl	82468 <uart_send>
			uart_send(dir->attr[0]& 4?'S':'.');  // system
   83a14:	39402e60 	ldrb	w0, [x19, #11]
   83a18:	f27e001f 	tst	x0, #0x4
   83a1c:	1a9412e0 	csel	w0, w23, w20, ne  // ne = any
   83a20:	97fffa92 	bl	82468 <uart_send>
			uart_send(dir->attr[0]& 8?'L':'.');  // volume label
   83a24:	39402e60 	ldrb	w0, [x19, #11]
   83a28:	f27d001f 	tst	x0, #0x8
   83a2c:	1a9412c0 	csel	w0, w22, w20, ne  // ne = any
   83a30:	97fffa8e 	bl	82468 <uart_send>
			uart_send(dir->attr[0]&16?'D':'.');  // directory
   83a34:	39402e61 	ldrb	w1, [x19, #11]
   83a38:	52800880 	mov	w0, #0x44                  	// #68
   83a3c:	f27c003f 	tst	x1, #0x10
   83a40:	1a941000 	csel	w0, w0, w20, ne  // ne = any
   83a44:	97fffa89 	bl	82468 <uart_send>
			uart_send(dir->attr[0]&32?'A':'.');  // archive
   83a48:	39402e61 	ldrb	w1, [x19, #11]
   83a4c:	52800820 	mov	w0, #0x41                  	// #65
   83a50:	f27b003f 	tst	x1, #0x20
   83a54:	1a941000 	csel	w0, w0, w20, ne  // ne = any
   83a58:	97fffa84 	bl	82468 <uart_send>
			uart_send(' ');
   83a5c:	52800400 	mov	w0, #0x20                  	// #32
   83a60:	97fffa82 	bl	82468 <uart_send>
			// staring cluster
			uart_hex(((uint32_t)dir->ch)<<16|dir->cl);
   83a64:	79402a61 	ldrh	w1, [x19, #20]
   83a68:	79403660 	ldrh	w0, [x19, #26]
   83a6c:	2a014000 	orr	w0, w0, w1, lsl #16
   83a70:	97fffaae 	bl	82528 <uart_hex>
			uart_send(' ');
   83a74:	52800400 	mov	w0, #0x20                  	// #32
   83a78:	97fffa7c 	bl	82468 <uart_send>
			// size
			uart_hex(dir->size);
   83a7c:	b9401e60 	ldr	w0, [x19, #28]
   83a80:	97fffaaa 	bl	82528 <uart_hex>
			uart_send(' ');
   83a84:	52800400 	mov	w0, #0x20                  	// #32
   83a88:	97fffa78 	bl	82468 <uart_send>
			// filename
			dir->attr[0]=0;
			uart_puts((char *)dir->name);
   83a8c:	aa1303e0 	mov	x0, x19
			dir->attr[0]=0;
   83a90:	39002e7f 	strb	wzr, [x19, #11]
			uart_puts((char *)dir->name);
   83a94:	97fffa8d 	bl	824c8 <uart_puts>
			uart_puts("\n");
   83a98:	aa1503e0 	mov	x0, x21
   83a9c:	97fffa8b 	bl	824c8 <uart_puts>
		for(;dir->name[0]!=0;dir++) 
   83aa0:	38c20e60 	ldrsb	w0, [x19, #32]!
   83aa4:	35fff9e0 	cbnz	w0, 839e0 <fat_listdirectory+0xb8>
   83aa8:	f94023f9 	ldr	x25, [sp, #64]
	} 
	else 
	{
		uart_puts("ERROR: Unable to load root directory\n");
	}
}
   83aac:	a94153f3 	ldp	x19, x20, [sp, #16]
   83ab0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83ab4:	a94363f7 	ldp	x23, x24, [sp, #48]
   83ab8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   83abc:	d65f03c0 	ret
   83ac0:	a94153f3 	ldp	x19, x20, [sp, #16]
		uart_puts("ERROR: Unable to load root directory\n");
   83ac4:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
}
   83ac8:	a9425bf5 	ldp	x21, x22, [sp, #32]
		uart_puts("ERROR: Unable to load root directory\n");
   83acc:	9132e000 	add	x0, x0, #0xcb8
}
   83ad0:	a94363f7 	ldp	x23, x24, [sp, #48]
   83ad4:	a8c57bfd 	ldp	x29, x30, [sp], #80
		uart_puts("ERROR: Unable to load root directory\n");
   83ad8:	17fffa7c 	b	824c8 <uart_puts>
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   83adc:	b9402663 	ldr	w3, [x19, #36]
		root_sec+=(bpb->rc-2)*bpb->spc;
   83ae0:	b9402e60 	ldr	w0, [x19, #44]
   83ae4:	39403662 	ldrb	w2, [x19, #13]
   83ae8:	51000800 	sub	w0, w0, #0x2
	root_sec=((bpb->spf16?bpb->spf16:bpb->spf32)*bpb->nf)+bpb->rsc;
   83aec:	1b037c21 	mul	w1, w1, w3
		root_sec+=(bpb->rc-2)*bpb->spc;
   83af0:	1b020400 	madd	w0, w0, w2, w1
   83af4:	0b160016 	add	w22, w0, w22
   83af8:	17ffff9c 	b	83968 <fat_listdirectory+0x40>
   83afc:	d503201f 	nop

0000000000083b00 <fat_readfile>:
/**
 * Read a file into memory
 * cluster_buf
 */
char fat_readfile(uint32_t cluster)
{
   83b00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83b04:	910003fd 	mov	x29, sp
   83b08:	a90153f3 	stp	x19, x20, [sp, #16]
		//ptr+=bpb->spc*(bpb->bps0 + (bpb->bps1 << 1));
		//// get the next cluster in chain
		//cluster=bpb->spf16>0?fat16[cluster]:fat32[cluster];
	//}
	//return (char*)data;
	if(current_pointer >= buf_size)
   83b0c:	d000aad4 	adrp	x20, 15dd000 <allocated+0xfbdd0>
   83b10:	d000aad3 	adrp	x19, 15dd000 <allocated+0xfbdd0>
   83b14:	b9423e81 	ldr	w1, [x20, #572]
   83b18:	b9425262 	ldr	w2, [x19, #592]
   83b1c:	6b01005f 	cmp	w2, w1
   83b20:	54000443 	b.cc	83ba8 <fat_readfile+0xa8>  // b.lo, b.ul, b.last
	{
		if(cluster < 1 || cluster < 0xFFF8 || buf_size != cluster_size)
   83b24:	529ffee2 	mov	w2, #0xfff7                	// #65527
   83b28:	6b02001f 	cmp	w0, w2
   83b2c:	540000e9 	b.ls	83b48 <fat_readfile+0x48>  // b.plast
   83b30:	f90013f5 	str	x21, [sp, #32]
   83b34:	d000aad5 	adrp	x21, 15dd000 <allocated+0xfbdd0>
   83b38:	b94256a2 	ldr	w2, [x21, #596]
   83b3c:	6b02003f 	cmp	w1, w2
   83b40:	540000c0 	b.eq	83b58 <fat_readfile+0x58>  // b.none
   83b44:	f94013f5 	ldr	x21, [sp, #32]
		{
			return 0;//End Of File
   83b48:	52800000 	mov	w0, #0x0                   	// #0
	if(buf_size == 0)
	{
		return 0;//End Of File
	}
	return cluster_buf[current_pointer++];
}
   83b4c:	a94153f3 	ldp	x19, x20, [sp, #16]
   83b50:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83b54:	d65f03c0 	ret
		sd_readblock((cluster-2)*bpb->spc+data_sec,(unsigned char *)cluster_buf,bpb->spc);
   83b58:	d0009b02 	adrp	x2, 13e5000 <core_state>
   83b5c:	d000aac3 	adrp	x3, 15dd000 <allocated+0xfbdd0>
   83b60:	51000800 	sub	w0, w0, #0x2
   83b64:	d000aac1 	adrp	x1, 15dd000 <allocated+0xfbdd0>
   83b68:	39407442 	ldrb	w2, [x2, #29]
   83b6c:	b9423463 	ldr	w3, [x3, #564]
   83b70:	f9412421 	ldr	x1, [x1, #584]
   83b74:	1b020c00 	madd	w0, w0, w2, w3
   83b78:	940038cc 	bl	91ea8 <sd_readblock>
		if(file_size>cluster_size)
   83b7c:	d000aac2 	adrp	x2, 15dd000 <allocated+0xfbdd0>
   83b80:	b94256a0 	ldr	w0, [x21, #596]
   83b84:	b9426041 	ldr	w1, [x2, #608]
   83b88:	6b00003f 	cmp	w1, w0
   83b8c:	54000249 	b.ls	83bd4 <fat_readfile+0xd4>  // b.plast
			file_size -= cluster_size;
   83b90:	4b000020 	sub	w0, w1, w0
   83b94:	b9423e81 	ldr	w1, [x20, #572]
   83b98:	b9026040 	str	w0, [x2, #608]
		current_pointer = 0;
   83b9c:	f94013f5 	ldr	x21, [sp, #32]
   83ba0:	b902527f 	str	wzr, [x19, #592]
   83ba4:	d503201f 	nop
	if(buf_size == 0)
   83ba8:	34fffd01 	cbz	w1, 83b48 <fat_readfile+0x48>
	return cluster_buf[current_pointer++];
   83bac:	d000aac1 	adrp	x1, 15dd000 <allocated+0xfbdd0>
   83bb0:	b9425260 	ldr	w0, [x19, #592]
   83bb4:	f9412421 	ldr	x1, [x1, #584]
   83bb8:	11000402 	add	w2, w0, #0x1
   83bbc:	b9025262 	str	w2, [x19, #592]
}
   83bc0:	a94153f3 	ldp	x19, x20, [sp, #16]
	return cluster_buf[current_pointer++];
   83bc4:	b8605820 	ldr	w0, [x1, w0, uxtw #2]
}
   83bc8:	a8c37bfd 	ldp	x29, x30, [sp], #48
	return cluster_buf[current_pointer++];
   83bcc:	12001c00 	and	w0, w0, #0xff
}
   83bd0:	d65f03c0 	ret
			buf_size = file_size;
   83bd4:	b9023e81 	str	w1, [x20, #572]
   83bd8:	17fffff1 	b	83b9c <fat_readfile+0x9c>
   83bdc:	00000000 	.inst	0x00000000 ; undefined

0000000000083be0 <main>:
#include "headers/project.h"

static uint32_t check_hello = 0;

void main()
{
   83be0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83be4:	910003fd 	mov	x29, sp
   83be8:	a90153f3 	stp	x19, x20, [sp, #16]
	start_other_3_cores();
	mmu_init(); //Now turn on MMU on Core 0
	*core0_ready = true;

	printf("[CORE 0] [INFO] 4 cores with MMU online\r\n");
	semaphore_inc(&check_hello); // lock hello semaphore .. if MMU is not working it will lock here
   83bec:	d0009b14 	adrp	x20, 13e5000 <core_state>
	printf("Semaphore count: %d\n", check_hello);
   83bf0:	f0000073 	adrp	x19, 92000 <sd_readblock+0x158>
{
   83bf4:	f90013f5 	str	x21, [sp, #32]
	lfb_init();
   83bf8:	97fff682 	bl	81600 <lfb_init>
	init_page_table();
   83bfc:	97fffb9d 	bl	82a70 <init_page_table>
	semaphore_inc(&check_hello); // lock hello semaphore .. if MMU is not working it will lock here
   83c00:	91001295 	add	x21, x20, #0x4
	dynamic_memory_alloc_init();
   83c04:	94003581 	bl	91208 <dynamic_memory_alloc_init>
	printf("Semaphore count: %d\n", check_hello);
   83c08:	91344273 	add	x19, x19, #0xd10
	console_init();	
   83c0c:	97fffc4d 	bl	82d40 <console_init>
	clocks_init();
   83c10:	97fffb76 	bl	829e8 <clocks_init>
	start_other_3_cores();
   83c14:	97fffe3f 	bl	83510 <start_other_3_cores>
	mmu_init(); //Now turn on MMU on Core 0
   83c18:	97fffc16 	bl	82c70 <mmu_init>
	*core0_ready = true;
   83c1c:	d0009ac1 	adrp	x1, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   83c20:	52800022 	mov	w2, #0x1                   	// #1
	printf("[CORE 0] [INFO] 4 cores with MMU online\r\n");
   83c24:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83c28:	91338000 	add	x0, x0, #0xce0
	*core0_ready = true;
   83c2c:	f947d821 	ldr	x1, [x1, #4016]
   83c30:	39000022 	strb	w2, [x1]
	printf("[CORE 0] [INFO] 4 cores with MMU online\r\n");
   83c34:	97fff48b 	bl	80e60 <printf>
	semaphore_inc(&check_hello); // lock hello semaphore .. if MMU is not working it will lock here
   83c38:	aa1503e0 	mov	x0, x21
   83c3c:	97fff3fb 	bl	80c28 <semaphore_inc>
	printf("Semaphore count: %d\n", check_hello);
   83c40:	b9400681 	ldr	w1, [x20, #4]
   83c44:	aa1303e0 	mov	x0, x19
   83c48:	97fff486 	bl	80e60 <printf>
	semaphore_dec(&check_hello);
   83c4c:	aa1503e0 	mov	x0, x21
   83c50:	97fff3fd 	bl	80c44 <semaphore_dec>
printf("Semaphore count: %d\n", check_hello);
   83c54:	b9400681 	ldr	w1, [x20, #4]
   83c58:	aa1303e0 	mov	x0, x19
   83c5c:	97fff481 	bl	80e60 <printf>

	// echo everything back
	while(1) 
	{
		uart_send(uart_getc());
   83c60:	97fffa0c 	bl	82490 <uart_getc>
   83c64:	12001c00 	and	w0, w0, #0xff
   83c68:	97fffa00 	bl	82468 <uart_send>
   83c6c:	17fffffd 	b	83c60 <main+0x80>

0000000000083c70 <disasm_str.part.0>:

#define disasm_arch "aarch64"
enum { disasm_arg_NONE,disasm_arg_ofs,disasm_arg_ofe, disasm_arg_Xt, disasm_arg_labelij1, disasm_arg_RtS, disasm_arg_RnS, disasm_arg_i, disasm_arg_j12_opt, disasm_arg_Rn, disasm_arg_ib, disasm_arg_Rt, disasm_arg_j16_opt, disasm_arg_j, disasm_arg_Rm, disasm_arg_c, disasm_arg_labeli4, disasm_arg_i_opt, disasm_arg_pstate, disasm_arg_sh, disasm_arg_a0, disasm_arg_a1, disasm_arg_a2, disasm_arg_dc0, disasm_arg_dc1, disasm_arg_ZVA, disasm_arg_dc2, disasm_arg_ic, disasm_arg_Xt_opt, disasm_arg_tl0, disasm_arg_tl1, disasm_arg_tl2, disasm_arg_sysreg, disasm_arg_Cn, disasm_arg_Cm, disasm_arg_Xn, disasm_arg_b, disasm_arg_VtT, disasm_arg_Vt2T, disasm_arg_Vt3T, disasm_arg_Vt4T, disasm_arg_offs, disasm_arg_XnS, disasm_arg_offe, disasm_arg_Qi, disasm_arg_Xm, disasm_arg_Qi3, disasm_arg_Qi2, disasm_arg_Qi1, disasm_arg_VtB, disasm_arg_VtH, disasm_arg_VtS, disasm_arg_VtD, disasm_arg_i1, disasm_arg_i2, disasm_arg_i4, disasm_arg_i8, disasm_arg_Vt3B, disasm_arg_Vt3H, disasm_arg_Vt3S, disasm_arg_Vt3D, disasm_arg_i3, disasm_arg_i6, disasm_arg_i12, disasm_arg_i24, disasm_arg_Vt2B, disasm_arg_Vt2H, disasm_arg_Vt2S, disasm_arg_Vt2D, disasm_arg_i16, disasm_arg_Vt4B, disasm_arg_Vt4H, disasm_arg_Vt4S, disasm_arg_Vt4D, disasm_arg_i32, disasm_arg_z, disasm_arg_z3, disasm_arg_z2, disasm_arg_z4, disasm_arg_Rd, disasm_arg_Rd1, disasm_arg_Rt1, disasm_arg_Wd, disasm_arg_Wt, disasm_arg_FPt, disasm_arg_prf_op, disasm_arg_is4_opt, disasm_arg_FPm, disasm_arg_iz4_opt, disasm_arg_im4_opt, disasm_arg_nRt, disasm_arg_FPst, disasm_arg_j_opt, disasm_arg_Rom, disasm_arg_amountj, disasm_arg_amountz, disasm_arg_amountjs, disasm_arg_amountj2, disasm_arg_amountj3, disasm_arg_shiftj_opt, disasm_arg_Rsom, disasm_arg_exts, disasm_arg_Wn, disasm_arg_Wm, disasm_arg_Xd, disasm_arg_Vt16b, disasm_arg_Vn16b, disasm_arg_Qt, disasm_arg_Sn, disasm_arg_Vm4s, disasm_arg_Vt4s, disasm_arg_Vn4s, disasm_arg_Qn, disasm_arg_St, disasm_arg_FPjt, disasm_arg_Vnj, disasm_arg_FPidx, disasm_arg_Vtjq, disasm_arg_Ht, disasm_arg_Hn, disasm_arg_Hm, disasm_arg_FPn, disasm_arg_VtH1, disasm_arg_VnH1, disasm_arg_VmH1, disasm_arg_Vtzq, disasm_arg_Vnzq, disasm_arg_Vmzq, disasm_arg_simd0, disasm_arg_FPz2t, disasm_arg_FPz2n, disasm_arg_FPz2m, disasm_arg_VnT, disasm_arg_VmT, disasm_arg_FPz3t, disasm_arg_FPz3n, disasm_arg_FPz4n, disasm_arg_VnT3, disasm_arg_Vn2d, disasm_arg_Vn2h, disasm_arg_Vnz, disasm_arg_FPz4t, disasm_arg_Vtz, disasm_arg_FPz3m, disasm_arg_Dt, disasm_arg_Dn, disasm_arg_shrshift, disasm_arg_Vtj2, disasm_arg_Vnj2, disasm_arg_shlshift, disasm_arg_FPnj, disasm_arg_VnTa, disasm_arg_FPjt2, disasm_arg_FPjn2, disasm_arg_Vtz3, disasm_arg_VmTs, disasm_arg_VmHs, disasm_arg_VmTs2, disasm_arg_Vn116b, disasm_arg_Vn216b, disasm_arg_Vn316b, disasm_arg_Vn416b, disasm_arg_Vtj, disasm_arg_R2n, disasm_arg_FPidxk, disasm_arg_Vtzq2, disasm_arg_VnT2, disasm_arg_Vnz3, disasm_arg_Vnzq2, disasm_arg_shift8, disasm_arg_VtT3, disasm_arg_VmT3, disasm_arg_VtT4, disasm_arg_imm8, disasm_arg_amountk_opt, disasm_arg_amountk2_opt, disasm_arg_imm64, disasm_arg_Vt2d, disasm_arg_F16, disasm_arg_F32, disasm_arg_F64, disasm_arg_VmTs4b, disasm_arg_Vm2d, disasm_arg_Vm16b, disasm_arg_Vd16b, disasm_arg_Vd4s, disasm_arg_FPz5t, disasm_arg_fbits, disasm_arg_FPz5n, disasm_arg_Vn1d, disasm_arg_Vt1d, disasm_arg_FPk5t, disasm_arg_FPz5m, disasm_arg_jz, disasm_arg_FPz5d };

/*** private functions ***/
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83c70:	34000181 	cbz	w1, 83ca0 <disasm_str.part.0+0x30>
   83c74:	39400403 	ldrb	w3, [x0, #1]
   83c78:	91000402 	add	x2, x0, #0x1
   83c7c:	35000063 	cbnz	w3, 83c88 <disasm_str.part.0+0x18>
   83c80:	1400000e 	b	83cb8 <disasm_str.part.0+0x48>
   83c84:	aa0303e2 	mov	x2, x3
   83c88:	39400440 	ldrb	w0, [x2, #1]
   83c8c:	91000443 	add	x3, x2, #0x1
   83c90:	35ffffa0 	cbnz	w0, 83c84 <disasm_str.part.0+0x14>
   83c94:	91000840 	add	x0, x2, #0x2
   83c98:	51000421 	sub	w1, w1, #0x1
   83c9c:	35fffec1 	cbnz	w1, 83c74 <disasm_str.part.0+0x4>
   83ca0:	39400002 	ldrb	w2, [x0]
   83ca4:	d0000081 	adrp	x1, 95000 <sd_init+0x2ce8>
   83ca8:	91390021 	add	x1, x1, #0xe40
   83cac:	7100005f 	cmp	w2, #0x0
   83cb0:	9a800020 	csel	x0, x1, x0, eq  // eq = none
   83cb4:	d65f03c0 	ret
   83cb8:	aa0003e2 	mov	x2, x0
   83cbc:	51000421 	sub	w1, w1, #0x1
   83cc0:	91000840 	add	x0, x2, #0x2
   83cc4:	17fffff6 	b	83c9c <disasm_str.part.0+0x2c>

0000000000083cc8 <disasm_str>:
   83cc8:	b4000040 	cbz	x0, 83cd0 <disasm_str+0x8>
   83ccc:	17ffffe9 	b	83c70 <disasm_str.part.0>
   83cd0:	d0000080 	adrp	x0, 95000 <sd_init+0x2ce8>
   83cd4:	91390000 	add	x0, x0, #0xe40
   83cd8:	d65f03c0 	ret
   83cdc:	d503201f 	nop

0000000000083ce0 <disasm_sysreg>:
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83ce0:	12001c00 	and	w0, w0, #0xff
   83ce4:	12001c25 	and	w5, w1, #0xff
   83ce8:	7100081f 	cmp	w0, #0x2
   83cec:	12001c42 	and	w2, w2, #0xff
   83cf0:	12001c63 	and	w3, w3, #0xff
   83cf4:	12001c81 	and	w1, w4, #0xff
   83cf8:	540000a0 	b.eq	83d0c <disasm_sysreg+0x2c>  // b.none
   83cfc:	71000c1f 	cmp	w0, #0x3
   83d00:	54000280 	b.eq	83d50 <disasm_sysreg+0x70>  // b.none
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83d04:	d2800000 	mov	x0, #0x0                   	// #0
   83d08:	d65f03c0 	ret
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83d0c:	71000cbf 	cmp	w5, #0x3
   83d10:	540007a0 	b.eq	83e04 <disasm_sysreg+0x124>  // b.none
   83d14:	710010bf 	cmp	w5, #0x4
   83d18:	54000840 	b.eq	83e20 <disasm_sysreg+0x140>  // b.none
   83d1c:	35ffff45 	cbnz	w5, 83d04 <disasm_sysreg+0x24>
   83d20:	7100045f 	cmp	w2, #0x1
   83d24:	54001de0 	b.eq	840e0 <disasm_sysreg+0x400>  // b.none
   83d28:	34001c62 	cbz	w2, 840b4 <disasm_sysreg+0x3d4>
   83d2c:	71001c5f 	cmp	w2, #0x7
   83d30:	54fffea1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   83d34:	7100183f 	cmp	w1, #0x6
   83d38:	54fffe61 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   83d3c:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83d40:	913aa000 	add	x0, x0, #0xea8
   83d44:	2a0303e1 	mov	w1, w3
   83d48:	913c4000 	add	x0, x0, #0xf10
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83d4c:	17ffffc9 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83d50:	71000cbf 	cmp	w5, #0x3
   83d54:	540008e0 	b.eq	83e70 <disasm_sysreg+0x190>  // b.none
   83d58:	540001e9 	b.ls	83d94 <disasm_sysreg+0xb4>  // b.plast
   83d5c:	710014bf 	cmp	w5, #0x5
   83d60:	54000a80 	b.eq	83eb0 <disasm_sysreg+0x1d0>  // b.none
   83d64:	54001103 	b.cc	83f84 <disasm_sysreg+0x2a4>  // b.lo, b.ul, b.last
   83d68:	710018bf 	cmp	w5, #0x6
   83d6c:	54000740 	b.eq	83e54 <disasm_sysreg+0x174>  // b.none
   83d70:	71001cbf 	cmp	w5, #0x7
   83d74:	54fffc81 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83d78:	7100385f 	cmp	w2, #0xe
   83d7c:	7a420860 	ccmp	w3, #0x2, #0x0, eq  // eq = none
   83d80:	54fffc21 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   83d84:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83d88:	913aa000 	add	x0, x0, #0xea8
   83d8c:	913d8000 	add	x0, x0, #0xf60
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83d90:	17ffffb8 	b	83c70 <disasm_str.part.0>
   83d94:	710004bf 	cmp	w5, #0x1
   83d98:	54000b40 	b.eq	83f00 <disasm_sysreg+0x220>  // b.none
   83d9c:	54000508 	b.hi	83e3c <disasm_sysreg+0x15c>  // b.pmore
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83da0:	7100185f 	cmp	w2, #0x6
   83da4:	54002800 	b.eq	842a4 <disasm_sysreg+0x5c4>  // b.none
   83da8:	54000d49 	b.ls	83f50 <disasm_sysreg+0x270>  // b.plast
   83dac:	7100285f 	cmp	w2, #0xa
   83db0:	540026a0 	b.eq	84284 <disasm_sysreg+0x5a4>  // b.none
   83db4:	54000b29 	b.ls	83f18 <disasm_sysreg+0x238>  // b.plast
   83db8:	7100345f 	cmp	w2, #0xd
   83dbc:	54002e00 	b.eq	8437c <disasm_sysreg+0x69c>  // b.none
   83dc0:	7100385f 	cmp	w2, #0xe
   83dc4:	54002d00 	b.eq	84364 <disasm_sysreg+0x684>  // b.none
   83dc8:	7100305f 	cmp	w2, #0xc
   83dcc:	54fff9c1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   83dd0:	7100207f 	cmp	w3, #0x8
   83dd4:	540043a0 	b.eq	84648 <disasm_sysreg+0x968>  // b.none
   83dd8:	54002b89 	b.ls	84348 <disasm_sysreg+0x668>  // b.plast
   83ddc:	71002c7f 	cmp	w3, #0xb
   83de0:	54003d40 	b.eq	84588 <disasm_sysreg+0x8a8>  // b.none
   83de4:	7100307f 	cmp	w3, #0xc
   83de8:	540034e0 	b.eq	84484 <disasm_sysreg+0x7a4>  // b.none
   83dec:	7100247f 	cmp	w3, #0x9
   83df0:	54fff8a1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   83df4:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83df8:	913aa000 	add	x0, x0, #0xea8
   83dfc:	91050000 	add	x0, x0, #0x140
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83e00:	17ffff9c 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83e04:	2a020022 	orr	w2, w1, w2
   83e08:	35fff7e2 	cbnz	w2, 83d04 <disasm_sysreg+0x24>
   83e0c:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83e10:	913aa000 	add	x0, x0, #0xea8
   83e14:	2a0303e1 	mov	w1, w3
   83e18:	911a6000 	add	x0, x0, #0x698
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83e1c:	17ffff95 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83e20:	7100005f 	cmp	w2, #0x0
   83e24:	7a470860 	ccmp	w3, #0x7, #0x0, eq  // eq = none
   83e28:	54fff6e1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   83e2c:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83e30:	913aa000 	add	x0, x0, #0xea8
   83e34:	910e0000 	add	x0, x0, #0x380
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83e38:	17ffff8e 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83e3c:	2a030042 	orr	w2, w2, w3
   83e40:	35fff622 	cbnz	w2, 83d04 <disasm_sysreg+0x24>
   83e44:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83e48:	913aa000 	add	x0, x0, #0xea8
   83e4c:	911e4000 	add	x0, x0, #0x790
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83e50:	17ffff88 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83e54:	7100105f 	cmp	w2, #0x4
   83e58:	7a410860 	ccmp	w3, #0x1, #0x0, eq  // eq = none
   83e5c:	54fff541 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   83e60:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83e64:	913aa000 	add	x0, x0, #0xea8
   83e68:	9134e000 	add	x0, x0, #0xd38
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83e6c:	17ffff81 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83e70:	7100245f 	cmp	w2, #0x9
   83e74:	54001740 	b.eq	8415c <disasm_sysreg+0x47c>  // b.none
   83e78:	540002a8 	b.hi	83ecc <disasm_sysreg+0x1ec>  // b.pmore
   83e7c:	34001662 	cbz	w2, 84148 <disasm_sysreg+0x468>
   83e80:	7100105f 	cmp	w2, #0x4
   83e84:	54fff401 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   83e88:	7100107f 	cmp	w3, #0x4
   83e8c:	54002d40 	b.eq	84434 <disasm_sysreg+0x754>  // b.none
   83e90:	7100147f 	cmp	w3, #0x5
   83e94:	54002ae0 	b.eq	843f0 <disasm_sysreg+0x710>  // b.none
   83e98:	7100087f 	cmp	w3, #0x2
   83e9c:	54fff341 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   83ea0:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83ea4:	913aa000 	add	x0, x0, #0xea8
   83ea8:	911fa000 	add	x0, x0, #0x7e8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83eac:	17ffff71 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83eb0:	7100007f 	cmp	w3, #0x0
   83eb4:	7a440840 	ccmp	w2, #0x4, #0x0, eq  // eq = none
   83eb8:	54fff261 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   83ebc:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83ec0:	913aa000 	add	x0, x0, #0xea8
   83ec4:	9135c000 	add	x0, x0, #0xd70
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83ec8:	17ffff6a 	b	83c70 <disasm_str.part.0>
   83ecc:	7100345f 	cmp	w2, #0xd
   83ed0:	54001320 	b.eq	84134 <disasm_sysreg+0x454>  // b.none
   83ed4:	7100385f 	cmp	w2, #0xe
   83ed8:	54fff161 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83edc:	7100087f 	cmp	w3, #0x2
   83ee0:	54002ba0 	b.eq	84454 <disasm_sysreg+0x774>  // b.none
   83ee4:	71000c7f 	cmp	w3, #0x3
   83ee8:	54002940 	b.eq	84410 <disasm_sysreg+0x730>  // b.none
   83eec:	35fff0c3 	cbnz	w3, 83d04 <disasm_sysreg+0x24>
   83ef0:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83ef4:	913aa000 	add	x0, x0, #0xea8
   83ef8:	912d4000 	add	x0, x0, #0xb50
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83efc:	17ffff5d 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83f00:	2a030042 	orr	w2, w2, w3
   83f04:	35fff002 	cbnz	w2, 83d04 <disasm_sysreg+0x24>
   83f08:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83f0c:	913aa000 	add	x0, x0, #0xea8
   83f10:	91206000 	add	x0, x0, #0x818
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83f14:	17ffff57 	b	83c70 <disasm_str.part.0>
   83f18:	71001c5f 	cmp	w2, #0x7
   83f1c:	54002380 	b.eq	8438c <disasm_sysreg+0x6ac>  // b.none
   83f20:	7100245f 	cmp	w2, #0x9
   83f24:	54ffef01 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83f28:	7100287f 	cmp	w3, #0xa
   83f2c:	54003560 	b.eq	845d8 <disasm_sysreg+0x8f8>  // b.none
   83f30:	7100387f 	cmp	w3, #0xe
   83f34:	54002d00 	b.eq	844d4 <disasm_sysreg+0x7f4>  // b.none
   83f38:	7100247f 	cmp	w3, #0x9
   83f3c:	54ffee41 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   83f40:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83f44:	913aa000 	add	x0, x0, #0xea8
   83f48:	910f0000 	add	x0, x0, #0x3c0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83f4c:	17ffff49 	b	83c70 <disasm_str.part.0>
   83f50:	7100085f 	cmp	w2, #0x2
   83f54:	540015e0 	b.eq	84210 <disasm_sysreg+0x530>  // b.none
   83f58:	54000468 	b.hi	83fe4 <disasm_sysreg+0x304>  // b.pmore
   83f5c:	34001b82 	cbz	w2, 842cc <disasm_sysreg+0x5ec>
   83f60:	7100045f 	cmp	w2, #0x1
   83f64:	54ffed01 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83f68:	34002be3 	cbz	w3, 844e4 <disasm_sysreg+0x804>
   83f6c:	7100087f 	cmp	w3, #0x2
   83f70:	54ffeca1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   83f74:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83f78:	913aa000 	add	x0, x0, #0xea8
   83f7c:	91120000 	add	x0, x0, #0x480
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83f80:	17ffff3c 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   83f84:	7100145f 	cmp	w2, #0x5
   83f88:	540015e0 	b.eq	84244 <disasm_sysreg+0x564>  // b.none
   83f8c:	540005c9 	b.ls	84044 <disasm_sysreg+0x364>  // b.plast
   83f90:	7100285f 	cmp	w2, #0xa
   83f94:	54001480 	b.eq	84224 <disasm_sysreg+0x544>  // b.none
   83f98:	54000429 	b.ls	8401c <disasm_sysreg+0x33c>  // b.plast
   83f9c:	7100345f 	cmp	w2, #0xd
   83fa0:	54001ca0 	b.eq	84334 <disasm_sysreg+0x654>  // b.none
   83fa4:	7100385f 	cmp	w2, #0xe
   83fa8:	54001b00 	b.eq	84308 <disasm_sysreg+0x628>  // b.none
   83fac:	7100305f 	cmp	w2, #0xc
   83fb0:	54ffeaa1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   83fb4:	7100247f 	cmp	w3, #0x9
   83fb8:	54003500 	b.eq	84658 <disasm_sysreg+0x978>  // b.none
   83fbc:	54001928 	b.hi	842e0 <disasm_sysreg+0x600>  // b.pmore
   83fc0:	7100047f 	cmp	w3, #0x1
   83fc4:	54002d00 	b.eq	84564 <disasm_sysreg+0x884>  // b.none
   83fc8:	34002563 	cbz	w3, 84474 <disasm_sysreg+0x794>
   83fcc:	7100207f 	cmp	w3, #0x8
   83fd0:	54ffe9a1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   83fd4:	f0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   83fd8:	913aa000 	add	x0, x0, #0xea8
   83fdc:	91236000 	add	x0, x0, #0x8d8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   83fe0:	17ffff24 	b	83c70 <disasm_str.part.0>
   83fe4:	7100105f 	cmp	w2, #0x4
   83fe8:	54001ee0 	b.eq	843c4 <disasm_sysreg+0x6e4>  // b.none
   83fec:	7100145f 	cmp	w2, #0x5
   83ff0:	54ffe8a1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   83ff4:	71000c7f 	cmp	w3, #0x3
   83ff8:	54003200 	b.eq	84638 <disasm_sysreg+0x958>  // b.none
   83ffc:	54001d48 	b.hi	843a4 <disasm_sysreg+0x6c4>  // b.pmore
   84000:	7100047f 	cmp	w3, #0x1
   84004:	54002500 	b.eq	844a4 <disasm_sysreg+0x7c4>  // b.none
   84008:	b0000080 	adrp	x0, 95000 <sd_init+0x2ce8>
   8400c:	7100087f 	cmp	w3, #0x2
   84010:	91392000 	add	x0, x0, #0xe48
   84014:	54ffe781 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84018:	17ffff16 	b	83c70 <disasm_str.part.0>
   8401c:	7100185f 	cmp	w2, #0x6
   84020:	54001280 	b.eq	84270 <disasm_sysreg+0x590>  // b.none
   84024:	7100245f 	cmp	w2, #0x9
   84028:	54ffe6e1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   8402c:	7100247f 	cmp	w3, #0x9
   84030:	54ffe6a1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   84034:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84038:	913aa000 	add	x0, x0, #0xea8
   8403c:	912ea000 	add	x0, x0, #0xba8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84040:	17ffff0c 	b	83c70 <disasm_str.part.0>
   84044:	7100085f 	cmp	w2, #0x2
   84048:	54000cc0 	b.eq	841e0 <disasm_sysreg+0x500>  // b.none
   8404c:	540001a8 	b.hi	84080 <disasm_sysreg+0x3a0>  // b.pmore
   84050:	34000d62 	cbz	w2, 841fc <disasm_sysreg+0x51c>
   84054:	7100045f 	cmp	w2, #0x1
   84058:	54ffe561 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   8405c:	7100047f 	cmp	w3, #0x1
   84060:	54002a40 	b.eq	845a8 <disasm_sysreg+0x8c8>  // b.none
   84064:	34002503 	cbz	w3, 84504 <disasm_sysreg+0x824>
   84068:	7100087f 	cmp	w3, #0x2
   8406c:	54ffe4c1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   84070:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84074:	913aa000 	add	x0, x0, #0xea8
   84078:	912de000 	add	x0, x0, #0xb78
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8407c:	17fffefd 	b	83c70 <disasm_str.part.0>
   84080:	71000c5f 	cmp	w2, #0x3
   84084:	540011a0 	b.eq	842b8 <disasm_sysreg+0x5d8>  // b.none
   84088:	7100105f 	cmp	w2, #0x4
   8408c:	54ffe3c1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84090:	7100047f 	cmp	w3, #0x1
   84094:	54002aa0 	b.eq	845e8 <disasm_sysreg+0x908>  // b.none
   84098:	340023e3 	cbz	w3, 84514 <disasm_sysreg+0x834>
   8409c:	71000c7f 	cmp	w3, #0x3
   840a0:	54ffe321 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   840a4:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   840a8:	913aa000 	add	x0, x0, #0xea8
   840ac:	912bc000 	add	x0, x0, #0xaf0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   840b0:	17fffef0 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   840b4:	7100087f 	cmp	w3, #0x2
   840b8:	54000660 	b.eq	84184 <disasm_sysreg+0x4a4>  // b.none
   840bc:	54000229 	b.ls	84100 <disasm_sysreg+0x420>  // b.plast
   840c0:	71000c7f 	cmp	w3, #0x3
   840c4:	54000300 	b.eq	84124 <disasm_sysreg+0x444>  // b.none
   840c8:	7100187f 	cmp	w3, #0x6
   840cc:	54000641 	b.ne	84194 <disasm_sysreg+0x4b4>  // b.any
   840d0:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   840d4:	913aa000 	add	x0, x0, #0xea8
   840d8:	91350000 	add	x0, x0, #0xd40
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   840dc:	17fffee5 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   840e0:	340001a3 	cbz	w3, 84114 <disasm_sysreg+0x434>
   840e4:	7100103f 	cmp	w1, #0x4
   840e8:	54ffe0e1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   840ec:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   840f0:	913aa000 	add	x0, x0, #0xea8
   840f4:	2a0303e1 	mov	w1, w3
   840f8:	9132a000 	add	x0, x0, #0xca8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   840fc:	17fffedd 	b	83c70 <disasm_str.part.0>
   84100:	350004a3 	cbnz	w3, 84194 <disasm_sysreg+0x4b4>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84104:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84108:	913aa000 	add	x0, x0, #0xea8
   8410c:	91396000 	add	x0, x0, #0xe58
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84110:	17fffed8 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84114:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84118:	913aa000 	add	x0, x0, #0xea8
   8411c:	91322000 	add	x0, x0, #0xc88
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84120:	17fffed4 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84124:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84128:	913aa000 	add	x0, x0, #0xea8
   8412c:	913be000 	add	x0, x0, #0xef8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84130:	17fffed0 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84134:	35ffde83 	cbnz	w3, 83d04 <disasm_sysreg+0x24>
   84138:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   8413c:	913aa000 	add	x0, x0, #0xea8
   84140:	9100c000 	add	x0, x0, #0x30
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84144:	17fffecb 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84148:	35ffdde3 	cbnz	w3, 83d04 <disasm_sysreg+0x24>
   8414c:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84150:	913aa000 	add	x0, x0, #0xea8
   84154:	911fe000 	add	x0, x0, #0x7f8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84158:	17fffec6 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   8415c:	7100347f 	cmp	w3, #0xd
   84160:	54001720 	b.eq	84444 <disasm_sysreg+0x764>  // b.none
   84164:	7100387f 	cmp	w3, #0xe
   84168:	540014c0 	b.eq	84400 <disasm_sysreg+0x720>  // b.none
   8416c:	7100307f 	cmp	w3, #0xc
   84170:	54ffdca1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   84174:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84178:	913aa000 	add	x0, x0, #0xea8
   8417c:	911b2000 	add	x0, x0, #0x6c8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84180:	17fffebc 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84184:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84188:	913aa000 	add	x0, x0, #0xea8
   8418c:	91354000 	add	x0, x0, #0xd50
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84190:	17fffeb8 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84194:	7100143f 	cmp	w1, #0x5
   84198:	54001ee0 	b.eq	84574 <disasm_sysreg+0x894>  // b.none
   8419c:	54000149 	b.ls	841c4 <disasm_sysreg+0x4e4>  // b.plast
   841a0:	7100183f 	cmp	w1, #0x6
   841a4:	540013e0 	b.eq	84420 <disasm_sysreg+0x740>  // b.none
   841a8:	71001c3f 	cmp	w1, #0x7
   841ac:	54ffdac1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   841b0:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   841b4:	913aa000 	add	x0, x0, #0xea8
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   841b8:	2a0303e1 	mov	w1, w3
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   841bc:	91362000 	add	x0, x0, #0xd88
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   841c0:	17fffeac 	b	83c70 <disasm_str.part.0>
   841c4:	7100103f 	cmp	w1, #0x4
   841c8:	54ffd9e1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   841cc:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   841d0:	913aa000 	add	x0, x0, #0xea8
   841d4:	2a0303e1 	mov	w1, w3
   841d8:	913a4000 	add	x0, x0, #0xe90
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   841dc:	17fffea5 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   841e0:	34001a23 	cbz	w3, 84524 <disasm_sysreg+0x844>
   841e4:	7100047f 	cmp	w3, #0x1
   841e8:	54ffd8e1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   841ec:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   841f0:	913aa000 	add	x0, x0, #0xea8
   841f4:	91302000 	add	x0, x0, #0xc08
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   841f8:	17fffe9e 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   841fc:	35ffd843 	cbnz	w3, 83d04 <disasm_sysreg+0x24>
   84200:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84204:	913aa000 	add	x0, x0, #0xea8
   84208:	9130e000 	add	x0, x0, #0xc38
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8420c:	17fffe99 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84210:	35ffd7a3 	cbnz	w3, 83d04 <disasm_sysreg+0x24>
   84214:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84218:	913aa000 	add	x0, x0, #0xea8
   8421c:	91118000 	add	x0, x0, #0x460
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84220:	17fffe94 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84224:	7100087f 	cmp	w3, #0x2
   84228:	540018e0 	b.eq	84544 <disasm_sysreg+0x864>  // b.none
   8422c:	71000c7f 	cmp	w3, #0x3
   84230:	54ffd6a1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   84234:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84238:	913aa000 	add	x0, x0, #0xea8
   8423c:	91232000 	add	x0, x0, #0x8c8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84240:	17fffe8c 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84244:	7100047f 	cmp	w3, #0x1
   84248:	54001e80 	b.eq	84618 <disasm_sysreg+0x938>  // b.none
   8424c:	34001be3 	cbz	w3, 845c8 <disasm_sysreg+0x8e8>
   84250:	7100087f 	cmp	w3, #0x2
   84254:	54001800 	b.eq	84554 <disasm_sysreg+0x874>  // b.none
   84258:	71000c7f 	cmp	w3, #0x3
   8425c:	54ffd541 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   84260:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84264:	913aa000 	add	x0, x0, #0xea8
   84268:	912b2000 	add	x0, x0, #0xac8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8426c:	17fffe81 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84270:	35ffd4a3 	cbnz	w3, 83d04 <disasm_sysreg+0x24>
   84274:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84278:	913aa000 	add	x0, x0, #0xea8
   8427c:	912a2000 	add	x0, x0, #0xa88
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84280:	17fffe7c 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84284:	7100107f 	cmp	w3, #0x4
   84288:	540011e0 	b.eq	844c4 <disasm_sysreg+0x7e4>  // b.none
   8428c:	35ffd3c1 	cbnz	w1, 83d04 <disasm_sysreg+0x24>
   84290:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84294:	913aa000 	add	x0, x0, #0xea8
   84298:	2a0303e1 	mov	w1, w3
   8429c:	910ea000 	add	x0, x0, #0x3a8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   842a0:	17fffe74 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   842a4:	35ffd303 	cbnz	w3, 83d04 <disasm_sysreg+0x24>
   842a8:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   842ac:	913aa000 	add	x0, x0, #0xea8
   842b0:	910a0000 	add	x0, x0, #0x280
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   842b4:	17fffe6f 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   842b8:	35ffd263 	cbnz	w3, 83d04 <disasm_sysreg+0x24>
   842bc:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   842c0:	913aa000 	add	x0, x0, #0xea8
   842c4:	912fe000 	add	x0, x0, #0xbf8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   842c8:	17fffe6a 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   842cc:	35ffd1c3 	cbnz	w3, 83d04 <disasm_sysreg+0x24>
   842d0:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   842d4:	913aa000 	add	x0, x0, #0xea8
   842d8:	91124000 	add	x0, x0, #0x490
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   842dc:	17fffe65 	b	83c70 <disasm_str.part.0>
   842e0:	7100307f 	cmp	w3, #0xc
   842e4:	540015a0 	b.eq	84598 <disasm_sysreg+0x8b8>  // b.none
   842e8:	7100347f 	cmp	w3, #0xd
   842ec:	54000d40 	b.eq	84494 <disasm_sysreg+0x7b4>  // b.none
   842f0:	71002c7f 	cmp	w3, #0xb
   842f4:	54ffd081 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   842f8:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   842fc:	913aa000 	add	x0, x0, #0xea8
   84300:	91258000 	add	x0, x0, #0x960
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84304:	17fffe5b 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84308:	7100047f 	cmp	w3, #0x1
   8430c:	540017e0 	b.eq	84608 <disasm_sysreg+0x928>  // b.none
   84310:	34001743 	cbz	w3, 845f8 <disasm_sysreg+0x918>
   84314:	7100087f 	cmp	w3, #0x2
   84318:	54000ee0 	b.eq	844f4 <disasm_sysreg+0x814>  // b.none
   8431c:	71000c7f 	cmp	w3, #0x3
   84320:	54ffcf21 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   84324:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84328:	913aa000 	add	x0, x0, #0xea8
   8432c:	91226000 	add	x0, x0, #0x898
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84330:	17fffe50 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84334:	35ffce83 	cbnz	w3, 83d04 <disasm_sysreg+0x24>
   84338:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   8433c:	913aa000 	add	x0, x0, #0xea8
   84340:	91014000 	add	x0, x0, #0x50
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84344:	17fffe4b 	b	83c70 <disasm_str.part.0>
   84348:	340008e3 	cbz	w3, 84464 <disasm_sysreg+0x784>
   8434c:	7100047f 	cmp	w3, #0x1
   84350:	54ffcda1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84354:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84358:	913aa000 	add	x0, x0, #0xea8
   8435c:	910e4000 	add	x0, x0, #0x390
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84360:	17fffe44 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84364:	7100047f 	cmp	w3, #0x1
   84368:	54ffcce1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   8436c:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84370:	913aa000 	add	x0, x0, #0xea8
   84374:	91008000 	add	x0, x0, #0x20
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84378:	17fffe3e 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   8437c:	35ffcc43 	cbnz	w3, 83d04 <disasm_sysreg+0x24>
   84380:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84384:	913aa000 	add	x0, x0, #0xea8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84388:	17fffe3a 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   8438c:	7100107f 	cmp	w3, #0x4
   84390:	54ffcba1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   84394:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84398:	913aa000 	add	x0, x0, #0xea8
   8439c:	91108000 	add	x0, x0, #0x420
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   843a0:	17fffe34 	b	83c70 <disasm_str.part.0>
   843a4:	7100107f 	cmp	w3, #0x4
   843a8:	54000860 	b.eq	844b4 <disasm_sysreg+0x7d4>  // b.none
   843ac:	7100147f 	cmp	w3, #0x5
   843b0:	54ffcaa1 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   843b4:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   843b8:	913aa000 	add	x0, x0, #0xea8
   843bc:	910c4000 	add	x0, x0, #0x310
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   843c0:	17fffe2c 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   843c4:	7100047f 	cmp	w3, #0x1
   843c8:	54001300 	b.eq	84628 <disasm_sysreg+0x948>  // b.none
   843cc:	34000f63 	cbz	w3, 845b8 <disasm_sysreg+0x8d8>
   843d0:	7100087f 	cmp	w3, #0x2
   843d4:	54000b00 	b.eq	84534 <disasm_sysreg+0x854>  // b.none
   843d8:	7100187f 	cmp	w3, #0x6
   843dc:	54ffc941 	b.ne	83d04 <disasm_sysreg+0x24>  // b.any
   843e0:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   843e4:	913aa000 	add	x0, x0, #0xea8
   843e8:	910dc000 	add	x0, x0, #0x370
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   843ec:	17fffe21 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   843f0:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   843f4:	913aa000 	add	x0, x0, #0xea8
   843f8:	911e8000 	add	x0, x0, #0x7a0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   843fc:	17fffe1d 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84400:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84404:	913aa000 	add	x0, x0, #0xea8
   84408:	911dc000 	add	x0, x0, #0x770
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8440c:	17fffe19 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84410:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84414:	913aa000 	add	x0, x0, #0xea8
   84418:	911cc000 	add	x0, x0, #0x730
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8441c:	17fffe15 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84420:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84424:	913aa000 	add	x0, x0, #0xea8
   84428:	2a0303e1 	mov	w1, w3
   8442c:	9137c000 	add	x0, x0, #0xdf0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84430:	17fffe10 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84434:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84438:	913aa000 	add	x0, x0, #0xea8
   8443c:	911d8000 	add	x0, x0, #0x760
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84440:	17fffe0c 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84444:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84448:	913aa000 	add	x0, x0, #0xea8
   8444c:	911ee000 	add	x0, x0, #0x7b8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84450:	17fffe08 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84454:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84458:	913aa000 	add	x0, x0, #0xea8
   8445c:	91316000 	add	x0, x0, #0xc58
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84460:	17fffe04 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84464:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84468:	913aa000 	add	x0, x0, #0xea8
   8446c:	9139c000 	add	x0, x0, #0xe70
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84470:	17fffe00 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84474:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84478:	913aa000 	add	x0, x0, #0xea8
   8447c:	91212000 	add	x0, x0, #0x848
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84480:	17fffdfc 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84484:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84488:	913aa000 	add	x0, x0, #0xea8
   8448c:	91074000 	add	x0, x0, #0x1d0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84490:	17fffdf8 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84494:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84498:	913aa000 	add	x0, x0, #0xea8
   8449c:	91288000 	add	x0, x0, #0xa20
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   844a0:	17fffdf4 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   844a4:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   844a8:	913aa000 	add	x0, x0, #0xea8
   844ac:	9110c000 	add	x0, x0, #0x430
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   844b0:	17fffdf0 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   844b4:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   844b8:	913aa000 	add	x0, x0, #0xea8
   844bc:	910b6000 	add	x0, x0, #0x2d8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   844c0:	17fffdec 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   844c4:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   844c8:	913aa000 	add	x0, x0, #0xea8
   844cc:	91026000 	add	x0, x0, #0x98
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   844d0:	17fffde8 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   844d4:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   844d8:	913aa000 	add	x0, x0, #0xea8
   844dc:	910a4000 	add	x0, x0, #0x290
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   844e0:	17fffde4 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   844e4:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   844e8:	913aa000 	add	x0, x0, #0xea8
   844ec:	910cc000 	add	x0, x0, #0x330
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   844f0:	17fffde0 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   844f4:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   844f8:	913aa000 	add	x0, x0, #0xea8
   844fc:	9121a000 	add	x0, x0, #0x868
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84500:	17fffddc 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84504:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84508:	913aa000 	add	x0, x0, #0xea8
   8450c:	91308000 	add	x0, x0, #0xc20
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84510:	17fffdd8 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84514:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84518:	913aa000 	add	x0, x0, #0xea8
   8451c:	912f8000 	add	x0, x0, #0xbe0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84520:	17fffdd4 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84524:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84528:	913aa000 	add	x0, x0, #0xea8
   8452c:	912b6000 	add	x0, x0, #0xad8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84530:	17fffdd0 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84534:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84538:	913aa000 	add	x0, x0, #0xea8
   8453c:	910d4000 	add	x0, x0, #0x350
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84540:	17fffdcc 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84544:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84548:	913aa000 	add	x0, x0, #0xea8
   8454c:	912e6000 	add	x0, x0, #0xb98
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84550:	17fffdc8 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84554:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84558:	913aa000 	add	x0, x0, #0xea8
   8455c:	912ac000 	add	x0, x0, #0xab0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84560:	17fffdc4 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84564:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84568:	913aa000 	add	x0, x0, #0xea8
   8456c:	912e2000 	add	x0, x0, #0xb88
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84570:	17fffdc0 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84574:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   84578:	913aa000 	add	x0, x0, #0xea8
   8457c:	2a0303e1 	mov	w1, w3
   84580:	91334000 	add	x0, x0, #0xcd0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84584:	17fffdbb 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84588:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   8458c:	913aa000 	add	x0, x0, #0xea8
   84590:	91060000 	add	x0, x0, #0x180
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84594:	17fffdb7 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84598:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   8459c:	913aa000 	add	x0, x0, #0xea8
   845a0:	9126e000 	add	x0, x0, #0x9b8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   845a4:	17fffdb3 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   845a8:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   845ac:	913aa000 	add	x0, x0, #0xea8
   845b0:	912c6000 	add	x0, x0, #0xb18
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   845b4:	17fffdaf 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   845b8:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   845bc:	913aa000 	add	x0, x0, #0xea8
   845c0:	91112000 	add	x0, x0, #0x448
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   845c4:	17fffdab 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   845c8:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   845cc:	913aa000 	add	x0, x0, #0xea8
   845d0:	912ee000 	add	x0, x0, #0xbb8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   845d4:	17fffda7 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   845d8:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   845dc:	913aa000 	add	x0, x0, #0xea8
   845e0:	91092000 	add	x0, x0, #0x248
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   845e4:	17fffda3 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   845e8:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   845ec:	913aa000 	add	x0, x0, #0xea8
   845f0:	912aa000 	add	x0, x0, #0xaa8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   845f4:	17fffd9f 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   845f8:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   845fc:	913aa000 	add	x0, x0, #0xea8
   84600:	91020000 	add	x0, x0, #0x80
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84604:	17fffd9b 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84608:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   8460c:	913aa000 	add	x0, x0, #0xea8
   84610:	9101c000 	add	x0, x0, #0x70
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84614:	17fffd97 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84618:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   8461c:	913aa000 	add	x0, x0, #0xea8
   84620:	912f2000 	add	x0, x0, #0xbc8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84624:	17fffd93 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84628:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   8462c:	913aa000 	add	x0, x0, #0xea8
   84630:	910ae000 	add	x0, x0, #0x2b8
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84634:	17fffd8f 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84638:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   8463c:	913aa000 	add	x0, x0, #0xea8
   84640:	910b0000 	add	x0, x0, #0x2c0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84644:	17fffd8b 	b	83c70 <disasm_str.part.0>
char *disasm_sysreg(uint8_t p,uint8_t k,uint8_t n,uint8_t m,uint8_t j) {char *t=NULL;switch(p){case 2: switch(k) {case 0: switch(n) {case 0: switch(m) {case 0: t="?\0?\0OSDTRRX_EL1\0"; break;case 2: t="MDCCINT_EL1\0?\0MDSCR_EL1\0"; break;case 3: t="?\0?\0OSDTRTX_EL1\0"; break;case 6: t="?\0?\0OSECCR_EL1\0"; break;default: { n=j; j=m; switch(n) {case 4: t="DBGBVR0_EL1\0DBGBVR1_EL1\0DBGBVR2_EL1\0DBGBVR3_EL1\0DBGBVR4_EL1\0DBGBVR5_EL1\0DBGBVR6_EL1\0DBGBVR7_EL1\0"; break;case 5: t="DBGBCR0_EL1\0DBGBCR1_EL1\0DBGBCR2_EL1\0DBGBCR3_EL1\0DBGBCR4_EL1\0DBGBCR5_EL1\0DBGBCR6_EL1\0DBGBCR7_EL1\0"; break;case 6: t="DBGWVR0_EL1\0DBGWVR1_EL1\0DBGWVR2_EL1\0DBGWVR3_EL1\0DBGWVR4_EL1\0DBGWVR5_EL1\0DBGWVR6_EL1\0DBGWVR7_EL1\0"; break;case 7: t="DBGWCR0_EL1\0DBGWCR1_EL1\0DBGWCR2_EL1\0DBGWCR3_EL1\0DBGWCR4_EL1\0DBGWCR5_EL1\0DBGWCR6_EL1\0DBGWCR7_EL1\0"; break;} break; }} break;case 1: if(m==0) t="MDRAR_EL1\0?\0?\0?\0OSLAR_EL1\0"; else if(j==4) { j=m; t="OSLSR_EL1\0?\0OSDLR_EL1\0DBGPRCR_EL1\0"; }break;case 7: if(j==6) { j=m; t="?\0?\0?\0?\0?\0?\0?\0?\0DBGCLAIMSET_EL1\0DBGCLAIMCLR_EL1\0?\0?\0?\0?\0DBGAUTHSTATUS_EL1\0"; }break;} break;case 3: if(n==0&&j==0) { j=m; t="?\0MDCCSR_EL0\0?\0?\0DBGDTR_EL0\0DBGDTRRX_EL0\0"; } break;case 4: if(n==0&&m==7) t="DBGVCR32_EL2\0"; break;} break;case 3: switch(k) {case 0: switch(n) {case 0: if(m==0) t="MIDR_EL1\0?\0?\0?\0?\0MPIDR_EL1\0REVIDR_EL1\0?\0ID_PFR0_EL1\0ID_PFR1_EL1\0ID_DFR0_EL1\0ID_AFR0_EL1\0ID_MMFR0_EL1\0ID_MMFR1_EL1\0ID_MMFR2_EL1\0ID_MMFR3_EL1\0ID_ISAR0_EL1\0ID_ISAR1_EL1\0ID_ISAR2_EL1\0ID_ISAR2_EL1\0ID_ISAR3_EL1\0ID_ISAR4_EL1\0ID_ISAR5_EL1\0ID_MMFR4_EL1\0?\0MVFR0_EL1\0MVFR1_EL1\0MVFR2_EL1\0?\0?\0?\0?\0?\0ID_AA64PFR0_EL1\0ID_AA64PFR1_EL1\0?\0?\0ID_AA64ZFR0_EL1\0?\0?\0?\0ID_AA64DFR0_EL1\0ID_AA64DFR1_EL1\0?\0?\0ID_AA64AFR0_EL1\0ID_AA64AFR1_EL1\0?\0?\0ID_AA64ISAR0_EL1\0ID_AA64ISAR1_EL1\0?\0?\0?\0?\0?\0?\0ID_AA64MMFR0_EL1\0ID_AA64MMFR1_EL1\0ID_AA64MMFR2_EL1\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL1\0ACTLR_EL1\0CPACR_EL1\0"; break;case 2: t="ZCR_EL1\0"; break;} break;case 2: if(m==0) t="TTBR0_EL1\0TTBR1_EL1\0TCR_EL1\0"; break;case 4: switch(m) {case 0: t="SPSR_EL1\0ELR_EL1\0"; break;case 1: t="SP_EL0\0"; break;case 2: t="SPSel\0?\0CurrentEL\0PAN\0UAO\0"; break;case 6: t="ICC_PMR_EL1\0"; break;} break;case 5: switch(m) {case 1: t="AFSR0_EL1\0AFSR1_EL1\0"; break;case 2: t="ESR_EL1"; break;case 3: t="ERRIDR_EL1\0ERRSELR_EL1\0"; break;case 4: t="ERXFR_EL1\0ERXCTLR_EL1\0ERXSTATUS_EL1\0ERXADDR_EL1\0"; break;case 5: t="ERXMISC0_EL1\0ERXMISC1_EL1\0"; break;} break;case 6: if(m==0) t="FAR_EL1\0"; break;case 7: if(m==4) t="PAR_EL1\0"; break;case 9: switch(m) {case 9: t="PMSCR_EL1\0?\0PMSICR_EL1\0PMSIRR_EL1\0PMSFCR_EL1\0PMSEVFR_EL1\0PMSLATFR_EL1\0PMSIDR_EL1\0PMSIDR_EL1\0"; break;case 10: t="PMBLIMITR_EL1\0PMBPTR_EL1\0?\0PMBSR_EL1\0?\0?\0?\0PMBIDR_EL1\0"; break;case 14: t="?\0PMINTENSET_EL1\0PMINTENCLR_EL1\0"; break;} break;case 10: if(m==4) t="LORSA_EL1\0LOREA_EL1\0LORN_EL1\0LORC_EL1\0?\0?\0?\0LORID_EL1\0"; else if(m!=4&&j==0) { j=m; t="?\0?\0MAIR_EL1\0AMAIR_EL1\0"; }break;case 12: switch(m) {case 0: t="VBAR_EL1\0RVBAR_EL1\0RMR_EL1\0"; break;case 1: t="ISR_EL1\0DISR_EL1\0"; break;case 8: t="ICC_IAR0_EL1\0ICC_EOIR0_EL1\0ICC_HPPIR0_EL1\0ICC_BPR0_EL1\0ICC_AP0R0_EL1\0ICC_AP0R1_EL1\0ICC_AP0R2_EL1\0ICC_AP0R3_EL1\0"; break;case 9: t="ICC_AP1R0_EL1\0ICC_AP1R1_EL1\0ICC_AP1R2_EL1\0ICC_AP1R3_EL1\0"; break;case 11: t="?\0ICC_DIR_EL1\0?\0ICC_RPR_EL1\0?\0ICC_SGI1R_EL1\0ICC_ASGI1R_EL1\0ICC_SGI0R_EL1\0"; break;case 12: t="ICC_IAR1_EL1\0ICC_EOIR1_EL1\0ICC_HPPIR1_EL1\0ICC_BPR1_EL1\0ICC_CTLR_EL1\0ICC_SRE_EL1\0ICC_IGRPEN0_EL1\0ICC_IGRPEN1_EL1\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL1\0?\0?\0TPIDR_EL1\0"; break;case 14: if(m==1) t="CNTKCTL_EL1\0"; break;} break;case 1: if(n==0&&m==0) t="CCSIDR_EL1\0CLIDR_EL1\0?\0?\0?\0?\0?\0AIDR_EL1\0"; break;case 2: if(n==0&&m==0) t="CSSELR_EL1\0"; break;case 3: switch(n) {case 0: if(m==0) t="?\0CTR_EL0\0?\0?\0?\0?\0?\0DCZID_EL0\0"; break;case 4: switch(m) {case 2: t="NZCV\0DAIF\0"; break;case 4: t="FPCR\0FPSR\0"; break;case 5: t="DSPSR_EL0\0DLR_EL0\0"; break;} break;case 9: switch(m) {case 12: t="PMCR_EL0\0PMCNTENSET_EL0\0PMCNTENCLR_EL0\0PMOVSCLR_EL0\0PMSWINC_EL0\0PMSELR_EL0\0PMCEID0_EL0\0PMCEID1_EL0\0"; break;case 13: t="PMCCNTR_EL0\0PMXEVTYPER_EL0\0PMXEVCNTR_EL0\0"; break;case 14: t="PMUSERENR_EL0\0?\0?\0PMOVSSET_EL0\0"; break;} break;
   84648:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   8464c:	913aa000 	add	x0, x0, #0xea8
   84650:	91034000 	add	x0, x0, #0xd0
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84654:	17fffd87 	b	83c70 <disasm_str.part.0>
case 13: if(m==0) t="?\0?\0TPIDR_EL0\0TPIDRRO_EL0\0"; break;case 14: switch(m) {case 0: t="CNTFRQ_EL0\0CNTPCT_EL0\0CNTVCT_EL0\0"; break;case 2: t="CNTP_TVAL_EL0\0CNTP_CTL_EL0\0CNTP_CVAL_EL0\0"; break;case 3: t="CNTV_TVAL_EL0\0CNTV_CTL_EL0\0CNTV_CVAL_EL0\0"; break;} break;} break;case 4: switch(n) {case 0: if(m==0) t="VPIDR_EL2\0?\0?\0?\0?\0VMPIDR_EL2\0"; break;case 1: switch(m) {case 0: t="SCTLR_EL2\0ACTLR_EL2\0"; break;case 1: t="HCR_EL2\0MDCR_EL2\0CPTR_EL2\0HSTR_EL2\0?\0?\0?\0HACR_EL2\0"; break;case 2: t="ZCR_EL2\0"; break;} break;case 2: switch(m) {case 0: t="TTBR0_EL2\0?\0TCR_EL2\0"; break;case 1: t="VTTBR0_EL2\0?\0VTCR_EL2\0"; break;} break;case 3: if(m==0) t="DACR32_EL2\0"; break;case 4: switch(m) {case 0: t="SPSR_EL2\0ELR_EL2\0"; break;case 1: t="SP_EL1\0"; break;case 3: t="SPSR_irq\0SPSR_abt\0SPSR_und\0SPSR_fiq\0"; break;} break;case 5: switch(m) {case 0: t="?\0IFSR32_EL2\0"; break;case 1: t="AFSR0_EL2\0AFSR1_EL2\0"; break;case 2: t="ESR_EL2\0?\0?\0VSESR_EL2\0"; break;case 3: t="FPEXC32_EL2\0"; break;} break;case 6: if(m==0) t="FAR_EL2\0?\0?\0?\0HPFAR_EL2\0"; break;case 9: if(m==9) t="PMSCR_EL2\0"; break;case 10: switch(m) {case 2: t="MAIR_EL2\0"; break;case 3: t="AMAIR_EL2\0"; break;} break;case 12: switch(m) {case 0: t="VBAR_EL2\0RVBAR_EL2\0RMR_EL2\0"; break;case 1: t="?\0VDISR_EL2\0"; break;case 8: t="ICH_AP0R0_EL2\0ICH_AP0R1_EL2\0ICH_AP0R2_EL2\0ICH_AP0R3_EL2\0"; break;case 9: t="ICH_AP1R0_EL2\0ICH_AP1R1_EL2\0ICH_AP1R2_EL2\0ICH_AP1R3_EL2\0ICC_SRE_EL2\0"; break;case 11: t="ICH_HCR_EL2\0ICH_VTR_EL2\0ICH_MISR_EL2\0ICH_EISR_EL2\0?\0ICH_ELRSR_EL2\0?\0ICH_VMCR_EL2\0"; break;case 12: t="ICH_LR0_EL2\0ICH_LR1_EL2\0ICH_LR2_EL2\0ICH_LR3_EL2\0ICH_LR4_EL2\0ICH_LR5_EL2\0ICH_LR6_EL2\0ICH_LR7_EL2\0"; break;case 13: t="ICH_LR8_EL2\0ICH_LR9_EL2\0ICH_LR10_EL2\0ICH_LR11_EL2\0ICH_LR12_EL2\0ICH_LR13_EL2\0ICH_LR14_EL2\0ICH_LR15_EL2\0"; break;} break;case 13: if(m==0) t="?\0CONTEXTIDR_EL2\0TPIDR_EL2\0"; break;case 14: switch(m) {case 0: t="?\0?\0?\0CNTVOFF_EL2\0"; break;case 1: t="CNTHCTL_EL2\0"; break;case 2: t="CNTHP_TVAL_EL2\0CNTHP_CTL_EL2\0CNTHP_CVAL_EL2\0"; break;case 3: t="CNTHV_TVAL_EL2\0CNTHV_CTL_EL2\0CNTHV_CVAL_EL2\0"; break;} break;} break;case 5: if(n==4&&m==0) t="SPSR_EL12\0ELR_EL12\0"; break;case 6: if(n==4&&m==1) t="SP_EL2\0"; break;case 7: if(n==14&&m==2) t="CNTPS_TVAL_EL1\0CNTPS_CTL_EL1\0CNTPS_CVAL_EL1\0"; break;} break;}return t?disasm_str(t,j):NULL;}
   84658:	d0000060 	adrp	x0, 92000 <sd_readblock+0x158>
   8465c:	913aa000 	add	x0, x0, #0xea8
   84660:	91246000 	add	x0, x0, #0x918
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   84664:	17fffd83 	b	83c70 <disasm_str.part.0>

0000000000084668 <disasm_dbm>:
uint64_t disasm_dbm(int k, int j, int i) {int e=(k<<6)|(~j&0x3F),l=6;uint64_t m,r;while(l>=0 && !(e&(1<<l))){l--;}if(l<1)return -1;e=1<<l;l=e-1;j&=l;i&=l;if(j==l)return -1;m=~0ULL>>(64-(j+1));m=(m>>i)|(m<<(e-i));r=m;i=e;while(i<64){r|=(m<<i);i+=e;}return r;}
   84668:	2a2103e4 	mvn	w4, w1
   8466c:	528000c3 	mov	w3, #0x6                   	// #6
   84670:	12001484 	and	w4, w4, #0x3f
   84674:	2a001880 	orr	w0, w4, w0, lsl #6
   84678:	1ac32804 	asr	w4, w0, w3
   8467c:	370000c4 	tbnz	w4, #0, 84694 <disasm_dbm+0x2c>
   84680:	51000463 	sub	w3, w3, #0x1
   84684:	3100047f 	cmn	w3, #0x1
   84688:	54ffff81 	b.ne	84678 <disasm_dbm+0x10>  // b.any
   8468c:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   84690:	d65f03c0 	ret
   84694:	34ffffc3 	cbz	w3, 8468c <disasm_dbm+0x24>
   84698:	52800024 	mov	w4, #0x1                   	// #1
   8469c:	1ac32084 	lsl	w4, w4, w3
   846a0:	51000480 	sub	w0, w4, #0x1
   846a4:	0a000021 	and	w1, w1, w0
   846a8:	0a020002 	and	w2, w0, w2
   846ac:	6b01001f 	cmp	w0, w1
   846b0:	54fffee0 	b.eq	8468c <disasm_dbm+0x24>  // b.none
   846b4:	528007e0 	mov	w0, #0x3f                  	// #63
   846b8:	4b010000 	sub	w0, w0, w1
   846bc:	4b020085 	sub	w5, w4, w2
   846c0:	92800001 	mov	x1, #0xffffffffffffffff    	// #-1
   846c4:	9ac02421 	lsr	x1, x1, x0
   846c8:	7100187f 	cmp	w3, #0x6
   846cc:	9ac22422 	lsr	x2, x1, x2
   846d0:	9ac52021 	lsl	x1, x1, x5
   846d4:	aa010042 	orr	x2, x2, x1
   846d8:	aa0203e0 	mov	x0, x2
   846dc:	54fffda0 	b.eq	84690 <disasm_dbm+0x28>  // b.none
   846e0:	2a0403e1 	mov	w1, w4
   846e4:	d503201f 	nop
   846e8:	9ac12043 	lsl	x3, x2, x1
   846ec:	0b040021 	add	w1, w1, w4
   846f0:	aa030000 	orr	x0, x0, x3
   846f4:	7100fc3f 	cmp	w1, #0x3f
   846f8:	54ffff8d 	b.le	846e8 <disasm_dbm+0x80>
   846fc:	d65f03c0 	ret

0000000000084700 <disasm>:

/*** public API ***/
uint64_t disasm(uint64_t addr, char *str)
{
   84700:	d10b43ff 	sub	sp, sp, #0x2d0
   84704:	a9017bfd 	stp	x29, x30, [sp, #16]
   84708:	910043fd 	add	x29, sp, #0x10
   8470c:	a90253f3 	stp	x19, x20, [sp, #32]
   84710:	aa0103f3 	mov	x19, x1

	ic32=*((uint32_t*)addr);
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;

	//handle multiple NOPs at once
	if(ic32==0b11010101000000110010000000011111) {
   84714:	528403e1 	mov	w1, #0x201f                	// #8223
{
   84718:	a90673fb 	stp	x27, x28, [sp, #96]
   8471c:	aa0003fc 	mov	x28, x0
	ic32=*((uint32_t*)addr);
   84720:	b9400000 	ldr	w0, [x0]
	uint8_t args[9]={0,0,0,0,0,0,0,0,0};
   84724:	f90163ff 	str	xzr, [sp, #704]
	if(ic32==0b11010101000000110010000000011111) {
   84728:	72baa061 	movk	w1, #0xd503, lsl #16
	uint8_t args[9]={0,0,0,0,0,0,0,0,0};
   8472c:	390b23ff 	strb	wzr, [sp, #712]
	if(ic32==0b11010101000000110010000000011111) {
   84730:	6b01001f 	cmp	w0, w1
   84734:	54011ca0 	b.eq	86ac8 <disasm+0x23c8>  // b.none
		*str=0;
		return addr;
	}

	//decode instruction
	if(((ic32_8)&0b111111110000000001111100)==0b000010000000000001111100) {
   84738:	53087c03 	lsr	w3, w0, #8
   8473c:	a90463f7 	stp	x23, x24, [sp, #64]
   84740:	52800f81 	mov	w1, #0x7c                  	// #124
   84744:	a9056bf9 	stp	x25, x26, [sp, #80]
   84748:	121e547a 	and	w26, w3, #0xfffffc
   8474c:	12105b5a 	and	w26, w26, #0xffff007f
   84750:	72a00101 	movk	w1, #0x8, lsl #16
   84754:	53147c08 	lsr	w8, w0, #20
   84758:	530f7c06 	lsr	w6, w0, #15
   8475c:	53107c05 	lsr	w5, w0, #16
   84760:	53057c02 	lsr	w2, w0, #5
   84764:	6b01035f 	cmp	w26, w1
   84768:	54011360 	b.eq	869d4 <disasm+0x22d4>  // b.none
		names="stxrb\0stlxrb\0?\0?\0?\0?\0?\0?\0?\0?\0casb\0caslb\0?\0?\0casab\0casalb\0";
		op=((ic32_20)&0xe)|((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111111011111111111100)==0b000011100010000101101000) {
   8476c:	121e5464 	and	w4, w3, #0xfffffc
   84770:	52842d01 	mov	w1, #0x2168                	// #8552
   84774:	12117884 	and	w4, w4, #0xffffbfff
   84778:	72a001c1 	movk	w1, #0xe, lsl #16
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   8477c:	53167c07 	lsr	w7, w0, #22
	if(((ic32_8)&0b111111111011111111111100)==0b000011100010000101101000) {
   84780:	6b01009f 	cmp	w4, w1
   84784:	54011ca0 	b.eq	86b18 <disasm+0x2418>  // b.none
		names="fcvtn\0";
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_Vnz3; 
	} else
	if(((ic32_8)&0b111111111011111111111100)==0b000011100010000111101000) {
   84788:	52843d01 	mov	w1, #0x21e8                	// #8680
   8478c:	72a001c1 	movk	w1, #0xe, lsl #16
   84790:	6b01009f 	cmp	w4, w1
   84794:	540120a0 	b.eq	86ba8 <disasm+0x24a8>  // b.none
		names="fcvtl\0";
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_Vnzq2; 
	} else
	if(((ic32_8)&0b111111110011111111111100)==0b000011100010000100101000) {
   84798:	121e5469 	and	w9, w3, #0xfffffc
   8479c:	52842501 	mov	w1, #0x2128                	// #8488
   847a0:	12107529 	and	w9, w9, #0xffff3fff
   847a4:	72a001c1 	movk	w1, #0xe, lsl #16
   847a8:	6b01013f 	cmp	w9, w1
   847ac:	54011da0 	b.eq	86b60 <disasm+0x2460>  // b.none
		names="xtn\0";
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT2; 
	} else
	if(((ic32_8)&0b111111110011111111111100)==0b000011100010000100111000) {
   847b0:	52842701 	mov	w1, #0x2138                	// #8504
   847b4:	72a001c1 	movk	w1, #0xe, lsl #16
   847b8:	6b01013f 	cmp	w9, w1
   847bc:	54012200 	b.eq	86bfc <disasm+0x24fc>  // b.none
		names="shll\0";
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_shift8; 
	} else
	if(((ic32_8)&0b111111110010000010011100)==0b000011100010000010010000) {
   847c0:	5284138e 	mov	w14, #0x209c                	// #8348
   847c4:	52841201 	mov	w1, #0x2090                	// #8336
   847c8:	72a01fee 	movk	w14, #0xff, lsl #16
   847cc:	0a0e006e 	and	w14, w3, w14
   847d0:	72a001c1 	movk	w1, #0xe, lsl #16
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   847d4:	530d7c0b 	lsr	w11, w0, #13
	if(((ic32_8)&0b111111110010000010011100)==0b000011100010000010010000) {
   847d8:	6b0101df 	cmp	w14, w1
   847dc:	54021b80 	b.eq	88b4c <disasm+0x444c>  // b.none
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b111111111100000010110100)==0b000011110100000000100000) {
   847e0:	52981690 	mov	w16, #0xc0b4                	// #49332
   847e4:	52880401 	mov	w1, #0x4020                	// #16416
   847e8:	72a01ff0 	movk	w16, #0xff, lsl #16
   847ec:	0a100070 	and	w16, w3, w16
   847f0:	72a001e1 	movk	w1, #0xf, lsl #16
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   847f4:	530e7c11 	lsr	w17, w0, #14
	if(((ic32_8)&0b111111111100000010110100)==0b000011110100000000100000) {
   847f8:	6b01021f 	cmp	w16, w1
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   847fc:	53097c0f 	lsr	w15, w0, #9
	if(((ic32_8)&0b111111111100000010110100)==0b000011110100000000100000) {
   84800:	54012260 	b.eq	86c4c <disasm+0x254c>  // b.none
		names="smlal\0smlsl\0";
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;q=0;
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111100000011110100)==0b000011110100000010100000) {
   84804:	52981e92 	mov	w18, #0xc0f4                	// #49396
   84808:	52881401 	mov	w1, #0x40a0                	// #16544
   8480c:	72a01ff2 	movk	w18, #0xff, lsl #16
   84810:	0a120072 	and	w18, w3, w18
   84814:	72a001e1 	movk	w1, #0xf, lsl #16
   84818:	6b01025f 	cmp	w18, w1
   8481c:	54021c20 	b.eq	88ba0 <disasm+0x44a0>  // b.none
		names="smull\0";
		j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;q=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111100000010110100)==0b000011111000000000100000) {
   84820:	52900401 	mov	w1, #0x8020                	// #32800
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84824:	530a7c14 	lsr	w20, w0, #10
	if(((ic32_8)&0b111111111100000010110100)==0b000011111000000000100000) {
   84828:	72a001e1 	movk	w1, #0xf, lsl #16
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   8482c:	53157c0c 	lsr	w12, w0, #21
	if(((ic32_8)&0b111111111100000010110100)==0b000011111000000000100000) {
   84830:	6b01021f 	cmp	w16, w1
   84834:	54021e40 	b.eq	88bfc <disasm+0x44fc>  // b.none
		names="smlal\0smlsl\0";
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;q=0;
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111100000011110100)==0b000011111000000010100000) {
   84838:	52901401 	mov	w1, #0x80a0                	// #32928
   8483c:	72a001e1 	movk	w1, #0xf, lsl #16
   84840:	6b01025f 	cmp	w18, w1
   84844:	54022140 	b.eq	88c6c <disasm+0x456c>  // b.none
		names="smull\0";
		j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;q=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111111111111111100)==0b000111100110001001000000) {
   84848:	121e5479 	and	w25, w3, #0xfffffc
   8484c:	528c4801 	mov	w1, #0x6240                	// #25152
   84850:	72a003c1 	movk	w1, #0x1e, lsl #16
   84854:	6b01033f 	cmp	w25, w1
   84858:	54022480 	b.eq	88ce8 <disasm+0x45e8>  // b.none
		names="fcvt\0";
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_St; args[1]=disasm_arg_Dn; 
	} else
	if(((ic32_8)&0b111111110011111001111100)==0b000111100010001001000000) {
   8485c:	5287cf81 	mov	w1, #0x3e7c                	// #15996
   84860:	5284480a 	mov	w10, #0x2240                	// #8768
   84864:	72a01fe1 	movk	w1, #0xff, lsl #16
   84868:	0a010061 	and	w1, w3, w1
   8486c:	72a003ca 	movk	w10, #0x1e, lsl #16
   84870:	6b0a003f 	cmp	w1, w10
   84874:	540225e0 	b.eq	88d30 <disasm+0x4630>  // b.none
		names="fcvt\0";
		z=((ic32_22)&0x3); k=((ic32_15)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPk5t; args[1]=disasm_arg_FPz5n; 
	} else
	if(((ic32_8)&0b111111110011100001111100)==0b000111100010000001000000) {
   84878:	52870f81 	mov	w1, #0x387c                	// #14460
   8487c:	5284080a 	mov	w10, #0x2040                	// #8256
   84880:	72a01fe1 	movk	w1, #0xff, lsl #16
   84884:	0a010061 	and	w1, w3, w1
   84888:	72a003ca 	movk	w10, #0x1e, lsl #16
   8488c:	6b0a003f 	cmp	w1, w10
   84890:	54022760 	b.eq	88d7c <disasm+0x467c>  // b.none
		names="fmov\0fabs\0fneg\0fsqrt\0?\0?\0?\0?\0frintn\0frintp\0frintm\0frintz\0frinta\0?\0frintx\0frinti\0";
		op=((ic32_15)&0xf); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; 
	} else
	if((ic32&0b11111111001000001111110000001111)==0b00011110001000000010000000000000) {
   84894:	529f81ea 	mov	w10, #0xfc0f                	// #64527
   84898:	52840001 	mov	w1, #0x2000                	// #8192
   8489c:	72a3c401 	movk	w1, #0x1e20, lsl #16
   848a0:	72bfe40a 	movk	w10, #0xff20, lsl #16
   848a4:	0a0a000a 	and	w10, w0, w10
   848a8:	6b01015f 	cmp	w10, w1
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   848ac:	53047c01 	lsr	w1, w0, #4
	if((ic32&0b11111111001000001111110000001111)==0b00011110001000000010000000000000) {
   848b0:	54022ae0 	b.eq	88e0c <disasm+0x470c>  // b.none
		names="fcmp\0fcmpe\0";
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); 
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_FPz5m; 
	} else
	if((ic32&0b11111111001000001111110000001111)==0b00011110001000000010000000001000) {
   848b4:	5284010d 	mov	w13, #0x2008                	// #8200
   848b8:	72a3c40d 	movk	w13, #0x1e20, lsl #16
   848bc:	6b0d015f 	cmp	w10, w13
   848c0:	54022820 	b.eq	88dc4 <disasm+0x46c4>  // b.none
		names="fcmp\0fcmpe\0";
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); 
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_simd0; 
	} else
	if((ic32&0b11111111001000000001111111100000)==0b00011110001000000001000000000000) {
   848c4:	5283fc0a 	mov	w10, #0x1fe0                	// #8160
   848c8:	5282000d 	mov	w13, #0x1000                	// #4096
   848cc:	72bfe40a 	movk	w10, #0xff20, lsl #16
   848d0:	0a0a000a 	and	w10, w0, w10
   848d4:	72a3c40d 	movk	w13, #0x1e20, lsl #16
   848d8:	6b0d015f 	cmp	w10, w13
   848dc:	54022ea0 	b.eq	88eb0 <disasm+0x47b0>  // b.none
		names="fmov\0";
		z=((ic32_22)&0x3); j=((ic32_13)&0xff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_jz; 
	} else
	if(((ic32_8)&0b111111110010000000001100)==0b000111100010000000000100) {
   848e0:	5284018a 	mov	w10, #0x200c                	// #8204
   848e4:	72a01fea 	movk	w10, #0xff, lsl #16
   848e8:	0a0a006a 	and	w10, w3, w10
   848ec:	2a0a03ed 	mov	w13, w10
   848f0:	5284008a 	mov	w10, #0x2004                	// #8196
   848f4:	b90077ed 	str	w13, [sp, #116]
   848f8:	72a003ca 	movk	w10, #0x1e, lsl #16
   848fc:	6b0a01bf 	cmp	w13, w10
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84900:	530c7c0a 	lsr	w10, w0, #12
	if(((ic32_8)&0b111111110010000000001100)==0b000111100010000000000100) {
   84904:	54022aa0 	b.eq	88e58 <disasm+0x4758>  // b.none
		names="ffcmp\0ffcmpe\0";
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_FPz5m; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
	} else
	if(((ic32_8)&0b111111110010000000001100)==0b000111100010000000001000) {
   84908:	b94077ed 	ldr	w13, [sp, #116]
   8490c:	52840101 	mov	w1, #0x2008                	// #8200
   84910:	72a003c1 	movk	w1, #0x1e, lsl #16
   84914:	6b0101bf 	cmp	w13, w1
   84918:	54023d80 	b.eq	890c8 <disasm+0x49c8>  // b.none
		names="fmul\0fdiv\0fadd\0fsub\0fmax\0fmin\0fmaxnm\0fminmn\0fnmul\0";
		op=((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; 
	} else
	if(((ic32_8)&0b111111110010000000001100)==0b000111100010000000001100) {
   8491c:	b94077ed 	ldr	w13, [sp, #116]
   84920:	52840181 	mov	w1, #0x200c                	// #8204
   84924:	72a003c1 	movk	w1, #0x1e, lsl #16
   84928:	6b0101bf 	cmp	w13, w1
   8492c:	54023a20 	b.eq	89070 <disasm+0x4970>  // b.none
   84930:	a9035bf5 	stp	x21, x22, [sp, #48]
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84934:	53187c16 	lsr	w22, w0, #24
		names="fcsel\0";
		z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; args[3]=disasm_arg_c; 
	} else
	if(((ic32_24)&0b11111111)==0b00011111) {
   84938:	71007edf 	cmp	w22, #0x1f
   8493c:	54023660 	b.eq	89008 <disasm+0x4908>  // b.none
		names="fmadd\0fmsub\0fnmadd\0fnmsub\0";
		op=((ic32_20)&0x2)|((ic32_15)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; args[3]=disasm_arg_FPz5t; args[4]=disasm_arg_FPz5n; args[5]=disasm_arg_FPz5d; 
	} else
	if(((ic32_8)&0b111111111111100011111100)==0b001011110000000011100100) {
   84940:	121e5461 	and	w1, w3, #0xfffffc
   84944:	2a0103ed 	mov	w13, w1
   84948:	52801c81 	mov	w1, #0xe4                  	// #228
   8494c:	121571ad 	and	w13, w13, #0xfffff8ff
   84950:	72a005e1 	movk	w1, #0x2f, lsl #16
   84954:	2a0d03f5 	mov	w21, w13
   84958:	b9008ff5 	str	w21, [sp, #140]
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   8495c:	530b7c0d 	lsr	w13, w0, #11
	if(((ic32_8)&0b111111111111100011111100)==0b001011110000000011100100) {
   84960:	6b0102bf 	cmp	w21, w1
   84964:	54023280 	b.eq	88fb4 <disasm+0x48b4>  // b.none
		names="movi\0";
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_imm64; 
	} else
	if(((ic32_8)&0b111111110010000000001100)==0b001110000010000000000000) {
   84968:	b94077e1 	ldr	w1, [sp, #116]
   8496c:	714e083f 	cmp	w1, #0x382, lsl #12
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84970:	53127c01 	lsr	w1, w0, #18
   84974:	b9009be1 	str	w1, [sp, #152]
	if(((ic32_8)&0b111111110010000000001100)==0b001110000010000000000000) {
   84978:	5402b2c0 	b.eq	89fd0 <disasm+0x58d0>  // b.none
		names="ldaddb\0ldclrb\0ldeorb\0ldsetb\0ldsmaxb\0ldsminb\0ldumaxb\0lduminb\0swpb\0?\0?\0?\0?\0?\0?\0?\0ldaddlb\0ldclrlb\0ldeorlb\0ldsetlb\0ldsmaxlb\0ldsminlb\0ldumaxlb\0lduminlb\0swplb\0?\0?\0?\0?\0?\0?\0?\0ldaddab\0ldclrab\0ldeorab\0ldsetab\0ldsmaxab\0ldsminab\0ldumaxab\0lduminab\0swpab\0?\0?\0?\0?\0?\0?\0?\0ldaddalb\0ldclralb\0ldeoralb\0ldsetalb\0ldsmaxalb\0ldsminalb\0ldumaxalb\0lduminalb\0swpalb\0";
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b110111110011111110011100)==0b000011100010000100001000) {
   8497c:	5287f381 	mov	w1, #0x3f9c                	// #16284
   84980:	72a01be1 	movk	w1, #0xdf, lsl #16
   84984:	0a010061 	and	w1, w3, w1
   84988:	2a0103f5 	mov	w21, w1
   8498c:	52842101 	mov	w1, #0x2108                	// #8456
   84990:	b90093f5 	str	w21, [sp, #144]
   84994:	72a001c1 	movk	w1, #0xe, lsl #16
   84998:	6b0102bf 	cmp	w21, w1
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   8499c:	531b7c01 	lsr	w1, w0, #27
	if(((ic32_8)&0b110111110011111110011100)==0b000011100010000100001000) {
   849a0:	5402aee0 	b.eq	89f7c <disasm+0x587c>  // b.none
		names="?\0xtn\0sqxtn\0?\0?\0sqxtun\0uqxtn\0fcvtxn\0";
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; 
	} else
	if(((ic32_8)&0b110111110010000011011100)==0b000011100010000000010000) {
   849a4:	52841b95 	mov	w21, #0x20dc                	// #8412
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   849a8:	531c7c18 	lsr	w24, w0, #28
	if(((ic32_8)&0b110111110010000011011100)==0b000011100010000000010000) {
   849ac:	72a01bf5 	movk	w21, #0xdf, lsl #16
   849b0:	0a150075 	and	w21, w3, w21
   849b4:	2a1503f7 	mov	w23, w21
   849b8:	b9007bf7 	str	w23, [sp, #120]
   849bc:	52840215 	mov	w21, #0x2010                	// #8208
   849c0:	72a001d5 	movk	w21, #0xe, lsl #16
   849c4:	6b1502ff 	cmp	w23, w21
   849c8:	5402aaa0 	b.eq	89f1c <disasm+0x581c>  // b.none
		names="saddw\0ssubw\0uaddw\0usubw\0";
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b110111110010000011011100)==0b000011100010000001000000) {
   849cc:	b9407bf7 	ldr	w23, [sp, #120]
   849d0:	52840815 	mov	w21, #0x2040                	// #8256
   849d4:	72a001d5 	movk	w21, #0xe, lsl #16
   849d8:	6b1502ff 	cmp	w23, w21
   849dc:	5402a700 	b.eq	89ebc <disasm+0x57bc>  // b.none
		names="addhn\0subhn\0raddhn\0rsubhn\0";
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT3; 
	} else
	if(((ic32_8)&0b110111110010000011111100)==0b000011100010000011100000) {
   849e0:	52841f95 	mov	w21, #0x20fc                	// #8444
   849e4:	72a01bf5 	movk	w21, #0xdf, lsl #16
   849e8:	0a150075 	and	w21, w3, w21
   849ec:	2a1503f7 	mov	w23, w21
   849f0:	52841c15 	mov	w21, #0x20e0                	// #8416
   849f4:	b900a3f7 	str	w23, [sp, #160]
   849f8:	72a001d5 	movk	w21, #0xe, lsl #16
   849fc:	6b1502ff 	cmp	w23, w21
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84a00:	531d7c15 	lsr	w21, w0, #29
	if(((ic32_8)&0b110111110010000011111100)==0b000011100010000011100000) {
   84a04:	5402a300 	b.eq	89e64 <disasm+0x5764>  // b.none
		names="pmull\0umull\0";
		op=((ic32_29)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_VtT4; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b110111110010000000001100)==0b000011100010000000000000) {
   84a08:	52840197 	mov	w23, #0x200c                	// #8204
   84a0c:	72a01bf7 	movk	w23, #0xdf, lsl #16
   84a10:	0a170077 	and	w23, w3, w23
   84a14:	b900abf7 	str	w23, [sp, #168]
   84a18:	71438aff 	cmp	w23, #0xe2, lsl #12
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84a1c:	53197c17 	lsr	w23, w0, #25
	if(((ic32_8)&0b110111110010000000001100)==0b000011100010000000000000) {
   84a20:	54029f20 	b.eq	89e04 <disasm+0x5704>  // b.none
		names="saddl\0saddw\0ssubl\0ssubw\0addhn\0sabal\0subhn\0sabdl\0smlal\0sqdmlal\0smlsl\0sqdmlsl\0?\0sqdmull\0pmull\0?\0uaddl\0uaddw\0usubl\0usubw\0raddhn\0uabal\0rsubhn\0uabdl\0umlal\0?\0umlsl\0?\0?\0?\0umull\0";
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b110111111100000000100100)==0b000011110100000000100000) {
   84a24:	5298049b 	mov	w27, #0xc024                	// #49188
   84a28:	72a01bfb 	movk	w27, #0xdf, lsl #16
   84a2c:	0a1b007b 	and	w27, w3, w27
   84a30:	2a1b03fe 	mov	w30, w27
   84a34:	5288041b 	mov	w27, #0x4020                	// #16416
   84a38:	72a001fb 	movk	w27, #0xf, lsl #16
   84a3c:	6b1b03df 	cmp	w30, w27
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84a40:	531a7c1b 	lsr	w27, w0, #26
	if(((ic32_8)&0b110111111100000000100100)==0b000011110100000000100000) {
   84a44:	b9007ffe 	str	w30, [sp, #124]
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84a48:	b9008bfb 	str	w27, [sp, #136]
	if(((ic32_8)&0b110111111100000000100100)==0b000011110100000000100000) {
   84a4c:	54029a40 	b.eq	89d94 <disasm+0x5694>  // b.none
		names="smlal\0sqdmlal\0smlsl\0sqdmlsl\0smull\0sqdmull\0?\0?\0umlal\0?\0umlsl\0?\0umull\0";
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;q=0;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b110111111000000011100100)==0b000011110000000010000100) {
   84a50:	52901c9b 	mov	w27, #0x80e4                	// #32996
   84a54:	72a01bfb 	movk	w27, #0xdf, lsl #16
   84a58:	0a1b007b 	and	w27, w3, w27
   84a5c:	2a1b03fe 	mov	w30, w27
   84a60:	b90097fe 	str	w30, [sp, #148]
   84a64:	5280109b 	mov	w27, #0x84                  	// #132
   84a68:	72a001fb 	movk	w27, #0xf, lsl #16
   84a6c:	6b1b03df 	cmp	w30, w27
   84a70:	54029640 	b.eq	89d38 <disasm+0x5638>  // b.none
		names="?\0rshrn\0sqshrn\0sqrshrn\0sqshrun\0sqrshrun\0uqshrn\0uqrshrn\0";
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b110111111000000011111100)==0b000011110000000010100100) {
   84a74:	52901f9b 	mov	w27, #0x80fc                	// #33020
   84a78:	72a01bfb 	movk	w27, #0xdf, lsl #16
   84a7c:	0a1b007b 	and	w27, w3, w27
   84a80:	2a1b03fe 	mov	w30, w27
   84a84:	b9008bfe 	str	w30, [sp, #136]
   84a88:	5280149b 	mov	w27, #0xa4                  	// #164
   84a8c:	72a001fb 	movk	w27, #0xf, lsl #16
   84a90:	6b1b03df 	cmp	w30, w27
   84a94:	54029280 	b.eq	89ce4 <disasm+0x55e4>  // b.none
		names="sshll\0usshll\0";
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=0;
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shlshift; 
	} else
	if(((ic32_8)&0b110111111100000000100100)==0b000011111000000000100000) {
   84a98:	b9407ffe 	ldr	w30, [sp, #124]
   84a9c:	5290041b 	mov	w27, #0x8020                	// #32800
   84aa0:	72a001fb 	movk	w27, #0xf, lsl #16
   84aa4:	6b1b03df 	cmp	w30, w27
   84aa8:	54028e40 	b.eq	89c70 <disasm+0x5570>  // b.none
		names="smlal\0sqdmlal\0smlsl\0sqdmlsl\0smull\0sqdmull\0?\0?\0umlal\0?\0umlsl\0?\0umull\0";
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;q=0;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111110000000001111100)==0b010010000000000001111100) {
   84aac:	52800f9b 	mov	w27, #0x7c                  	// #124
   84ab0:	72a0091b 	movk	w27, #0x48, lsl #16
   84ab4:	6b1b035f 	cmp	w26, w27
   84ab8:	54028aa0 	b.eq	89c0c <disasm+0x550c>  // b.none
		names="stxrh\0stlxrh\0?\0?\0?\0?\0?\0?\0?\0?\0cash\0caslh\0?\0?\0casah\0casalh\0";
		op=((ic32_20)&0xe)|((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111111110000011111100)==0b010011100000000000011100) {
   84abc:	121e547a 	and	w26, w3, #0xfffffc
   84ac0:	5280039b 	mov	w27, #0x1c                  	// #28
   84ac4:	12136b5a 	and	w26, w26, #0xffffe0ff
   84ac8:	72a009db 	movk	w27, #0x4e, lsl #16
   84acc:	6b1b035f 	cmp	w26, w27
   84ad0:	54028720 	b.eq	89bb4 <disasm+0x54b4>  // b.none
		names="ins\0";
		j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_R2n; 
	} else
	if(((ic32_8)&0b111111111111111111001100)==0b010011100010100001001000) {
   84ad4:	121e547b 	and	w27, w3, #0xfffffc
   84ad8:	5285091e 	mov	w30, #0x2848                	// #10312
   84adc:	121a777b 	and	w27, w27, #0xffffffcf
   84ae0:	72a009de 	movk	w30, #0x4e, lsl #16
   84ae4:	6b1e037f 	cmp	w27, w30
   84ae8:	54028400 	b.eq	89b68 <disasm+0x5468>  // b.none
		names="aese\0aesd\0aesmc\0aesimc\0";
		op=((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt16b; args[1]=disasm_arg_Vn16b; 
	} else
	if(((ic32_8)&0b111111111011111111111100)==0b010011100010000101101000) {
   84aec:	52842d1b 	mov	w27, #0x2168                	// #8552
   84af0:	72a009db 	movk	w27, #0x4e, lsl #16
   84af4:	6b1b009f 	cmp	w4, w27
   84af8:	54028120 	b.eq	89b1c <disasm+0x541c>  // b.none
		names="fcvtn2\0";
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_Vnz3; 
	} else
	if(((ic32_8)&0b111111111011111111111100)==0b010011100010000111101000) {
   84afc:	52843d1b 	mov	w27, #0x21e8                	// #8680
   84b00:	72a009db 	movk	w27, #0x4e, lsl #16
   84b04:	6b1b009f 	cmp	w4, w27
   84b08:	54027e40 	b.eq	89ad0 <disasm+0x53d0>  // b.none
		names="fcvtl2\0";
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_Vnzq2; 
	} else
	if(((ic32_8)&0b111111110011111111111100)==0b010011100010000100101000) {
   84b0c:	52842504 	mov	w4, #0x2128                	// #8488
   84b10:	72a009c4 	movk	w4, #0x4e, lsl #16
   84b14:	6b04013f 	cmp	w9, w4
   84b18:	54027b60 	b.eq	89a84 <disasm+0x5384>  // b.none
		names="xtn2\0";
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT2; 
	} else
	if(((ic32_8)&0b111111110011111111111100)==0b010011100010000100111000) {
   84b1c:	52842704 	mov	w4, #0x2138                	// #8504
   84b20:	72a009c4 	movk	w4, #0x4e, lsl #16
   84b24:	6b04013f 	cmp	w9, w4
   84b28:	54030040 	b.eq	8ab30 <disasm+0x6430>  // b.none
		names="shll2\0";
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_shift8; 
	} else
	if(((ic32_8)&0b111111110010000010011100)==0b010011100010000010010000) {
   84b2c:	52841204 	mov	w4, #0x2090                	// #8336
   84b30:	72a009c4 	movk	w4, #0x4e, lsl #16
   84b34:	6b0401df 	cmp	w14, w4
   84b38:	5402fd00 	b.eq	8aad8 <disasm+0x63d8>  // b.none
		names="sqdmlal2\0sqdmlsl2\0sqdmull2\0";
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b111111111100000010110100)==0b010011110100000000100000) {
   84b3c:	52880404 	mov	w4, #0x4020                	// #16416
   84b40:	72a009e4 	movk	w4, #0x4f, lsl #16
   84b44:	6b04021f 	cmp	w16, w4
   84b48:	5402f980 	b.eq	8aa78 <disasm+0x6378>  // b.none
		names="smlal2\0smlsl2\0";
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;q=1;
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111100000011110100)==0b010011110100000010100000) {
   84b4c:	52881404 	mov	w4, #0x40a0                	// #16544
   84b50:	72a009e4 	movk	w4, #0x4f, lsl #16
   84b54:	6b04025f 	cmp	w18, w4
   84b58:	5402f600 	b.eq	8aa18 <disasm+0x6318>  // b.none
		names="smull2\0";
		j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;q=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111100000010110100)==0b010011111000000000100000) {
   84b5c:	52900404 	mov	w4, #0x8020                	// #32800
   84b60:	72a009e4 	movk	w4, #0x4f, lsl #16
   84b64:	6b04021f 	cmp	w16, w4
   84b68:	5402f280 	b.eq	8a9b8 <disasm+0x62b8>  // b.none
		names="smlal2\0smlsl2\0";
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;q=1;
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111100000011110100)==0b010011111000000010100000) {
   84b6c:	52901404 	mov	w4, #0x80a0                	// #32928
   84b70:	72a009e4 	movk	w4, #0x4f, lsl #16
   84b74:	6b04025f 	cmp	w18, w4
   84b78:	5402ef00 	b.eq	8a958 <disasm+0x6258>  // b.none
		names="smull2\0";
		j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;q=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if((ic32&0b11111111000000000000000000010000)==0b01010100000000000000000000000000) {
   84b7c:	121c6c04 	and	w4, w0, #0xfffffff0
   84b80:	52aa8012 	mov	w18, #0x54000000            	// #1409286144
   84b84:	12083084 	and	w4, w4, #0xff00001f
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   84b88:	53177c10 	lsr	w16, w0, #23
	if((ic32&0b11111111000000000000000000010000)==0b01010100000000000000000000000000) {
   84b8c:	6b12009f 	cmp	w4, w18
   84b90:	5402eb00 	b.eq	8a8f0 <disasm+0x61f0>  // b.none
		names="b.%s\0";
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); c=((ic32)&0xf); 
		args[0]=disasm_arg_labeli4; 
	} else
	if(((ic32_8)&0b111111111110000011111100)==0b010111100000000000000100) {
   84b94:	52800084 	mov	w4, #0x4                   	// #4
   84b98:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84b9c:	6b04035f 	cmp	w26, w4
   84ba0:	5402e7c0 	b.eq	8a898 <disasm+0x6198>  // b.none
		names="dup\0";
		j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111111110000011111100)==0b010111100000000000110000) {
   84ba4:	52800604 	mov	w4, #0x30                  	// #48
   84ba8:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84bac:	6b04035f 	cmp	w26, w4
   84bb0:	5402e480 	b.eq	8a840 <disasm+0x6140>  // b.none
		names="sha1su0\0";
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
	} else
	if(((ic32_8)&0b111111111110000011001100)==0b010111100000000000000000) {
   84bb4:	529c1984 	mov	w4, #0xe0cc                	// #57548
   84bb8:	72a01fe4 	movk	w4, #0xff, lsl #16
   84bbc:	0a040064 	and	w4, w3, w4
   84bc0:	7157809f 	cmp	w4, #0x5e0, lsl #12
   84bc4:	5402e120 	b.eq	8a7e8 <disasm+0x60e8>  // b.none
		names="sha1c\0sha1p\0sha1m\0sha1su0\0";
		op=((ic32_12)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Sn; args[2]=disasm_arg_Vm4s; 
	} else
	if(((ic32_8)&0b111111111110000011101100)==0b010111100000000001000000) {
   84bc8:	529c1d84 	mov	w4, #0xe0ec                	// #57580
   84bcc:	52800812 	mov	w18, #0x40                  	// #64
   84bd0:	72a01fe4 	movk	w4, #0xff, lsl #16
   84bd4:	0a040064 	and	w4, w3, w4
   84bd8:	72a00bd2 	movk	w18, #0x5e, lsl #16
   84bdc:	6b12009f 	cmp	w4, w18
   84be0:	5402dd80 	b.eq	8a790 <disasm+0x6090>  // b.none
		names="sha256h\0sha256h2\0";
		op=((ic32_12)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Qn; args[2]=disasm_arg_Vm4s; 
	} else
	if(((ic32_8)&0b111111111110000011111100)==0b010111100000000001100000) {
   84be4:	52800c04 	mov	w4, #0x60                  	// #96
   84be8:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84bec:	6b04035f 	cmp	w26, w4
   84bf0:	5402da40 	b.eq	8a738 <disasm+0x6038>  // b.none
		names="sha256su1\0";
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
	} else
	if(((ic32_8)&0b111111111111111111111100)==0b010111100010100000001000) {
   84bf4:	52850104 	mov	w4, #0x2808                	// #10248
   84bf8:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84bfc:	6b04033f 	cmp	w25, w4
   84c00:	5402d760 	b.eq	8a6ec <disasm+0x5fec>  // b.none
		names="sha1h\0";
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_St; args[1]=disasm_arg_Sn; 
	} else
	if(((ic32_8)&0b111111111111111111111100)==0b010111100010100000011000) {
   84c04:	52850304 	mov	w4, #0x2818                	// #10264
   84c08:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84c0c:	6b04033f 	cmp	w25, w4
   84c10:	5402d480 	b.eq	8a6a0 <disasm+0x5fa0>  // b.none
		names="sha1su1\0";
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
	} else
	if(((ic32_8)&0b111111111111111111111100)==0b010111100010100000101000) {
   84c14:	52850504 	mov	w4, #0x2828                	// #10280
   84c18:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84c1c:	6b04033f 	cmp	w25, w4
   84c20:	5402d1a0 	b.eq	8a654 <disasm+0x5f54>  // b.none
		names="sha256su0\0";
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
	} else
	if(((ic32_8)&0b111111111110000011111100)==0b010111100100000000011100) {
   84c24:	52880384 	mov	w4, #0x401c                	// #16412
   84c28:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84c2c:	6b04035f 	cmp	w26, w4
   84c30:	5402ce60 	b.eq	8a5fc <disasm+0x5efc>  // b.none
		names="fmulx\0";
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
	} else
	if(((ic32_8)&0b111111111110000011111100)==0b010111100100000000100100) {
   84c34:	52880484 	mov	w4, #0x4024                	// #16420
   84c38:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84c3c:	6b04035f 	cmp	w26, w4
   84c40:	5402cb20 	b.eq	8a5a4 <disasm+0x5ea4>  // b.none
		names="fcmeq\0";
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
	} else
	if(((ic32_8)&0b111111111010000011111100)==0b010111100010000011011100) {
   84c44:	52941f84 	mov	w4, #0xa0fc                	// #41212
   84c48:	72a01fe4 	movk	w4, #0xff, lsl #16
   84c4c:	0a04007b 	and	w27, w3, w4
   84c50:	52841b84 	mov	w4, #0x20dc                	// #8412
   84c54:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84c58:	6b04037f 	cmp	w27, w4
   84c5c:	5402c780 	b.eq	8a54c <disasm+0x5e4c>  // b.none
		names="fmulx\0";
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
	} else
	if(((ic32_8)&0b111111111010000011111100)==0b010111100010000011100100) {
   84c60:	52841c84 	mov	w4, #0x20e4                	// #8420
   84c64:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84c68:	6b04037f 	cmp	w27, w4
   84c6c:	5402c440 	b.eq	8a4f4 <disasm+0x5df4>  // b.none
		names="fcmeq\0";
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
	} else
	if(((ic32_8)&0b111111110111111111001100)==0b010111100011000011001000) {
   84c70:	528ff984 	mov	w4, #0x7fcc                	// #32716
   84c74:	52861912 	mov	w18, #0x30c8                	// #12488
   84c78:	72a01fe4 	movk	w4, #0xff, lsl #16
   84c7c:	0a040064 	and	w4, w3, w4
   84c80:	72a00bd2 	movk	w18, #0x5e, lsl #16
   84c84:	6b12009f 	cmp	w4, w18
   84c88:	5402c0c0 	b.eq	8a4a0 <disasm+0x5da0>  // b.none
		names="fmaxnmp\0faddp\0?\0fmaxp\0fminnmp\0?\0?\0fminp\0";
		op=((ic32_21)&0x4)|((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Vn2h; 
	} else
	if(((ic32_8)&0b111111110110000011111100)==0b010111100100000000111100) {
   84c8c:	528c1f84 	mov	w4, #0x60fc                	// #24828
   84c90:	72a01fe4 	movk	w4, #0xff, lsl #16
   84c94:	0a040064 	and	w4, w3, w4
   84c98:	2a0403f2 	mov	w18, w4
   84c9c:	b900b3f2 	str	w18, [sp, #176]
   84ca0:	52880784 	mov	w4, #0x403c                	// #16444
   84ca4:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84ca8:	6b04025f 	cmp	w18, w4
   84cac:	5402bce0 	b.eq	8a448 <disasm+0x5d48>  // b.none
		names="frecps\0frsqrts\0";
		op=((ic32_23)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
	} else
	if(((ic32_8)&0b111111110011111111111100)==0b010111100011000110111000) {
   84cb0:	52863704 	mov	w4, #0x31b8                	// #12728
   84cb4:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84cb8:	6b04013f 	cmp	w9, w4
   84cbc:	5402ba00 	b.eq	8a3fc <disasm+0x5cfc>  // b.none
		names="addp\0";
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_Vn2d; 
	} else
	if(((ic32_8)&0b111111110010000011111100)==0b010111100010000011111100) {
   84cc0:	52841f84 	mov	w4, #0x20fc                	// #8444
   84cc4:	52841f89 	mov	w9, #0x20fc                	// #8444
   84cc8:	72a01fe4 	movk	w4, #0xff, lsl #16
   84ccc:	0a040064 	and	w4, w3, w4
   84cd0:	72a00bc9 	movk	w9, #0x5e, lsl #16
   84cd4:	6b09009f 	cmp	w4, w9
   84cd8:	5402b660 	b.eq	8a3a4 <disasm+0x5ca4>  // b.none
		names="frecps\0frsqrts\0";
		op=((ic32_23)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
	} else
	if(((ic32_8)&0b111111110010000010011100)==0b010111100010000010010000) {
   84cdc:	52841204 	mov	w4, #0x2090                	// #8336
   84ce0:	72a00bc4 	movk	w4, #0x5e, lsl #16
   84ce4:	6b0401df 	cmp	w14, w4
   84ce8:	5402b320 	b.eq	8a34c <disasm+0x5c4c>  // b.none
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz2n; args[2]=disasm_arg_FPz2m; 
	} else
	if(((ic32_8)&0b111111111100000011100100)==0b010111110100000011000000) {
   84cec:	52981c84 	mov	w4, #0xc0e4                	// #49380
   84cf0:	72a01fe4 	movk	w4, #0xff, lsl #16
   84cf4:	0a04006e 	and	w14, w3, w4
   84cf8:	52881804 	mov	w4, #0x40c0                	// #16576
   84cfc:	72a00be4 	movk	w4, #0x5f, lsl #16
   84d00:	6b0401df 	cmp	w14, w4
   84d04:	5402af40 	b.eq	8a2ec <disasm+0x5bec>  // b.none
		names="sqdmulh\0sqrdmulh\0";
		op=((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz4n; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111100000000110100)==0b010111110100000000110000) {
   84d08:	52980684 	mov	w4, #0xc034                	// #49204
   84d0c:	72a01fe4 	movk	w4, #0xff, lsl #16
   84d10:	0a040072 	and	w18, w3, w4
   84d14:	52880604 	mov	w4, #0x4030                	// #16432
   84d18:	72a00be4 	movk	w4, #0x5f, lsl #16
   84d1c:	6b04025f 	cmp	w18, w4
   84d20:	5402ab60 	b.eq	8a28c <disasm+0x5b8c>  // b.none
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
		op=((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111000000011011100)==0b010111110000000001010100) {
   84d24:	52901b84 	mov	w4, #0x80dc                	// #32988
   84d28:	52800a89 	mov	w9, #0x54                  	// #84
   84d2c:	72a01fe4 	movk	w4, #0xff, lsl #16
   84d30:	0a040064 	and	w4, w3, w4
   84d34:	72a00be9 	movk	w9, #0x5f, lsl #16
   84d38:	6b09009f 	cmp	w4, w9
   84d3c:	5402a7e0 	b.eq	8a238 <disasm+0x5b38>  // b.none
		names="shl\0sqshl\0";
		op=((ic32_13)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shlshift; 
	} else
	if(((ic32_8)&0b111111111100000011100100)==0b010111111000000011000000) {
   84d40:	52901804 	mov	w4, #0x80c0                	// #32960
   84d44:	72a00be4 	movk	w4, #0x5f, lsl #16
   84d48:	6b0401df 	cmp	w14, w4
   84d4c:	5402a460 	b.eq	8a1d8 <disasm+0x5ad8>  // b.none
		names="sqdmulh\0sqrdmulh\0";
		op=((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz4n; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111100000000110100)==0b010111111000000000110000) {
   84d50:	52900604 	mov	w4, #0x8030                	// #32816
   84d54:	72a00be4 	movk	w4, #0x5f, lsl #16
   84d58:	6b04025f 	cmp	w18, w4
   84d5c:	5402a0e0 	b.eq	8a178 <disasm+0x5a78>  // b.none
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
		op=((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_16)&0b1111111111000000)==0b0110100011000000) {
   84d60:	121a24a4 	and	w4, w5, #0xffc0
   84d64:	2a0403e9 	mov	w9, w4
   84d68:	b90083e9 	str	w9, [sp, #128]
   84d6c:	528d1804 	mov	w4, #0x68c0                	// #26816
   84d70:	6b04013f 	cmp	w9, w4
   84d74:	54029ca0 	b.eq	8a108 <disasm+0x5a08>  // b.none
		names="ldpsw\0";
		i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_im4_opt; 
	} else
	if(((ic32_16)&0b1111111101000000)==0b0110100101000000) {
   84d78:	529fe804 	mov	w4, #0xff40                	// #65344
   84d7c:	0a0400a4 	and	w4, w5, w4
   84d80:	528d2809 	mov	w9, #0x6940                	// #26944
   84d84:	6b09009f 	cmp	w4, w9
   84d88:	54029840 	b.eq	8a090 <disasm+0x5990>  // b.none
		names="ldpsw\0";
		p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_im4_opt; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111111110000010000100)==0b011011100000000000000100) {
   84d8c:	529c1084 	mov	w4, #0xe084                	// #57476
   84d90:	52800089 	mov	w9, #0x4                   	// #4
   84d94:	72a01fe4 	movk	w4, #0xff, lsl #16
   84d98:	0a040064 	and	w4, w3, w4
   84d9c:	72a00dc9 	movk	w9, #0x6e, lsl #16
   84da0:	6b09009f 	cmp	w4, w9
   84da4:	54029480 	b.eq	8a034 <disasm+0x5934>  // b.none
		names="ins\0";
		j=((ic32_16)&0x1f); k=((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_Vnj; args[5]=disasm_arg_offs; args[6]=disasm_arg_FPidxk; args[7]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111110011111111001100)==0b011011100011000011001000) {
   84da8:	5287f984 	mov	w4, #0x3fcc                	// #16332
   84dac:	72a01fe4 	movk	w4, #0xff, lsl #16
   84db0:	0a040072 	and	w18, w3, w4
   84db4:	52861904 	mov	w4, #0x30c8                	// #12488
   84db8:	72a00dc4 	movk	w4, #0x6e, lsl #16
   84dbc:	6b04025f 	cmp	w18, w4
   84dc0:	5405c420 	b.eq	90644 <disasm+0xbf44>  // b.none
		names="fmaxnmv\0?\0?\0fmaxv\0fminnmv\0?\0?\0fminv\0";
		op=((ic32_21)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vn4s; 
	} else
	if(((ic32_8)&0b111111111111100011111100)==0b011011110000000011100100) {
   84dc4:	b9408fe9 	ldr	w9, [sp, #140]
   84dc8:	52801c84 	mov	w4, #0xe4                  	// #228
   84dcc:	72a00de4 	movk	w4, #0x6f, lsl #16
   84dd0:	6b04013f 	cmp	w9, w4
   84dd4:	5405c0e0 	b.eq	905f0 <disasm+0xbef0>  // b.none
		names="movi\0";
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_imm64; 
	} else
	if(((ic32_8)&0b111111111111100011111100)==0b011011110000000011110100) {
   84dd8:	b9408fe9 	ldr	w9, [sp, #140]
   84ddc:	52801e84 	mov	w4, #0xf4                  	// #244
   84de0:	72a00de4 	movk	w4, #0x6f, lsl #16
   84de4:	6b04013f 	cmp	w9, w4
   84de8:	5405bda0 	b.eq	9059c <disasm+0xbe9c>  // b.none
		names="fmov\0";
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_F64; 
	} else
	if(((ic32_8)&0b111111110010000000001100)==0b011110000010000000000000) {
   84dec:	b94077e4 	ldr	w4, [sp, #116]
   84df0:	715e089f 	cmp	w4, #0x782, lsl #12
   84df4:	5405ba00 	b.eq	90534 <disasm+0xbe34>  // b.none
		names="ldaddh\0ldclrh\0ldeorh\0ldseth\0ldsmaxh\0ldsminh\0ldumaxh\0lduminh\0swph\0?\0?\0?\0?\0?\0?\0?\0ldaddlh\0ldclrlh\0ldeorlh\0ldsetlh\0ldsmaxlh\0ldsminlh\0ldumaxlh\0lduminlh\0swplh\0?\0?\0?\0?\0?\0?\0?\0ldaddah\0ldclrah\0ldeorah\0ldsetah\0ldsmaxah\0ldsminah\0ldumaxah\0lduminah\0swpah\0?\0?\0?\0?\0?\0?\0?\0ldaddalh\0ldclralh\0ldeoralh\0ldsetalh\0ldsmaxalh\0ldsminalh\0ldumaxalh\0lduminalh\0swpalh\0";
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111111101111111111100)==0b011111100001000011001000) {
   84df8:	121e5464 	and	w4, w3, #0xfffffc
   84dfc:	52821909 	mov	w9, #0x10c8                	// #4296
   84e00:	12127884 	and	w4, w4, #0xffffdfff
   84e04:	72a00fc9 	movk	w9, #0x7e, lsl #16
   84e08:	6b09009f 	cmp	w4, w9
   84e0c:	5405b6e0 	b.eq	904e8 <disasm+0xbde8>  // b.none
		names="fmaxnmp\0";
		z=((ic32_21)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vnz; 
	} else
	if(((ic32_8)&0b111111111110000011110100)==0b011111100100000000100100) {
   84e10:	529c1e84 	mov	w4, #0xe0f4                	// #57588
   84e14:	72a01fe4 	movk	w4, #0xff, lsl #16
   84e18:	0a04006e 	and	w14, w3, w4
   84e1c:	52880484 	mov	w4, #0x4024                	// #16420
   84e20:	72a00fc4 	movk	w4, #0x7e, lsl #16
   84e24:	6b0401df 	cmp	w14, w4
   84e28:	5405b340 	b.eq	90490 <disasm+0xbd90>  // b.none
		names="fcmge\0facge\0";
		op=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
	} else
	if(((ic32_8)&0b111111111010000011110100)==0b011111100010000011100100) {
   84e2c:	52941e84 	mov	w4, #0xa0f4                	// #41204
   84e30:	52841c89 	mov	w9, #0x20e4                	// #8420
   84e34:	72a01fe4 	movk	w4, #0xff, lsl #16
   84e38:	0a040064 	and	w4, w3, w4
   84e3c:	72a00fc9 	movk	w9, #0x7e, lsl #16
   84e40:	6b09009f 	cmp	w4, w9
   84e44:	5405afa0 	b.eq	90438 <disasm+0xbd38>  // b.none
		names="fcmge\0facge\0";
		op=((ic32_11)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
	} else
	if(((ic32_8)&0b111111111110000011111100)==0b011111101100000000010100) {
   84e48:	52980289 	mov	w9, #0xc014                	// #49172
   84e4c:	72a00fc9 	movk	w9, #0x7e, lsl #16
   84e50:	6b09035f 	cmp	w26, w9
   84e54:	5405ac60 	b.eq	903e0 <disasm+0xbce0>  // b.none
		names="fabd\0";
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
	} else
	if(((ic32_8)&0b111111111110000011110100)==0b011111101100000000100100) {
   84e58:	52980489 	mov	w9, #0xc024                	// #49188
   84e5c:	72a00fc9 	movk	w9, #0x7e, lsl #16
   84e60:	6b0901df 	cmp	w14, w9
   84e64:	5405a920 	b.eq	90388 <disasm+0xbc88>  // b.none
		names="fcmgt\0facgt\0";
		op=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
	} else
	if(((ic32_8)&0b111111111010000011111100)==0b011111101010000011010100) {
   84e68:	52941a89 	mov	w9, #0xa0d4                	// #41172
   84e6c:	72a00fc9 	movk	w9, #0x7e, lsl #16
   84e70:	6b09037f 	cmp	w27, w9
   84e74:	5405a5e0 	b.eq	90330 <disasm+0xbc30>  // b.none
		names="fabd\0";
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
	} else
	if(((ic32_8)&0b111111111010000011110100)==0b011111101010000011100100) {
   84e78:	52941c89 	mov	w9, #0xa0e4                	// #41188
   84e7c:	72a00fc9 	movk	w9, #0x7e, lsl #16
   84e80:	6b09009f 	cmp	w4, w9
   84e84:	5405a2a0 	b.eq	902d8 <disasm+0xbbd8>  // b.none
		names="fcmgt\0facgt\0";
		op=((ic32_11)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
	} else
	if(((ic32_8)&0b111111110010000011110100)==0b011111100000000010000100) {
   84e88:	52841e84 	mov	w4, #0x20f4                	// #8436
   84e8c:	52801089 	mov	w9, #0x84                  	// #132
   84e90:	72a01fe4 	movk	w4, #0xff, lsl #16
   84e94:	0a040064 	and	w4, w3, w4
   84e98:	72a00fc9 	movk	w9, #0x7e, lsl #16
   84e9c:	6b09009f 	cmp	w4, w9
   84ea0:	54059f00 	b.eq	90280 <disasm+0xbb80>  // b.none
		names="sqrdmlah\0sqrdmlsh\0";
		op=((ic32_11)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz2t; args[1]=disasm_arg_FPz2n; args[2]=disasm_arg_FPz2m; 
	} else
	if(((ic32_8)&0b111111110011111111001100)==0b011111100011000011001000) {
   84ea4:	52861904 	mov	w4, #0x30c8                	// #12488
   84ea8:	72a00fc4 	movk	w4, #0x7e, lsl #16
   84eac:	6b04025f 	cmp	w18, w4
   84eb0:	54059be0 	b.eq	9022c <disasm+0xbb2c>  // b.none
		names="?\0faddp\0?\0fmaxp\0fminnmp\0?\0?\0fminp\0";
		op=((ic32_21)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vnz; 
	} else
	if(((ic32_8)&0b111111111100000011010100)==0b011111110100000011010000) {
   84eb4:	52981a84 	mov	w4, #0xc0d4                	// #49364
   84eb8:	52881a09 	mov	w9, #0x40d0                	// #16592
   84ebc:	72a01fe4 	movk	w4, #0xff, lsl #16
   84ec0:	0a040064 	and	w4, w3, w4
   84ec4:	72a00fe9 	movk	w9, #0x7f, lsl #16
   84ec8:	6b09009f 	cmp	w4, w9
   84ecc:	54059800 	b.eq	901cc <disasm+0xbacc>  // b.none
		names="sqrdmlah\0sqrdmlsh\0";
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111000000011111100)==0b011111110000000001100100) {
   84ed0:	121e5469 	and	w9, w3, #0xfffffc
   84ed4:	52800c8e 	mov	w14, #0x64                  	// #100
   84ed8:	12116129 	and	w9, w9, #0xffff80ff
   84edc:	72a00fee 	movk	w14, #0x7f, lsl #16
   84ee0:	6b0e013f 	cmp	w9, w14
   84ee4:	540594a0 	b.eq	90178 <disasm+0xba78>  // b.none
		names="sqshlu\0";
		j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shlshift; 
	} else
	if(((ic32_8)&0b111111111000000011111100)==0b011111110000000001110100) {
   84ee8:	52800e8e 	mov	w14, #0x74                  	// #116
   84eec:	72a00fee 	movk	w14, #0x7f, lsl #16
   84ef0:	6b0e013f 	cmp	w9, w14
   84ef4:	54059180 	b.eq	90124 <disasm+0xba24>  // b.none
		names="uqshl\0";
		j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPjt2; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shlshift; 
	} else
	if(((ic32_8)&0b111111111100000011010100)==0b011111111000000011010000) {
   84ef8:	52901a09 	mov	w9, #0x80d0                	// #32976
   84efc:	72a00fe9 	movk	w9, #0x7f, lsl #16
   84f00:	6b09009f 	cmp	w4, w9
   84f04:	54058e00 	b.eq	900c4 <disasm+0xb9c4>  // b.none
		names="sqrdmlah\0sqrdmlsh\0";
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b110111110011111110011100)==0b010011100010000100001000) {
   84f08:	b94093e9 	ldr	w9, [sp, #144]
   84f0c:	52842104 	mov	w4, #0x2108                	// #8456
   84f10:	72a009c4 	movk	w4, #0x4e, lsl #16
   84f14:	6b04013f 	cmp	w9, w4
   84f18:	54058ac0 	b.eq	90070 <disasm+0xb970>  // b.none
		names="?\0xtn2\0sqxtn2\0?\0?\0sqxtun2\0uqxtn2\0fcvtxn2\0";
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; 
	} else
	if(((ic32_8)&0b110111110010000011011100)==0b010011100010000000010000) {
   84f1c:	b9407be9 	ldr	w9, [sp, #120]
   84f20:	52840204 	mov	w4, #0x2010                	// #8208
   84f24:	72a009c4 	movk	w4, #0x4e, lsl #16
   84f28:	6b04013f 	cmp	w9, w4
   84f2c:	54058720 	b.eq	90010 <disasm+0xb910>  // b.none
		names="saddw2\0ssubw2\0uaddw2\0usubw2\0";
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b110111110010000011011100)==0b010011100010000001000000) {
   84f30:	b9407be9 	ldr	w9, [sp, #120]
   84f34:	52840804 	mov	w4, #0x2040                	// #8256
   84f38:	72a009c4 	movk	w4, #0x4e, lsl #16
   84f3c:	6b04013f 	cmp	w9, w4
   84f40:	54058380 	b.eq	8ffb0 <disasm+0xb8b0>  // b.none
		names="addhn2\0subhn2\0raddhn2\0rsubhn2\0";
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT3; 
	} else
	if(((ic32_8)&0b110111110010000011111100)==0b010011100010000011100000) {
   84f44:	b940a3e9 	ldr	w9, [sp, #160]
   84f48:	52841c04 	mov	w4, #0x20e0                	// #8416
   84f4c:	72a009c4 	movk	w4, #0x4e, lsl #16
   84f50:	6b04013f 	cmp	w9, w4
   84f54:	54058020 	b.eq	8ff58 <disasm+0xb858>  // b.none
		names="pmull2\0umull2\0";
		op=((ic32_29)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_VtT4; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b110111110010000000001100)==0b010011100010000000000000) {
   84f58:	b940abe4 	ldr	w4, [sp, #168]
   84f5c:	7153889f 	cmp	w4, #0x4e2, lsl #12
   84f60:	54057cc0 	b.eq	8fef8 <disasm+0xb7f8>  // b.none
		names="saddl2\0saddw2\0ssubl2\0ssubw2\0addhn2\0sabal2\0subhn2\0sabdl2\0smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0?\0sqdmull2\0pmull2\0?\0uaddl2\0uaddw2\0usubl2\0usubw2\0raddhn2\0uabal2\0rsubhn2\0uabdl2\0umlal2\0?\0umlsl2\0?\0?\0?\0umull2\0";
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b110111111100000000100100)==0b010011110100000000100000) {
   84f64:	b9407fe9 	ldr	w9, [sp, #124]
   84f68:	52880404 	mov	w4, #0x4020                	// #16416
   84f6c:	72a009e4 	movk	w4, #0x4f, lsl #16
   84f70:	6b04013f 	cmp	w9, w4
   84f74:	54057880 	b.eq	8fe84 <disasm+0xb784>  // b.none
		names="smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0smull2\0sqdmull2\0?\0?\0umlal2\0?\0umlsl2\0?\0umull2\0";
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;q=1;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b110111111000000011100100)==0b010011110000000010000100) {
   84f78:	b94097e9 	ldr	w9, [sp, #148]
   84f7c:	52801084 	mov	w4, #0x84                  	// #132
   84f80:	72a009e4 	movk	w4, #0x4f, lsl #16
   84f84:	6b04013f 	cmp	w9, w4
   84f88:	54057500 	b.eq	8fe28 <disasm+0xb728>  // b.none
		names="?\0rshrn2\0sqshrn2\0sqrshrn2\0sqshrun2\0sqrshrun2\0uqshrn2\0uqrshrn2\0";
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b110111111000000011111100)==0b010011110000000010100100) {
   84f8c:	b9408be9 	ldr	w9, [sp, #136]
   84f90:	52801484 	mov	w4, #0xa4                  	// #164
   84f94:	72a009e4 	movk	w4, #0x4f, lsl #16
   84f98:	6b04013f 	cmp	w9, w4
   84f9c:	540571c0 	b.eq	8fdd4 <disasm+0xb6d4>  // b.none
		names="sshll2\0usshll2\0";
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		q=1;
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shlshift; 
	} else
	if(((ic32_8)&0b110111111100000000100100)==0b010011111000000000100000) {
   84fa0:	b9407fe9 	ldr	w9, [sp, #124]
   84fa4:	52900404 	mov	w4, #0x8020                	// #32800
   84fa8:	72a009e4 	movk	w4, #0x4f, lsl #16
   84fac:	6b04013f 	cmp	w9, w4
   84fb0:	54056d80 	b.eq	8fd60 <disasm+0xb660>  // b.none
		names="smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0smull2\0sqdmull2\0?\0?\0umlal2\0?\0umlsl2\0?\0umull2\0";
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;q=1;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b110111111111111111001100)==0b010111101111100011001000) {
   84fb4:	529ff984 	mov	w4, #0xffcc                	// #65484
   84fb8:	529f1909 	mov	w9, #0xf8c8                	// #63688
   84fbc:	72a01be4 	movk	w4, #0xdf, lsl #16
   84fc0:	0a040064 	and	w4, w3, w4
   84fc4:	72a00bc9 	movk	w9, #0x5e, lsl #16
   84fc8:	6b09009f 	cmp	w4, w9
   84fcc:	540569c0 	b.eq	8fd04 <disasm+0xb604>  // b.none
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0";
		op=((ic32_27)&0x4)|((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_simd0; 
	} else
	if(((ic32_8)&0b110111111011111111001100)==0b010111101010000011001000) {
   84fd0:	5297f984 	mov	w4, #0xbfcc                	// #49100
   84fd4:	52941909 	mov	w9, #0xa0c8                	// #41160
   84fd8:	72a01be4 	movk	w4, #0xdf, lsl #16
   84fdc:	0a040064 	and	w4, w3, w4
   84fe0:	72a00bc9 	movk	w9, #0x5e, lsl #16
   84fe4:	6b09009f 	cmp	w4, w9
   84fe8:	54056600 	b.eq	8fca8 <disasm+0xb5a8>  // b.none
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0";
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_simd0; 
	} else
	if(((ic32_8)&0b110111110111111110001100)==0b010111100111100110001000) {
   84fec:	528ff184 	mov	w4, #0x7f8c                	// #32652
   84ff0:	528f3109 	mov	w9, #0x7988                	// #31112
   84ff4:	72a01be4 	movk	w4, #0xdf, lsl #16
   84ff8:	0a040064 	and	w4, w3, w4
   84ffc:	72a00bc9 	movk	w9, #0x5e, lsl #16
   85000:	6b09009f 	cmp	w4, w9
   85004:	54056240 	b.eq	8fc4c <disasm+0xb54c>  // b.none
		names="?\0?\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0?\0?\0?\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0?\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0fcvtpu\0fcvtzu\0?\0frsqrte\0";
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; 
	} else
	if(((ic32_8)&0b110111110011111111001100)==0b010111100010000010001000) {
   85008:	5287f984 	mov	w4, #0x3fcc                	// #16332
   8500c:	52841109 	mov	w9, #0x2088                	// #8328
   85010:	72a01be4 	movk	w4, #0xdf, lsl #16
   85014:	0a040064 	and	w4, w3, w4
   85018:	72a00bc9 	movk	w9, #0x5e, lsl #16
   8501c:	6b09009f 	cmp	w4, w9
   85020:	54055e80 	b.eq	8fbf0 <disasm+0xb4f0>  // b.none
		names="cmgt\0cmeq\0cmlt\0abs\0cmge\0cmle\0?\0neg\0";
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_simd0; 
	} else
	if(((ic32_8)&0b110111110011111100111100)==0b010111100010000000111000) {
   85024:	5287e784 	mov	w4, #0x3f3c                	// #16188
   85028:	52840709 	mov	w9, #0x2038                	// #8248
   8502c:	72a01be4 	movk	w4, #0xdf, lsl #16
   85030:	0a040064 	and	w4, w3, w4
   85034:	72a00bc9 	movk	w9, #0x5e, lsl #16
   85038:	6b09009f 	cmp	w4, w9
   8503c:	54055b00 	b.eq	8fb9c <disasm+0xb49c>  // b.none
		names="suqadd\0sqabs\0abs\0?\0usqadd\0sqneg\0neg\0";
		op=((ic32_27)&0x4)|((ic32_14)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; 
	} else
	if(((ic32_8)&0b110111110011111110011100)==0b010111100010000100001000) {
   85040:	b94093e9 	ldr	w9, [sp, #144]
   85044:	52842104 	mov	w4, #0x2108                	// #8456
   85048:	72a00bc4 	movk	w4, #0x5e, lsl #16
   8504c:	6b04013f 	cmp	w9, w4
   85050:	540557c0 	b.eq	8fb48 <disasm+0xb448>  // b.none
		names="?\0?\0sqxtn\0?\0?\0sqxtun\0uqxtn\0fcvtxn\0";
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz4n; 
	} else
	if(((ic32_8)&0b110111110011111110001100)==0b010111100010000110001000) {
   85054:	5287f184 	mov	w4, #0x3f8c                	// #16268
   85058:	52843109 	mov	w9, #0x2188                	// #8584
   8505c:	72a01be4 	movk	w4, #0xdf, lsl #16
   85060:	0a040064 	and	w4, w3, w4
   85064:	72a00bc9 	movk	w9, #0x5e, lsl #16
   85068:	6b09009f 	cmp	w4, w9
   8506c:	54055400 	b.eq	8faec <disasm+0xb3ec>  // b.none
		names="?\0?\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0?\0?\0?\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0?\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0fcvtpu\0fcvtzu\0?\0frsqrte\0";
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; 
	} else
	if(((ic32_8)&0b110111110010000000000100)==0b010111100010000000000100) {
   85070:	52840084 	mov	w4, #0x2004                	// #8196
   85074:	52840089 	mov	w9, #0x2004                	// #8196
   85078:	72a01be4 	movk	w4, #0xdf, lsl #16
   8507c:	0a040064 	and	w4, w3, w4
   85080:	72a00bc9 	movk	w9, #0x5e, lsl #16
   85084:	6b09009f 	cmp	w4, w9
   85088:	54055020 	b.eq	8fa8c <disasm+0xb38c>  // b.none
		names="?\0sqadd\0?\0?\0?\0sqsub\0cmgt\0cmge\0sshl\0sqshl\0srshl\0sqrshl\0?\0?\0?\0?\0add\0cmtst\0?\0?\0?\0?\0sqdmulh\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0uqadd\0?\0?\0?\0uqsub\0cmhi\0cmhs\0ushl\0uqshl\0urshl\0uqrshl\0?\0?\0?\0?\0sub\0cmeq\0?\0?\0?\0?\0sqrdmulh\0";
		op=((ic32_24)&0x20)|((ic32_11)&0x1f); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_FPz3m; 
	} else
	if(((ic32_8)&0b110111111100000000110100)==0b010111110000000000010000) {
   8508c:	52980684 	mov	w4, #0xc034                	// #49204
   85090:	52800209 	mov	w9, #0x10                  	// #16
   85094:	72a01be4 	movk	w4, #0xdf, lsl #16
   85098:	0a040064 	and	w4, w3, w4
   8509c:	72a00be9 	movk	w9, #0x5f, lsl #16
   850a0:	6b09009f 	cmp	w4, w9
   850a4:	54054c00 	b.eq	8fa24 <disasm+0xb324>  // b.none
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_VmHs; 
	} else
	if(((ic32_8)&0b110111111000000010001100)==0b010111110000000000000100) {
   850a8:	52901189 	mov	w9, #0x808c                	// #32908
   850ac:	5280008e 	mov	w14, #0x4                   	// #4
   850b0:	72a01be9 	movk	w9, #0xdf, lsl #16
   850b4:	0a090069 	and	w9, w3, w9
   850b8:	72a00bee 	movk	w14, #0x5f, lsl #16
   850bc:	6b0e013f 	cmp	w9, w14
   850c0:	54054820 	b.eq	8f9c4 <disasm+0xb2c4>  // b.none
		names="sshr\0ssra\0srshr\0srsra\0?\0shl\0?\0sqshl\0ushr\0usra\0urshr\0ursra\0sri\0sli\0sqshlu\0uqshl\0";
		op=((ic32_26)&0x8)|((ic32_12)&0x7); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b110111111000000011100100)==0b010111110000000010000100) {
   850c4:	b94097ee 	ldr	w14, [sp, #148]
   850c8:	52801089 	mov	w9, #0x84                  	// #132
   850cc:	72a00be9 	movk	w9, #0x5f, lsl #16
   850d0:	6b0901df 	cmp	w14, w9
   850d4:	540544a0 	b.eq	8f968 <disasm+0xb268>  // b.none
		names="?\0?\0sqshrn\0sqrshrn\0sqshrun\0sqrshrun\0uqshrn\0uqrshrn\0";
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_FPnj; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b110111111000000011111100)==0b010111110000000011100100) {
   850d8:	b9408bee 	ldr	w14, [sp, #136]
   850dc:	52801c89 	mov	w9, #0xe4                  	// #228
   850e0:	72a00be9 	movk	w9, #0x5f, lsl #16
   850e4:	6b0901df 	cmp	w14, w9
   850e8:	54054160 	b.eq	8f914 <disasm+0xb214>  // b.none
		names="scvtf\0ucvtf\0";
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPjt2; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b110111111000000011111100)==0b010111110000000011111100) {
   850ec:	b9408bee 	ldr	w14, [sp, #136]
   850f0:	52801f89 	mov	w9, #0xfc                  	// #252
   850f4:	72a00be9 	movk	w9, #0x5f, lsl #16
   850f8:	6b0901df 	cmp	w14, w9
   850fc:	54053e20 	b.eq	8f8c0 <disasm+0xb1c0>  // b.none
		names="fcvtzs\0fcvtzu\0";
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b110111111100000000110100)==0b010111111000000000010000) {
   85100:	52900209 	mov	w9, #0x8010                	// #32784
   85104:	72a00be9 	movk	w9, #0x5f, lsl #16
   85108:	6b09009f 	cmp	w4, w9
   8510c:	54053a60 	b.eq	8f858 <disasm+0xb158>  // b.none
		names="fmla\0fmls\0fmul\0sqrdmulh\0?\0?\0fmulx\0sqrdmlah\0";
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_VmTs2; 
	} else
	if(((ic32_8)&0b110111111110000000110100)==0b010111111100000000010000) {
   85110:	529c0684 	mov	w4, #0xe034                	// #57396
   85114:	52980209 	mov	w9, #0xc010                	// #49168
   85118:	72a01be4 	movk	w4, #0xdf, lsl #16
   8511c:	0a040064 	and	w4, w3, w4
   85120:	72a00be9 	movk	w9, #0x5f, lsl #16
   85124:	6b09009f 	cmp	w4, w9
   85128:	54053680 	b.eq	8f7f8 <disasm+0xb0f8>  // b.none
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_VmTs2; 
	} else
	if(((ic32_8)&0b101111111010000001111100)==0b000010000010000001111100) {
   8512c:	52940f84 	mov	w4, #0xa07c                	// #41084
   85130:	72a017e4 	movk	w4, #0xbf, lsl #16
   85134:	0a040064 	and	w4, w3, w4
   85138:	2a0403e9 	mov	w9, w4
   8513c:	52840f84 	mov	w4, #0x207c                	// #8316
   85140:	b9007fe9 	str	w9, [sp, #124]
   85144:	72a00104 	movk	w4, #0x8, lsl #16
   85148:	6b04013f 	cmp	w9, w4
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   8514c:	531e7c04 	lsr	w4, w0, #30
	if(((ic32_8)&0b101111111010000001111100)==0b000010000010000001111100) {
   85150:	540531e0 	b.eq	8f78c <disasm+0xb08c>  // b.none
		names="casp\0caspl\0caspa\0caspal\0";
		op=((ic32_21)&0x2)|((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rd1; args[2]=disasm_arg_Rt; args[3]=disasm_arg_Rt1; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111110011111101111100)==0b000010000001111101111100) {
   85154:	5287ef89 	mov	w9, #0x3f7c                	// #16252
   85158:	72a017e9 	movk	w9, #0xbf, lsl #16
   8515c:	0a090069 	and	w9, w3, w9
   85160:	2a0903ee 	mov	w14, w9
   85164:	b9008bee 	str	w14, [sp, #136]
   85168:	5283ef89 	mov	w9, #0x1f7c                	// #8060
   8516c:	72a00109 	movk	w9, #0x8, lsl #16
   85170:	6b0901df 	cmp	w14, w9
   85174:	54052dc0 	b.eq	8f72c <disasm+0xb02c>  // b.none
		names="?\0?\0ldxrb\0ldaxrb\0stllrb\0stlrb\0ldlarb\0ldarb\0?\0?\0ldxrh\0ldaxrh\0stllrh\0stlrh\0ldlarh\0ldarh\0";
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_15)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111010000)==0b000011000000000000000000) {
   85178:	5297fa09 	mov	w9, #0xbfd0                	// #49104
   8517c:	72a017e9 	movk	w9, #0xbf, lsl #16
   85180:	0a090069 	and	w9, w3, w9
   85184:	7143013f 	cmp	w9, #0xc0, lsl #12
   85188:	540529e0 	b.eq	8f6c4 <disasm+0xafc4>  // b.none
		names="st4\0st1\0ld4\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111110000)==0b000011000000000001110000) {
   8518c:	5297fe0e 	mov	w14, #0xbff0                	// #49136
   85190:	52800e12 	mov	w18, #0x70                  	// #112
   85194:	72a017ee 	movk	w14, #0xbf, lsl #16
   85198:	0a0e006e 	and	w14, w3, w14
   8519c:	72a00192 	movk	w18, #0xc, lsl #16
   851a0:	6b1201df 	cmp	w14, w18
   851a4:	54052680 	b.eq	8f674 <disasm+0xaf74>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111010000)==0b000011000000000001000000) {
   851a8:	52800812 	mov	w18, #0x40                  	// #64
   851ac:	72a00192 	movk	w18, #0xc, lsl #16
   851b0:	6b12013f 	cmp	w9, w18
   851b4:	54052300 	b.eq	8f614 <disasm+0xaf14>  // b.none
		names="st3\0st1\0ld3\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111010000)==0b000011000000000010000000) {
   851b8:	52801012 	mov	w18, #0x80                  	// #128
   851bc:	72a00192 	movk	w18, #0xc, lsl #16
   851c0:	6b12013f 	cmp	w9, w18
   851c4:	54051f80 	b.eq	8f5b4 <disasm+0xaeb4>  // b.none
		names="st2\0st1\0ld2\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111010000)==0b000011001001111100000000) {
   851c8:	5293e012 	mov	w18, #0x9f00                	// #40704
   851cc:	72a00192 	movk	w18, #0xc, lsl #16
   851d0:	6b12013f 	cmp	w9, w18
   851d4:	54051c00 	b.eq	8f554 <disasm+0xae54>  // b.none
		names="st4\0st1\0ld4\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Qi; 
	} else
	if(((ic32_8)&0b101111111011111111110000)==0b000011001001111101110000) {
   851d8:	5293ee12 	mov	w18, #0x9f70                	// #40816
   851dc:	72a00192 	movk	w18, #0xc, lsl #16
   851e0:	6b1201df 	cmp	w14, w18
   851e4:	540518c0 	b.eq	8f4fc <disasm+0xadfc>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Qi1; 
	} else
	if(((ic32_8)&0b101111111011111111010000)==0b000011001001111101000000) {
   851e8:	5293e80e 	mov	w14, #0x9f40                	// #40768
   851ec:	72a0018e 	movk	w14, #0xc, lsl #16
   851f0:	6b0e013f 	cmp	w9, w14
   851f4:	54051500 	b.eq	8f494 <disasm+0xad94>  // b.none
		names="st3\0st1\0ld3\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Qi3; 
	} else
	if(((ic32_8)&0b101111111011111111010000)==0b000011001001111110000000) {
   851f8:	5293f00e 	mov	w14, #0x9f80                	// #40832
   851fc:	72a0018e 	movk	w14, #0xc, lsl #16
   85200:	6b0e013f 	cmp	w9, w14
   85204:	54051180 	b.eq	8f434 <disasm+0xad34>  // b.none
		names="st2\0st1\0ld2\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Qi2; 
	} else
	if(((ic32_8)&0b101111111010000011010000)==0b000011001000000000000000) {
   85208:	52941a09 	mov	w9, #0xa0d0                	// #41168
   8520c:	72a017e9 	movk	w9, #0xbf, lsl #16
   85210:	0a090069 	and	w9, w3, w9
   85214:	7143213f 	cmp	w9, #0xc8, lsl #12
   85218:	54050dc0 	b.eq	8f3d0 <disasm+0xacd0>  // b.none
		names="st4\0st1\0ld4\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011110000)==0b000011001000000001110000) {
   8521c:	52941e0e 	mov	w14, #0xa0f0                	// #41200
   85220:	52900e12 	mov	w18, #0x8070                	// #32880
   85224:	72a017ee 	movk	w14, #0xbf, lsl #16
   85228:	0a0e006e 	and	w14, w3, w14
   8522c:	72a00192 	movk	w18, #0xc, lsl #16
   85230:	6b1201df 	cmp	w14, w18
   85234:	54050a00 	b.eq	8f374 <disasm+0xac74>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011010000)==0b000011001000000001000000) {
   85238:	5290080e 	mov	w14, #0x8040                	// #32832
   8523c:	72a0018e 	movk	w14, #0xc, lsl #16
   85240:	6b0e013f 	cmp	w9, w14
   85244:	54050620 	b.eq	8f308 <disasm+0xac08>  // b.none
		names="st3\0st1\0ld3\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011010000)==0b000011001000000010000000) {
   85248:	5290100e 	mov	w14, #0x8080                	// #32896
   8524c:	72a0018e 	movk	w14, #0xc, lsl #16
   85250:	6b0e013f 	cmp	w9, w14
   85254:	54050280 	b.eq	8f2a4 <disasm+0xaba4>  // b.none
		names="st2\0st1\0ld2\0ld1\0";
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111111111111110000)==0b000011010100000011000000) {
   85258:	121c4c72 	and	w18, w3, #0xfffff0
   8525c:	52881809 	mov	w9, #0x40c0                	// #16576
   85260:	12097a52 	and	w18, w18, #0xffbfffff
   85264:	72a001a9 	movk	w9, #0xd, lsl #16
   85268:	6b09025f 	cmp	w18, w9
   8526c:	5404ff40 	b.eq	8f254 <disasm+0xab54>  // b.none
		names="ld1r\0";
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111111111111110000)==0b000011010100000011100000) {
   85270:	52881c09 	mov	w9, #0x40e0                	// #16608
   85274:	72a001a9 	movk	w9, #0xd, lsl #16
   85278:	6b09025f 	cmp	w18, w9
   8527c:	5404fc00 	b.eq	8f1fc <disasm+0xaafc>  // b.none
		names="ld3r\0";
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111111111111110000)==0b000011010110000011000000) {
   85280:	528c1809 	mov	w9, #0x60c0                	// #24768
   85284:	72a001a9 	movk	w9, #0xd, lsl #16
   85288:	6b09025f 	cmp	w18, w9
   8528c:	5404f8c0 	b.eq	8f1a4 <disasm+0xaaa4>  // b.none
		names="ld2r\0";
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111111111111110000)==0b000011010110000011100000) {
   85290:	528c1c09 	mov	w9, #0x60e0                	// #24800
   85294:	72a001a9 	movk	w9, #0xd, lsl #16
   85298:	6b09025f 	cmp	w18, w9
   8529c:	5404f540 	b.eq	8f144 <disasm+0xaa44>  // b.none
		names="ld4r\0";
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011010000000000000000) {
   852a0:	5297fc09 	mov	w9, #0xbfe0                	// #49120
   852a4:	72a017e9 	movk	w9, #0xbf, lsl #16
   852a8:	0a090069 	and	w9, w3, w9
   852ac:	7143413f 	cmp	w9, #0xd0, lsl #12
   852b0:	5404f220 	b.eq	8f0f4 <disasm+0xa9f4>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011010000000000100000) {
   852b4:	5280040e 	mov	w14, #0x20                  	// #32
   852b8:	72a001ae 	movk	w14, #0xd, lsl #16
   852bc:	6b0e013f 	cmp	w9, w14
   852c0:	5404ef20 	b.eq	8f0a4 <disasm+0xa9a4>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011010000000001000000) {
   852c4:	5280080e 	mov	w14, #0x40                  	// #64
   852c8:	72a001ae 	movk	w14, #0xd, lsl #16
   852cc:	6b0e013f 	cmp	w9, w14
   852d0:	5404ec20 	b.eq	8f054 <disasm+0xa954>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011010000000001100000) {
   852d4:	52800c0e 	mov	w14, #0x60                  	// #96
   852d8:	72a001ae 	movk	w14, #0xd, lsl #16
   852dc:	6b0e013f 	cmp	w9, w14
   852e0:	5404e920 	b.eq	8f004 <disasm+0xa904>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b000011010000000010000100) {
   852e4:	5297ff8e 	mov	w14, #0xbffc                	// #49148
   852e8:	5280109a 	mov	w26, #0x84                  	// #132
   852ec:	72a017ee 	movk	w14, #0xbf, lsl #16
   852f0:	0a0e006e 	and	w14, w3, w14
   852f4:	72a001ba 	movk	w26, #0xd, lsl #16
   852f8:	6b1a01df 	cmp	w14, w26
   852fc:	5404e5c0 	b.eq	8efb4 <disasm+0xa8b4>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111101100)==0b000011010000000010000000) {
   85300:	5297fd9a 	mov	w26, #0xbfec                	// #49132
   85304:	5280101b 	mov	w27, #0x80                  	// #128
   85308:	72a017fa 	movk	w26, #0xbf, lsl #16
   8530c:	0a1a007a 	and	w26, w3, w26
   85310:	72a001bb 	movk	w27, #0xd, lsl #16
   85314:	6b1b035f 	cmp	w26, w27
   85318:	5404e260 	b.eq	8ef64 <disasm+0xa864>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b000011010000000010100100) {
   8531c:	5280149b 	mov	w27, #0xa4                  	// #164
   85320:	72a001bb 	movk	w27, #0xd, lsl #16
   85324:	6b1b01df 	cmp	w14, w27
   85328:	5404df60 	b.eq	8ef14 <disasm+0xa814>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111101100)==0b000011010000000010100000) {
   8532c:	5280141b 	mov	w27, #0xa0                  	// #160
   85330:	72a001bb 	movk	w27, #0xd, lsl #16
   85334:	6b1b035f 	cmp	w26, w27
   85338:	5404dc60 	b.eq	8eec4 <disasm+0xa7c4>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011010010000000000000) {
   8533c:	7143493f 	cmp	w9, #0xd2, lsl #12
   85340:	5404d9a0 	b.eq	8ee74 <disasm+0xa774>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011010010000000100000) {
   85344:	5284041b 	mov	w27, #0x2020                	// #8224
   85348:	72a001bb 	movk	w27, #0xd, lsl #16
   8534c:	6b1b013f 	cmp	w9, w27
   85350:	5404d6a0 	b.eq	8ee24 <disasm+0xa724>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011010010000001000000) {
   85354:	5284081b 	mov	w27, #0x2040                	// #8256
   85358:	72a001bb 	movk	w27, #0xd, lsl #16
   8535c:	6b1b013f 	cmp	w9, w27
   85360:	5404d3a0 	b.eq	8edd4 <disasm+0xa6d4>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011010010000001100000) {
   85364:	52840c1b 	mov	w27, #0x2060                	// #8288
   85368:	72a001bb 	movk	w27, #0xd, lsl #16
   8536c:	6b1b013f 	cmp	w9, w27
   85370:	5404d0a0 	b.eq	8ed84 <disasm+0xa684>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b000011010010000010000100) {
   85374:	5284109b 	mov	w27, #0x2084                	// #8324
   85378:	72a001bb 	movk	w27, #0xd, lsl #16
   8537c:	6b1b01df 	cmp	w14, w27
   85380:	5404cda0 	b.eq	8ed34 <disasm+0xa634>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111101100)==0b000011010010000010000000) {
   85384:	5284101b 	mov	w27, #0x2080                	// #8320
   85388:	72a001bb 	movk	w27, #0xd, lsl #16
   8538c:	6b1b035f 	cmp	w26, w27
   85390:	5404caa0 	b.eq	8ece4 <disasm+0xa5e4>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b000011010010000010100100) {
   85394:	5284149b 	mov	w27, #0x20a4                	// #8356
   85398:	72a001bb 	movk	w27, #0xd, lsl #16
   8539c:	6b1b01df 	cmp	w14, w27
   853a0:	5404c7a0 	b.eq	8ec94 <disasm+0xa594>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111011111111101100)==0b000011010010000010100000) {
   853a4:	5284141b 	mov	w27, #0x20a0                	// #8352
   853a8:	72a001bb 	movk	w27, #0xd, lsl #16
   853ac:	6b1b035f 	cmp	w26, w27
   853b0:	5404c4a0 	b.eq	8ec44 <disasm+0xa544>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111111111111110000)==0b000011011101111111000000) {
   853b4:	529bf81b 	mov	w27, #0xdfc0                	// #57280
   853b8:	72a001bb 	movk	w27, #0xd, lsl #16
   853bc:	6b1b025f 	cmp	w18, w27
   853c0:	5404c160 	b.eq	8ebec <disasm+0xa4ec>  // b.none
		names="ld1r\0";
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_z; 
	} else
	if(((ic32_8)&0b101111111111111111110000)==0b000011011101111111100000) {
   853c4:	529bfc1b 	mov	w27, #0xdfe0                	// #57312
   853c8:	72a001bb 	movk	w27, #0xd, lsl #16
   853cc:	6b1b025f 	cmp	w18, w27
   853d0:	5404bde0 	b.eq	8eb8c <disasm+0xa48c>  // b.none
		names="ld3r\0";
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_z3; 
	} else
	if(((ic32_8)&0b101111111110000011110000)==0b000011011100000011000000) {
   853d4:	529c1e1b 	mov	w27, #0xe0f0                	// #57584
   853d8:	5298181e 	mov	w30, #0xc0c0                	// #49344
   853dc:	72a017fb 	movk	w27, #0xbf, lsl #16
   853e0:	0a1b007b 	and	w27, w3, w27
   853e4:	72a001be 	movk	w30, #0xd, lsl #16
   853e8:	6b1e037f 	cmp	w27, w30
   853ec:	5404ba20 	b.eq	8eb30 <disasm+0xa430>  // b.none
		names="ld1r\0";
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111110000011110000)==0b000011011100000011100000) {
   853f0:	52981c1e 	mov	w30, #0xc0e0                	// #49376
   853f4:	72a001be 	movk	w30, #0xd, lsl #16
   853f8:	6b1e037f 	cmp	w27, w30
   853fc:	5404b680 	b.eq	8eacc <disasm+0xa3cc>  // b.none
		names="ld3r\0";
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111111111111110000)==0b000011011111111111000000) {
   85400:	529ff81e 	mov	w30, #0xffc0                	// #65472
   85404:	72a001be 	movk	w30, #0xd, lsl #16
   85408:	6b1e025f 	cmp	w18, w30
   8540c:	5404b340 	b.eq	8ea74 <disasm+0xa374>  // b.none
		names="ld2r\0";
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_z2; 
	} else
	if(((ic32_8)&0b101111111111111111110000)==0b000011011111111111100000) {
   85410:	529ffc1e 	mov	w30, #0xffe0                	// #65504
   85414:	72a001be 	movk	w30, #0xd, lsl #16
   85418:	6b1e025f 	cmp	w18, w30
   8541c:	5404b000 	b.eq	8ea1c <disasm+0xa31c>  // b.none
		names="ld4r\0";
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_z4; 
	} else
	if(((ic32_8)&0b101111111110000011110000)==0b000011011110000011000000) {
   85420:	529c1812 	mov	w18, #0xe0c0                	// #57536
   85424:	72a001b2 	movk	w18, #0xd, lsl #16
   85428:	6b12037f 	cmp	w27, w18
   8542c:	5404aca0 	b.eq	8e9c0 <disasm+0xa2c0>  // b.none
		names="ld2r\0";
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111110000011110000)==0b000011011110000011100000) {
   85430:	529c1c12 	mov	w18, #0xe0e0                	// #57568
   85434:	72a001b2 	movk	w18, #0xd, lsl #16
   85438:	6b12037f 	cmp	w27, w18
   8543c:	5404a940 	b.eq	8e964 <disasm+0xa264>  // b.none
		names="ld4r\0";
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011011001111100000000) {
   85440:	5293e012 	mov	w18, #0x9f00                	// #40704
   85444:	72a001b2 	movk	w18, #0xd, lsl #16
   85448:	6b12013f 	cmp	w9, w18
   8544c:	5404a600 	b.eq	8e90c <disasm+0xa20c>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i1; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011011001111100100000) {
   85450:	5293e412 	mov	w18, #0x9f20                	// #40736
   85454:	72a001b2 	movk	w18, #0xd, lsl #16
   85458:	6b12013f 	cmp	w9, w18
   8545c:	5404a2c0 	b.eq	8e8b4 <disasm+0xa1b4>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i3; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011011001111101000000) {
   85460:	5293e812 	mov	w18, #0x9f40                	// #40768
   85464:	72a001b2 	movk	w18, #0xd, lsl #16
   85468:	6b12013f 	cmp	w9, w18
   8546c:	54049f80 	b.eq	8e85c <disasm+0xa15c>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i2; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011011001111101100000) {
   85470:	5293ec12 	mov	w18, #0x9f60                	// #40800
   85474:	72a001b2 	movk	w18, #0xd, lsl #16
   85478:	6b12013f 	cmp	w9, w18
   8547c:	54049c40 	b.eq	8e804 <disasm+0xa104>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i6; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b000011011001111110000100) {
   85480:	5293f092 	mov	w18, #0x9f84                	// #40836
   85484:	72a001b2 	movk	w18, #0xd, lsl #16
   85488:	6b1201df 	cmp	w14, w18
   8548c:	54049900 	b.eq	8e7ac <disasm+0xa0ac>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
	} else
	if(((ic32_8)&0b101111111011111111101100)==0b000011011001111110000000) {
   85490:	5293f012 	mov	w18, #0x9f80                	// #40832
   85494:	72a001b2 	movk	w18, #0xd, lsl #16
   85498:	6b12035f 	cmp	w26, w18
   8549c:	540495c0 	b.eq	8e754 <disasm+0xa054>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b000011011001111110100100) {
   854a0:	5293f492 	mov	w18, #0x9fa4                	// #40868
   854a4:	72a001b2 	movk	w18, #0xd, lsl #16
   854a8:	6b1201df 	cmp	w14, w18
   854ac:	54049280 	b.eq	8e6fc <disasm+0x9ffc>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i24; 
	} else
	if(((ic32_8)&0b101111111011111111101100)==0b000011011001111110100000) {
   854b0:	5293f412 	mov	w18, #0x9fa0                	// #40864
   854b4:	72a001b2 	movk	w18, #0xd, lsl #16
   854b8:	6b12035f 	cmp	w26, w18
   854bc:	54048f40 	b.eq	8e6a4 <disasm+0x9fa4>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i12; 
	} else
	if(((ic32_8)&0b101111111010000011100000)==0b000011011000000000000000) {
   854c0:	52941c12 	mov	w18, #0xa0e0                	// #41184
   854c4:	72a017f2 	movk	w18, #0xbf, lsl #16
   854c8:	0a120072 	and	w18, w3, w18
   854cc:	7143625f 	cmp	w18, #0xd8, lsl #12
   854d0:	54048bc0 	b.eq	8e648 <disasm+0x9f48>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011100000)==0b000011011000000000100000) {
   854d4:	5290041b 	mov	w27, #0x8020                	// #32800
   854d8:	72a001bb 	movk	w27, #0xd, lsl #16
   854dc:	6b1b025f 	cmp	w18, w27
   854e0:	54048860 	b.eq	8e5ec <disasm+0x9eec>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011100000)==0b000011011000000001000000) {
   854e4:	5290081b 	mov	w27, #0x8040                	// #32832
   854e8:	72a001bb 	movk	w27, #0xd, lsl #16
   854ec:	6b1b025f 	cmp	w18, w27
   854f0:	54048500 	b.eq	8e590 <disasm+0x9e90>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011100000)==0b000011011000000001100000) {
   854f4:	52900c1b 	mov	w27, #0x8060                	// #32864
   854f8:	72a001bb 	movk	w27, #0xd, lsl #16
   854fc:	6b1b025f 	cmp	w18, w27
   85500:	540481a0 	b.eq	8e534 <disasm+0x9e34>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011111100)==0b000011011000000010000100) {
   85504:	52941f9b 	mov	w27, #0xa0fc                	// #41212
   85508:	72a017fb 	movk	w27, #0xbf, lsl #16
   8550c:	0a1b007b 	and	w27, w3, w27
   85510:	2a1b03fe 	mov	w30, w27
   85514:	b90077fe 	str	w30, [sp, #116]
   85518:	5290109b 	mov	w27, #0x8084                	// #32900
   8551c:	72a001bb 	movk	w27, #0xd, lsl #16
   85520:	6b1b03df 	cmp	w30, w27
   85524:	54047da0 	b.eq	8e4d8 <disasm+0x9dd8>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011101100)==0b000011011000000010000000) {
   85528:	52941d9b 	mov	w27, #0xa0ec                	// #41196
   8552c:	5290101e 	mov	w30, #0x8080                	// #32896
   85530:	72a017fb 	movk	w27, #0xbf, lsl #16
   85534:	0a1b007b 	and	w27, w3, w27
   85538:	b9007bfb 	str	w27, [sp, #120]
   8553c:	72a001be 	movk	w30, #0xd, lsl #16
   85540:	6b1e037f 	cmp	w27, w30
   85544:	540479c0 	b.eq	8e47c <disasm+0x9d7c>  // b.none
		names="st1\0ld1\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011111100)==0b000011011000000010100100) {
   85548:	b94077fe 	ldr	w30, [sp, #116]
   8554c:	5290149b 	mov	w27, #0x80a4                	// #32932
   85550:	72a001bb 	movk	w27, #0xd, lsl #16
   85554:	6b1b03df 	cmp	w30, w27
   85558:	54047640 	b.eq	8e420 <disasm+0x9d20>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011101100)==0b000011011000000010100000) {
   8555c:	b9407bfe 	ldr	w30, [sp, #120]
   85560:	5290141b 	mov	w27, #0x80a0                	// #32928
   85564:	72a001bb 	movk	w27, #0xd, lsl #16
   85568:	6b1b03df 	cmp	w30, w27
   8556c:	540472c0 	b.eq	8e3c4 <disasm+0x9cc4>  // b.none
		names="st3\0ld3\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011011011111100000000) {
   85570:	5297e01b 	mov	w27, #0xbf00                	// #48896
   85574:	72a001bb 	movk	w27, #0xd, lsl #16
   85578:	6b1b013f 	cmp	w9, w27
   8557c:	54046f80 	b.eq	8e36c <disasm+0x9c6c>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i2; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011011011111100100000) {
   85580:	5297e41b 	mov	w27, #0xbf20                	// #48928
   85584:	72a001bb 	movk	w27, #0xd, lsl #16
   85588:	6b1b013f 	cmp	w9, w27
   8558c:	54046c40 	b.eq	8e314 <disasm+0x9c14>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011011011111101000000) {
   85590:	5297e81b 	mov	w27, #0xbf40                	// #48960
   85594:	72a001bb 	movk	w27, #0xd, lsl #16
   85598:	6b1b013f 	cmp	w9, w27
   8559c:	54046900 	b.eq	8e2bc <disasm+0x9bbc>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
	} else
	if(((ic32_8)&0b101111111011111111100000)==0b000011011011111101100000) {
   855a0:	5297ec1b 	mov	w27, #0xbf60                	// #48992
   855a4:	72a001bb 	movk	w27, #0xd, lsl #16
   855a8:	6b1b013f 	cmp	w9, w27
   855ac:	540465c0 	b.eq	8e264 <disasm+0x9b64>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b000011011011111110000100) {
   855b0:	5297f089 	mov	w9, #0xbf84                	// #49028
   855b4:	72a001a9 	movk	w9, #0xd, lsl #16
   855b8:	6b0901df 	cmp	w14, w9
   855bc:	54046280 	b.eq	8e20c <disasm+0x9b0c>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i16; 
	} else
	if(((ic32_8)&0b101111111011111111101100)==0b000011011011111110000000) {
   855c0:	5297f009 	mov	w9, #0xbf80                	// #49024
   855c4:	72a001a9 	movk	w9, #0xd, lsl #16
   855c8:	6b09035f 	cmp	w26, w9
   855cc:	54045f40 	b.eq	8e1b4 <disasm+0x9ab4>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b000011011011111110100100) {
   855d0:	5297f489 	mov	w9, #0xbfa4                	// #49060
   855d4:	72a001a9 	movk	w9, #0xd, lsl #16
   855d8:	6b0901df 	cmp	w14, w9
   855dc:	54045c00 	b.eq	8e15c <disasm+0x9a5c>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i32; 
	} else
	if(((ic32_8)&0b101111111011111111101100)==0b000011011011111110100000) {
   855e0:	5297f409 	mov	w9, #0xbfa0                	// #49056
   855e4:	72a001a9 	movk	w9, #0xd, lsl #16
   855e8:	6b09035f 	cmp	w26, w9
   855ec:	540458c0 	b.eq	8e104 <disasm+0x9a04>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i16; 
	} else
	if(((ic32_8)&0b101111111010000011100000)==0b000011011010000000000000) {
   855f0:	71436a5f 	cmp	w18, #0xda, lsl #12
   855f4:	540455a0 	b.eq	8e0a8 <disasm+0x99a8>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011100000)==0b000011011010000000100000) {
   855f8:	52940409 	mov	w9, #0xa020                	// #40992
   855fc:	72a001a9 	movk	w9, #0xd, lsl #16
   85600:	6b09025f 	cmp	w18, w9
   85604:	54045240 	b.eq	8e04c <disasm+0x994c>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011100000)==0b000011011010000001000000) {
   85608:	52940809 	mov	w9, #0xa040                	// #41024
   8560c:	72a001a9 	movk	w9, #0xd, lsl #16
   85610:	6b09025f 	cmp	w18, w9
   85614:	54044ee0 	b.eq	8dff0 <disasm+0x98f0>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011100000)==0b000011011010000001100000) {
   85618:	52940c09 	mov	w9, #0xa060                	// #41056
   8561c:	72a001a9 	movk	w9, #0xd, lsl #16
   85620:	6b09025f 	cmp	w18, w9
   85624:	54044b80 	b.eq	8df94 <disasm+0x9894>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011111100)==0b000011011010000010000100) {
   85628:	b94077f2 	ldr	w18, [sp, #116]
   8562c:	52941089 	mov	w9, #0xa084                	// #41092
   85630:	72a001a9 	movk	w9, #0xd, lsl #16
   85634:	6b09025f 	cmp	w18, w9
   85638:	54044800 	b.eq	8df38 <disasm+0x9838>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011101100)==0b000011011010000010000000) {
   8563c:	b9407bf2 	ldr	w18, [sp, #120]
   85640:	52941009 	mov	w9, #0xa080                	// #41088
   85644:	72a001a9 	movk	w9, #0xd, lsl #16
   85648:	6b09025f 	cmp	w18, w9
   8564c:	54044480 	b.eq	8dedc <disasm+0x97dc>  // b.none
		names="st2\0ld2\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011111100)==0b000011011010000010100100) {
   85650:	b94077f2 	ldr	w18, [sp, #116]
   85654:	52941489 	mov	w9, #0xa0a4                	// #41124
   85658:	72a001a9 	movk	w9, #0xd, lsl #16
   8565c:	6b09025f 	cmp	w18, w9
   85660:	54044100 	b.eq	8de80 <disasm+0x9780>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111010000011101100)==0b000011011010000010100000) {
   85664:	b9407bf2 	ldr	w18, [sp, #120]
   85668:	52941409 	mov	w9, #0xa0a0                	// #41120
   8566c:	72a001a9 	movk	w9, #0xd, lsl #16
   85670:	6b09025f 	cmp	w18, w9
   85674:	54043d80 	b.eq	8de24 <disasm+0x9724>  // b.none
		names="st4\0ld4\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b101111111110000011111100)==0b000011100000000000000100) {
   85678:	529c1f9b 	mov	w27, #0xe0fc                	// #57596
   8567c:	52800089 	mov	w9, #0x4                   	// #4
   85680:	72a017fb 	movk	w27, #0xbf, lsl #16
   85684:	0a1b007b 	and	w27, w3, w27
   85688:	72a001c9 	movk	w9, #0xe, lsl #16
   8568c:	6b09037f 	cmp	w27, w9
   85690:	540439e0 	b.eq	8ddcc <disasm+0x96cc>  // b.none
		names="dup\0";
		q=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtjq; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111110000011101100)==0b000011100000000000000000) {
   85694:	529c1d89 	mov	w9, #0xe0ec                	// #57580
   85698:	72a017e9 	movk	w9, #0xbf, lsl #16
   8569c:	0a090069 	and	w9, w3, w9
   856a0:	7143813f 	cmp	w9, #0xe0, lsl #12
   856a4:	54043680 	b.eq	8dd74 <disasm+0x9674>  // b.none
		names="tbl\0tbx\0";
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn116b; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b101111111110000011101100)==0b000011100000000000100000) {
   856a8:	52800412 	mov	w18, #0x20                  	// #32
   856ac:	72a001d2 	movk	w18, #0xe, lsl #16
   856b0:	6b12013f 	cmp	w9, w18
   856b4:	54043340 	b.eq	8dd1c <disasm+0x961c>  // b.none
		names="tbl\0tbx\0";
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn216b; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b101111111110000011101100)==0b000011100000000000101100) {
   856b8:	52800592 	mov	w18, #0x2c                  	// #44
   856bc:	72a001d2 	movk	w18, #0xe, lsl #16
   856c0:	6b12013f 	cmp	w9, w18
   856c4:	54043000 	b.eq	8dcc4 <disasm+0x95c4>  // b.none
		names="smov\0umov\0";
		op=((ic32_12)&0x1); s=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111110000011101100)==0b000011100000000001000000) {
   856c8:	52800812 	mov	w18, #0x40                  	// #64
   856cc:	72a001d2 	movk	w18, #0xe, lsl #16
   856d0:	6b12013f 	cmp	w9, w18
   856d4:	54042cc0 	b.eq	8dc6c <disasm+0x956c>  // b.none
		names="tbl\0tbx\0";
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn316b; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b101111111110000011101100)==0b000011100000000001100000) {
   856d8:	52800c12 	mov	w18, #0x60                  	// #96
   856dc:	72a001d2 	movk	w18, #0xe, lsl #16
   856e0:	6b12013f 	cmp	w9, w18
   856e4:	54042980 	b.eq	8dc14 <disasm+0x9514>  // b.none
		names="tbl\0tbx\0";
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn416b; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b101111111110000011111100)==0b000011100100000000011100) {
   856e8:	52880389 	mov	w9, #0x401c                	// #16412
   856ec:	72a001c9 	movk	w9, #0xe, lsl #16
   856f0:	6b09037f 	cmp	w27, w9
   856f4:	54042640 	b.eq	8dbbc <disasm+0x94bc>  // b.none
		names="fmulx\0";
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
	} else
	if(((ic32_8)&0b101111111110000011111100)==0b000011100100000000100100) {
   856f8:	52880489 	mov	w9, #0x4024                	// #16420
   856fc:	72a001c9 	movk	w9, #0xe, lsl #16
   85700:	6b09037f 	cmp	w27, w9
   85704:	54042300 	b.eq	8db64 <disasm+0x9464>  // b.none
		names="fcmeq\0";
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
	} else
	if(((ic32_8)&0b101111111111111111101100)==0b000011100111100110001000) {
   85708:	529ffd89 	mov	w9, #0xffec                	// #65516
   8570c:	72a017e9 	movk	w9, #0xbf, lsl #16
   85710:	0a090069 	and	w9, w3, w9
   85714:	2a0903f2 	mov	w18, w9
   85718:	b9007bf2 	str	w18, [sp, #120]
   8571c:	528f3109 	mov	w9, #0x7988                	// #31112
   85720:	72a001c9 	movk	w9, #0xe, lsl #16
   85724:	6b09025f 	cmp	w18, w9
   85728:	54041f80 	b.eq	8db18 <disasm+0x9418>  // b.none
		names="frintn\0frintm\0";
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b101111111111111111111100)==0b000011100111100111111000) {
   8572c:	121e5469 	and	w9, w3, #0xfffffc
   85730:	528f3f12 	mov	w18, #0x79f8                	// #31224
   85734:	12097929 	and	w9, w9, #0xffbfffff
   85738:	72a001d2 	movk	w18, #0xe, lsl #16
   8573c:	6b12013f 	cmp	w9, w18
   85740:	54041c60 	b.eq	8dacc <disasm+0x93cc>  // b.none
		names="fabs\0";
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b101111111010000011111100)==0b000011100010000000011100) {
   85744:	b94077fa 	ldr	w26, [sp, #116]
   85748:	52840392 	mov	w18, #0x201c                	// #8220
   8574c:	72a001d2 	movk	w18, #0xe, lsl #16
   85750:	6b12035f 	cmp	w26, w18
   85754:	54041900 	b.eq	8da74 <disasm+0x9374>  // b.none
		names="fmulx\0";
		q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
	} else
	if(((ic32_8)&0b101111111111111111101100)==0b000011101111100110001000) {
   85758:	b9407bfa 	ldr	w26, [sp, #120]
   8575c:	529f3112 	mov	w18, #0xf988                	// #63880
   85760:	72a001d2 	movk	w18, #0xe, lsl #16
   85764:	6b12035f 	cmp	w26, w18
   85768:	54041600 	b.eq	8da28 <disasm+0x9328>  // b.none
		names="frintp\0frintz\0";
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b101111110111111111001100)==0b000011100011000011001000) {
   8576c:	528ff992 	mov	w18, #0x7fcc                	// #32716
   85770:	5286191a 	mov	w26, #0x30c8                	// #12488
   85774:	72a017f2 	movk	w18, #0xbf, lsl #16
   85778:	0a120072 	and	w18, w3, w18
   8577c:	72a001da 	movk	w26, #0xe, lsl #16
   85780:	6b1a025f 	cmp	w18, w26
   85784:	54041280 	b.eq	8d9d4 <disasm+0x92d4>  // b.none
		names="fmaxnmv\0?\0?\0fmaxv\0fminnmv\0?\0?\0fminv\0";
		op=((ic32_21)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Vnzq2; 
	} else
	if(((ic32_8)&0b101111110110000011111100)==0b000011100100000000111100) {
   85788:	528c1f92 	mov	w18, #0x60fc                	// #24828
   8578c:	5288079a 	mov	w26, #0x403c                	// #16444
   85790:	72a017f2 	movk	w18, #0xbf, lsl #16
   85794:	0a120072 	and	w18, w3, w18
   85798:	72a001da 	movk	w26, #0xe, lsl #16
   8579c:	6b1a025f 	cmp	w18, w26
   857a0:	54040ee0 	b.eq	8d97c <disasm+0x927c>  // b.none
		names="frecps\0frsqrts\0";
		op=((ic32_23)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
	} else
	if(((ic32_8)&0b101111110000000010000000)==0b000011100000000000000000) {
   857a4:	52801012 	mov	w18, #0x80                  	// #128
   857a8:	72a017f2 	movk	w18, #0xbf, lsl #16
   857ac:	0a120072 	and	w18, w3, w18
   857b0:	7143825f 	cmp	w18, #0xe0, lsl #12
   857b4:	54040b40 	b.eq	8d91c <disasm+0x921c>  // b.none
		names="?\0?\0?\0?\0?\0?\0uzp1\0?\0?\0?\0trn1\0?\0?\0?\0zip1\0?\0?\0?\0?\0?\0?\0?\0uzp2\0?\0?\0?\0trn2\0?\0?\0?\0zip2\0?\0?\0shadd\0?\0sqadd\0?\0srhadd\0?\0?\0?\0?\0?\0sqsub\0?\0cmgt\0?\0cmge\0?\0sshl\0?\0sqshl\0?\0srshl\0?\0sqrshl\0?\0smax\0?\0smin\0?\0sabd\0?\0saba\0";
		op=((ic32_16)&0x20)|((ic32_10)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b101111111111100011111100)==0b000011110000000011100100) {
   857b8:	529f1f92 	mov	w18, #0xf8fc                	// #63740
   857bc:	52801c9a 	mov	w26, #0xe4                  	// #228
   857c0:	72a017f2 	movk	w18, #0xbf, lsl #16
   857c4:	0a120072 	and	w18, w3, w18
   857c8:	72a001fa 	movk	w26, #0xf, lsl #16
   857cc:	6b1a025f 	cmp	w18, w26
   857d0:	540407c0 	b.eq	8d8c8 <disasm+0x91c8>  // b.none
		names="movi\0";
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; 
	} else
	if(((ic32_8)&0b101111111111100011111100)==0b000011110000000011110100) {
   857d4:	52801e9a 	mov	w26, #0xf4                  	// #244
   857d8:	72a001fa 	movk	w26, #0xf, lsl #16
   857dc:	6b1a025f 	cmp	w18, w26
   857e0:	540404a0 	b.eq	8d874 <disasm+0x9174>  // b.none
		names="fmov\0";
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_F32; 
	} else
	if(((ic32_8)&0b101111111111100011111100)==0b000011110000000011111100) {
   857e4:	52801f9a 	mov	w26, #0xfc                  	// #252
   857e8:	72a001fa 	movk	w26, #0xf, lsl #16
   857ec:	6b1a025f 	cmp	w18, w26
   857f0:	54040180 	b.eq	8d820 <disasm+0x9120>  // b.none
		names="fmov\0";
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_F16; 
	} else
	if(((ic32_8)&0b101111111100000010100100)==0b000011110100000010000000) {
   857f4:	52981492 	mov	w18, #0xc0a4                	// #49316
   857f8:	72a017f2 	movk	w18, #0xbf, lsl #16
   857fc:	0a12007a 	and	w26, w3, w18
   85800:	52881012 	mov	w18, #0x4080                	// #16512
   85804:	72a001f2 	movk	w18, #0xf, lsl #16
   85808:	6b12035f 	cmp	w26, w18
   8580c:	5403fd60 	b.eq	8d7b8 <disasm+0x90b8>  // b.none
		names="mul\0?\0sqdmulh\0sqrdmulh\0";
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b101111111000000011001100)==0b000011110000000000000100) {
   85810:	52901992 	mov	w18, #0x80cc                	// #32972
   85814:	5280009e 	mov	w30, #0x4                   	// #4
   85818:	72a017f2 	movk	w18, #0xbf, lsl #16
   8581c:	0a120072 	and	w18, w3, w18
   85820:	72a001fe 	movk	w30, #0xf, lsl #16
   85824:	6b1e025f 	cmp	w18, w30
   85828:	5403f9e0 	b.eq	8d764 <disasm+0x9064>  // b.none
		names="sshr\0ssra\0srshr\0srsra\0";
		op=((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b101111111000000011111100)==0b000011110000000011100100) {
   8582c:	52901f92 	mov	w18, #0x80fc                	// #33020
   85830:	52801c9e 	mov	w30, #0xe4                  	// #228
   85834:	72a017f2 	movk	w18, #0xbf, lsl #16
   85838:	0a120072 	and	w18, w3, w18
   8583c:	b90077f2 	str	w18, [sp, #116]
   85840:	72a001fe 	movk	w30, #0xf, lsl #16
   85844:	6b1e025f 	cmp	w18, w30
   85848:	5403f640 	b.eq	8d710 <disasm+0x9010>  // b.none
		names="scvtf\0";
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b101111111000000011111100)==0b000011110000000011111100) {
   8584c:	b94077f2 	ldr	w18, [sp, #116]
   85850:	52801f9e 	mov	w30, #0xfc                  	// #252
   85854:	72a001fe 	movk	w30, #0xf, lsl #16
   85858:	6b1e025f 	cmp	w18, w30
   8585c:	5403f300 	b.eq	8d6bc <disasm+0x8fbc>  // b.none
		names="fcvtzs\0";
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b101111111100000010100100)==0b000011111000000010000000) {
   85860:	52901012 	mov	w18, #0x8080                	// #32896
   85864:	72a001f2 	movk	w18, #0xf, lsl #16
   85868:	6b12035f 	cmp	w26, w18
   8586c:	5403ef40 	b.eq	8d654 <disasm+0x8f54>  // b.none
		names="mul\0fmul\0sqdmulh\0sqrdmulh\0";
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_24)&0b10111111)==0b00011000) {
   85870:	528017f2 	mov	w18, #0xbf                  	// #191
   85874:	0a1202d2 	and	w18, w22, w18
   85878:	7100625f 	cmp	w18, #0x18
   8587c:	5403ebc0 	b.eq	8d5f4 <disasm+0x8ef4>  // b.none
		names="ldr\0";
		s=((ic32_30)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_labeli4; 
	} else
	if(((ic32_8)&0b101111111110000011111100)==0b000111100000000000001100) {
   85880:	52800192 	mov	w18, #0xc                   	// #12
   85884:	72a003d2 	movk	w18, #0x1e, lsl #16
   85888:	6b12037f 	cmp	w27, w18
   8588c:	5403e8e0 	b.eq	8d5a8 <disasm+0x8ea8>  // b.none
		names="dup\0";
		q=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		s=q;
		args[0]=disasm_arg_Vtjq; args[1]=disasm_arg_Rn; 
	} else
	if(((ic32_8)&0b101111111110000010000100)==0b001011100000000000000000) {
   85890:	529c1092 	mov	w18, #0xe084                	// #57476
   85894:	72a017f2 	movk	w18, #0xbf, lsl #16
   85898:	0a120072 	and	w18, w3, w18
   8589c:	714b825f 	cmp	w18, #0x2e0, lsl #12
   858a0:	5403e500 	b.eq	8d540 <disasm+0x8e40>  // b.none
		names="ext\0";
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); i=((ic32_14)&1?(-1<<4):0)|((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; args[3]=disasm_arg_i; 
	} else
	if(((ic32_8)&0b101111111110000011110100)==0b001011100100000000100100) {
   858a4:	529c1e92 	mov	w18, #0xe0f4                	// #57588
   858a8:	5288049a 	mov	w26, #0x4024                	// #16420
   858ac:	72a017f2 	movk	w18, #0xbf, lsl #16
   858b0:	0a120072 	and	w18, w3, w18
   858b4:	72a005da 	movk	w26, #0x2e, lsl #16
   858b8:	6b1a025f 	cmp	w18, w26
   858bc:	5403e160 	b.eq	8d4e8 <disasm+0x8de8>  // b.none
		names="fcmge\0facge\0";
		op=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
	} else
	if(((ic32_8)&0b101111111111111111111100)==0b001011100111100110011000) {
   858c0:	528f331a 	mov	w26, #0x7998                	// #31128
   858c4:	72a005da 	movk	w26, #0x2e, lsl #16
   858c8:	6b1a013f 	cmp	w9, w26
   858cc:	5403de80 	b.eq	8d49c <disasm+0x8d9c>  // b.none
		names="frintx\0";
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b101111111011111111111100)==0b001011100010000001011000) {
   858d0:	52840b1a 	mov	w26, #0x2058                	// #8280
   858d4:	72a005da 	movk	w26, #0x2e, lsl #16
   858d8:	6b1a01df 	cmp	w14, w26
   858dc:	5403dba0 	b.eq	8d450 <disasm+0x8d50>  // b.none
		names="not\0rbit\0";
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b101111111110000011111100)==0b001011101100000000010100) {
   858e0:	5298028e 	mov	w14, #0xc014                	// #49172
   858e4:	72a005ce 	movk	w14, #0x2e, lsl #16
   858e8:	6b0e037f 	cmp	w27, w14
   858ec:	5403d860 	b.eq	8d3f8 <disasm+0x8cf8>  // b.none
		names="fabd\0";
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
	} else
	if(((ic32_8)&0b101111111110000011110100)==0b001011101100000000100100) {
   858f0:	5298048e 	mov	w14, #0xc024                	// #49188
   858f4:	72a005ce 	movk	w14, #0x2e, lsl #16
   858f8:	6b0e025f 	cmp	w18, w14
   858fc:	5403d520 	b.eq	8d3a0 <disasm+0x8ca0>  // b.none
		names="fcmgt\0facgt\0";
		op=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
	} else
	if(((ic32_8)&0b101111111111111111111100)==0b001011101111100011111000) {
   85900:	529f1f0e 	mov	w14, #0xf8f8                	// #63736
   85904:	72a005ce 	movk	w14, #0x2e, lsl #16
   85908:	6b0e013f 	cmp	w9, w14
   8590c:	5403d240 	b.eq	8d354 <disasm+0x8c54>  // b.none
		names="fneg\0";
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b101111111111111111101100)==0b001011101111100110001000) {
   85910:	b9407bf2 	ldr	w18, [sp, #120]
   85914:	529f310e 	mov	w14, #0xf988                	// #63880
   85918:	72a005ce 	movk	w14, #0x2e, lsl #16
   8591c:	6b0e025f 	cmp	w18, w14
   85920:	5403cf40 	b.eq	8d308 <disasm+0x8c08>  // b.none
		names="frinta\0frinti\0";
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b101111111111111111111100)==0b001011101111100111111000) {
   85924:	529f3f0e 	mov	w14, #0xf9f8                	// #63992
   85928:	72a005ce 	movk	w14, #0x2e, lsl #16
   8592c:	6b0e013f 	cmp	w9, w14
   85930:	5403cc60 	b.eq	8d2bc <disasm+0x8bbc>  // b.none
		names="fsqrt\0";
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b101111110010000000000100)==0b001011100010000000000100) {
   85934:	5284009a 	mov	w26, #0x2004                	// #8196
   85938:	52840089 	mov	w9, #0x2004                	// #8196
   8593c:	72a017fa 	movk	w26, #0xbf, lsl #16
   85940:	0a1a007a 	and	w26, w3, w26
   85944:	72a005c9 	movk	w9, #0x2e, lsl #16
   85948:	6b09035f 	cmp	w26, w9
   8594c:	5403c8c0 	b.eq	8d264 <disasm+0x8b64>  // b.none
		names="uhadd\0uqadd\0urhadd\0?\0uhsub\0uqsub\0cmhi\0cmhs\0ushl\0uqshl\0urshl\0uqrshl\0umax\0umin\0uabd\0uaba\0sub\0cmeq\0mls\0pmul\0umaxp\0uminp\0cqrdmulh\0";
		op=((ic32_11)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b101111111100000011010100)==0b001011110100000011010000) {
   85950:	52981a89 	mov	w9, #0xc0d4                	// #49364
   85954:	52881a0e 	mov	w14, #0x40d0                	// #16592
   85958:	72a017e9 	movk	w9, #0xbf, lsl #16
   8595c:	0a090069 	and	w9, w3, w9
   85960:	72a005ee 	movk	w14, #0x2f, lsl #16
   85964:	6b0e013f 	cmp	w9, w14
   85968:	5403c4e0 	b.eq	8d204 <disasm+0x8b04>  // b.none
		names="sqrdmlah\0sqrdmlsh\0";
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b101111111000000011111100)==0b001011110000000011111100) {
   8596c:	b94077f2 	ldr	w18, [sp, #116]
   85970:	52801f8e 	mov	w14, #0xfc                  	// #252
   85974:	72a005ee 	movk	w14, #0x2f, lsl #16
   85978:	6b0e025f 	cmp	w18, w14
   8597c:	5403c1a0 	b.eq	8d1b0 <disasm+0x8ab0>  // b.none
		names="fcvtzu\0";
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b101111111000000000001100)==0b001011110000000000000100) {
   85980:	5290018e 	mov	w14, #0x800c                	// #32780
   85984:	52800092 	mov	w18, #0x4                   	// #4
   85988:	72a017ee 	movk	w14, #0xbf, lsl #16
   8598c:	0a0e006e 	and	w14, w3, w14
   85990:	72a005f2 	movk	w18, #0x2f, lsl #16
   85994:	6b1201df 	cmp	w14, w18
   85998:	5403be20 	b.eq	8d15c <disasm+0x8a5c>  // b.none
		names="ushr\0usra\0urshr\0ursra\0sri\0sli\0sqshlu\0uqshl\0?\0?\0?\0?\0?\0?\0ucvtf\0";
		op=((ic32_12)&0xf); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
	} else
	if(((ic32_8)&0b101111111100000011010100)==0b001011111000000011010000) {
   8599c:	52901a0e 	mov	w14, #0x80d0                	// #32976
   859a0:	72a005ee 	movk	w14, #0x2f, lsl #16
   859a4:	6b0e013f 	cmp	w9, w14
   859a8:	5403baa0 	b.eq	8d0fc <disasm+0x89fc>  // b.none
		names="sqrdmlah\0sqrdmlsh\0";
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=2;
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b101111110000000010110100)==0b001011110000000000000000) {
   859ac:	52801689 	mov	w9, #0xb4                  	// #180
   859b0:	72a017e9 	movk	w9, #0xbf, lsl #16
   859b4:	0a090069 	and	w9, w3, w9
   859b8:	714bc13f 	cmp	w9, #0x2f0, lsl #12
   859bc:	5403b700 	b.eq	8d09c <disasm+0x899c>  // b.none
		names="mla\0mls\0";
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b101111111010000000001100)==0b001110000000000000000100) {
   859c0:	52940189 	mov	w9, #0xa00c                	// #40972
   859c4:	52800092 	mov	w18, #0x4                   	// #4
   859c8:	72a017e9 	movk	w9, #0xbf, lsl #16
   859cc:	0a090069 	and	w9, w3, w9
   859d0:	72a00712 	movk	w18, #0x38, lsl #16
   859d4:	6b12013f 	cmp	w9, w18
   859d8:	5403b280 	b.eq	8d028 <disasm+0x8928>  // b.none
		names="strb\0ldrb\0strh\0ldrh\0";
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
	} else
	if(((ic32_8)&0b101111111010000000000100)==0b001110000000000000000100) {
   859dc:	5294008e 	mov	w14, #0xa004                	// #40964
   859e0:	72a017ee 	movk	w14, #0xbf, lsl #16
   859e4:	0a0e006e 	and	w14, w3, w14
   859e8:	6b1201df 	cmp	w14, w18
   859ec:	5403ae20 	b.eq	8cfb0 <disasm+0x88b0>  // b.none
		names="strb\0ldrb\0strh\0ldrh\0";
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111010000000001100)==0b001110000010000000001000) {
   859f0:	52840112 	mov	w18, #0x2008                	// #8200
   859f4:	72a00712 	movk	w18, #0x38, lsl #16
   859f8:	6b12013f 	cmp	w9, w18
   859fc:	5403aa40 	b.eq	8cf44 <disasm+0x8844>  // b.none
		names="strb\0ldrb\0strh\0ldrh\0";
		op=((ic32_29)&0x2)|((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111010000000001100)==0b001110001000000000000100) {
   85a00:	52900092 	mov	w18, #0x8004                	// #32772
   85a04:	72a00712 	movk	w18, #0x38, lsl #16
   85a08:	6b12013f 	cmp	w9, w18
   85a0c:	5403a660 	b.eq	8ced8 <disasm+0x87d8>  // b.none
		names="ldrsb\0ldrsh\0";
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
	} else
	if(((ic32_8)&0b101111111010000000000100)==0b001110001000000000000000) {
   85a10:	714e21df 	cmp	w14, #0x388, lsl #12
   85a14:	5403a280 	b.eq	8ce64 <disasm+0x8764>  // b.none
		names="ldursb\0?\0ldursh\0ldtrsh\0";
		op=((ic32_29)&0x2)|((ic32_11)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111010000000000100)==0b001110001000000000000100) {
   85a18:	52900092 	mov	w18, #0x8004                	// #32772
   85a1c:	72a00712 	movk	w18, #0x38, lsl #16
   85a20:	6b1201df 	cmp	w14, w18
   85a24:	54039e80 	b.eq	8cdf4 <disasm+0x86f4>  // b.none
		names="ldrsb\0ldrsh\0";
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111010000000001100)==0b001110001010000000001000) {
   85a28:	52940112 	mov	w18, #0xa008                	// #40968
   85a2c:	72a00712 	movk	w18, #0x38, lsl #16
   85a30:	6b12013f 	cmp	w9, w18
   85a34:	54039ae0 	b.eq	8cd90 <disasm+0x8690>  // b.none
		names="ldrsb\0ldrsh\0";
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111110010000000000100)==0b001110000000000000000000) {
   85a38:	714e035f 	cmp	w26, #0x380, lsl #12
   85a3c:	540396c0 	b.eq	8cd14 <disasm+0x8614>  // b.none
		names="sturb\0sttrb\0ldurb\0ldtrb\0?\0ldtrsb\0?\0ldtrsb\0sturh\0sttrh\0ldurh\0ldtrh\0";
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b1011111110000000)==0b0011100100000000) {
   85a40:	5297f012 	mov	w18, #0xbf80                	// #49024
   85a44:	0a1200b2 	and	w18, w5, w18
   85a48:	2a1203fa 	mov	w26, w18
   85a4c:	2a1203fe 	mov	w30, w18
   85a50:	52872012 	mov	w18, #0x3900                	// #14592
   85a54:	6b12035f 	cmp	w26, w18
   85a58:	540392e0 	b.eq	8ccb4 <disasm+0x85b4>  // b.none
		names="strb\0ldrb\0strh\0ldrh\0";
		op=((ic32_29)&0x2)|((ic32_22)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b1011111110000000)==0b0011100110000000) {
   85a5c:	52873012 	mov	w18, #0x3980                	// #14720
   85a60:	6b12035f 	cmp	w26, w18
   85a64:	54038fc0 	b.eq	8cc5c <disasm+0x855c>  // b.none
		names="ldrsb\0ldrsh\0";
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b100111111111111111001100)==0b000011101111100011001000) {
   85a68:	529ff992 	mov	w18, #0xffcc                	// #65484
   85a6c:	529f191a 	mov	w26, #0xf8c8                	// #63688
   85a70:	72a013f2 	movk	w18, #0x9f, lsl #16
   85a74:	0a120072 	and	w18, w3, w18
   85a78:	72a001da 	movk	w26, #0xe, lsl #16
   85a7c:	6b1a025f 	cmp	w18, w26
   85a80:	54038c00 	b.eq	8cc00 <disasm+0x8500>  // b.none
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0?\0fneg\0";
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_simd0; 
	} else
	if(((ic32_8)&0b100111111011111111001100)==0b000011101010000011001000) {
   85a84:	5297f992 	mov	w18, #0xbfcc                	// #49100
   85a88:	5294191a 	mov	w26, #0xa0c8                	// #41160
   85a8c:	72a013f2 	movk	w18, #0x9f, lsl #16
   85a90:	0a120072 	and	w18, w3, w18
   85a94:	72a001da 	movk	w26, #0xe, lsl #16
   85a98:	6b1a025f 	cmp	w18, w26
   85a9c:	54038840 	b.eq	8cba4 <disasm+0x84a4>  // b.none
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0?\0fneg\0";
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_simd0; 
	} else
	if(((ic32_8)&0b100111110110000011000100)==0b000011100100000000000100) {
   85aa0:	528c1892 	mov	w18, #0x60c4                	// #24772
   85aa4:	5288009a 	mov	w26, #0x4004                	// #16388
   85aa8:	72a013f2 	movk	w18, #0x9f, lsl #16
   85aac:	0a120072 	and	w18, w3, w18
   85ab0:	72a001da 	movk	w26, #0xe, lsl #16
   85ab4:	6b1a025f 	cmp	w18, w26
   85ab8:	54038420 	b.eq	8cb3c <disasm+0x843c>  // b.none
		names="fmaxnm\0fmla\0fadd\0fmulx\0fcmeq\0?\0fmax\0frecps\0fminnm\0fmls\0fsub\0?\0?\0?\0fmin\0frsqrts\0fmaxnmp\0?\0faddp\0fmul\0fcmge\0facge\0fmaxp\0fdiv\0fminnmp\0?\0fabd\0?\0fcmgt\0facgt\0fminp\0";
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b100111110111111110001100)==0b000011100111100110001000) {
   85abc:	528ff192 	mov	w18, #0x7f8c                	// #32652
   85ac0:	528f311a 	mov	w26, #0x7988                	// #31112
   85ac4:	72a013f2 	movk	w18, #0x9f, lsl #16
   85ac8:	0a120072 	and	w18, w3, w18
   85acc:	72a001da 	movk	w26, #0xe, lsl #16
   85ad0:	6b1a025f 	cmp	w18, w26
   85ad4:	54038060 	b.eq	8cae0 <disasm+0x83e0>  // b.none
		names="frintn\0frintm\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0fabs\0frintp\0frintz\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0frintx\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0frinta\0frinti\0fcvtpu\0fcvtzu\0?\0frsqrte\0?\0fsqrt\0";
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; 
	} else
	if(((ic32_8)&0b100111110010000011111100)==0b000011100000000010010100) {
   85ad8:	52841f92 	mov	w18, #0x20fc                	// #8444
   85adc:	72a013f2 	movk	w18, #0x9f, lsl #16
   85ae0:	0a120072 	and	w18, w3, w18
   85ae4:	2a1203fa 	mov	w26, w18
   85ae8:	b90077fa 	str	w26, [sp, #116]
   85aec:	52801292 	mov	w18, #0x94                  	// #148
   85af0:	72a001d2 	movk	w18, #0xe, lsl #16
   85af4:	6b12035f 	cmp	w26, w18
   85af8:	54037c80 	b.eq	8ca88 <disasm+0x8388>  // b.none
		names="sdot\0udot\0";
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
	} else
	if(((ic32_8)&0b100111110011111110111100)==0b000011100010000000101000) {
   85afc:	5287f792 	mov	w18, #0x3fbc                	// #16316
   85b00:	5284051a 	mov	w26, #0x2028                	// #8232
   85b04:	72a013f2 	movk	w18, #0x9f, lsl #16
   85b08:	0a120072 	and	w18, w3, w18
   85b0c:	72a001da 	movk	w26, #0xe, lsl #16
   85b10:	6b1a025f 	cmp	w18, w26
   85b14:	54037900 	b.eq	8ca34 <disasm+0x8334>  // b.none
		names="saddlp\0sadalp\0uaddlp\0uadalp\0";
		op=((ic32_28)&0x2)|((ic32_14)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b100111110011111111001100)==0b000011100010000010001000) {
   85b18:	5287f992 	mov	w18, #0x3fcc                	// #16332
   85b1c:	5284111b 	mov	w27, #0x2088                	// #8328
   85b20:	72a013f2 	movk	w18, #0x9f, lsl #16
   85b24:	0a120072 	and	w18, w3, w18
   85b28:	72a001db 	movk	w27, #0xe, lsl #16
   85b2c:	6b1b025f 	cmp	w18, w27
   85b30:	54037540 	b.eq	8c9d8 <disasm+0x82d8>  // b.none
		names="cmgt\0cmeq\0cmlt\0abs\0cmge\0cmle\0?\0neg\0";
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_simd0; 
	} else
	if(((ic32_8)&0b100111110011111100001100)==0b000011100010000000001000) {
   85b34:	5287e192 	mov	w18, #0x3f0c                	// #16140
   85b38:	5284011a 	mov	w26, #0x2008                	// #8200
   85b3c:	72a013f2 	movk	w18, #0x9f, lsl #16
   85b40:	0a120072 	and	w18, w3, w18
   85b44:	72a001da 	movk	w26, #0xe, lsl #16
   85b48:	6b1a025f 	cmp	w18, w26
   85b4c:	540371c0 	b.eq	8c984 <disasm+0x8284>  // b.none
		names="rev64\0rev16\0saddlp\0suqadd\0cls\0cnt\0sadalp\0sqabs\0cmgt\0cmeq\0cmlt\0abs\0?\0?\0?\0?\0rev32\0?\0uaddlp\0usqadd\0clz\0?\0uadalp\0sqneg\0cmge\0cmle\0?\0neg\0";
		op=((ic32_25)&0x10)|((ic32_12)&0xf); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b100111110011111010001100)==0b000011100010000010001000) {
   85b50:	5287d192 	mov	w18, #0x3e8c                	// #16012
   85b54:	72a013f2 	movk	w18, #0x9f, lsl #16
   85b58:	0a120072 	and	w18, w3, w18
   85b5c:	6b1b025f 	cmp	w18, w27
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   85b60:	53137c1b 	lsr	w27, w0, #19
	if(((ic32_8)&0b100111110011111010001100)==0b000011100010000010001000) {
   85b64:	54036de0 	b.eq	8c920 <disasm+0x8220>  // b.none
		names="?\0?\0?\0?\0?\0?\0?\0?\0frintn\0frintm\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0fabs\0?\0?\0?\0?\0fcmgt\0fcmeq\0fcmlt\0?\0frintp\0frintz\0fcvtps\0fcvtzs\0urecpe\0frecpe\0?\0frecpx\0?\0?\0?\0?\0?\0?\0?\0?\0?\0frintx\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0?\0?\0fcmge\0fcmle\0?\0fneg\0frinta\0frinti\0fcvtpu\0fcvtzu\0?\0frsqrte\0?\0fsqrt\0";
		op=((ic32_24)&0x20)|((ic32_19)&0x10)|((ic32_13)&0x8)|((ic32_12)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; 
	} else
	if(((ic32_8)&0b100111110011111111111100)==0b000011100011000000111000) {
   85b68:	5287ff92 	mov	w18, #0x3ffc                	// #16380
   85b6c:	5286071a 	mov	w26, #0x3038                	// #12344
   85b70:	72a013f2 	movk	w18, #0x9f, lsl #16
   85b74:	0a120072 	and	w18, w3, w18
   85b78:	72a001da 	movk	w26, #0xe, lsl #16
   85b7c:	6b1a025f 	cmp	w18, w26
   85b80:	54036aa0 	b.eq	8c8d4 <disasm+0x81d4>  // b.none
		names="saddlv\0uaddlv\0";
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b100111110011111011101100)==0b000011100011000010101000) {
   85b84:	5287dd92 	mov	w18, #0x3eec                	// #16108
   85b88:	5286151a 	mov	w26, #0x30a8                	// #12456
   85b8c:	72a013f2 	movk	w18, #0x9f, lsl #16
   85b90:	0a120072 	and	w18, w3, w18
   85b94:	72a001da 	movk	w26, #0xe, lsl #16
   85b98:	6b1a025f 	cmp	w18, w26
   85b9c:	540366e0 	b.eq	8c878 <disasm+0x8178>  // b.none
		names="smaxv\0?\0sminv\0addv\0umaxv\0?\0uminv\0";
		op=((ic32_27)&0x4)|((ic32_15)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_VnT; 
	} else
	if(((ic32_8)&0b100111110010000011111100)==0b000011100010000000011100) {
   85ba0:	b94077fa 	ldr	w26, [sp, #116]
   85ba4:	52840392 	mov	w18, #0x201c                	// #8220
   85ba8:	72a001d2 	movk	w18, #0xe, lsl #16
   85bac:	6b12035f 	cmp	w26, w18
   85bb0:	54036340 	b.eq	8c818 <disasm+0x8118>  // b.none
		names="and\0bic\0orr\0orn\0eor\0bsl\0bit\0bif\0";
		op=((ic32_27)&0x4)|((ic32_22)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b100111110010000011000100)==0b000011100010000011000100) {
   85bb4:	52841892 	mov	w18, #0x20c4                	// #8388
   85bb8:	5284189a 	mov	w26, #0x20c4                	// #8388
   85bbc:	72a013f2 	movk	w18, #0x9f, lsl #16
   85bc0:	0a120072 	and	w18, w3, w18
   85bc4:	72a001da 	movk	w26, #0xe, lsl #16
   85bc8:	6b1a025f 	cmp	w18, w26
   85bcc:	54035f20 	b.eq	8c7b0 <disasm+0x80b0>  // b.none
		names="fmaxnm\0fmla\0fadd\0?\0fcmeq\0?\0fmax\0frecps\0fminnm\0fmls\0fsub\0?\0?\0?\0fmin\0frsqrts\0fmaxnmp\0?\0faddp\0fmul\0fcmge\0facge\0fmaxp\0fdiv\0fminnmp\0?\0fabd\0?\0fcmgt\0facgt\0fminp\0";
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
	} else
	if(((ic32_8)&0b100111110000000011000100)==0b000011100000000010000100) {
   85bd0:	52801892 	mov	w18, #0xc4                  	// #196
   85bd4:	5280109a 	mov	w26, #0x84                  	// #132
   85bd8:	72a013f2 	movk	w18, #0x9f, lsl #16
   85bdc:	0a120072 	and	w18, w3, w18
   85be0:	72a001da 	movk	w26, #0xe, lsl #16
   85be4:	6b1a025f 	cmp	w18, w26
   85be8:	54035ae0 	b.eq	8c744 <disasm+0x8044>  // b.none
		names="?\0?\0sdot\0?\0?\0?\0?\0?\0add\0cmtst\0mla\0mul\0smaxp\0sminp\0sqdmulh\0addp\0sqrdmlah\0sqrdmlsh\0udot\0?\0?\0?\0?\0?\0sub\0cmeq\0mls\0pmul\0umaxp\0uminp\0cqrdmulh\0";
		op=((ic32_25)&0x10)|((ic32_18)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
	} else
	if(((ic32_8)&0b100111111111100010001100)==0b000011110000000000000100) {
   85bec:	529f1192 	mov	w18, #0xf88c                	// #63628
   85bf0:	5280009a 	mov	w26, #0x4                   	// #4
   85bf4:	72a013f2 	movk	w18, #0x9f, lsl #16
   85bf8:	0a120072 	and	w18, w3, w18
   85bfc:	72a001fa 	movk	w26, #0xf, lsl #16
   85c00:	6b1a025f 	cmp	w18, w26
   85c04:	540356c0 	b.eq	8c6dc <disasm+0x7fdc>  // b.none
		names="movi\0orr\0mvni\0bic\0";
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x3); t=((ic32)&0x1f); 
		z=2;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk_opt; 
	} else
	if(((ic32_8)&0b100111111111100011001100)==0b000011110000000010000100) {
   85c08:	529f1992 	mov	w18, #0xf8cc                	// #63692
   85c0c:	5280109a 	mov	w26, #0x84                  	// #132
   85c10:	72a013f2 	movk	w18, #0x9f, lsl #16
   85c14:	0a120072 	and	w18, w3, w18
   85c18:	72a001fa 	movk	w26, #0xf, lsl #16
   85c1c:	6b1a025f 	cmp	w18, w26
   85c20:	540352a0 	b.eq	8c674 <disasm+0x7f74>  // b.none
		names="movi\0orr\0mvni\0bic\0";
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x1); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk_opt; 
	} else
	if(((ic32_8)&0b100111111111100011101100)==0b000011110000000011000100) {
   85c24:	529f1d92 	mov	w18, #0xf8ec                	// #63724
   85c28:	52801898 	mov	w24, #0xc4                  	// #196
   85c2c:	72a013f2 	movk	w18, #0x9f, lsl #16
   85c30:	0a120072 	and	w18, w3, w18
   85c34:	72a001f8 	movk	w24, #0xf, lsl #16
   85c38:	6b18025f 	cmp	w18, w24
   85c3c:	54034ec0 	b.eq	8c614 <disasm+0x7f14>  // b.none
		names="movi\0mvni\0";
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_12)&0x1); t=((ic32)&0x1f); 
		z=2;
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk2_opt; 
	} else
	if(((ic32_8)&0b100111111100000000110100)==0b000011110000000000010000) {
   85c40:	52980692 	mov	w18, #0xc034                	// #49204
   85c44:	72a013f2 	movk	w18, #0x9f, lsl #16
   85c48:	0a12007a 	and	w26, w3, w18
   85c4c:	52800212 	mov	w18, #0x10                  	// #16
   85c50:	72a001f2 	movk	w18, #0xf, lsl #16
   85c54:	6b12035f 	cmp	w26, w18
   85c58:	54034aa0 	b.eq	8c5ac <disasm+0x7eac>  // b.none
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmHs; 
	} else
	if(((ic32_8)&0b100111111000000011001100)==0b000011110000000001000100) {
   85c5c:	52901992 	mov	w18, #0x80cc                	// #32972
   85c60:	52800898 	mov	w24, #0x44                  	// #68
   85c64:	72a013f2 	movk	w18, #0x9f, lsl #16
   85c68:	0a120072 	and	w18, w3, w18
   85c6c:	72a001f8 	movk	w24, #0xf, lsl #16
   85c70:	6b18025f 	cmp	w18, w24
   85c74:	540346e0 	b.eq	8c550 <disasm+0x7e50>  // b.none
		names="?\0shl\0?\0sqshl\0sri\0sli\0sqshlu\0uqshl\0";
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shlshift; 
	} else
	if(((ic32_8)&0b100111111100000011110100)==0b000011111000000011100000) {
   85c78:	52981e92 	mov	w18, #0xc0f4                	// #49396
   85c7c:	52901c18 	mov	w24, #0x80e0                	// #32992
   85c80:	72a013f2 	movk	w18, #0x9f, lsl #16
   85c84:	0a120072 	and	w18, w3, w18
   85c88:	72a001f8 	movk	w24, #0xf, lsl #16
   85c8c:	6b18025f 	cmp	w18, w24
   85c90:	54034300 	b.eq	8c4f0 <disasm+0x7df0>  // b.none
		names="sdot\0udot\0";
		op=((ic32_29)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs4b; 
	} else
	if(((ic32_8)&0b100111111100000000110100)==0b000011111000000000010000) {
   85c94:	52900212 	mov	w18, #0x8010                	// #32784
   85c98:	72a001f2 	movk	w18, #0xf, lsl #16
   85c9c:	6b12035f 	cmp	w26, w18
   85ca0:	54033f40 	b.eq	8c488 <disasm+0x7d88>  // b.none
		names="fmla\0fmls\0fmul\0sqrdmulh\0?\0?\0fmulx\0sqrdmlah\0";
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_VmTs2; 
	} else
	if(((ic32_8)&0b100111111110000000110100)==0b000011111100000000010000) {
   85ca4:	529c0692 	mov	w18, #0xe034                	// #57396
   85ca8:	52980218 	mov	w24, #0xc010                	// #49168
   85cac:	72a013f2 	movk	w18, #0x9f, lsl #16
   85cb0:	0a120072 	and	w18, w3, w18
   85cb4:	72a001f8 	movk	w24, #0xf, lsl #16
   85cb8:	6b18025f 	cmp	w18, w24
   85cbc:	54033b60 	b.eq	8c428 <disasm+0x7d28>  // b.none
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=1;
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_VmTs2; 
	} else
	if(((ic32_8)&0b111111111110000001111100)==0b100010000000000001111100) {
   85cc0:	121e5472 	and	w18, w3, #0xfffffc
   85cc4:	52800f98 	mov	w24, #0x7c                  	// #124
   85cc8:	12136652 	and	w18, w18, #0xffffe07f
   85ccc:	72a01118 	movk	w24, #0x88, lsl #16
   85cd0:	6b18025f 	cmp	w18, w24
   85cd4:	540337c0 	b.eq	8c3cc <disasm+0x7ccc>  // b.none
		names="stxr\0stlxr\0";
		op=((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_24)&0b11111111)==0b10011000) {
   85cd8:	710262df 	cmp	w22, #0x98
   85cdc:	54033480 	b.eq	8c36c <disasm+0x7c6c>  // b.none
		names="ldrsw\0";
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_labeli4; 
	} else
	if(((ic32_8)&0b111111110110000001111100)==0b100110110010000001111100) {
   85ce0:	528c0f92 	mov	w18, #0x607c                	// #24700
   85ce4:	52840f98 	mov	w24, #0x207c                	// #8316
   85ce8:	72a01ff2 	movk	w18, #0xff, lsl #16
   85cec:	0a120072 	and	w18, w3, w18
   85cf0:	72a01378 	movk	w24, #0x9b, lsl #16
   85cf4:	6b18025f 	cmp	w18, w24
   85cf8:	540330a0 	b.eq	8c30c <disasm+0x7c0c>  // b.none
		names="smull\0smnegl\0umull\0umnegl\0";
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Wn; args[2]=disasm_arg_Wm; 
	} else
	if(((ic32_16)&0b1111111101100000)==0b1001101100100000) {
   85cfc:	529fec12 	mov	w18, #0xff60                	// #65376
   85d00:	0a1200b2 	and	w18, w5, w18
   85d04:	52936418 	mov	w24, #0x9b20                	// #39712
   85d08:	6b18025f 	cmp	w18, w24
   85d0c:	54032d00 	b.eq	8c2ac <disasm+0x7bac>  // b.none
		names="smaddl\0smsubl\0umaddl\0umsubl\0";
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Wn; args[2]=disasm_arg_Wm; args[3]=disasm_arg_Xd; 
	} else
	if(((ic32_8)&0b111111110110000011111100)==0b100110110100000001111100) {
   85d10:	b940b3f8 	ldr	w24, [sp, #176]
   85d14:	52880f92 	mov	w18, #0x407c                	// #16508
   85d18:	72a01372 	movk	w18, #0x9b, lsl #16
   85d1c:	6b12031f 	cmp	w24, w18
   85d20:	540329a0 	b.eq	8c254 <disasm+0x7b54>  // b.none
		names="smulh\0umulh\0";
		op=((ic32_23)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xn; args[2]=disasm_arg_Xm; 
	} else
	if(((ic32_8)&0b111111111110000000001100)==0b101110001000000000000100) {
   85d24:	121e5472 	and	w18, w3, #0xfffffc
   85d28:	5290009a 	mov	w26, #0x8004                	// #32772
   85d2c:	12135a52 	and	w18, w18, #0xffffe00f
   85d30:	72a0171a 	movk	w26, #0xb8, lsl #16
   85d34:	6b1a025f 	cmp	w18, w26
   85d38:	54032580 	b.eq	8c1e8 <disasm+0x7ae8>  // b.none
		names="ldrsw\0";
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
	} else
	if(((ic32_8)&0b111111111110000000000100)==0b101110001000000000000100) {
   85d3c:	121e5478 	and	w24, w3, #0xfffffc
   85d40:	12135718 	and	w24, w24, #0xffffe007
   85d44:	6b1a031f 	cmp	w24, w26
   85d48:	54032180 	b.eq	8c178 <disasm+0x7a78>  // b.none
		names="ldrsw\0";
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111111110000000001100)==0b101110001010000000001000) {
   85d4c:	52940118 	mov	w24, #0xa008                	// #40968
   85d50:	72a01718 	movk	w24, #0xb8, lsl #16
   85d54:	6b18025f 	cmp	w18, w24
   85d58:	54031de0 	b.eq	8c114 <disasm+0x7a14>  // b.none
		names="ldrsw\0";
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj2; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b1111111111000000)==0b1011100110000000) {
   85d5c:	b94083fa 	ldr	w26, [sp, #128]
   85d60:	52973018 	mov	w24, #0xb980                	// #47488
   85d64:	6b18035f 	cmp	w26, w24
   85d68:	54031aa0 	b.eq	8c0bc <disasm+0x79bc>  // b.none
		names="ldrsw\0";
		j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111111100000010000000)==0b110011100000000000000000) {
   85d6c:	12194078 	and	w24, w3, #0xffff80
   85d70:	12126718 	and	w24, w24, #0xffffc0ff
   85d74:	7173831f 	cmp	w24, #0xce0, lsl #12
   85d78:	54031760 	b.eq	8c064 <disasm+0x7964>  // b.none
		names="eor3\0bcax\0";
		op=((ic32_21)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt16b; args[1]=disasm_arg_Vn16b; args[2]=disasm_arg_Vm16b; args[3]=disasm_arg_Vd16b; 
	} else
	if(((ic32_8)&0b111111111110000010000000)==0b110011100100000000000000) {
   85d7c:	12194078 	and	w24, w3, #0xffff80
   85d80:	12136b18 	and	w24, w24, #0xffffe0ff
   85d84:	7173931f 	cmp	w24, #0xce4, lsl #12
   85d88:	54031420 	b.eq	8c00c <disasm+0x790c>  // b.none
		names="sm3ss1\0";
		m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; args[3]=disasm_arg_Vd4s; 
	} else
	if(((ic32_8)&0b111111111110000011000000)==0b110011100100000010000000) {
   85d8c:	121a4478 	and	w24, w3, #0xffffc0
   85d90:	5288101a 	mov	w26, #0x4080                	// #16512
   85d94:	12136b18 	and	w24, w24, #0xffffe0ff
   85d98:	72a019da 	movk	w26, #0xce, lsl #16
   85d9c:	6b1a031f 	cmp	w24, w26
   85da0:	540310a0 	b.eq	8bfb4 <disasm+0x78b4>  // b.none
		names="sm3tt1a\0sm3tt1b\0sm3tt2a\0sm3tt2b\0";
		op=((ic32_10)&0x3); m=((ic32_16)&0x1f); j=((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		z=0;
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_VmTs; 
	} else
	if(((ic32_8)&0b111111111110000011111000)==0b110011100110000010000000) {
   85da4:	121d5078 	and	w24, w3, #0xfffff8
   85da8:	528c101a 	mov	w26, #0x6080                	// #24704
   85dac:	12136b18 	and	w24, w24, #0xffffe0ff
   85db0:	72a019da 	movk	w26, #0xce, lsl #16
   85db4:	6b1a031f 	cmp	w24, w26
   85db8:	54030d20 	b.eq	8bf5c <disasm+0x785c>  // b.none
		names="sha512h\0sha512h2\0";
		op=((ic32_10)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Qn; args[2]=disasm_arg_Vm2d; 
	} else
	if(((ic32_8)&0b111111111110000011111000)==0b110011100110000010001000) {
   85dbc:	528c111a 	mov	w26, #0x6088                	// #24712
   85dc0:	72a019da 	movk	w26, #0xce, lsl #16
   85dc4:	6b1a031f 	cmp	w24, w26
   85dc8:	540309e0 	b.eq	8bf04 <disasm+0x7804>  // b.none
		names="sha512su1\0rax1\0";
		op=((ic32_10)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_Vn2d; args[2]=disasm_arg_Vm2d; 
	} else
	if(((ic32_8)&0b111111111110000011110000)==0b110011100110000011000000) {
   85dcc:	121c4c78 	and	w24, w3, #0xfffff0
   85dd0:	528c181a 	mov	w26, #0x60c0                	// #24768
   85dd4:	12136b18 	and	w24, w24, #0xffffe0ff
   85dd8:	72a019da 	movk	w26, #0xce, lsl #16
   85ddc:	6b1a031f 	cmp	w24, w26
   85de0:	54030660 	b.eq	8beac <disasm+0x77ac>  // b.none
		names="sm3partw1\0sm3partw2\0sm4ekey\0";
		op=((ic32_10)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
	} else
	if(((ic32_8)&0b111111111111111111111100)==0b110011101100000010000000) {
   85de4:	52981018 	mov	w24, #0xc080                	// #49280
   85de8:	72a019d8 	movk	w24, #0xce, lsl #16
   85dec:	6b18033f 	cmp	w25, w24
   85df0:	54030380 	b.eq	8be60 <disasm+0x7760>  // b.none
		names="sha512su0\0";
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_Vn2d; 
	} else
	if(((ic32_8)&0b111111111111111111111100)==0b110011101100000010000100) {
   85df4:	52981098 	mov	w24, #0xc084                	// #49284
   85df8:	72a019d8 	movk	w24, #0xce, lsl #16
   85dfc:	6b18033f 	cmp	w25, w24
   85e00:	540300a0 	b.eq	8be14 <disasm+0x7714>  // b.none
		names="sm4e\0";
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
	} else
	if(((ic32_16)&0b1111111111000000)==0b1101010000000000) {
   85e04:	b94083f9 	ldr	w25, [sp, #128]
   85e08:	529a8018 	mov	w24, #0xd400                	// #54272
   85e0c:	6b18033f 	cmp	w25, w24
   85e10:	5402fce0 	b.eq	8bdac <disasm+0x76ac>  // b.none
		names="?\0svc\0hvc\0smc\0brk\0";
		op=((ic32_19)&0x4)|((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
		args[0]=disasm_arg_i; 
	} else
	if((ic32&0b11111111111000000000000000000011)==0b11010100010000000000000000000000) {
   85e14:	120b3019 	and	w25, w0, #0xffe00003
   85e18:	52ba8818 	mov	w24, #0xd4400000            	// #-734003200
   85e1c:	6b18033f 	cmp	w25, w24
   85e20:	5402fa40 	b.eq	8bd68 <disasm+0x7668>  // b.none
		names="hlt\0";
	} else
	if(((ic32_16)&0b1111111111100000)==0b1101010010100000) {
   85e24:	121b28ba 	and	w26, w5, #0xffe0
   85e28:	529a9418 	mov	w24, #0xd4a0                	// #54432
   85e2c:	6b18035f 	cmp	w26, w24
   85e30:	5402f6c0 	b.eq	8bd08 <disasm+0x7608>  // b.none
		names="?\0dcsp1\0dcps2\0dcps3\0";
		op=((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
		args[0]=disasm_arg_i_opt; 
	} else
	if((ic32&0b11111111111111111111110100011111)==0b11010101000000110010000000011111) {
   85e34:	12805c18 	mov	w24, #0xfffffd1f            	// #-737
   85e38:	528403f9 	mov	w25, #0x201f                	// #8223
   85e3c:	0a180018 	and	w24, w0, w24
   85e40:	72baa079 	movk	w25, #0xd503, lsl #16
   85e44:	6b19031f 	cmp	w24, w25
   85e48:	5402f380 	b.eq	8bcb8 <disasm+0x75b8>  // b.none
		names="nop\0yield\0wfe\0wfi\0sev\0sevl\0?\0?\0esb\0psc\0";
		op=((ic32>>6)&0x8)|((ic32_5)&0x7); 
	} else
	if((ic32&0b11111111111111111111000011111111)==0b11010101000000110011000001011111) {
   85e4c:	12146c19 	and	w25, w0, #0xfffff0ff
   85e50:	52860bf8 	mov	w24, #0x305f                	// #12383
   85e54:	72baa078 	movk	w24, #0xd503, lsl #16
   85e58:	6b18033f 	cmp	w25, w24
   85e5c:	5402efe0 	b.eq	8bc58 <disasm+0x7558>  // b.none
		names="clrex\0";
		i=((ic32_11)&1?(-1<<4):0)|((ic32_8)&0xf); 
		args[0]=disasm_arg_i_opt; 
	} else
	if((ic32&0b11111111111111111111000010011111)==0b11010101000000110011000010011111) {
   85e60:	1281ec18 	mov	w24, #0xfffff09f            	// #-3937
   85e64:	528613f9 	mov	w25, #0x309f                	// #12447
   85e68:	0a180018 	and	w24, w0, w24
   85e6c:	72baa079 	movk	w25, #0xd503, lsl #16
   85e70:	6b19031f 	cmp	w24, w25
   85e74:	5402ecc0 	b.eq	8bc0c <disasm+0x750c>  // b.none
		names="dsb\0dmb\0?\0isb\0";
		op=((ic32_5)&0x3); j=((ic32_8)&0xf); 
		args[0]=disasm_arg_sh; 
	} else
	if((ic32&0b11111111111110001111000000011111)==0b11010101000000000100000000011111) {
   85e78:	529e03f8 	mov	w24, #0xf01f                	// #61471
   85e7c:	528803f9 	mov	w25, #0x401f                	// #16415
   85e80:	72bfff18 	movk	w24, #0xfff8, lsl #16
   85e84:	0a180018 	and	w24, w0, w24
   85e88:	72baa019 	movk	w25, #0xd500, lsl #16
   85e8c:	6b19031f 	cmp	w24, w25
   85e90:	5402e8c0 	b.eq	8bba8 <disasm+0x74a8>  // b.none
		names="msr\0";
		i=((ic32_11)&1?(-1<<4):0)|((ic32_8)&0xf); p=((ic32_5)&0x7); 
		args[0]=disasm_arg_pstate; args[1]=disasm_arg_i; 
	} else
	if((ic32&0b11111111111111111111111110000000)==0b11010101000010000111011000000000) {
   85e94:	12196018 	and	w24, w0, #0xffffff80
   85e98:	528ec019 	mov	w25, #0x7600                	// #30208
   85e9c:	72baa119 	movk	w25, #0xd508, lsl #16
   85ea0:	6b19031f 	cmp	w24, w25
   85ea4:	5402e5a0 	b.eq	8bb58 <disasm+0x7458>  // b.none
		names="dc\0";
		d=((ic32_5)&0x3); t=((ic32)&0x1f); 
		args[0]=disasm_arg_dc0; args[1]=disasm_arg_Xt; 
	} else
	if((ic32&0b11111111111111111111111110000000)==0b11010101000010000111100000000000) {
   85ea8:	528f0019 	mov	w25, #0x7800                	// #30720
   85eac:	72baa119 	movk	w25, #0xd508, lsl #16
   85eb0:	6b19031f 	cmp	w24, w25
   85eb4:	5402e2a0 	b.eq	8bb08 <disasm+0x7408>  // b.none
		names="at\0";
		a=((ic32_5)&0x3); t=((ic32)&0x1f); 
		args[0]=disasm_arg_a0; args[1]=disasm_arg_Xt; 
	} else
	if(((ic32_8)&0b111111111111111111111111)==0b110101010000100001111001) {
   85eb8:	52810f38 	mov	w24, #0x879                 	// #2169
   85ebc:	72a01ab8 	movk	w24, #0xd5, lsl #16
   85ec0:	6b18007f 	cmp	w3, w24
   85ec4:	5402dfa0 	b.eq	8bab8 <disasm+0x73b8>  // b.none
		names="at\0";
		a=((ic32_5)&0x7); t=((ic32)&0x1f); 
		args[0]=disasm_arg_a1; args[1]=disasm_arg_Xt; 
	} else
	if((ic32&0b11111111111111111111101111100000)==0b11010101000010000111101001000000) {
   85ec8:	128083f8 	mov	w24, #0xfffffbe0            	// #-1056
   85ecc:	528f4819 	mov	w25, #0x7a40                	// #31296
   85ed0:	0a180018 	and	w24, w0, w24
   85ed4:	72baa119 	movk	w25, #0xd508, lsl #16
   85ed8:	6b19031f 	cmp	w24, w25
   85edc:	5402dc60 	b.eq	8ba68 <disasm+0x7368>  // b.none
		names="dc\0";
		d=((ic32_10)&0x1); t=((ic32)&0x1f); 
		args[0]=disasm_arg_dc1; args[1]=disasm_arg_Xt; 
	} else
	if((ic32&0b11111111111111111111111111100000)==0b11010101000010110111010000100000) {
   85ee0:	121b6819 	and	w25, w0, #0xffffffe0
   85ee4:	528e8418 	mov	w24, #0x7420                	// #29728
   85ee8:	72baa178 	movk	w24, #0xd50b, lsl #16
   85eec:	6b18033f 	cmp	w25, w24
   85ef0:	5402d960 	b.eq	8ba1c <disasm+0x731c>  // b.none
		names="dc\0";
		t=((ic32)&0x1f); 
		args[0]=disasm_arg_ZVA; args[1]=disasm_arg_Xt; 
	} else
	if((ic32&0b11111111111111111111101011100000)==0b11010101000010110111101000100000) {
   85ef4:	1280a3f8 	mov	w24, #0xfffffae0            	// #-1312
   85ef8:	528f4419 	mov	w25, #0x7a20                	// #31264
   85efc:	0a180018 	and	w24, w0, w24
   85f00:	72baa179 	movk	w25, #0xd50b, lsl #16
   85f04:	6b19031f 	cmp	w24, w25
   85f08:	5402d5e0 	b.eq	8b9c4 <disasm+0x72c4>  // b.none
		names="dc\0";
		d=((ic32_9)&0x2)|((ic32_8)&0x1); t=((ic32)&0x1f); 
		args[0]=disasm_arg_dc2; args[1]=disasm_arg_Xt; 
	} else
	if((ic32&0b11111111111111001111101111000000)==0b11010101000010000111000100000000) {
   85f0c:	529f7818 	mov	w24, #0xfbc0                	// #64448
   85f10:	528e2019 	mov	w25, #0x7100                	// #28928
   85f14:	72bfff98 	movk	w24, #0xfffc, lsl #16
   85f18:	0a180018 	and	w24, w0, w24
   85f1c:	72baa119 	movk	w25, #0xd508, lsl #16
   85f20:	6b19031f 	cmp	w24, w25
   85f24:	5402d240 	b.eq	8b96c <disasm+0x726c>  // b.none
		names="ic\0";
		c=((ic32_15)&0x2)|((ic32_10)&0x1); t=((ic32)&0x1f); 
		args[0]=disasm_arg_ic; args[1]=disasm_arg_Xt_opt; 
	} else
	if((ic32&0b11111111111111111111101101100000)==0b11010101000011001000000000100000) {
   85f28:	128093f8 	mov	w24, #0xfffffb60            	// #-1184
   85f2c:	52900419 	mov	w25, #0x8020                	// #32800
   85f30:	0a180018 	and	w24, w0, w24
   85f34:	72baa199 	movk	w25, #0xd50c, lsl #16
   85f38:	6b19031f 	cmp	w24, w25
   85f3c:	5402cee0 	b.eq	8b918 <disasm+0x7218>  // b.none
		names="tlbi\0";
		n=((ic32_9)&0x2)|((ic32>>7)&0x1); t=((ic32)&0x1f); 
		args[0]=disasm_arg_tl1; args[1]=disasm_arg_Xt_opt; 
	} else
	if((ic32&0b11111111111111111111101101000000)==0b11010101000011101000001100000000) {
   85f40:	128097ef 	mov	w15, #0xfffffb40            	// #-1216
   85f44:	52906018 	mov	w24, #0x8300                	// #33536
   85f48:	0a0f000f 	and	w15, w0, w15
   85f4c:	72baa1d8 	movk	w24, #0xd50e, lsl #16
   85f50:	6b1801ff 	cmp	w15, w24
   85f54:	5402cb20 	b.eq	8b8b8 <disasm+0x71b8>  // b.none
		names="tlbi\0";
		n=((ic32_8)&0x4)|((ic32>>6)&0x2)|((ic32_5)&0x1); t=((ic32)&0x1f); 
		args[0]=disasm_arg_tl2; args[1]=disasm_arg_Xt_opt; 
	} else
	if(((ic32_8)&0b111111111111110111111111)==0b110101010000110001111000) {
   85f58:	12005c6f 	and	w15, w3, #0xffffff
   85f5c:	52818f18 	mov	w24, #0xc78                 	// #3192
   85f60:	121679ef 	and	w15, w15, #0xfffffdff
   85f64:	72a01ab8 	movk	w24, #0xd5, lsl #16
   85f68:	6b1801ff 	cmp	w15, w24
   85f6c:	5402c7a0 	b.eq	8b860 <disasm+0x7160>  // b.none
		names="at\0";
		a=((ic32_14)&0x8)|((ic32_5)&0x7); t=((ic32)&0x1f); 
		args[0]=disasm_arg_a2; args[1]=disasm_arg_Xt; 
	} else
	if(((ic32_8)&0b111111111111101111111011)==0b110101010000100010000011) {
   85f70:	529f7f6f 	mov	w15, #0xfbfb                	// #64507
   85f74:	52811078 	mov	w24, #0x883                 	// #2179
   85f78:	72a01fef 	movk	w15, #0xff, lsl #16
   85f7c:	0a0f006f 	and	w15, w3, w15
   85f80:	72a01ab8 	movk	w24, #0xd5, lsl #16
   85f84:	6b1801ff 	cmp	w15, w24
   85f88:	5402c3c0 	b.eq	8b800 <disasm+0x7100>  // b.none
		names="tlbi\0";
		n=((ic32_14)&0x10)|((ic32>>7)&0x8)|((ic32_5)&0x7); t=((ic32)&0x1f); 
		args[0]=disasm_arg_tl0; args[1]=disasm_arg_Xt_opt; 
	} else
	if(((ic32_16)&0b1111111111100000)==0b1101010100000000) {
   85f8c:	529aa00f 	mov	w15, #0xd500                	// #54528
   85f90:	6b0f035f 	cmp	w26, w15
   85f94:	5402c080 	b.eq	8b7a4 <disasm+0x70a4>  // b.none
		names="msr\0";
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
		args[0]=disasm_arg_sysreg; args[1]=disasm_arg_Xt; 
	} else
	if(((ic32_16)&0b1111111111111000)==0b1101010100101000) {
   85f98:	121d30b1 	and	w17, w5, #0xfff8
   85f9c:	529aa50f 	mov	w15, #0xd528                	// #54568
   85fa0:	6b0f023f 	cmp	w17, w15
   85fa4:	5402bc60 	b.eq	8b730 <disasm+0x7030>  // b.none
		names="sysl\0";
		i=((ic32_18)&1?(-1<<3):0)|((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_i; args[2]=disasm_arg_Cn; args[3]=disasm_arg_Cm; args[4]=disasm_arg_j; 
	} else
	if(((ic32_16)&0b1111111111100000)==0b1101010100100000) {
   85fa8:	529aa40f 	mov	w15, #0xd520                	// #54560
   85fac:	6b0f035f 	cmp	w26, w15
   85fb0:	5402b920 	b.eq	8b6d4 <disasm+0x6fd4>  // b.none
		names="mrs\0";
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_sysreg; 
	} else
	if((ic32&0b11111111100111111111110000011111)==0b11010110000111110000000000000000) {
   85fb4:	529f83ef 	mov	w15, #0xfc1f                	// #64543
   85fb8:	52bac3f1 	mov	w17, #0xd61f0000            	// #-702611456
   85fbc:	72bff3ef 	movk	w15, #0xff9f, lsl #16
   85fc0:	0a0f000f 	and	w15, w0, w15
   85fc4:	6b1101ff 	cmp	w15, w17
   85fc8:	5402b600 	b.eq	8b688 <disasm+0x6f88>  // b.none
		names="br\0blr\0ret\0";
		op=((ic32_21)&0x3); n=((ic32_5)&0x1f); 
		args[0]=disasm_arg_Xn; 
	} else
	if((ic32&0b11111111110111111111111111111111)==0b11010110100111110000001111100000) {
   85fcc:	120a7811 	and	w17, w0, #0xffdfffff
   85fd0:	52807c0f 	mov	w15, #0x3e0                 	// #992
   85fd4:	72bad3ef 	movk	w15, #0xd69f, lsl #16
   85fd8:	6b0f023f 	cmp	w17, w15
   85fdc:	5402b340 	b.eq	8b644 <disasm+0x6f44>  // b.none
		names="eret\0drps\0";
		op=((ic32_21)&0x1); 
	} else
	if(((ic32_24)&0b11111111)==0b11011000) {
   85fe0:	710362df 	cmp	w22, #0xd8
   85fe4:	5402b000 	b.eq	8b5e4 <disasm+0x6ee4>  // b.none
		names="prfm\0";
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_labeli4; 
	} else
	if(((ic32_8)&0b111111111110000000001100)==0b111110001000000000000000) {
   85fe8:	717e225f 	cmp	w18, #0xf88, lsl #12
   85fec:	5402ac60 	b.eq	8b578 <disasm+0x6e78>  // b.none
		names="prfum\0";
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b111111111110000000001100)==0b111110001010000000001000) {
   85ff0:	5294010f 	mov	w15, #0xa008                	// #40968
   85ff4:	72a01f0f 	movk	w15, #0xf8, lsl #16
   85ff8:	6b0f025f 	cmp	w18, w15
   85ffc:	5402a8c0 	b.eq	8b514 <disasm+0x6e14>  // b.none
		names="prfm\0";
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj3; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b1111111111000000)==0b1111100110000000) {
   86000:	b94083f1 	ldr	w17, [sp, #128]
   86004:	529f300f 	mov	w15, #0xf980                	// #63872
   86008:	6b0f023f 	cmp	w17, w15
   8600c:	5402a580 	b.eq	8b4bc <disasm+0x6dbc>  // b.none
		names="prfm\0";
		j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b1011111111100000)==0b1000100000100000) {
   86010:	5297fc0f 	mov	w15, #0xbfe0                	// #49120
   86014:	0a0f00af 	and	w15, w5, w15
   86018:	52910411 	mov	w17, #0x8820                	// #34848
   8601c:	6b1101ff 	cmp	w15, w17
   86020:	5402a1c0 	b.eq	8b458 <disasm+0x6d58>  // b.none
		names="stxp\0stlxp\0";
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_Rm; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b1011111111111111)==0b1000100001111111) {
   86024:	5297ffef 	mov	w15, #0xbfff                	// #49151
   86028:	0a0f00af 	and	w15, w5, w15
   8602c:	52910ff1 	mov	w17, #0x887f                	// #34943
   86030:	6b1101ff 	cmp	w15, w17
   86034:	54029e40 	b.eq	8b3fc <disasm+0x6cfc>  // b.none
		names="ldxp\0ldaxp\0";
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111010000001111100)==0b100010000010000001111100) {
   86038:	b9407ff1 	ldr	w17, [sp, #124]
   8603c:	52840f8f 	mov	w15, #0x207c                	// #8316
   86040:	72a0110f 	movk	w15, #0x88, lsl #16
   86044:	6b0f023f 	cmp	w17, w15
   86048:	54029a80 	b.eq	8b398 <disasm+0x6c98>  // b.none
		names="cas\0casl\0casa\0casal\0";
		op=((ic32_21)&0x2)|((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111110011111101111100)==0b100010000001111101111100) {
   8604c:	b9408bf1 	ldr	w17, [sp, #136]
   86050:	5283ef8f 	mov	w15, #0x1f7c                	// #8060
   86054:	72a0110f 	movk	w15, #0x88, lsl #16
   86058:	6b0f023f 	cmp	w17, w15
   8605c:	54029720 	b.eq	8b340 <disasm+0x6c40>  // b.none
		names="?\0?\0ldxr\0ldaxr\0stllr\0stlr\0ldlar\0ldar\0";
		op=((ic32_21)&0x6)|((ic32_15)&0x1); s=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111010000000001100)==0b101110000000000000000100) {
   86060:	5280008f 	mov	w15, #0x4                   	// #4
   86064:	72a0170f 	movk	w15, #0xb8, lsl #16
   86068:	6b0f013f 	cmp	w9, w15
   8606c:	54029340 	b.eq	8b2d4 <disasm+0x6bd4>  // b.none
		names="str\0ldr\0";
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
	} else
	if(((ic32_8)&0b101111111010000000000100)==0b101110000000000000000000) {
   86070:	716e01df 	cmp	w14, #0xb80, lsl #12
   86074:	54028f60 	b.eq	8b260 <disasm+0x6b60>  // b.none
		names="stur\0sttr\0ldur\0ldtr\0";
		op=((ic32_21)&0x2)|((ic32_11)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111010000000000100)==0b101110000000000000000100) {
   86078:	6b0f01df 	cmp	w14, w15
   8607c:	54028ba0 	b.eq	8b1f0 <disasm+0x6af0>  // b.none
		names="str\0ldr\0";
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111111010000000001100)==0b101110000010000000001000) {
   86080:	5284010e 	mov	w14, #0x2008                	// #8200
   86084:	72a0170e 	movk	w14, #0xb8, lsl #16
   86088:	6b0e013f 	cmp	w9, w14
   8608c:	54028800 	b.eq	8b18c <disasm+0x6a8c>  // b.none
		names="str\0ldr\0";
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountjs; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b101111110010000000001100)==0b101110000010000000000000) {
   86090:	52840189 	mov	w9, #0x200c                	// #8204
   86094:	72a017e9 	movk	w9, #0xbf, lsl #16
   86098:	0a090069 	and	w9, w3, w9
   8609c:	716e093f 	cmp	w9, #0xb82, lsl #12
   860a0:	54028420 	b.eq	8b124 <disasm+0x6a24>  // b.none
		names="ldadd\0ldclr\0ldeor\0ldset\0ldsmax\0ldsmin\0ldumax\0ldumin\0swp\0?\0?\0?\0?\0?\0?\0?\0ldaddl\0ldclrl\0ldeorl\0ldsetl\0ldsmaxl\0ldsminl\0ldumaxl\0lduminl\0swpl\0?\0?\0?\0?\0?\0?\0?\0ldadda\0ldclra\0ldeora\0ldseta\0ldsmaxa\0ldsmina\0ldumaxa\0ldumina\0swpa\0?\0?\0?\0?\0?\0?\0?\0ldaddal\0ldclral\0ldeoral\0ldsetal\0ldsmaxal\0ldsminal\0ldumaxal\0lduminal\0swpal\0";
		op=((ic32_18)&0x30)|((ic32_12)&0xf); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b1011111110000000)==0b1011100100000000) {
   860a4:	52972009 	mov	w9, #0xb900                	// #47360
   860a8:	6b0903df 	cmp	w30, w9
   860ac:	54028100 	b.eq	8b0cc <disasm+0x69cc>  // b.none
		names="str\0ldr\0";
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b0111111110100000)==0b0001001110000000) {
   860b0:	528ff409 	mov	w9, #0x7fa0                	// #32672
   860b4:	0a0900a9 	and	w9, w5, w9
   860b8:	5282700e 	mov	w14, #0x1380                	// #4992
   860bc:	6b0e013f 	cmp	w9, w14
	ic32_20=ic32>>20; ic32_15=ic32>>15; ic32_16=ic32>>16; ic32_5=ic32>>5; ic32_8=ic32>>8; ic32_22=ic32>>22; ic32_13=ic32>>13; ic32_14=ic32>>14; ic32_9=ic32>>9; ic32_10=ic32>>10; ic32_21=ic32>>21; ic32_4=ic32>>4; ic32_12=ic32>>12; ic32_24=ic32>>24; ic32_11=ic32>>11; ic32_18=ic32>>18; ic32_27=ic32>>27; ic32_28=ic32>>28; ic32_29=ic32>>29; ic32_25=ic32>>25; ic32_26=ic32>>26; ic32_23=ic32>>23; ic32_30=ic32>>30; ic32_19=ic32>>19; ic32_31=ic32>>31;
   860c0:	531f7c09 	lsr	w9, w0, #31
	if(((ic32_16)&0b0111111110100000)==0b0001001110000000) {
   860c4:	54027d00 	b.eq	8b064 <disasm+0x6964>  // b.none
		names="extr\0";
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); i=((ic32_15)&1?(-1<<6):0)|((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_i; 
	} else
	if(((ic32_24)&0b01111100)==0b00010100) {
   860c8:	121e12ce 	and	w14, w22, #0x7c
   860cc:	710051df 	cmp	w14, #0x14
   860d0:	540279a0 	b.eq	8b004 <disasm+0x6904>  // b.none
		names="b\0bl\0";
		op=((ic32_31)&0x1); i=((ic32_25)&1?(-1<<26):0)|((ic32)&0x3ffffff); 
		args[0]=disasm_arg_labeli4; 
	} else
	if(((ic32_8)&0b011111111110000011111100)==0b000110100000000000000000) {
   860d4:	121e506e 	and	w14, w3, #0x7ffffc
   860d8:	121369ce 	and	w14, w14, #0xffffe0ff
   860dc:	714681df 	cmp	w14, #0x1a0, lsl #12
   860e0:	54027660 	b.eq	8afac <disasm+0x68ac>  // b.none
		names="adc\0";
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
	} else
	if(((ic32_8)&0b011111111110000010000000)==0b000110101100000000000000) {
   860e4:	12193c6e 	and	w14, w3, #0x7fff80
   860e8:	121369ce 	and	w14, w14, #0xffffe0ff
   860ec:	7146b1df 	cmp	w14, #0x1ac, lsl #12
   860f0:	54027320 	b.eq	8af54 <disasm+0x6854>  // b.none
		names="?\0?\0udiv\0sdiv\0?\0?\0?\0?\0lslv\0lsrv\0asrv\0rorv\0?\0?\0?\0?\0crc32b\0crc32h\0crc32w\0crc32x\0crc32cb\0crc32ch\0crc32cw\0crc32cx\0";
		op=((ic32_10)&0x1f); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
	} else
	if(((ic32_8)&0b011111111110000001111100)==0b000110110000000001111100) {
   860f4:	121e506e 	and	w14, w3, #0x7ffffc
   860f8:	52800f8f 	mov	w15, #0x7c                  	// #124
   860fc:	121365ce 	and	w14, w14, #0xffffe07f
   86100:	72a0036f 	movk	w15, #0x1b, lsl #16
   86104:	6b0f01df 	cmp	w14, w15
   86108:	54026fa0 	b.eq	8aefc <disasm+0x67fc>  // b.none
		names="mul\0mneg\0";
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
	} else
	if(((ic32_16)&0b0111111111100000)==0b0001101100000000) {
   8610c:	121b24af 	and	w15, w5, #0x7fe0
   86110:	5283600e 	mov	w14, #0x1b00                	// #6912
   86114:	6b0e01ff 	cmp	w15, w14
   86118:	54026c60 	b.eq	8aea4 <disasm+0x67a4>  // b.none
		names="madd\0msub\0";
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_Rd; 
	} else
	if(((ic32_8)&0b011111111111111111111100)==0b000111101010111000000000) {
   8611c:	121e506e 	and	w14, w3, #0x7ffffc
   86120:	5295c00f 	mov	w15, #0xae00                	// #44544
   86124:	72a003cf 	movk	w15, #0x1e, lsl #16
   86128:	6b0f01df 	cmp	w14, w15
   8612c:	54026960 	b.eq	8ae58 <disasm+0x6758>  // b.none
		names="fmov\0";
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Vn1d; 
	} else
	if(((ic32_8)&0b011111111111111111111100)==0b000111101010111100000000) {
   86130:	5295e00f 	mov	w15, #0xaf00                	// #44800
   86134:	72a003cf 	movk	w15, #0x1e, lsl #16
   86138:	6b0f01df 	cmp	w14, w15
   8613c:	54026680 	b.eq	8ae0c <disasm+0x670c>  // b.none
		names="fmov\0";
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Vt1d; args[1]=disasm_arg_Rn; 
	} else
	if(((ic32_16)&0b0111111100111110)==0b0001111000000010) {
   86140:	528fe7ce 	mov	w14, #0x7f3e                	// #32574
   86144:	0a0e00ae 	and	w14, w5, w14
   86148:	5283c04f 	mov	w15, #0x1e02                	// #7682
   8614c:	6b0f01df 	cmp	w14, w15
   86150:	54026340 	b.eq	8adb8 <disasm+0x66b8>  // b.none
		names="scvtf\0ucvtf\0";
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_Rn; args[2]=disasm_arg_fbits; 
	} else
	if(((ic32_16)&0b0111111100111110)==0b0001111000011000) {
   86154:	5283c30f 	mov	w15, #0x1e18                	// #7704
   86158:	6b0f01df 	cmp	w14, w15
   8615c:	54026040 	b.eq	8ad64 <disasm+0x6664>  // b.none
		names="fcvtzs\0fcvtzu\0";
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_fbits; 
	} else
	if(((ic32_8)&0b011111110011101011111100)==0b000111100010001000000000) {
   86160:	52875f8e 	mov	w14, #0x3afc                	// #15100
   86164:	5284400f 	mov	w15, #0x2200                	// #8704
   86168:	72a00fee 	movk	w14, #0x7f, lsl #16
   8616c:	0a0e006e 	and	w14, w3, w14
   86170:	72a003cf 	movk	w15, #0x1e, lsl #16
   86174:	6b0f01df 	cmp	w14, w15
   86178:	54025ca0 	b.eq	8ad0c <disasm+0x660c>  // b.none
		names="scvtf\0ucvtf\0fmov\0fmov\0";
		op=((ic32>>17)&0x2)|((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_Rn; 
	} else
	if(((ic32_8)&0b011111110011000011111100)==0b000111100010000000000000) {
   8617c:	52861f8e 	mov	w14, #0x30fc                	// #12540
   86180:	72a00fee 	movk	w14, #0x7f, lsl #16
   86184:	0a0e006e 	and	w14, w3, w14
   86188:	714789df 	cmp	w14, #0x1e2, lsl #12
   8618c:	540259a0 	b.eq	8acc0 <disasm+0x65c0>  // b.none
		names="fcvtns\0fcvtnu\0scvtf\0ucvtf\0fcvtas\0fcvtau\0fmov\0fmov\0fcvtns\0fcvtnu\0";
		op=((ic32_16)&0xf); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; 
	} else
	if(((ic32_8)&0b011111110011111011111100)==0b000111100011000000000000) {
   86190:	5287df8e 	mov	w14, #0x3efc                	// #16124
   86194:	72a00fee 	movk	w14, #0x7f, lsl #16
   86198:	0a0e006e 	and	w14, w3, w14
   8619c:	71478ddf 	cmp	w14, #0x1e3, lsl #12
   861a0:	540256a0 	b.eq	8ac74 <disasm+0x6574>  // b.none
		names="fcvtms\0fcvtmu\0";
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; 
	} else
	if(((ic32_16)&0b0111111110000000)==0b0010100010000000) {
   861a4:	12191caf 	and	w15, w5, #0x7f80
   861a8:	5285100e 	mov	w14, #0x2880                	// #10368
   861ac:	6b0e01ff 	cmp	w15, w14
   861b0:	540252a0 	b.eq	8ac04 <disasm+0x6504>  // b.none
		names="stp\0ldp\0";
		op=((ic32_22)&0x1); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_is4_opt; 
	} else
	if(((ic32_24)&0b01111110)==0b00101000) {
   861b4:	121f16ce 	and	w14, w22, #0x7e
   861b8:	7100a1df 	cmp	w14, #0x28
   861bc:	54024e40 	b.eq	8ab84 <disasm+0x6484>  // b.none
		names="stnp\0ldnp\0stp\0ldp\0";
		op=((ic32_23)&0x2)|((ic32_22)&0x1); s=((ic32_31)&0x1); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_is4_opt; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_24)&0b01111110)==0b00110100) {
   861c0:	7100d1df 	cmp	w14, #0x34
   861c4:	5401c300 	b.eq	89a24 <disasm+0x5324>  // b.none
		names="cbz\0cbnz\0";
		op=((ic32_24)&0x1); s=((ic32_31)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_labeli4; 
	} else
	if(((ic32_24)&0b01111110)==0b00110110) {
   861c8:	7100d9df 	cmp	w14, #0x36
   861cc:	5401bee0 	b.eq	899a8 <disasm+0x52a8>  // b.none
		names="tbz\0tbnz\0";
		op=((ic32_24)&0x1); b=((ic32_26)&0x20)|((ic32_19)&0x1f); i=((ic32_18)&1?(-1<<14):0)|((ic32_5)&0x3fff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_b; args[2]=disasm_arg_labeli4; 
	} else
	if(((ic32_8)&0b011111111110000000000100)==0b001110001000000000000000) {
   861d0:	121e506e 	and	w14, w3, #0x7ffffc
   861d4:	121355ce 	and	w14, w14, #0xffffe007
   861d8:	714e21df 	cmp	w14, #0x388, lsl #12
   861dc:	5401bac0 	b.eq	89934 <disasm+0x5234>  // b.none
		names="?\0ldtrsb\0ldursw\0ldtrsw\0";
		op=((ic32_30)&0x2)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if((ic32&0b01111111111000001111111111100000)==0b01011010000000000000001111100000) {
   861e0:	121b640e 	and	w14, w0, #0x7fffffe0
   861e4:	52807c0f 	mov	w15, #0x3e0                 	// #992
   861e8:	120b69ce 	and	w14, w14, #0xffe0ffff
   861ec:	72ab400f 	movk	w15, #0x5a00, lsl #16
   861f0:	6b0f01df 	cmp	w14, w15
   861f4:	5401b780 	b.eq	898e4 <disasm+0x51e4>  // b.none
		names="ngc\0";
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; 
	} else
	if(((ic32_8)&0b011111111111111111111000)==0b010110101100000000001000) {
   861f8:	121d4c6f 	and	w15, w3, #0x7ffff8
   861fc:	5298010e 	mov	w14, #0xc008                	// #49160
   86200:	72a00b4e 	movk	w14, #0x5a, lsl #16
   86204:	6b0e01ff 	cmp	w15, w14
   86208:	5401b480 	b.eq	89898 <disasm+0x5198>  // b.none
		names="rev\0";
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; 
	} else
	if(((ic32_8)&0b011111111111111111101000)==0b010110101100000000000000) {
   8620c:	121d4c6e 	and	w14, w3, #0x7ffff8
   86210:	121b79ce 	and	w14, w14, #0xffffffef
   86214:	7156b1df 	cmp	w14, #0x5ac, lsl #12
   86218:	5401b160 	b.eq	89844 <disasm+0x5144>  // b.none
		names="rbit\0rev16\0clz\0cls\0";
		op=((ic32_11)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; 
	} else
	if(((ic32_8)&0b001111111110000000001000)==0b000110101000000000000000) {
   8621c:	121d486e 	and	w14, w3, #0x3ffff8
   86220:	121359ce 	and	w14, w14, #0xffffe00f
   86224:	7146a1df 	cmp	w14, #0x1a8, lsl #12
   86228:	5401adc0 	b.eq	897e0 <disasm+0x50e0>  // b.none
		names="csel\0csinc\0csinv\0csneg\0";
		op=((ic32_29)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_c; 
	} else
	if(((ic32_24)&0b00111111)==0b00011100) {
   8622c:	120016cf 	and	w15, w22, #0x3f
   86230:	710071ff 	cmp	w15, #0x1c
   86234:	5401aa60 	b.eq	89780 <disasm+0x5080>  // b.none
		names="ldr\0";
		z=((ic32_30)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_labeli4; 
	} else
	if((ic32&0b00111111111000000000000000011111)==0b00101011001000000000000000011111) {
   86238:	1200740e 	and	w14, w0, #0x3fffffff
   8623c:	528003f1 	mov	w17, #0x1f                  	// #31
   86240:	120b3dce 	and	w14, w14, #0xffe0001f
   86244:	72a56411 	movk	w17, #0x2b20, lsl #16
   86248:	6b1101df 	cmp	w14, w17
   8624c:	5401a6a0 	b.eq	89720 <disasm+0x5020>  // b.none
		names="cmn\0cmp\0";
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); 
		args[0]=disasm_arg_RnS; args[1]=disasm_arg_Rsom; args[2]=disasm_arg_exts; 
	} else
	if(((ic32_16)&0b0011111110000000)==0b0010110010000000) {
   86250:	121918b1 	and	w17, w5, #0x3f80
   86254:	5285900e 	mov	w14, #0x2c80                	// #11392
   86258:	6b0e023f 	cmp	w17, w14
   8625c:	5401a2a0 	b.eq	896b0 <disasm+0x4fb0>  // b.none
		names="stp\0ldp\0";
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_iz4_opt; 
	} else
	if(((ic32_24)&0b00111110)==0b00101100) {
   86260:	121f12ce 	and	w14, w22, #0x3e
   86264:	7100b1df 	cmp	w14, #0x2c
   86268:	54019e40 	b.eq	89630 <disasm+0x4f30>  // b.none
		names="stnp\0ldnp\0stp\0ldp\0";
		op=((ic32_23)&0x2)|((ic32_22)&0x1); z=((ic32_30)&0x3); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_iz4_opt; args[5]=disasm_arg_offe; 
	} else
	if((ic32&0b00111111111000000000110000010000)==0b00111010010000000000000000000000) {
   8626c:	52818206 	mov	w6, #0xc10                 	// #3088
   86270:	52a7480e 	mov	w14, #0x3a400000            	// #977272832
   86274:	72a7fc06 	movk	w6, #0x3fe0, lsl #16
   86278:	0a060006 	and	w6, w0, w6
   8627c:	6b0e00df 	cmp	w6, w14
   86280:	54019aa0 	b.eq	895d4 <disasm+0x4ed4>  // b.none
		names="ccmn\0ccmp\0";
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
		args[0]=disasm_arg_Rn; args[1]=disasm_arg_Rm; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
	} else
	if((ic32&0b00111111111000000000110000010000)==0b00111010010000000000100000000000) {
   86284:	5281000e 	mov	w14, #0x800                 	// #2048
   86288:	72a7480e 	movk	w14, #0x3a40, lsl #16
   8628c:	6b0e00df 	cmp	w6, w14
   86290:	54019740 	b.eq	89578 <disasm+0x4e78>  // b.none
		names="ccmn\0ccmp\0";
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); b=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
		args[0]=disasm_arg_Rn; args[1]=disasm_arg_b; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
	} else
	if(((ic32_8)&0b001111110010000000001100)==0b001111000000000000000000) {
   86294:	52840186 	mov	w6, #0x200c                	// #8204
   86298:	72a007e6 	movk	w6, #0x3f, lsl #16
   8629c:	0a060066 	and	w6, w3, w6
   862a0:	714f00df 	cmp	w6, #0x3c0, lsl #12
   862a4:	54019340 	b.eq	8950c <disasm+0x4e0c>  // b.none
		names="stur\0ldur\0";
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b001111110010000000001100)==0b001111000000000000000100) {
   862a8:	52800091 	mov	w17, #0x4                   	// #4
   862ac:	72a00791 	movk	w17, #0x3c, lsl #16
   862b0:	6b1100df 	cmp	w6, w17
   862b4:	54018f60 	b.eq	894a0 <disasm+0x4da0>  // b.none
		names="str\0ldr\0";
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
	} else
	if(((ic32_8)&0b001111110010000000000100)==0b001111000000000000000100) {
   862b8:	5284008e 	mov	w14, #0x2004                	// #8196
   862bc:	72a007ee 	movk	w14, #0x3f, lsl #16
   862c0:	0a0e006e 	and	w14, w3, w14
   862c4:	6b1101df 	cmp	w14, w17
   862c8:	54018b40 	b.eq	89430 <disasm+0x4d30>  // b.none
		names="str\0ldr\0";
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_8)&0b001111110010000000001100)==0b001111000010000000001000) {
   862cc:	5284010d 	mov	w13, #0x2008                	// #8200
   862d0:	72a0078d 	movk	w13, #0x3c, lsl #16
   862d4:	6b0d00df 	cmp	w6, w13
   862d8:	540187a0 	b.eq	893cc <disasm+0x4ccc>  // b.none
		names="str\0ldr\0";
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountz; args[5]=disasm_arg_offe; 
	} else
	if(((ic32_24)&0b00111111)==0b00111101) {
   862dc:	7100f5ff 	cmp	w15, #0x3d
   862e0:	540184a0 	b.eq	89374 <disasm+0x4c74>  // b.none
		names="str\0ldr\0";
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
	} else
	if(((ic32_16)&0b0001111111100000)==0b0000101100100000) {
   862e4:	121b1ca4 	and	w4, w5, #0x1fe0
   862e8:	712c809f 	cmp	w4, #0xb20
   862ec:	54018160 	b.eq	89318 <disasm+0x4c18>  // b.none
		names="add\0adds\0sub\0subs\0";
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_RnS; args[2]=disasm_arg_Rsom; args[3]=disasm_arg_exts; 
	} else
	if(((ic32_24)&0b00011110)==0b00001010) {
   862f0:	121f0ec4 	and	w4, w22, #0x1e
   862f4:	7100289f 	cmp	w4, #0xa
   862f8:	54017de0 	b.eq	892b4 <disasm+0x4bb4>  // b.none
		names="and\0bic\0add\0?\0orr\0orn\0adds\0?\0eor\0eon\0sub\0?\0ands\0bics\0subs\0";
		op=((ic32_27)&0xc)|((ic32_23)&0x2)|((ic32_21)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_shiftj_opt; 
	} else
	if(((ic32_24)&0b00011111)==0b00010000) {
   862fc:	120012d6 	and	w22, w22, #0x1f
   86300:	710042df 	cmp	w22, #0x10
   86304:	54017a80 	b.eq	89254 <disasm+0x4b54>  // b.none
		names="adr\0adrp\0";
		op=((ic32_31)&0x1); j=((ic32_29)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_labelij1; 
	} else
	if(((ic32_24)&0b00011111)==0b00010001) {
   86308:	710046df 	cmp	w22, #0x11
   8630c:	54017720 	b.eq	891f0 <disasm+0x4af0>  // b.none
		names="add\0adds\0sub\0subs\0";
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_22)&0x3); i=((ic32_21)&1?(-1<<12):0)|((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_RnS; args[2]=disasm_arg_i; args[3]=disasm_arg_j12_opt; 
	} else
	if(((ic32_16)&0b0001111110000000)==0b0001001000000000) {
   86310:	121914a1 	and	w1, w5, #0x1f80
   86314:	52824004 	mov	w4, #0x1200                	// #4608
   86318:	6b04003f 	cmp	w1, w4
   8631c:	54017340 	b.eq	89184 <disasm+0x4a84>  // b.none
		names="and\0orr\0eor\0ands\0";
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); k=((ic32_22)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_Rn; args[2]=disasm_arg_ib; 
	} else
	if(((ic32_16)&0b0001111110000000)==0b0001001010000000) {
   86320:	52825004 	mov	w4, #0x1280                	// #4736
   86324:	6b04003f 	cmp	w1, w4
   86328:	54016fa0 	b.eq	8911c <disasm+0x4a1c>  // b.none
		names="movn\0?\0movz\0movk\0";
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_21)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_i; args[2]=disasm_arg_j16_opt; 
	} else
	if(((ic32_16)&0b0001111110000000)==0b0001001100000000) {
   8632c:	52826004 	mov	w4, #0x1300                	// #4864
   86330:	6b04003f 	cmp	w1, w4
   86334:	540160e0 	b.eq	88f50 <disasm+0x4850>  // b.none
		names="sbfm\0bfm\0ubfm\0";
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_i; args[3]=disasm_arg_j; 
	} else
	if(((ic32_8)&0b000111111110000011111100)==0b000110100000000000000000) {
   86338:	121e4863 	and	w3, w3, #0x1ffffc
   8633c:	12136863 	and	w3, w3, #0xffffe0ff
   86340:	7146807f 	cmp	w3, #0x1a0, lsl #12
   86344:	54015da0 	b.eq	88ef8 <disasm+0x47f8>  // b.none
	uint32_t i=0;
   86348:	a9435bf5 	ldp	x21, x22, [sp, #48]
		names="adc\0adcs\0sbc\0sbcs\0";
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
	} else
		names=NULL;
   8634c:	d2800000 	mov	x0, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86350:	52800017 	mov	w23, #0x0                   	// #0
   86354:	52800018 	mov	w24, #0x0                   	// #0
   86358:	52800019 	mov	w25, #0x0                   	// #0
   8635c:	5280001b 	mov	w27, #0x0                   	// #0
   86360:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   86364:	52800014 	mov	w20, #0x0                   	// #0
   86368:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8636c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86370:	290fffff 	stp	wzr, wzr, [sp, #124]
   86374:	29117fff 	stp	wzr, wzr, [sp, #136]
   86378:	29127fff 	stp	wzr, wzr, [sp, #144]
   8637c:	b9009bff 	str	wzr, [sp, #152]

	if(str!=NULL) {
   86380:	b4003933 	cbz	x19, 86aa4 <disasm+0x23a4>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86384:	a9035bf5 	stp	x21, x22, [sp, #48]
   86388:	b4004340 	cbz	x0, 86bf0 <disasm+0x24f0>
   8638c:	97fff639 	bl	83c70 <disasm_str.part.0>
   86390:	aa0003e4 	mov	x4, x0
   86394:	b9408fe1 	ldr	w1, [sp, #140]
   86398:	f0000060 	adrp	x0, 95000 <sd_init+0x2ce8>
   8639c:	9102a000 	add	x0, x0, #0xa8
   863a0:	f9005be0 	str	x0, [sp, #176]
   863a4:	9129e000 	add	x0, x0, #0xa78
   863a8:	97fff632 	bl	83c70 <disasm_str.part.0>
		str+=sprintf(str,disasm_str(names,op),disasm_str(conds,c));
   863ac:	aa0003e2 	mov	x2, x0
   863b0:	aa0403e1 	mov	x1, x4
   863b4:	aa1303e0 	mov	x0, x19
   863b8:	97ffef7c 	bl	821a8 <sprintf>
		if(str-olds<10)om=10-(str-olds);else om=1;for(op=0;op<om;op++) *str++=' ';
   863bc:	7100281f 	cmp	w0, #0xa
   863c0:	52800142 	mov	w2, #0xa                   	// #10
   863c4:	4b000042 	sub	w2, w2, w0
   863c8:	12003c42 	and	w2, w2, #0xffff
		str+=sprintf(str,disasm_str(names,op),disasm_str(conds,c));
   863cc:	8b204273 	add	x19, x19, w0, uxtw
		if(str-olds<10)om=10-(str-olds);else om=1;for(op=0;op<om;op++) *str++=' ';
   863d0:	1a9f3442 	csinc	w2, w2, wzr, cc  // cc = lo, ul, last
		str+=sprintf(str,disasm_str(names,op),disasm_str(conds,c));
   863d4:	aa1303e0 	mov	x0, x19
		if(str-olds<10)om=10-(str-olds);else om=1;for(op=0;op<om;op++) *str++=' ';
   863d8:	52800403 	mov	w3, #0x20                  	// #32
   863dc:	8b222261 	add	x1, x19, w2, uxth
   863e0:	38001403 	strb	w3, [x0], #1
   863e4:	eb00003f 	cmp	x1, x0
   863e8:	54ffffc1 	b.ne	863e0 <disasm+0x1ce0>  // b.any
   863ec:	721a0284 	ands	w4, w20, #0x40
   863f0:	f0000060 	adrp	x0, 95000 <sd_init+0x2ce8>
   863f4:	5280080e 	mov	w14, #0x40                  	// #64
   863f8:	913a0003 	add	x3, x0, #0xe80
   863fc:	1a8e13e1 	csel	w1, wzr, w14, ne  // ne = any
   86400:	f0000060 	adrp	x0, 95000 <sd_init+0x2ce8>
   86404:	710002ff 	cmp	w23, #0x0
   86408:	913a4000 	add	x0, x0, #0xe90
   8640c:	1219028c 	and	w12, w20, #0x80
   86410:	f9014be0 	str	x0, [sp, #656]
   86414:	9a800060 	csel	x0, x3, x0, eq  // eq = none
				case disasm_arg_FPz5n: str+=sprintf(str,"%c%d", z==1?'d':(z==0?'s':'h'), n); break;
				case disasm_arg_Vn1d: str+=sprintf(str,"V%d.1d[n]", n); break;
				case disasm_arg_Vt1d: str+=sprintf(str,"V%d.1d[1]", t); break;
				case disasm_arg_FPk5t: str+=sprintf(str,"%c%d", k==1?'d':(k==0?'s':'h'), t); break;
				case disasm_arg_FPz5m: str+=sprintf(str,"%c%d", z==1?'d':(z==0?'s':'h'), m); break;
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   86418:	7100009f 	cmp	w4, #0x0
   8641c:	f90147e3 	str	x3, [sp, #648]
   86420:	1a9f07e3 	cset	w3, ne  // ne = any
   86424:	7100019f 	cmp	w12, #0x0
   86428:	b900a3e3 	str	w3, [sp, #160]
   8642c:	121b0283 	and	w3, w20, #0x20
   86430:	f9014fe0 	str	x0, [sp, #664]
   86434:	52801fe0 	mov	w0, #0xff                  	// #255
   86438:	1a9f1005 	csel	w5, w0, wzr, ne  // ne = any
   8643c:	7100009f 	cmp	w4, #0x0
   86440:	90000086 	adrp	x6, 96000 <sd_init+0x3ce8>
   86444:	1a9f1004 	csel	w4, w0, wzr, ne  // ne = any
   86448:	7100007f 	cmp	w3, #0x0
   8644c:	b9026fe4 	str	w4, [sp, #620]
   86450:	1a9f1004 	csel	w4, w0, wzr, ne  // ne = any
   86454:	f27c029f 	tst	x20, #0x10
   86458:	b90273e4 	str	w4, [sp, #624]
   8645c:	1a9f1004 	csel	w4, w0, wzr, ne  // ne = any
   86460:	f27d029f 	tst	x20, #0x8
   86464:	b90277e4 	str	w4, [sp, #628]
   86468:	1a9f1004 	csel	w4, w0, wzr, ne  // ne = any
   8646c:	f27e029f 	tst	x20, #0x4
   86470:	b9027be4 	str	w4, [sp, #632]
   86474:	1a9f1004 	csel	w4, w0, wzr, ne  // ne = any
   86478:	f27f029f 	tst	x20, #0x2
   8647c:	b9027fe4 	str	w4, [sp, #636]
   86480:	1a9f1004 	csel	w4, w0, wzr, ne  // ne = any
   86484:	b94077e3 	ldr	w3, [sp, #116]
   86488:	911a80c6 	add	x6, x6, #0x6a0
   8648c:	b90283e4 	str	w4, [sp, #640]
   86490:	72000284 	ands	w4, w20, #0x1
   86494:	1a9f1000 	csel	w0, w0, wzr, ne  // ne = any
   86498:	7100007f 	cmp	w3, #0x0
   8649c:	b90287e0 	str	w0, [sp, #644]
   864a0:	f0000060 	adrp	x0, 95000 <sd_init+0x2ce8>
   864a4:	913a8000 	add	x0, x0, #0xea0
   864a8:	f0000069 	adrp	x9, 95000 <sd_init+0x2ce8>
   864ac:	9a8000c0 	csel	x0, x6, x0, eq  // eq = none
   864b0:	913aa129 	add	x9, x9, #0xea8
   864b4:	f90133e0 	str	x0, [sp, #608]
   864b8:	9a8900c0 	csel	x0, x6, x9, eq  // eq = none
   864bc:	710002ff 	cmp	w23, #0x0
   864c0:	5280007e 	mov	w30, #0x3                   	// #3
   864c4:	5280010d 	mov	w13, #0x8                   	// #8
   864c8:	f9012fe0 	str	x0, [sp, #600]
   864cc:	1a9e11a0 	csel	w0, w13, w30, ne  // ne = any
   864d0:	71007f3f 	cmp	w25, #0x1f
   864d4:	b90077e3 	str	w3, [sp, #116]
   864d8:	f0000063 	adrp	x3, 95000 <sd_init+0x2ce8>
   864dc:	913ac063 	add	x3, x3, #0xeb0
   864e0:	b900f7e4 	str	w4, [sp, #244]
   864e4:	f0000064 	adrp	x4, 95000 <sd_init+0x2ce8>
   864e8:	913ae08f 	add	x15, x4, #0xeb8
   864ec:	b90257e0 	str	w0, [sp, #596]
   864f0:	12000e80 	and	w0, w20, #0xf
   864f4:	9a8f0064 	csel	x4, x3, x15, eq  // eq = none
   864f8:	6b0d001f 	cmp	w0, w13
   864fc:	52800f0b 	mov	w11, #0x78                  	// #120
   86500:	52800eea 	mov	w10, #0x77                  	// #119
   86504:	1a8a0160 	csel	w0, w11, w10, eq  // eq = none
   86508:	710006ff 	cmp	w23, #0x1
   8650c:	f9009fe4 	str	x4, [sp, #312]
   86510:	52800c84 	mov	w4, #0x64                  	// #100
   86514:	b90253e0 	str	w0, [sp, #592]
   86518:	52800e60 	mov	w0, #0x73                  	// #115
   8651c:	b9026be5 	str	w5, [sp, #616]
   86520:	1a800085 	csel	w5, w4, w0, eq  // eq = none
   86524:	b9408bf1 	ldr	w17, [sp, #136]
   86528:	f0000068 	adrp	x8, 95000 <sd_init+0x2ce8>
   8652c:	b9024fe5 	str	w5, [sp, #588]
   86530:	52800d05 	mov	w5, #0x68                  	// #104
   86534:	1a8000a5 	csel	w5, w5, w0, eq  // eq = none
   86538:	710002ff 	cmp	w23, #0x0
   8653c:	b9407ff5 	ldr	w21, [sp, #124]
   86540:	1a801080 	csel	w0, w4, w0, ne  // ne = any
   86544:	7100031f 	cmp	w24, #0x0
   86548:	913b0108 	add	x8, x8, #0xec0
   8654c:	f0000064 	adrp	x4, 95000 <sd_init+0x2ce8>
   86550:	913b2084 	add	x4, x4, #0xec8
   86554:	b9024be0 	str	w0, [sp, #584]
   86558:	52800080 	mov	w0, #0x4                   	// #4
   8655c:	1a8011a0 	csel	w0, w13, w0, ne  // ne = any
   86560:	71007e3f 	cmp	w17, #0x1f
   86564:	f0000067 	adrp	x7, 95000 <sd_init+0x2ce8>
   86568:	913b40e7 	add	x7, x7, #0xed0
   8656c:	b90107e5 	str	w5, [sp, #260]
   86570:	f0000065 	adrp	x5, 95000 <sd_init+0x2ce8>
   86574:	913b60a5 	add	x5, x5, #0xed8
   86578:	b9011be0 	str	w0, [sp, #280]
   8657c:	9a840100 	csel	x0, x8, x4, eq  // eq = none
   86580:	71007ebf 	cmp	w21, #0x1f
   86584:	f90123e0 	str	x0, [sp, #576]
   86588:	9a8500e0 	csel	x0, x7, x5, eq  // eq = none
   8658c:	71007f3f 	cmp	w25, #0x1f
   86590:	aa0f03f0 	mov	x16, x15
   86594:	f9011fe0 	str	x0, [sp, #568]
   86598:	9a8500e0 	csel	x0, x7, x5, eq  // eq = none
   8659c:	71007ebf 	cmp	w21, #0x1f
   865a0:	f9011be0 	str	x0, [sp, #560]
   865a4:	9a900060 	csel	x0, x3, x16, eq  // eq = none
   865a8:	7100029f 	cmp	w20, #0x0
   865ac:	f9008be0 	str	x0, [sp, #272]
   865b0:	f0000060 	adrp	x0, 95000 <sd_init+0x2ce8>
   865b4:	913b8000 	add	x0, x0, #0xee0
   865b8:	f90077e0 	str	x0, [sp, #232]
   865bc:	9a8000c0 	csel	x0, x6, x0, eq  // eq = none
   865c0:	f90117e0 	str	x0, [sp, #552]
   865c4:	1a9f13c0 	csel	w0, w30, wzr, ne  // ne = any
   865c8:	b90227e0 	str	w0, [sp, #548]
   865cc:	52800040 	mov	w0, #0x2                   	// #2
   865d0:	1a9f1012 	csel	w18, w0, wzr, ne  // ne = any
   865d4:	b90223f2 	str	w18, [sp, #544]
   865d8:	f000006f 	adrp	x15, 95000 <sd_init+0x2ce8>
   865dc:	f94043f2 	ldr	x18, [sp, #128]
   865e0:	51000442 	sub	w2, w2, #0x1
   865e4:	b9407bf6 	ldr	w22, [sp, #120]
   865e8:	92403c42 	and	x2, x2, #0xffff
   865ec:	91000442 	add	x2, x2, #0x1
   865f0:	f90057f0 	str	x16, [sp, #168]
   865f4:	f240025f 	tst	x18, #0x1
   865f8:	8b020273 	add	x19, x19, x2
   865fc:	1a8a1172 	csel	w18, w11, w10, ne  // ne = any
   86600:	7100029f 	cmp	w20, #0x0
   86604:	b9021ff2 	str	w18, [sp, #540]
   86608:	913ba1f2 	add	x18, x15, #0xee8
   8660c:	f9005ff2 	str	x18, [sp, #184]
   86610:	9a9200d2 	csel	x18, x6, x18, eq  // eq = none
   86614:	71007f5f 	cmp	w26, #0x1f
   86618:	f9010bf2 	str	x18, [sp, #528]
   8661c:	9a900072 	csel	x18, x3, x16, eq  // eq = none
   86620:	7100037f 	cmp	w27, #0x0
   86624:	f9009bf2 	str	x18, [sp, #304]
   86628:	1a8b1152 	csel	w18, w10, w11, ne  // ne = any
   8662c:	b9021bf2 	str	w18, [sp, #536]
   86630:	710002df 	cmp	w22, #0x0
   86634:	f9405ff2 	ldr	x18, [sp, #184]
   86638:	5280020f 	mov	w15, #0x10                  	// #16
				case disasm_arg_z4: str+=sprintf(str,"#%d", 4<<z); break;
   8663c:	52800082 	mov	w2, #0x4                   	// #4
   86640:	9a9200d2 	csel	x18, x6, x18, eq  // eq = none
   86644:	71007f5f 	cmp	w26, #0x1f
   86648:	f9007ff2 	str	x18, [sp, #248]
   8664c:	9a8500f2 	csel	x18, x7, x5, eq  // eq = none
   86650:	71007e3f 	cmp	w17, #0x1f
   86654:	1ad72042 	lsl	w2, w2, w23
   86658:	9a8500e5 	csel	x5, x7, x5, eq  // eq = none
   8665c:	71007b5f 	cmp	w26, #0x1e
   86660:	f90103e5 	str	x5, [sp, #512]
   86664:	9a900065 	csel	x5, x3, x16, eq  // eq = none
   86668:	7100037f 	cmp	w27, #0x0
   8666c:	f900ffe5 	str	x5, [sp, #504]
   86670:	1a8a1165 	csel	w5, w11, w10, ne  // ne = any
   86674:	71007a3f 	cmp	w17, #0x1e
   86678:	b900f3e5 	str	w5, [sp, #240]
   8667c:	9a900065 	csel	x5, x3, x16, eq  // eq = none
   86680:	71007e3f 	cmp	w17, #0x1f
   86684:	f900fbe5 	str	x5, [sp, #496]
   86688:	9a900065 	csel	x5, x3, x16, eq  // eq = none
   8668c:	7100031f 	cmp	w24, #0x0
   86690:	f900f7e5 	str	x5, [sp, #488]
   86694:	1a8d11e5 	csel	w5, w15, w13, ne  // ne = any
   86698:	52800403 	mov	w3, #0x20                  	// #32
   8669c:	b901e7e5 	str	w5, [sp, #484]
   866a0:	1a8f1065 	csel	w5, w3, w15, ne  // ne = any
   866a4:	52800607 	mov	w7, #0x30                  	// #48
   866a8:	b901e3e5 	str	w5, [sp, #480]
   866ac:	52800305 	mov	w5, #0x18                  	// #24
   866b0:	1a8510e5 	csel	w5, w7, w5, ne  // ne = any
   866b4:	71007ebf 	cmp	w21, #0x1f
   866b8:	9a840107 	csel	x7, x8, x4, eq  // eq = none
   866bc:	7100031f 	cmp	w24, #0x0
   866c0:	f900ebe7 	str	x7, [sp, #464]
   866c4:	1a8311c7 	csel	w7, w14, w3, ne  // ne = any
   866c8:	b901dbe7 	str	w7, [sp, #472]
   866cc:	f0000063 	adrp	x3, 95000 <sd_init+0x2ce8>
   866d0:	b94093e7 	ldr	w7, [sp, #144]
   866d4:	913be063 	add	x3, x3, #0xef8
   866d8:	b901dfe5 	str	w5, [sp, #476]
   866dc:	f0000065 	adrp	x5, 95000 <sd_init+0x2ce8>
   866e0:	710000ff 	cmp	w7, #0x0
   866e4:	913bc0a5 	add	x5, x5, #0xef0
   866e8:	9a8610a5 	csel	x5, x5, x6, ne  // ne = any
   866ec:	71007f3f 	cmp	w25, #0x1f
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   866f0:	13037e8d 	asr	w13, w20, #3
   866f4:	9a840067 	csel	x7, x3, x4, eq  // eq = none
   866f8:	9a84010b 	csel	x11, x8, x4, eq  // eq = none
   866fc:	71007f5f 	cmp	w26, #0x1f
   86700:	f900e7e5 	str	x5, [sp, #456]
   86704:	13017e85 	asr	w5, w20, #1
   86708:	b90197e5 	str	w5, [sp, #404]
   8670c:	aa1003ea 	mov	x10, x16
   86710:	a91b9feb 	stp	x11, x7, [sp, #440]
   86714:	13027e87 	asr	w7, w20, #2
   86718:	121b00ab 	and	w11, w5, #0x20
   8671c:	121d01a5 	and	w5, w13, #0x8
   86720:	b902abed 	str	w13, [sp, #680]
   86724:	9a8400cd 	csel	x13, x6, x4, eq  // eq = none
   86728:	7100029f 	cmp	w20, #0x0
   8672c:	9a8900c6 	csel	x6, x6, x9, eq  // eq = none
   86730:	f0000075 	adrp	x21, 95000 <sd_init+0x2ce8>
   86734:	71007f3f 	cmp	w25, #0x1f
   86738:	913c02b5 	add	x21, x21, #0xf00
   8673c:	b902a7e7 	str	w7, [sp, #676]
   86740:	0a0f00e7 	and	w7, w7, w15
   86744:	2a070170 	orr	w16, w11, w7
   86748:	9a8a02a9 	csel	x9, x21, x10, eq  // eq = none
   8674c:	13047e8e 	asr	w14, w20, #4
   86750:	d342168b 	ubfx	x11, x20, #2, #4
   86754:	71007f5f 	cmp	w26, #0x1f
   86758:	f90097e6 	str	x6, [sp, #296]
   8675c:	f90107f2 	str	x18, [sp, #520]
   86760:	121e01c3 	and	w3, w14, #0x4
   86764:	b902afee 	str	w14, [sp, #684]
   86768:	2a0b018b 	orr	w11, w12, w11
   8676c:	a91ab7e9 	stp	x9, x13, [sp, #424]
   86770:	2a0300a5 	orr	w5, w5, w3
   86774:	2a10016b 	orr	w11, w11, w16
				case disasm_arg_z4: str+=sprintf(str,"#%d", 4<<z); break;
   86778:	b90177e2 	str	w2, [sp, #372]
   8677c:	9a840102 	csel	x2, x8, x4, eq  // eq = none
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   86780:	13057e83 	asr	w3, w20, #5
   86784:	f900cfe2 	str	x2, [sp, #408]
				case disasm_arg_z3: str+=sprintf(str,"#%d", 3<<z); break;
   86788:	1ad723c2 	lsl	w2, w30, w23
   8678c:	2a010189 	orr	w9, w12, w1
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   86790:	0a000071 	and	w17, w3, w0
				case disasm_arg_F32: str+=sprintf(str,"#0x02x%02x0000", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&32?1:0), (j&0x1f)<<3); break;
   86794:	0a1e0063 	and	w3, w3, w30
				case disasm_arg_z3: str+=sprintf(str,"#%d", 3<<z); break;
   86798:	b9016fe2 	str	w2, [sp, #364]
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   8679c:	2a010162 	orr	w2, w11, w1
   867a0:	2a1000a5 	orr	w5, w5, w16
				case disasm_arg_F32: str+=sprintf(str,"#0x02x%02x0000", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&32?1:0), (j&0x1f)<<3); break;
   867a4:	2a090063 	orr	w3, w3, w9
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   867a8:	b90147e2 	str	w2, [sp, #324]
				case disasm_arg_z2: str+=sprintf(str,"#%d", 2<<z); break;
   867ac:	1ad72002 	lsl	w2, w0, w23
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   867b0:	2a05022d 	orr	w13, w17, w5
				case disasm_arg_z2: str+=sprintf(str,"#%d", 2<<z); break;
   867b4:	b90173e2 	str	w2, [sp, #368]
				case disasm_arg_F32: str+=sprintf(str,"#0x02x%02x0000", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&32?1:0), (j&0x1f)<<3); break;
   867b8:	2a050062 	orr	w2, w3, w5
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   867bc:	b940a3e3 	ldr	w3, [sp, #160]
   867c0:	d3451690 	ubfx	x16, x20, #5, #1
   867c4:	2a0901ad 	orr	w13, w13, w9
				case disasm_arg_im4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<2); break;
   867c8:	531e76cc 	lsl	w12, w22, #2
				case disasm_arg_Vnzq2: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,2+(z*2)+q)); break;
   867cc:	110006e7 	add	w7, w23, #0x1
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   867d0:	f90067f0 	str	x16, [sp, #200]
				case disasm_arg_F64: str+=sprintf(str,"#0x02x%02x%06x", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&64?1:0), (j&64?128:0)|(j&64?64:0)|(j&0x3f), 0); break;
   867d4:	d3461a92 	ubfx	x18, x20, #6, #1
				case disasm_arg_im4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<2); break;
   867d8:	b9007bf6 	str	w22, [sp, #120]
   867dc:	2a0c03f6 	mov	w22, w12
				case disasm_arg_F32: str+=sprintf(str,"#0x02x%02x0000", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&32?1:0), (j&0x1f)<<3); break;
   867e0:	b9018fe2 	str	w2, [sp, #396]
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   867e4:	2a0d0062 	orr	w2, w3, w13
   867e8:	f94057ec 	ldr	x12, [sp, #168]
				case disasm_arg_Vnzq2: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,2+(z*2)+q)); break;
   867ec:	531f78e7 	lsl	w7, w7, #1
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   867f0:	b902b3e2 	str	w2, [sp, #688]
				case disasm_arg_Vtz: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,4+(z*2))); break;
   867f4:	0b0000f0 	add	w16, w7, w0
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   867f8:	b940cbe2 	ldr	w2, [sp, #200]
   867fc:	531f7a86 	lsl	w6, w20, #1
				case disasm_arg_Vtz: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,4+(z*2))); break;
   86800:	b900c7f0 	str	w16, [sp, #196]
   86804:	9a8c02b5 	csel	x21, x21, x12, eq  // eq = none
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   86808:	2a0d0042 	orr	w2, w2, w13
				case disasm_arg_F64: str+=sprintf(str,"#0x02x%02x%06x", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&64?1:0), (j&64?128:0)|(j&64?64:0)|(j&0x3f), 0); break;
   8680c:	2a09022c 	orr	w12, w17, w9
   86810:	2a050252 	orr	w18, w18, w5
				case disasm_arg_j12_opt: str+=sprintf(str,!j?"":"lsl #%d", j*12); break;
   86814:	0b1400ce 	add	w14, w6, w20
				case disasm_arg_Vmzq: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,4+(z*2)+q)); break;
   86818:	b940c7e1 	ldr	w1, [sp, #196]
				case disasm_arg_Vt4H: str+=sprintf(str,"V%d.h V%d.h V%d.h V%d.h[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, (q<<3)|(s<<2)|z); break;
   8681c:	531e776a 	lsl	w10, w27, #2
				case disasm_arg_j12_opt: str+=sprintf(str,!j?"":"lsl #%d", j*12); break;
   86820:	b900e3ee 	str	w14, [sp, #224]
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   86824:	12001a91 	and	w17, w20, #0x7f
   86828:	b902b7e2 	str	w2, [sp, #692]
				case disasm_arg_F64: str+=sprintf(str,"#0x02x%02x%06x", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&64?1:0), (j&64?128:0)|(j&64?64:0)|(j&0x3f), 0); break;
   8682c:	2a0c0242 	orr	w2, w18, w12
   86830:	b90193e2 	str	w2, [sp, #400]
				case disasm_arg_Vnzq2: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,2+(z*2)+q)); break;
   86834:	0b070302 	add	w2, w24, w7
   86838:	b90127e2 	str	w2, [sp, #292]
				case disasm_arg_Vmzq: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,4+(z*2)+q)); break;
   8683c:	0b010302 	add	w2, w24, w1
				case disasm_arg_j12_opt: str+=sprintf(str,!j?"":"lsl #%d", j*12); break;
   86840:	b940e3e1 	ldr	w1, [sp, #224]
				case disasm_arg_Vt4H: str+=sprintf(str,"V%d.h V%d.h V%d.h V%d.h[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, (q<<3)|(s<<2)|z); break;
   86844:	2a180d4a 	orr	w10, w10, w24, lsl #3
   86848:	f900d3f5 	str	x21, [sp, #416]
				case disasm_arg_labelij1: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)+j); break;
   8684c:	0b1402d5 	add	w21, w22, w20
   86850:	b900e7f5 	str	w21, [sp, #228]
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   86854:	121900c6 	and	w6, w6, #0x80
				case disasm_arg_amountk2_opt: str+=sprintf(str,!k?"":"msl #%d", 1<<(k*3)); break;
   86858:	b94077ef 	ldr	w15, [sp, #116]
   8685c:	52800030 	mov	w16, #0x1                   	// #1
				case disasm_arg_Vmzq: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,4+(z*2)+q)); break;
   86860:	b9010be2 	str	w2, [sp, #264]
				case disasm_arg_j12_opt: str+=sprintf(str,!j?"":"lsl #%d", j*12); break;
   86864:	531e7422 	lsl	w2, w1, #2
				case disasm_arg_labelij1: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)+j); break;
   86868:	b940e7e1 	ldr	w1, [sp, #228]
				case disasm_arg_VmT3: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,(z<<1)+3)); break;
   8686c:	531f7ae9 	lsl	w9, w23, #1
				case disasm_arg_labelij1: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)+j); break;
   86870:	b900c3f6 	str	w22, [sp, #192]
				case disasm_arg_amountk2_opt: str+=sprintf(str,!k?"":"msl #%d", 1<<(k*3)); break;
   86874:	0b0f05ef 	add	w15, w15, w15, lsl #1
				case disasm_arg_labelij1: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)+j); break;
   86878:	0b1c0021 	add	w1, w1, w28
				case disasm_arg_prf_op: str+=sprintf(str,"%s", "%s L%d %s", disasm_str(prf_typ,(t>>3)&3), ((t>>1)&3)+1, disasm_str(prf_pol,t&1)); break;
   8687c:	d3410b56 	ubfx	x22, x26, #1, #2
				case disasm_arg_amountk2_opt: str+=sprintf(str,!k?"":"msl #%d", 1<<(k*3)); break;
   86880:	b900d7ef 	str	w15, [sp, #212]
				case disasm_arg_shift8: str+=sprintf(str,"#%d", 1<<(z+3)); break;
   86884:	0b1e02ef 	add	w15, w23, w30
   86888:	b900d3ef 	str	w15, [sp, #208]
				case disasm_arg_is4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<(2+s)); break;
   8688c:	0b00036e 	add	w14, w27, w0
				case disasm_arg_prf_op: str+=sprintf(str,"%s", "%s L%d %s", disasm_str(prf_typ,(t>>3)&3), ((t>>1)&3)+1, disasm_str(prf_pol,t&1)); break;
   86890:	f9006ff6 	str	x22, [sp, #216]
				case disasm_arg_Vtz: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,4+(z*2))); break;
   86894:	0b0002ef 	add	w15, w23, w0
				case disasm_arg_labelij1: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)+j); break;
   86898:	b9015fe1 	str	w1, [sp, #348]
				case disasm_arg_Vt4H: str+=sprintf(str,"V%d.h V%d.h V%d.h V%d.h[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, (q<<3)|(s<<2)|z); break;
   8689c:	2a170141 	orr	w1, w10, w23
   868a0:	b900cbe1 	str	w1, [sp, #200]
				case disasm_arg_labelij1: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)+j); break;
   868a4:	910b03f5 	add	x21, sp, #0x2c0
				case disasm_arg_j12_opt: str+=sprintf(str,!j?"":"lsl #%d", j*12); break;
   868a8:	b902a3e2 	str	w2, [sp, #672]
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   868ac:	2a1100c2 	orr	w2, w6, w17
   868b0:	b9015be2 	str	w2, [sp, #344]
			if(op&&args[op-1]!=disasm_arg_offs&&args[op]!=disasm_arg_offe) { *str++=','; *str++=' '; }
   868b4:	12003ea2 	and	w2, w21, #0xffff
				case disasm_arg_labeli4: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)); break;
   868b8:	b940c3ec 	ldr	w12, [sp, #192]
   868bc:	910026b6 	add	x22, x21, #0x9
				case disasm_arg_iz4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<(2+z)); break;
   868c0:	b9407be0 	ldr	w0, [sp, #120]
				case disasm_arg_labeli4: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)); break;
   868c4:	0b1c0181 	add	w1, w12, w28
   868c8:	b90167e1 	str	w1, [sp, #356]
				case disasm_arg_amountk2_opt: str+=sprintf(str,!k?"":"msl #%d", 1<<(k*3)); break;
   868cc:	394353e1 	ldrb	w1, [sp, #212]
   868d0:	b900e7fb 	str	w27, [sp, #228]
   868d4:	1ac12201 	lsl	w1, w16, w1
   868d8:	b90143e1 	str	w1, [sp, #320]
				case disasm_arg_VmT3: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,(z<<1)+3)); break;
   868dc:	0b1e0121 	add	w1, w9, w30
   868e0:	b9010fe1 	str	w1, [sp, #268]
				case disasm_arg_shift8: str+=sprintf(str,"#%d", 1<<(z+3)); break;
   868e4:	394343e1 	ldrb	w1, [sp, #208]
   868e8:	1ac12201 	lsl	w1, w16, w1
   868ec:	b9018be1 	str	w1, [sp, #392]
				case disasm_arg_Vnz3: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,(z<<1)+6)); break;
   868f0:	11001921 	add	w1, w9, #0x6
   868f4:	b90123e1 	str	w1, [sp, #288]
				case disasm_arg_z: str+=sprintf(str,"#%d", 1<<z); break;
   868f8:	1ad72201 	lsl	w1, w16, w23
   868fc:	b9016be1 	str	w1, [sp, #360]
				case disasm_arg_VmT: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,(z<<1)|q)); break;
   86900:	2a090301 	orr	w1, w24, w9
   86904:	b900e3e1 	str	w1, [sp, #224]
				case disasm_arg_iz4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<(2+z)); break;
   86908:	1acf2001 	lsl	w1, w0, w15
   8690c:	b90187e1 	str	w1, [sp, #388]
				case disasm_arg_is4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<(2+s)); break;
   86910:	1ace2000 	lsl	w0, w0, w14
   86914:	b90183e0 	str	w0, [sp, #384]
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   86918:	f0000060 	adrp	x0, 95000 <sd_init+0x2ce8>
   8691c:	91398000 	add	x0, x0, #0xe60
   86920:	f900abe0 	str	x0, [sp, #336]
   86924:	531a0680 	ubfiz	w0, w20, #6, #2
   86928:	b9014be0 	str	w0, [sp, #328]
   8692c:	531d1280 	ubfiz	w0, w20, #3, #5
   86930:	b9014fe0 	str	w0, [sp, #332]
				case disasm_arg_FPjn2: str+=sprintf(str,"%c%d", (j>>3)==1?'b':((j>>4)==1?'h':((j>>5)==1?'s':'d')), n); break;
   86934:	53037e80 	lsr	w0, w20, #3
   86938:	b900d7e0 	str	w0, [sp, #212]
   8693c:	53047e80 	lsr	w0, w20, #4
				case disasm_arg_prf_op: str+=sprintf(str,"%s", "%s L%d %s", disasm_str(prf_typ,(t>>3)&3), ((t>>1)&3)+1, disasm_str(prf_pol,t&1)); break;
   86940:	b940dbe1 	ldr	w1, [sp, #216]
				case disasm_arg_FPjn2: str+=sprintf(str,"%c%d", (j>>3)==1?'b':((j>>4)==1?'h':((j>>5)==1?'s':'d')), n); break;
   86944:	b900dbe0 	str	w0, [sp, #216]
   86948:	53057e80 	lsr	w0, w20, #5
   8694c:	b9011fe0 	str	w0, [sp, #284]
				case disasm_arg_prf_op: str+=sprintf(str,"%s", "%s L%d %s", disasm_str(prf_typ,(t>>3)&3), ((t>>1)&3)+1, disasm_str(prf_pol,t&1)); break;
   86950:	53037f40 	lsr	w0, w26, #3
   86954:	b9017be0 	str	w0, [sp, #376]
				case disasm_arg_Vt4S: str+=sprintf(str,"V%d.s V%d.s V%d.s V%d.s[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, (q<<1)|s); break;
   86958:	2a180760 	orr	w0, w27, w24, lsl #1
				case disasm_arg_prf_op: str+=sprintf(str,"%s", "%s L%d %s", disasm_str(prf_typ,(t>>3)&3), ((t>>1)&3)+1, disasm_str(prf_pol,t&1)); break;
   8695c:	0b100021 	add	w1, w1, w16
   86960:	aa1503fb 	mov	x27, x21
   86964:	2a1403f5 	mov	w21, w20
				case disasm_arg_Vt4S: str+=sprintf(str,"V%d.s V%d.s V%d.s V%d.s[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, (q<<1)|s); break;
   86968:	b90103e0 	str	w0, [sp, #256]
				case disasm_arg_j16_opt: str+=sprintf(str,!j?"":"lsl #%d", j*16); break;
   8696c:	531c6e80 	lsl	w0, w20, #4
   86970:	2a0203f4 	mov	w20, w2
   86974:	b90163e0 	str	w0, [sp, #352]
				case disasm_arg_prf_op: str+=sprintf(str,"%s", "%s L%d %s", disasm_str(prf_typ,(t>>3)&3), ((t>>1)&3)+1, disasm_str(prf_pol,t&1)); break;
   86978:	b9017fe1 	str	w1, [sp, #380]
			switch(args[op]) {
   8697c:	90000061 	adrp	x1, 92000 <sd_readblock+0x158>
   86980:	9134a021 	add	x1, x1, #0xd28
   86984:	f90053e1 	str	x1, [sp, #160]
		for(op=0;op<sizeof(args) && args[op]!=disasm_arg_NONE;op++) {
   86988:	39400360 	ldrb	w0, [x27]
   8698c:	34000880 	cbz	w0, 86a9c <disasm+0x239c>
			if(op&&args[op-1]!=disasm_arg_offs&&args[op]!=disasm_arg_offe) { *str++=','; *str++=' '; }
   86990:	6b3b229f 	cmp	w20, w27, uxth
   86994:	54000100 	b.eq	869b4 <disasm+0x22b4>  // b.none
   86998:	385ff362 	ldurb	w2, [x27, #-1]
   8699c:	52800561 	mov	w1, #0x2b                  	// #43
   869a0:	7100a45f 	cmp	w2, #0x29
   869a4:	7a411004 	ccmp	w0, w1, #0x4, ne  // ne = any
   869a8:	54000060 	b.eq	869b4 <disasm+0x22b4>  // b.none
   869ac:	52840581 	mov	w1, #0x202c                	// #8236
   869b0:	78002661 	strh	w1, [x19], #2
			switch(args[op]) {
   869b4:	51000c00 	sub	w0, w0, #0x3
   869b8:	7102fc1f 	cmp	w0, #0xbf
   869bc:	54000628 	b.hi	86a80 <disasm+0x2380>  // b.pmore
   869c0:	f94053e1 	ldr	x1, [sp, #160]
   869c4:	78605820 	ldrh	w0, [x1, w0, uxtw #1]
   869c8:	10000061 	adr	x1, 869d4 <disasm+0x22d4>
   869cc:	8b20a820 	add	x0, x1, w0, sxth #2
   869d0:	d61f0000 	br	x0
		names="stxrb\0stlxrb\0?\0?\0?\0?\0?\0?\0?\0?\0casb\0caslb\0?\0?\0casab\0casalb\0";
   869d4:	90000063 	adrp	x3, 92000 <sd_readblock+0x158>
   869d8:	913aa063 	add	x3, x3, #0xea8
		op=((ic32_20)&0xe)|((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   869dc:	121f0901 	and	w1, w8, #0xe
   869e0:	120000c6 	and	w6, w6, #0x1
   869e4:	1200101a 	and	w26, w0, #0x1f
		names="stxrb\0stlxrb\0?\0?\0?\0?\0?\0?\0?\0?\0casb\0caslb\0?\0?\0casab\0casalb\0";
   869e8:	913e4060 	add	x0, x3, #0xf90
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   869ec:	528a6a43 	mov	w3, #0x5352                	// #21330
		op=((ic32_20)&0xe)|((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   869f0:	120010a4 	and	w4, w5, #0x1f
   869f4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   869f8:	72a54523 	movk	w3, #0x2a29, lsl #16
   869fc:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_20)&0xe)|((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86a00:	2a060021 	orr	w1, w1, w6
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86a04:	52800017 	mov	w23, #0x0                   	// #0
   86a08:	52800018 	mov	w24, #0x0                   	// #0
   86a0c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   86a10:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   86a14:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86a18:	290fffff 	stp	wzr, wzr, [sp, #124]
   86a1c:	29117fe4 	stp	w4, wzr, [sp, #136]
   86a20:	29127fff 	stp	wzr, wzr, [sp, #144]
   86a24:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   86a28:	b902c3e3 	str	w3, [sp, #704]
   86a2c:	390b13e2 	strb	w2, [sp, #708]
   86a30:	17fffe54 	b	86380 <disasm+0x1c80>
				case disasm_arg_FPst: str+=sprintf(str,"%c%d", s==1?'q':(z==3?'d':(z==2?'s':(z==1?'h':'b'))), t); break;
   86a34:	b940e7e0 	ldr	w0, [sp, #228]
   86a38:	52800e22 	mov	w2, #0x71                  	// #113
   86a3c:	35000160 	cbnz	w0, 86a68 <disasm+0x2368>
   86a40:	71000eff 	cmp	w23, #0x3
   86a44:	52800c82 	mov	w2, #0x64                  	// #100
   86a48:	54000100 	b.eq	86a68 <disasm+0x2368>  // b.none
   86a4c:	71000aff 	cmp	w23, #0x2
   86a50:	52800e62 	mov	w2, #0x73                  	// #115
   86a54:	540000a0 	b.eq	86a68 <disasm+0x2368>  // b.none
   86a58:	710006ff 	cmp	w23, #0x1
   86a5c:	52800d02 	mov	w2, #0x68                  	// #104
   86a60:	52800c40 	mov	w0, #0x62                  	// #98
   86a64:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   86a68:	f94057e1 	ldr	x1, [sp, #168]
   86a6c:	aa1303e0 	mov	x0, x19
   86a70:	2a1a03e3 	mov	w3, w26
   86a74:	97ffedcd 	bl	821a8 <sprintf>
   86a78:	8b204273 	add	x19, x19, w0, uxtw
   86a7c:	d503201f 	nop
				case disasm_arg_FPz5d: str+=sprintf(str,"%c%d", z==1?'d':(z==0?'s':'h'), d); break;
				default: break;
			}
			if(*(str-2)==',')str-=2;
   86a80:	aa1303e0 	mov	x0, x19
   86a84:	9100077b 	add	x27, x27, #0x1
   86a88:	385fec01 	ldrb	w1, [x0, #-2]!
   86a8c:	7100b03f 	cmp	w1, #0x2c
   86a90:	9a930013 	csel	x19, x0, x19, eq  // eq = none
		for(op=0;op<sizeof(args) && args[op]!=disasm_arg_NONE;op++) {
   86a94:	eb1b02df 	cmp	x22, x27
   86a98:	54fff781 	b.ne	86988 <disasm+0x2288>  // b.any
		}
		*str=0;
   86a9c:	3900027f 	strb	wzr, [x19]
   86aa0:	a9435bf5 	ldp	x21, x22, [sp, #48]
	}
	return addr+4;
   86aa4:	91001381 	add	x1, x28, #0x4
}
   86aa8:	aa0103e0 	mov	x0, x1
   86aac:	a9417bfd 	ldp	x29, x30, [sp, #16]
   86ab0:	a94253f3 	ldp	x19, x20, [sp, #32]
	return addr+4;
   86ab4:	a94463f7 	ldp	x23, x24, [sp, #64]
   86ab8:	a9456bf9 	ldp	x25, x26, [sp, #80]
}
   86abc:	a94673fb 	ldp	x27, x28, [sp, #96]
   86ac0:	910b43ff 	add	sp, sp, #0x2d0
   86ac4:	d65f03c0 	ret
	uint16_t op=0, om=0, j=0;
   86ac8:	52800002 	mov	w2, #0x0                   	// #0
   86acc:	d503201f 	nop
		while(*((uint32_t*)addr)==ic32) { op++; addr+=4; }
   86ad0:	b8404f81 	ldr	w1, [x28, #4]!
   86ad4:	11000442 	add	w2, w2, #0x1
   86ad8:	12003c42 	and	w2, w2, #0xffff
   86adc:	6b00003f 	cmp	w1, w0
   86ae0:	54ffff80 	b.eq	86ad0 <disasm+0x23d0>  // b.none
		if(str!=NULL) str+=sprintf(str,"  %d x nop",op);
   86ae4:	b404ddb3 	cbz	x19, 90698 <disasm+0xbf98>
   86ae8:	aa1303e0 	mov	x0, x19
   86aec:	f0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   86af0:	9139c021 	add	x1, x1, #0xe70
   86af4:	97ffedad 	bl	821a8 <sprintf>
		*str=0;
   86af8:	38204a7f 	strb	wzr, [x19, w0, uxtw]
		while(*((uint32_t*)addr)==ic32) { op++; addr+=4; }
   86afc:	aa1c03e1 	mov	x1, x28
}
   86b00:	aa0103e0 	mov	x0, x1
   86b04:	a9417bfd 	ldp	x29, x30, [sp, #16]
   86b08:	a94253f3 	ldp	x19, x20, [sp, #32]
   86b0c:	a94673fb 	ldp	x27, x28, [sp, #96]
   86b10:	910b43ff 	add	sp, sp, #0x2d0
   86b14:	d65f03c0 	ret
		names="fcvtn\0";
   86b18:	90000061 	adrp	x1, 92000 <sd_readblock+0x158>
   86b1c:	913aa021 	add	x1, x1, #0xea8
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86b20:	12001059 	and	w25, w2, #0x1f
   86b24:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_Vnz3; 
   86b28:	128b0b42 	mov	w2, #0xffffa7a5            	// #-22619
		names="fcvtn\0";
   86b2c:	913f4020 	add	x0, x1, #0xfd0
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86b30:	120000f7 	and	w23, w7, #0x1
		q=0;
   86b34:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86b38:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   86b3c:	52800014 	mov	w20, #0x0                   	// #0
   86b40:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   86b44:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86b48:	290fffff 	stp	wzr, wzr, [sp, #124]
   86b4c:	29117fff 	stp	wzr, wzr, [sp, #136]
   86b50:	29127fff 	stp	wzr, wzr, [sp, #144]
   86b54:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_Vnz3; 
   86b58:	790583e2 	strh	w2, [sp, #704]
   86b5c:	17fffe09 	b	86380 <disasm+0x1c80>
		names="xtn\0";
   86b60:	90000061 	adrp	x1, 92000 <sd_readblock+0x158>
   86b64:	913aa021 	add	x1, x1, #0xea8
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86b68:	12001059 	and	w25, w2, #0x1f
   86b6c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT2; 
   86b70:	128b3b42 	mov	w2, #0xffffa625            	// #-23003
		names="xtn\0";
   86b74:	913f8020 	add	x0, x1, #0xfe0
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86b78:	120004f7 	and	w23, w7, #0x3
		q=0;
   86b7c:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86b80:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   86b84:	52800014 	mov	w20, #0x0                   	// #0
   86b88:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   86b8c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86b90:	290fffff 	stp	wzr, wzr, [sp, #124]
   86b94:	29117fff 	stp	wzr, wzr, [sp, #136]
   86b98:	29127fff 	stp	wzr, wzr, [sp, #144]
   86b9c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT2; 
   86ba0:	790583e2 	strh	w2, [sp, #704]
   86ba4:	17fffdf7 	b	86380 <disasm+0x1c80>
		names="fcvtl\0";
   86ba8:	90000061 	adrp	x1, 92000 <sd_readblock+0x158>
   86bac:	913aa021 	add	x1, x1, #0xea8
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86bb0:	12001059 	and	w25, w2, #0x1f
   86bb4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_Vnzq2; 
   86bb8:	128aeca2 	mov	w2, #0xffffa89a            	// #-22374
		names="fcvtl\0";
   86bbc:	913f6020 	add	x0, x1, #0xfd8
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86bc0:	120000f7 	and	w23, w7, #0x1
		q=0;
   86bc4:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86bc8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   86bcc:	52800014 	mov	w20, #0x0                   	// #0
   86bd0:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   86bd4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86bd8:	290fffff 	stp	wzr, wzr, [sp, #124]
   86bdc:	29117fff 	stp	wzr, wzr, [sp, #136]
   86be0:	29127fff 	stp	wzr, wzr, [sp, #144]
   86be4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_Vnzq2; 
   86be8:	790583e2 	strh	w2, [sp, #704]
   86bec:	17fffde5 	b	86380 <disasm+0x1c80>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86bf0:	f0000064 	adrp	x4, 95000 <sd_init+0x2ce8>
   86bf4:	91390084 	add	x4, x4, #0xe40
   86bf8:	17fffde7 	b	86394 <disasm+0x1c94>
		names="shll\0";
   86bfc:	90000061 	adrp	x1, 92000 <sd_readblock+0x158>
   86c00:	913aa021 	add	x1, x1, #0xea8
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86c04:	12001059 	and	w25, w2, #0x1f
   86c08:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_shift8; 
   86c0c:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		names="shll\0";
   86c10:	913fa020 	add	x0, x1, #0xfe8
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_shift8; 
   86c14:	12800ac2 	mov	w2, #0xffffffa9            	// #-87
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86c18:	120004f7 	and	w23, w7, #0x3
		q=0;
   86c1c:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86c20:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   86c24:	52800014 	mov	w20, #0x0                   	// #0
   86c28:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   86c2c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86c30:	290fffff 	stp	wzr, wzr, [sp, #124]
   86c34:	29117fff 	stp	wzr, wzr, [sp, #136]
   86c38:	29127fff 	stp	wzr, wzr, [sp, #144]
   86c3c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_shift8; 
   86c40:	790583e3 	strh	w3, [sp, #704]
   86c44:	390b0be2 	strb	w2, [sp, #706]
   86c48:	17fffdce 	b	86380 <disasm+0x1c80>
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86c4c:	121e01ef 	and	w15, w15, #0x4
   86c50:	12000508 	and	w8, w8, #0x3
		names="smlal\0smlsl\0";
   86c54:	b0000063 	adrp	x3, 93000 <sd_init+0xce8>
   86c58:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86c5c:	12000ca4 	and	w4, w5, #0xf
   86c60:	12001059 	and	w25, w2, #0x1f
   86c64:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   86c68:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smlal\0smlsl\0";
   86c6c:	d103c060 	sub	x0, x3, #0xf0
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86c70:	2a0801f4 	orr	w20, w15, w8
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   86c74:	128f6ca3 	mov	w3, #0xffff849a            	// #-31590
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   86c78:	12000221 	and	w1, w17, #0x1
		z=1;q=0;
   86c7c:	52800037 	mov	w23, #0x1                   	// #1
   86c80:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86c84:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   86c88:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   86c8c:	290fffe4 	stp	w4, wzr, [sp, #124]
   86c90:	29117fff 	stp	wzr, wzr, [sp, #136]
   86c94:	29127fff 	stp	wzr, wzr, [sp, #144]
   86c98:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   86c9c:	790583e3 	strh	w3, [sp, #704]
   86ca0:	390b0be2 	strb	w2, [sp, #706]
   86ca4:	17fffdb7 	b	86380 <disasm+0x1c80>
				case disasm_arg_FPz5d: str+=sprintf(str,"%c%d", z==1?'d':(z==0?'s':'h'), d); break;
   86ca8:	710006ff 	cmp	w23, #0x1
   86cac:	52800c82 	mov	w2, #0x64                  	// #100
   86cb0:	540000a0 	b.eq	86cc4 <disasm+0x25c4>  // b.none
   86cb4:	710002ff 	cmp	w23, #0x0
   86cb8:	52800e62 	mov	w2, #0x73                  	// #115
   86cbc:	52800d00 	mov	w0, #0x68                  	// #104
   86cc0:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   86cc4:	b9408be3 	ldr	w3, [sp, #136]
   86cc8:	aa1303e0 	mov	x0, x19
   86ccc:	f94057e1 	ldr	x1, [sp, #168]
   86cd0:	97ffed36 	bl	821a8 <sprintf>
   86cd4:	8b204273 	add	x19, x19, w0, uxtw
   86cd8:	17ffff6a 	b	86a80 <disasm+0x2380>
				case disasm_arg_Xt: str+=sprintf(str,t==31?"xzr":"x%d", t); break;
   86cdc:	f940cfe1 	ldr	x1, [sp, #408]
   86ce0:	aa1303e0 	mov	x0, x19
   86ce4:	2a1a03e2 	mov	w2, w26
   86ce8:	97ffed30 	bl	821a8 <sprintf>
   86cec:	8b204273 	add	x19, x19, w0, uxtw
   86cf0:	17ffff64 	b	86a80 <disasm+0x2380>
				case disasm_arg_labelij1: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)+j); break;
   86cf4:	b9415fe2 	ldr	w2, [sp, #348]
   86cf8:	aa1303e0 	mov	x0, x19
   86cfc:	f0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   86d00:	913c2021 	add	x1, x1, #0xf08
   86d04:	97ffed29 	bl	821a8 <sprintf>
   86d08:	8b204273 	add	x19, x19, w0, uxtw
   86d0c:	17ffff5d 	b	86a80 <disasm+0x2380>
				case disasm_arg_RtS: str+=sprintf(str,t==31?"%csp":"%c%d", (s?'x':'w'), t); break;
   86d10:	b940f3e2 	ldr	w2, [sp, #240]
   86d14:	aa1303e0 	mov	x0, x19
   86d18:	f940d3e1 	ldr	x1, [sp, #416]
   86d1c:	2a1a03e3 	mov	w3, w26
   86d20:	97ffed22 	bl	821a8 <sprintf>
   86d24:	8b204273 	add	x19, x19, w0, uxtw
   86d28:	17ffff56 	b	86a80 <disasm+0x2380>
				case disasm_arg_RnS: str+=sprintf(str,n==31?"%csp":"%c%d", (s?'x':'w'), n); break;
   86d2c:	b940f3e2 	ldr	w2, [sp, #240]
   86d30:	aa1303e0 	mov	x0, x19
   86d34:	f940d7e1 	ldr	x1, [sp, #424]
   86d38:	2a1903e3 	mov	w3, w25
   86d3c:	97ffed1b 	bl	821a8 <sprintf>
   86d40:	8b204273 	add	x19, x19, w0, uxtw
   86d44:	17ffff4f 	b	86a80 <disasm+0x2380>
				case disasm_arg_i: str+=sprintf(str,"#0x%x", i); break;
   86d48:	b9407be2 	ldr	w2, [sp, #120]
   86d4c:	aa1303e0 	mov	x0, x19
   86d50:	f9405fe1 	ldr	x1, [sp, #184]
   86d54:	97ffed15 	bl	821a8 <sprintf>
   86d58:	8b204273 	add	x19, x19, w0, uxtw
   86d5c:	17ffff49 	b	86a80 <disasm+0x2380>
				case disasm_arg_j12_opt: str+=sprintf(str,!j?"":"lsl #%d", j*12); break;
   86d60:	b942a3e2 	ldr	w2, [sp, #672]
   86d64:	aa1303e0 	mov	x0, x19
   86d68:	f94097e1 	ldr	x1, [sp, #296]
   86d6c:	97ffed0f 	bl	821a8 <sprintf>
   86d70:	8b204273 	add	x19, x19, w0, uxtw
   86d74:	17ffff43 	b	86a80 <disasm+0x2380>
				case disasm_arg_Rn: str+=sprintf(str,n==31?"%czr":"%c%d", (s?'x':'w'), n); break;
   86d78:	b940f3e2 	ldr	w2, [sp, #240]
   86d7c:	aa1303e0 	mov	x0, x19
   86d80:	f9409fe1 	ldr	x1, [sp, #312]
   86d84:	2a1903e3 	mov	w3, w25
   86d88:	97ffed08 	bl	821a8 <sprintf>
   86d8c:	8b204273 	add	x19, x19, w0, uxtw
   86d90:	17ffff3c 	b	86a80 <disasm+0x2380>
				case disasm_arg_ib: str+=sprintf(str,"#0x%lx", disasm_dbm(k,j,i)); break;
   86d94:	294e8be0 	ldp	w0, w2, [sp, #116]
   86d98:	2a1503e1 	mov	w1, w21
   86d9c:	97fff633 	bl	84668 <disasm_dbm>
   86da0:	aa0003e2 	mov	x2, x0
   86da4:	f0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   86da8:	aa1303e0 	mov	x0, x19
   86dac:	913c4021 	add	x1, x1, #0xf10
   86db0:	97ffecfe 	bl	821a8 <sprintf>
   86db4:	8b204273 	add	x19, x19, w0, uxtw
   86db8:	17ffff32 	b	86a80 <disasm+0x2380>
				case disasm_arg_Rt: str+=sprintf(str,t==31?"%czr":"%c%d", (s?'x':'w'), t); break;
   86dbc:	b940f3e2 	ldr	w2, [sp, #240]
   86dc0:	aa1303e0 	mov	x0, x19
   86dc4:	f9409be1 	ldr	x1, [sp, #304]
   86dc8:	2a1a03e3 	mov	w3, w26
   86dcc:	97ffecf7 	bl	821a8 <sprintf>
   86dd0:	8b204273 	add	x19, x19, w0, uxtw
   86dd4:	17ffff2b 	b	86a80 <disasm+0x2380>
				case disasm_arg_j16_opt: str+=sprintf(str,!j?"":"lsl #%d", j*16); break;
   86dd8:	b94163e2 	ldr	w2, [sp, #352]
   86ddc:	aa1303e0 	mov	x0, x19
   86de0:	f94097e1 	ldr	x1, [sp, #296]
   86de4:	97ffecf1 	bl	821a8 <sprintf>
   86de8:	8b204273 	add	x19, x19, w0, uxtw
   86dec:	17ffff25 	b	86a80 <disasm+0x2380>
				case disasm_arg_j: str+=sprintf(str,"#0x%x", j); break;
   86df0:	f9405fe1 	ldr	x1, [sp, #184]
   86df4:	aa1303e0 	mov	x0, x19
   86df8:	2a1503e2 	mov	w2, w21
   86dfc:	97ffeceb 	bl	821a8 <sprintf>
   86e00:	8b204273 	add	x19, x19, w0, uxtw
   86e04:	17ffff1f 	b	86a80 <disasm+0x2380>
				case disasm_arg_Rm: str+=sprintf(str,m==31?"%czr":"%c%d", (s?'x':'w'), m); break;
   86e08:	b9407fe3 	ldr	w3, [sp, #124]
   86e0c:	aa1303e0 	mov	x0, x19
   86e10:	b940f3e2 	ldr	w2, [sp, #240]
   86e14:	f9408be1 	ldr	x1, [sp, #272]
   86e18:	97ffece4 	bl	821a8 <sprintf>
   86e1c:	8b204273 	add	x19, x19, w0, uxtw
   86e20:	17ffff18 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86e24:	b9408fe1 	ldr	w1, [sp, #140]
   86e28:	f9405be0 	ldr	x0, [sp, #176]
   86e2c:	9129e000 	add	x0, x0, #0xa78
   86e30:	97fff390 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_c: str+=sprintf(str,"%s", disasm_str(conds,c)); break;
   86e34:	f0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   86e38:	aa0003e2 	mov	x2, x0
   86e3c:	913c6021 	add	x1, x1, #0xf18
   86e40:	aa1303e0 	mov	x0, x19
   86e44:	97ffecd9 	bl	821a8 <sprintf>
   86e48:	8b204273 	add	x19, x19, w0, uxtw
   86e4c:	17ffff0d 	b	86a80 <disasm+0x2380>
				case disasm_arg_labeli4: str+=sprintf(str,"0x%x", (int)iaddr+(i<<2)); break;
   86e50:	b94167e2 	ldr	w2, [sp, #356]
   86e54:	aa1303e0 	mov	x0, x19
   86e58:	f0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   86e5c:	913c2021 	add	x1, x1, #0xf08
   86e60:	97ffecd2 	bl	821a8 <sprintf>
   86e64:	8b204273 	add	x19, x19, w0, uxtw
   86e68:	17ffff06 	b	86a80 <disasm+0x2380>
				case disasm_arg_i_opt: str+=sprintf(str,!i?"":"#0x%x", i); break;
   86e6c:	b9407be2 	ldr	w2, [sp, #120]
   86e70:	aa1303e0 	mov	x0, x19
   86e74:	f9407fe1 	ldr	x1, [sp, #248]
   86e78:	97ffeccc 	bl	821a8 <sprintf>
   86e7c:	8b204273 	add	x19, x19, w0, uxtw
   86e80:	17ffff00 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86e84:	b94093e1 	ldr	w1, [sp, #144]
   86e88:	f9405be0 	ldr	x0, [sp, #176]
   86e8c:	912ac000 	add	x0, x0, #0xab0
   86e90:	97fff378 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_pstate: str+=sprintf(str,"%s", disasm_str(pstate,p)); break;
   86e94:	f0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   86e98:	aa0003e2 	mov	x2, x0
   86e9c:	913c6021 	add	x1, x1, #0xf18
   86ea0:	aa1303e0 	mov	x0, x19
   86ea4:	97ffecc1 	bl	821a8 <sprintf>
   86ea8:	8b204273 	add	x19, x19, w0, uxtw
   86eac:	17fffef5 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86eb0:	f9405be0 	ldr	x0, [sp, #176]
   86eb4:	2a1503e1 	mov	w1, w21
   86eb8:	912b6000 	add	x0, x0, #0xad8
   86ebc:	97fff36d 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_sh: str+=sprintf(str,"%s", disasm_str(share,j)); break;
   86ec0:	f0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   86ec4:	aa0003e2 	mov	x2, x0
   86ec8:	913c6021 	add	x1, x1, #0xf18
   86ecc:	aa1303e0 	mov	x0, x19
   86ed0:	97ffecb6 	bl	821a8 <sprintf>
   86ed4:	8b204273 	add	x19, x19, w0, uxtw
   86ed8:	17fffeea 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86edc:	b94097e1 	ldr	w1, [sp, #148]
   86ee0:	f9405be0 	ldr	x0, [sp, #176]
   86ee4:	912c8000 	add	x0, x0, #0xb20
   86ee8:	97fff362 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_a0: str+=sprintf(str,"%s", disasm_str(at_op0,a)); break;
   86eec:	f0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   86ef0:	aa0003e2 	mov	x2, x0
   86ef4:	913c6021 	add	x1, x1, #0xf18
   86ef8:	aa1303e0 	mov	x0, x19
   86efc:	97ffecab 	bl	821a8 <sprintf>
   86f00:	8b204273 	add	x19, x19, w0, uxtw
   86f04:	17fffedf 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86f08:	b94097e1 	ldr	w1, [sp, #148]
   86f0c:	f9405be0 	ldr	x0, [sp, #176]
   86f10:	912d0000 	add	x0, x0, #0xb40
   86f14:	97fff357 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_a1: str+=sprintf(str,"%s", disasm_str(at_op1,a)); break;
   86f18:	f0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   86f1c:	aa0003e2 	mov	x2, x0
   86f20:	913c6021 	add	x1, x1, #0xf18
   86f24:	aa1303e0 	mov	x0, x19
   86f28:	97ffeca0 	bl	821a8 <sprintf>
   86f2c:	8b204273 	add	x19, x19, w0, uxtw
   86f30:	17fffed4 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86f34:	b94097e1 	ldr	w1, [sp, #148]
   86f38:	f9405be0 	ldr	x0, [sp, #176]
   86f3c:	912d4000 	add	x0, x0, #0xb50
   86f40:	97fff34c 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_a2: str+=sprintf(str,"%s", disasm_str(at_op2,a)); break;
   86f44:	f0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   86f48:	aa0003e2 	mov	x2, x0
   86f4c:	913c6021 	add	x1, x1, #0xf18
   86f50:	aa1303e0 	mov	x0, x19
   86f54:	97ffec95 	bl	821a8 <sprintf>
   86f58:	8b204273 	add	x19, x19, w0, uxtw
   86f5c:	17fffec9 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86f60:	b9408be1 	ldr	w1, [sp, #136]
   86f64:	f9405be0 	ldr	x0, [sp, #176]
   86f68:	912e4000 	add	x0, x0, #0xb90
   86f6c:	97fff341 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_dc0: str+=sprintf(str,"%s", disasm_str(dc_op0,d)); break;
   86f70:	f0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   86f74:	aa0003e2 	mov	x2, x0
   86f78:	913c6021 	add	x1, x1, #0xf18
   86f7c:	aa1303e0 	mov	x0, x19
   86f80:	97ffec8a 	bl	821a8 <sprintf>
   86f84:	8b204273 	add	x19, x19, w0, uxtw
   86f88:	17fffebe 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86f8c:	b9408be1 	ldr	w1, [sp, #136]
   86f90:	f9405be0 	ldr	x0, [sp, #176]
   86f94:	912e8000 	add	x0, x0, #0xba0
   86f98:	97fff336 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_dc1: str+=sprintf(str,"%s", disasm_str(dc_op1,d)); break;
   86f9c:	f0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   86fa0:	aa0003e2 	mov	x2, x0
   86fa4:	913c6021 	add	x1, x1, #0xf18
   86fa8:	aa1303e0 	mov	x0, x19
   86fac:	97ffec7f 	bl	821a8 <sprintf>
   86fb0:	8b204273 	add	x19, x19, w0, uxtw
   86fb4:	17fffeb3 	b	86a80 <disasm+0x2380>
				case disasm_arg_ZVA: str+=sprintf(str,"ZVA"); break;
   86fb8:	aa1303e0 	mov	x0, x19
   86fbc:	f0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   86fc0:	913c8021 	add	x1, x1, #0xf20
   86fc4:	97ffec79 	bl	821a8 <sprintf>
   86fc8:	8b204273 	add	x19, x19, w0, uxtw
   86fcc:	17fffead 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86fd0:	b9408be1 	ldr	w1, [sp, #136]
   86fd4:	f9405be0 	ldr	x0, [sp, #176]
   86fd8:	912ec000 	add	x0, x0, #0xbb0
   86fdc:	97fff325 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_dc2: str+=sprintf(str,"%s", disasm_str(dc_op2,d)); break;
   86fe0:	f0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   86fe4:	aa0003e2 	mov	x2, x0
   86fe8:	913c6021 	add	x1, x1, #0xf18
   86fec:	aa1303e0 	mov	x0, x19
   86ff0:	97ffec6e 	bl	821a8 <sprintf>
   86ff4:	8b204273 	add	x19, x19, w0, uxtw
   86ff8:	17fffea2 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   86ffc:	b9408fe1 	ldr	w1, [sp, #140]
   87000:	f9405be0 	ldr	x0, [sp, #176]
   87004:	912f2000 	add	x0, x0, #0xbc8
   87008:	97fff31a 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_ic: str+=sprintf(str,"%s", disasm_str(ic_op,c)); break;
   8700c:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87010:	aa0003e2 	mov	x2, x0
   87014:	913c6021 	add	x1, x1, #0xf18
   87018:	aa1303e0 	mov	x0, x19
   8701c:	97ffec63 	bl	821a8 <sprintf>
   87020:	8b204273 	add	x19, x19, w0, uxtw
   87024:	17fffe97 	b	86a80 <disasm+0x2380>
				case disasm_arg_Xt_opt: str+=sprintf(str,t==31?"":"x%d", t); break;
   87028:	f940dbe1 	ldr	x1, [sp, #432]
   8702c:	aa1303e0 	mov	x0, x19
   87030:	2a1a03e2 	mov	w2, w26
   87034:	97ffec5d 	bl	821a8 <sprintf>
   87038:	8b204273 	add	x19, x19, w0, uxtw
   8703c:	17fffe91 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87040:	f9405be0 	ldr	x0, [sp, #176]
   87044:	2a1903e1 	mov	w1, w25
   87048:	912f8000 	add	x0, x0, #0xbe0
   8704c:	97fff309 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_tl0: str+=sprintf(str,"%s", disasm_str(tlbi_op0,n)); break;
   87050:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87054:	aa0003e2 	mov	x2, x0
   87058:	913c6021 	add	x1, x1, #0xf18
   8705c:	aa1303e0 	mov	x0, x19
   87060:	97ffec52 	bl	821a8 <sprintf>
   87064:	8b204273 	add	x19, x19, w0, uxtw
   87068:	17fffe86 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8706c:	f9405be0 	ldr	x0, [sp, #176]
   87070:	2a1903e1 	mov	w1, w25
   87074:	91328000 	add	x0, x0, #0xca0
   87078:	97fff2fe 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_tl1: str+=sprintf(str,"%s", disasm_str(tlbi_op1,n)); break;
   8707c:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87080:	aa0003e2 	mov	x2, x0
   87084:	913c6021 	add	x1, x1, #0xf18
   87088:	aa1303e0 	mov	x0, x19
   8708c:	97ffec47 	bl	821a8 <sprintf>
   87090:	8b204273 	add	x19, x19, w0, uxtw
   87094:	17fffe7b 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87098:	f9405be0 	ldr	x0, [sp, #176]
   8709c:	2a1903e1 	mov	w1, w25
   870a0:	91332000 	add	x0, x0, #0xcc8
   870a4:	97fff2f3 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_tl2: str+=sprintf(str,"%s", disasm_str(tlbi_op2,n)); break;
   870a8:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   870ac:	aa0003e2 	mov	x2, x0
   870b0:	913c6021 	add	x1, x1, #0xf18
   870b4:	aa1303e0 	mov	x0, x19
   870b8:	97ffec3c 	bl	821a8 <sprintf>
   870bc:	8b204273 	add	x19, x19, w0, uxtw
   870c0:	17fffe70 	b	86a80 <disasm+0x2380>
				case disasm_arg_sysreg: str+=sprintf(str,disasm_sysreg(p,k,n,m,j)?disasm_sysreg(p,k,n,m,j):"S%d_%d_%d_%d_%d", p,k,n,m,j); break;
   870c4:	b94077e8 	ldr	w8, [sp, #116]
   870c8:	2a1503e4 	mov	w4, w21
   870cc:	b9407fe9 	ldr	w9, [sp, #124]
   870d0:	2a1903e2 	mov	w2, w25
   870d4:	b94093e7 	ldr	w7, [sp, #144]
   870d8:	2a0803e1 	mov	w1, w8
   870dc:	2a0903e3 	mov	w3, w9
   870e0:	2a0703e0 	mov	w0, w7
   870e4:	97fff2ff 	bl	83ce0 <disasm_sysreg>
   870e8:	f100001f 	cmp	x0, #0x0
   870ec:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   870f0:	91394021 	add	x1, x1, #0xe50
   870f4:	9a800021 	csel	x1, x1, x0, eq  // eq = none
   870f8:	2a1503e6 	mov	w6, w21
   870fc:	aa1303e0 	mov	x0, x19
   87100:	2a0903e5 	mov	w5, w9
   87104:	2a1903e4 	mov	w4, w25
   87108:	2a0803e3 	mov	w3, w8
   8710c:	2a0703e2 	mov	w2, w7
   87110:	97ffec26 	bl	821a8 <sprintf>
   87114:	8b204273 	add	x19, x19, w0, uxtw
   87118:	17fffe5a 	b	86a80 <disasm+0x2380>
				case disasm_arg_Cn: str+=sprintf(str,"C%d", n); break;
   8711c:	aa1303e0 	mov	x0, x19
   87120:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87124:	2a1903e2 	mov	w2, w25
   87128:	913ca021 	add	x1, x1, #0xf28
   8712c:	97ffec1f 	bl	821a8 <sprintf>
   87130:	8b204273 	add	x19, x19, w0, uxtw
   87134:	17fffe53 	b	86a80 <disasm+0x2380>
				case disasm_arg_Cm: str+=sprintf(str,"C%d", m); break;
   87138:	b9407fe2 	ldr	w2, [sp, #124]
   8713c:	aa1303e0 	mov	x0, x19
   87140:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87144:	913ca021 	add	x1, x1, #0xf28
   87148:	97ffec18 	bl	821a8 <sprintf>
   8714c:	8b204273 	add	x19, x19, w0, uxtw
   87150:	17fffe4c 	b	86a80 <disasm+0x2380>
				case disasm_arg_Xn: str+=sprintf(str,n==31?"xzr":"x%d", n); break;
   87154:	f940dfe1 	ldr	x1, [sp, #440]
   87158:	aa1303e0 	mov	x0, x19
   8715c:	2a1903e2 	mov	w2, w25
   87160:	97ffec12 	bl	821a8 <sprintf>
   87164:	8b204273 	add	x19, x19, w0, uxtw
   87168:	17fffe46 	b	86a80 <disasm+0x2380>
				case disasm_arg_b: str+=sprintf(str,"#0x%x", b); break;
   8716c:	b9409be2 	ldr	w2, [sp, #152]
   87170:	aa1303e0 	mov	x0, x19
   87174:	f9405fe1 	ldr	x1, [sp, #184]
   87178:	97ffec0c 	bl	821a8 <sprintf>
   8717c:	8b204273 	add	x19, x19, w0, uxtw
   87180:	17fffe40 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87184:	b940e3e1 	ldr	w1, [sp, #224]
   87188:	f9405be0 	ldr	x0, [sp, #176]
   8718c:	9133e000 	add	x0, x0, #0xcf8
   87190:	97fff2b8 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_VtT: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,(z<<1)|q)); break;
   87194:	d0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   87198:	aa0003e4 	mov	x4, x0
   8719c:	913cc042 	add	x2, x2, #0xf30
   871a0:	aa1303e0 	mov	x0, x19
   871a4:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   871a8:	2a1a03e3 	mov	w3, w26
   871ac:	913c6021 	add	x1, x1, #0xf18
   871b0:	97ffebfe 	bl	821a8 <sprintf>
   871b4:	8b204273 	add	x19, x19, w0, uxtw
   871b8:	17fffe32 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   871bc:	b940e3e1 	ldr	w1, [sp, #224]
   871c0:	f9405be0 	ldr	x0, [sp, #176]
   871c4:	9133e000 	add	x0, x0, #0xcf8
   871c8:	97fff2aa 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_Vt2T: str+=sprintf(str,"%s", "V%d.%s", (t+1)&0x1f, disasm_str(quantum,(z<<1)|q)); break;
   871cc:	11000741 	add	w1, w26, #0x1
   871d0:	aa0003e4 	mov	x4, x0
   871d4:	12001023 	and	w3, w1, #0x1f
   871d8:	aa1303e0 	mov	x0, x19
   871dc:	d0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   871e0:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   871e4:	913cc042 	add	x2, x2, #0xf30
   871e8:	913c6021 	add	x1, x1, #0xf18
   871ec:	97ffebef 	bl	821a8 <sprintf>
   871f0:	8b204273 	add	x19, x19, w0, uxtw
   871f4:	17fffe23 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   871f8:	b940e3e1 	ldr	w1, [sp, #224]
   871fc:	f9405be0 	ldr	x0, [sp, #176]
   87200:	9133e000 	add	x0, x0, #0xcf8
   87204:	97fff29b 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_Vt3T: str+=sprintf(str,"%s", "V%d.%s", (t+2)&0x1f, disasm_str(quantum,(z<<1)|q)); break;
   87208:	11000b41 	add	w1, w26, #0x2
   8720c:	aa0003e4 	mov	x4, x0
   87210:	12001023 	and	w3, w1, #0x1f
   87214:	aa1303e0 	mov	x0, x19
   87218:	d0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   8721c:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87220:	913cc042 	add	x2, x2, #0xf30
   87224:	913c6021 	add	x1, x1, #0xf18
   87228:	97ffebe0 	bl	821a8 <sprintf>
   8722c:	8b204273 	add	x19, x19, w0, uxtw
   87230:	17fffe14 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87234:	b940e3e1 	ldr	w1, [sp, #224]
   87238:	f9405be0 	ldr	x0, [sp, #176]
   8723c:	9133e000 	add	x0, x0, #0xcf8
   87240:	97fff28c 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_Vt4T: str+=sprintf(str,"%s", "V%d.%s", (t+3)&0x1f, disasm_str(quantum,(z<<1)|q)); break;
   87244:	11000f41 	add	w1, w26, #0x3
   87248:	aa0003e4 	mov	x4, x0
   8724c:	12001023 	and	w3, w1, #0x1f
   87250:	aa1303e0 	mov	x0, x19
   87254:	d0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   87258:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   8725c:	913cc042 	add	x2, x2, #0xf30
   87260:	913c6021 	add	x1, x1, #0xf18
   87264:	97ffebd1 	bl	821a8 <sprintf>
   87268:	8b204273 	add	x19, x19, w0, uxtw
   8726c:	17fffe05 	b	86a80 <disasm+0x2380>
				case disasm_arg_offs: str+=sprintf(str,"["); break;
   87270:	aa1303e0 	mov	x0, x19
   87274:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87278:	913ce021 	add	x1, x1, #0xf38
   8727c:	97ffebcb 	bl	821a8 <sprintf>
   87280:	8b204273 	add	x19, x19, w0, uxtw
   87284:	17fffdff 	b	86a80 <disasm+0x2380>
				case disasm_arg_XnS: str+=sprintf(str,n==31?"xsp":"x%d", n); break;
   87288:	f940e3e1 	ldr	x1, [sp, #448]
   8728c:	aa1303e0 	mov	x0, x19
   87290:	2a1903e2 	mov	w2, w25
   87294:	97ffebc5 	bl	821a8 <sprintf>
   87298:	8b204273 	add	x19, x19, w0, uxtw
   8729c:	17fffdf9 	b	86a80 <disasm+0x2380>
				case disasm_arg_offe: str+=sprintf(str,"]%s", p?"!":""); break;
   872a0:	f940e7e2 	ldr	x2, [sp, #456]
   872a4:	aa1303e0 	mov	x0, x19
   872a8:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   872ac:	913d0021 	add	x1, x1, #0xf40
   872b0:	97ffebbe 	bl	821a8 <sprintf>
   872b4:	8b204273 	add	x19, x19, w0, uxtw
   872b8:	17fffdf2 	b	86a80 <disasm+0x2380>
				case disasm_arg_Qi: str+=sprintf(str,"#%d", q?64:32); break;
   872bc:	b941dbe2 	ldr	w2, [sp, #472]
   872c0:	aa1303e0 	mov	x0, x19
   872c4:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   872c8:	913d2021 	add	x1, x1, #0xf48
   872cc:	97ffebb7 	bl	821a8 <sprintf>
   872d0:	8b204273 	add	x19, x19, w0, uxtw
   872d4:	17fffdeb 	b	86a80 <disasm+0x2380>
				case disasm_arg_Xm: str+=sprintf(str,m==31?"xzr":"x%d", m); break;
   872d8:	b9407fe2 	ldr	w2, [sp, #124]
   872dc:	aa1303e0 	mov	x0, x19
   872e0:	f940ebe1 	ldr	x1, [sp, #464]
   872e4:	97ffebb1 	bl	821a8 <sprintf>
   872e8:	8b204273 	add	x19, x19, w0, uxtw
   872ec:	17fffde5 	b	86a80 <disasm+0x2380>
				case disasm_arg_Qi3: str+=sprintf(str,"#%d", q?48:24); break;
   872f0:	b941dfe2 	ldr	w2, [sp, #476]
   872f4:	aa1303e0 	mov	x0, x19
   872f8:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   872fc:	913d2021 	add	x1, x1, #0xf48
   87300:	97ffebaa 	bl	821a8 <sprintf>
   87304:	8b204273 	add	x19, x19, w0, uxtw
   87308:	17fffdde 	b	86a80 <disasm+0x2380>
				case disasm_arg_Qi2: str+=sprintf(str,"#%d", q?32:16); break;
   8730c:	b941e3e2 	ldr	w2, [sp, #480]
   87310:	aa1303e0 	mov	x0, x19
   87314:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87318:	913d2021 	add	x1, x1, #0xf48
   8731c:	97ffeba3 	bl	821a8 <sprintf>
   87320:	8b204273 	add	x19, x19, w0, uxtw
   87324:	17fffdd7 	b	86a80 <disasm+0x2380>
				case disasm_arg_Qi1: str+=sprintf(str,"#%d", q?16:8); break;
   87328:	b941e7e2 	ldr	w2, [sp, #484]
   8732c:	aa1303e0 	mov	x0, x19
   87330:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87334:	913d2021 	add	x1, x1, #0xf48
   87338:	97ffeb9c 	bl	821a8 <sprintf>
   8733c:	8b204273 	add	x19, x19, w0, uxtw
   87340:	17fffdd0 	b	86a80 <disasm+0x2380>
				case disasm_arg_VtB: str+=sprintf(str,"V%d.b[%d]", t, (q<<3)|(s<<2)|z); break;
   87344:	b940cbe3 	ldr	w3, [sp, #200]
   87348:	aa1303e0 	mov	x0, x19
   8734c:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87350:	2a1a03e2 	mov	w2, w26
   87354:	913d4021 	add	x1, x1, #0xf50
   87358:	97ffeb94 	bl	821a8 <sprintf>
   8735c:	8b204273 	add	x19, x19, w0, uxtw
   87360:	17fffdc8 	b	86a80 <disasm+0x2380>
				case disasm_arg_VtH: str+=sprintf(str,"V%d.h[%d]", t, (q<<3)|(s<<2)|z); break;
   87364:	b940cbe3 	ldr	w3, [sp, #200]
   87368:	aa1303e0 	mov	x0, x19
   8736c:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87370:	2a1a03e2 	mov	w2, w26
   87374:	913d8021 	add	x1, x1, #0xf60
   87378:	97ffeb8c 	bl	821a8 <sprintf>
   8737c:	8b204273 	add	x19, x19, w0, uxtw
   87380:	17fffdc0 	b	86a80 <disasm+0x2380>
				case disasm_arg_VtS: str+=sprintf(str,"V%d.s[%d]", t, (q<<1)|s); break;
   87384:	b94103e3 	ldr	w3, [sp, #256]
   87388:	aa1303e0 	mov	x0, x19
   8738c:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87390:	2a1a03e2 	mov	w2, w26
   87394:	913dc021 	add	x1, x1, #0xf70
   87398:	97ffeb84 	bl	821a8 <sprintf>
   8739c:	8b204273 	add	x19, x19, w0, uxtw
   873a0:	17fffdb8 	b	86a80 <disasm+0x2380>
				case disasm_arg_VtD: str+=sprintf(str,"V%d.d[%d]", t, q); break;
   873a4:	aa1303e0 	mov	x0, x19
   873a8:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   873ac:	2a1803e3 	mov	w3, w24
   873b0:	913e0021 	add	x1, x1, #0xf80
   873b4:	2a1a03e2 	mov	w2, w26
   873b8:	97ffeb7c 	bl	821a8 <sprintf>
   873bc:	8b204273 	add	x19, x19, w0, uxtw
   873c0:	17fffdb0 	b	86a80 <disasm+0x2380>
				case disasm_arg_i1: str+=sprintf(str,"1"); break;
   873c4:	aa1303e0 	mov	x0, x19
   873c8:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   873cc:	913e4021 	add	x1, x1, #0xf90
   873d0:	97ffeb76 	bl	821a8 <sprintf>
   873d4:	8b204273 	add	x19, x19, w0, uxtw
   873d8:	17fffdaa 	b	86a80 <disasm+0x2380>
				case disasm_arg_i2: str+=sprintf(str,"2"); break;
   873dc:	aa1303e0 	mov	x0, x19
   873e0:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   873e4:	913e6021 	add	x1, x1, #0xf98
   873e8:	97ffeb70 	bl	821a8 <sprintf>
   873ec:	8b204273 	add	x19, x19, w0, uxtw
   873f0:	17fffda4 	b	86a80 <disasm+0x2380>
				case disasm_arg_i4: str+=sprintf(str,"4"); break;
   873f4:	aa1303e0 	mov	x0, x19
   873f8:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   873fc:	913e8021 	add	x1, x1, #0xfa0
   87400:	97ffeb6a 	bl	821a8 <sprintf>
   87404:	8b204273 	add	x19, x19, w0, uxtw
   87408:	17fffd9e 	b	86a80 <disasm+0x2380>
				case disasm_arg_i8: str+=sprintf(str,"8"); break;
   8740c:	aa1303e0 	mov	x0, x19
   87410:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87414:	913ea021 	add	x1, x1, #0xfa8
   87418:	97ffeb64 	bl	821a8 <sprintf>
   8741c:	8b204273 	add	x19, x19, w0, uxtw
   87420:	17fffd98 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vt3B: str+=sprintf(str,"V%d.b V%d.b V%d.b[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (q<<3)|(s<<2)|z); break;
   87424:	b940cbe5 	ldr	w5, [sp, #200]
   87428:	11000740 	add	w0, w26, #0x1
   8742c:	11000b44 	add	w4, w26, #0x2
   87430:	12001003 	and	w3, w0, #0x1f
   87434:	12001084 	and	w4, w4, #0x1f
   87438:	aa1303e0 	mov	x0, x19
   8743c:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87440:	2a1a03e2 	mov	w2, w26
   87444:	913ec021 	add	x1, x1, #0xfb0
   87448:	97ffeb58 	bl	821a8 <sprintf>
   8744c:	8b204273 	add	x19, x19, w0, uxtw
   87450:	17fffd8c 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vt3H: str+=sprintf(str,"V%d.h V%d.h V%d.h[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (q<<3)|(s<<2)|z); break;
   87454:	b940cbe5 	ldr	w5, [sp, #200]
   87458:	11000740 	add	w0, w26, #0x1
   8745c:	11000b44 	add	w4, w26, #0x2
   87460:	12001003 	and	w3, w0, #0x1f
   87464:	12001084 	and	w4, w4, #0x1f
   87468:	aa1303e0 	mov	x0, x19
   8746c:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87470:	2a1a03e2 	mov	w2, w26
   87474:	913f2021 	add	x1, x1, #0xfc8
   87478:	97ffeb4c 	bl	821a8 <sprintf>
   8747c:	8b204273 	add	x19, x19, w0, uxtw
   87480:	17fffd80 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vt3S: str+=sprintf(str,"V%d.s V%d.s V%d.s[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (q<<1)|s); break;
   87484:	b94103e5 	ldr	w5, [sp, #256]
   87488:	11000740 	add	w0, w26, #0x1
   8748c:	11000b44 	add	w4, w26, #0x2
   87490:	12001003 	and	w3, w0, #0x1f
   87494:	12001084 	and	w4, w4, #0x1f
   87498:	aa1303e0 	mov	x0, x19
   8749c:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   874a0:	2a1a03e2 	mov	w2, w26
   874a4:	913f8021 	add	x1, x1, #0xfe0
   874a8:	97ffeb40 	bl	821a8 <sprintf>
   874ac:	8b204273 	add	x19, x19, w0, uxtw
   874b0:	17fffd74 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vt3D: str+=sprintf(str,"V%d.d V%d.d V%d.d[%d]", t, (t+1)&0x1f, (t+2)&0x1f, q); break;
   874b4:	11000740 	add	w0, w26, #0x1
   874b8:	11000b44 	add	w4, w26, #0x2
   874bc:	12001003 	and	w3, w0, #0x1f
   874c0:	12001084 	and	w4, w4, #0x1f
   874c4:	aa1303e0 	mov	x0, x19
   874c8:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   874cc:	2a1803e5 	mov	w5, w24
   874d0:	913fe021 	add	x1, x1, #0xff8
   874d4:	2a1a03e2 	mov	w2, w26
   874d8:	97ffeb34 	bl	821a8 <sprintf>
   874dc:	8b204273 	add	x19, x19, w0, uxtw
   874e0:	17fffd68 	b	86a80 <disasm+0x2380>
				case disasm_arg_i3: str+=sprintf(str,"3"); break;
   874e4:	aa1303e0 	mov	x0, x19
   874e8:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   874ec:	91004021 	add	x1, x1, #0x10
   874f0:	97ffeb2e 	bl	821a8 <sprintf>
   874f4:	8b204273 	add	x19, x19, w0, uxtw
   874f8:	17fffd62 	b	86a80 <disasm+0x2380>
				case disasm_arg_i6: str+=sprintf(str,"6"); break;
   874fc:	aa1303e0 	mov	x0, x19
   87500:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87504:	91006021 	add	x1, x1, #0x18
   87508:	97ffeb28 	bl	821a8 <sprintf>
   8750c:	8b204273 	add	x19, x19, w0, uxtw
   87510:	17fffd5c 	b	86a80 <disasm+0x2380>
				case disasm_arg_i12: str+=sprintf(str,"12"); break;
   87514:	aa1303e0 	mov	x0, x19
   87518:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   8751c:	91008021 	add	x1, x1, #0x20
   87520:	97ffeb22 	bl	821a8 <sprintf>
   87524:	8b204273 	add	x19, x19, w0, uxtw
   87528:	17fffd56 	b	86a80 <disasm+0x2380>
				case disasm_arg_i24: str+=sprintf(str,"24"); break;
   8752c:	aa1303e0 	mov	x0, x19
   87530:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87534:	9100a021 	add	x1, x1, #0x28
   87538:	97ffeb1c 	bl	821a8 <sprintf>
   8753c:	8b204273 	add	x19, x19, w0, uxtw
   87540:	17fffd50 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vt2B: str+=sprintf(str,"V%d.b V%d.b[%d]", t, (t+1)&0x1f, (q<<3)|(s<<2)|z); break;
   87544:	b940cbe4 	ldr	w4, [sp, #200]
   87548:	11000743 	add	w3, w26, #0x1
   8754c:	aa1303e0 	mov	x0, x19
   87550:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87554:	12001063 	and	w3, w3, #0x1f
   87558:	9100c021 	add	x1, x1, #0x30
   8755c:	2a1a03e2 	mov	w2, w26
   87560:	97ffeb12 	bl	821a8 <sprintf>
   87564:	8b204273 	add	x19, x19, w0, uxtw
   87568:	17fffd46 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vt2H: str+=sprintf(str,"V%d.h V%d.h[%d]", t, (t+1)&0x1f, (q<<3)|(s<<2)|z); break;
   8756c:	b940cbe4 	ldr	w4, [sp, #200]
   87570:	11000743 	add	w3, w26, #0x1
   87574:	aa1303e0 	mov	x0, x19
   87578:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   8757c:	12001063 	and	w3, w3, #0x1f
   87580:	91010021 	add	x1, x1, #0x40
   87584:	2a1a03e2 	mov	w2, w26
   87588:	97ffeb08 	bl	821a8 <sprintf>
   8758c:	8b204273 	add	x19, x19, w0, uxtw
   87590:	17fffd3c 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vt2S: str+=sprintf(str,"V%d.s V%d.s[%d]", t, (t+1)&0x1f, (q<<1)|s); break;
   87594:	b94103e4 	ldr	w4, [sp, #256]
   87598:	11000743 	add	w3, w26, #0x1
   8759c:	aa1303e0 	mov	x0, x19
   875a0:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   875a4:	12001063 	and	w3, w3, #0x1f
   875a8:	91014021 	add	x1, x1, #0x50
   875ac:	2a1a03e2 	mov	w2, w26
   875b0:	97ffeafe 	bl	821a8 <sprintf>
   875b4:	8b204273 	add	x19, x19, w0, uxtw
   875b8:	17fffd32 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vt2D: str+=sprintf(str,"V%d.d V%d.d[%d]", t, (t+1)&0x1f, q); break;
   875bc:	11000743 	add	w3, w26, #0x1
   875c0:	aa1303e0 	mov	x0, x19
   875c4:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   875c8:	12001063 	and	w3, w3, #0x1f
   875cc:	91018021 	add	x1, x1, #0x60
   875d0:	2a1803e4 	mov	w4, w24
   875d4:	2a1a03e2 	mov	w2, w26
   875d8:	97ffeaf4 	bl	821a8 <sprintf>
   875dc:	8b204273 	add	x19, x19, w0, uxtw
   875e0:	17fffd28 	b	86a80 <disasm+0x2380>
				case disasm_arg_i16: str+=sprintf(str,"16"); break;
   875e4:	aa1303e0 	mov	x0, x19
   875e8:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   875ec:	9101c021 	add	x1, x1, #0x70
   875f0:	97ffeaee 	bl	821a8 <sprintf>
   875f4:	8b204273 	add	x19, x19, w0, uxtw
   875f8:	17fffd22 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vt4B: str+=sprintf(str,"V%d.b V%d.b V%d.b V%d.b[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, (q<<3)|(s<<2)|z); break;
   875fc:	b940cbe6 	ldr	w6, [sp, #200]
   87600:	11000b41 	add	w1, w26, #0x2
   87604:	11000740 	add	w0, w26, #0x1
   87608:	11000f45 	add	w5, w26, #0x3
   8760c:	12001024 	and	w4, w1, #0x1f
   87610:	12001003 	and	w3, w0, #0x1f
   87614:	120010a5 	and	w5, w5, #0x1f
   87618:	aa1303e0 	mov	x0, x19
   8761c:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87620:	2a1a03e2 	mov	w2, w26
   87624:	9101e021 	add	x1, x1, #0x78
   87628:	97ffeae0 	bl	821a8 <sprintf>
   8762c:	8b204273 	add	x19, x19, w0, uxtw
   87630:	17fffd14 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vt4H: str+=sprintf(str,"V%d.h V%d.h V%d.h V%d.h[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, (q<<3)|(s<<2)|z); break;
   87634:	b940cbe6 	ldr	w6, [sp, #200]
   87638:	11000b41 	add	w1, w26, #0x2
   8763c:	11000740 	add	w0, w26, #0x1
   87640:	11000f45 	add	w5, w26, #0x3
   87644:	12001024 	and	w4, w1, #0x1f
   87648:	12001003 	and	w3, w0, #0x1f
   8764c:	120010a5 	and	w5, w5, #0x1f
   87650:	aa1303e0 	mov	x0, x19
   87654:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87658:	2a1a03e2 	mov	w2, w26
   8765c:	91026021 	add	x1, x1, #0x98
   87660:	97ffead2 	bl	821a8 <sprintf>
   87664:	8b204273 	add	x19, x19, w0, uxtw
   87668:	17fffd06 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vt4S: str+=sprintf(str,"V%d.s V%d.s V%d.s V%d.s[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, (q<<1)|s); break;
   8766c:	b94103e6 	ldr	w6, [sp, #256]
   87670:	11000b41 	add	w1, w26, #0x2
   87674:	11000740 	add	w0, w26, #0x1
   87678:	11000f45 	add	w5, w26, #0x3
   8767c:	12001024 	and	w4, w1, #0x1f
   87680:	12001003 	and	w3, w0, #0x1f
   87684:	120010a5 	and	w5, w5, #0x1f
   87688:	aa1303e0 	mov	x0, x19
   8768c:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87690:	2a1a03e2 	mov	w2, w26
   87694:	9102e021 	add	x1, x1, #0xb8
   87698:	97ffeac4 	bl	821a8 <sprintf>
   8769c:	8b204273 	add	x19, x19, w0, uxtw
   876a0:	17fffcf8 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vt4D: str+=sprintf(str,"V%d.d V%d.d V%d.d V%d.d[%d]", t, (t+1)&0x1f, (t+2)&0x1f, (t+3)&0x1f, q); break;
   876a4:	11000b41 	add	w1, w26, #0x2
   876a8:	11000740 	add	w0, w26, #0x1
   876ac:	11000f45 	add	w5, w26, #0x3
   876b0:	12001024 	and	w4, w1, #0x1f
   876b4:	12001003 	and	w3, w0, #0x1f
   876b8:	120010a5 	and	w5, w5, #0x1f
   876bc:	aa1303e0 	mov	x0, x19
   876c0:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   876c4:	2a1803e6 	mov	w6, w24
   876c8:	91036021 	add	x1, x1, #0xd8
   876cc:	2a1a03e2 	mov	w2, w26
   876d0:	97ffeab6 	bl	821a8 <sprintf>
   876d4:	8b204273 	add	x19, x19, w0, uxtw
   876d8:	17fffcea 	b	86a80 <disasm+0x2380>
				case disasm_arg_i32: str+=sprintf(str,"32"); break;
   876dc:	aa1303e0 	mov	x0, x19
   876e0:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   876e4:	9103e021 	add	x1, x1, #0xf8
   876e8:	97ffeab0 	bl	821a8 <sprintf>
   876ec:	8b204273 	add	x19, x19, w0, uxtw
   876f0:	17fffce4 	b	86a80 <disasm+0x2380>
				case disasm_arg_z: str+=sprintf(str,"#%d", 1<<z); break;
   876f4:	b9416be2 	ldr	w2, [sp, #360]
   876f8:	aa1303e0 	mov	x0, x19
   876fc:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87700:	913d2021 	add	x1, x1, #0xf48
   87704:	97ffeaa9 	bl	821a8 <sprintf>
   87708:	8b204273 	add	x19, x19, w0, uxtw
   8770c:	17fffcdd 	b	86a80 <disasm+0x2380>
				case disasm_arg_z3: str+=sprintf(str,"#%d", 3<<z); break;
   87710:	b9416fe2 	ldr	w2, [sp, #364]
   87714:	aa1303e0 	mov	x0, x19
   87718:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   8771c:	913d2021 	add	x1, x1, #0xf48
   87720:	97ffeaa2 	bl	821a8 <sprintf>
   87724:	8b204273 	add	x19, x19, w0, uxtw
   87728:	17fffcd6 	b	86a80 <disasm+0x2380>
				case disasm_arg_z2: str+=sprintf(str,"#%d", 2<<z); break;
   8772c:	b94173e2 	ldr	w2, [sp, #368]
   87730:	aa1303e0 	mov	x0, x19
   87734:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87738:	913d2021 	add	x1, x1, #0xf48
   8773c:	97ffea9b 	bl	821a8 <sprintf>
   87740:	8b204273 	add	x19, x19, w0, uxtw
   87744:	17fffccf 	b	86a80 <disasm+0x2380>
				case disasm_arg_z4: str+=sprintf(str,"#%d", 4<<z); break;
   87748:	b94177e2 	ldr	w2, [sp, #372]
   8774c:	aa1303e0 	mov	x0, x19
   87750:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87754:	913d2021 	add	x1, x1, #0xf48
   87758:	97ffea94 	bl	821a8 <sprintf>
   8775c:	8b204273 	add	x19, x19, w0, uxtw
   87760:	17fffcc8 	b	86a80 <disasm+0x2380>
				case disasm_arg_Rd: str+=sprintf(str,d==31?"%czr":"%c%d", (s?'x':'w'), d); break;
   87764:	b9408be3 	ldr	w3, [sp, #136]
   87768:	aa1303e0 	mov	x0, x19
   8776c:	b940f3e2 	ldr	w2, [sp, #240]
   87770:	f940f7e1 	ldr	x1, [sp, #488]
   87774:	97ffea8d 	bl	821a8 <sprintf>
   87778:	8b204273 	add	x19, x19, w0, uxtw
   8777c:	17fffcc1 	b	86a80 <disasm+0x2380>
				case disasm_arg_Rd1: str+=sprintf(str,d+1==31?"%czr":"%c%d", (s?'x':'w'), (d+1)&0x1f); break;
   87780:	b940f3e2 	ldr	w2, [sp, #240]
   87784:	f940fbe1 	ldr	x1, [sp, #496]
   87788:	b9408be0 	ldr	w0, [sp, #136]
   8778c:	11000403 	add	w3, w0, #0x1
   87790:	aa1303e0 	mov	x0, x19
   87794:	12001063 	and	w3, w3, #0x1f
   87798:	97ffea84 	bl	821a8 <sprintf>
   8779c:	8b204273 	add	x19, x19, w0, uxtw
   877a0:	17fffcb8 	b	86a80 <disasm+0x2380>
				case disasm_arg_Rt1: str+=sprintf(str,t+1==31?"%czr":"%c%d", (s?'x':'w'), (t+1)&0x1f); break;
   877a4:	b940f3e2 	ldr	w2, [sp, #240]
   877a8:	11000743 	add	w3, w26, #0x1
   877ac:	f940ffe1 	ldr	x1, [sp, #504]
   877b0:	aa1303e0 	mov	x0, x19
   877b4:	12001063 	and	w3, w3, #0x1f
   877b8:	97ffea7c 	bl	821a8 <sprintf>
   877bc:	8b204273 	add	x19, x19, w0, uxtw
   877c0:	17fffcb0 	b	86a80 <disasm+0x2380>
				case disasm_arg_Wd: str+=sprintf(str,d==31?"wzr":"w%d", d); break;
   877c4:	b9408be2 	ldr	w2, [sp, #136]
   877c8:	aa1303e0 	mov	x0, x19
   877cc:	f94103e1 	ldr	x1, [sp, #512]
   877d0:	97ffea76 	bl	821a8 <sprintf>
   877d4:	8b204273 	add	x19, x19, w0, uxtw
   877d8:	17fffcaa 	b	86a80 <disasm+0x2380>
				case disasm_arg_Wt: str+=sprintf(str,t==31?"wzr":"w%d", t); break;
   877dc:	f94107e1 	ldr	x1, [sp, #520]
   877e0:	aa1303e0 	mov	x0, x19
   877e4:	2a1a03e2 	mov	w2, w26
   877e8:	97ffea70 	bl	821a8 <sprintf>
   877ec:	8b204273 	add	x19, x19, w0, uxtw
   877f0:	17fffca4 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPt: str+=sprintf(str,"%c%d", z==2?'q':(z==1?'d':'s'), t); break;
   877f4:	71000aff 	cmp	w23, #0x2
   877f8:	52800e22 	mov	w2, #0x71                  	// #113
   877fc:	540000a0 	b.eq	87810 <disasm+0x3110>  // b.none
   87800:	710006ff 	cmp	w23, #0x1
   87804:	52800c82 	mov	w2, #0x64                  	// #100
   87808:	52800e60 	mov	w0, #0x73                  	// #115
   8780c:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   87810:	f94057e1 	ldr	x1, [sp, #168]
   87814:	aa1303e0 	mov	x0, x19
   87818:	2a1a03e3 	mov	w3, w26
   8781c:	97ffea63 	bl	821a8 <sprintf>
   87820:	8b204273 	add	x19, x19, w0, uxtw
   87824:	17fffc97 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87828:	b9417be1 	ldr	w1, [sp, #376]
   8782c:	f9405be4 	ldr	x4, [sp, #176]
   87830:	91344080 	add	x0, x4, #0xd10
   87834:	97fff10f 	bl	83c70 <disasm_str.part.0>
   87838:	aa0003e3 	mov	x3, x0
   8783c:	12000341 	and	w1, w26, #0x1
   87840:	91348080 	add	x0, x4, #0xd20
   87844:	f9015fe3 	str	x3, [sp, #696]
   87848:	97fff10a 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_prf_op: str+=sprintf(str,"%s", "%s L%d %s", disasm_str(prf_typ,(t>>3)&3), ((t>>1)&3)+1, disasm_str(prf_pol,t&1)); break;
   8784c:	aa0003e5 	mov	x5, x0
   87850:	b9417fe4 	ldr	w4, [sp, #380]
   87854:	aa1303e0 	mov	x0, x19
   87858:	f9415fe3 	ldr	x3, [sp, #696]
   8785c:	f0000062 	adrp	x2, 96000 <sd_init+0x3ce8>
   87860:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87864:	91040042 	add	x2, x2, #0x100
   87868:	913c6021 	add	x1, x1, #0xf18
   8786c:	97ffea4f 	bl	821a8 <sprintf>
   87870:	8b204273 	add	x19, x19, w0, uxtw
   87874:	17fffc83 	b	86a80 <disasm+0x2380>
				case disasm_arg_is4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<(2+s)); break;
   87878:	b94183e2 	ldr	w2, [sp, #384]
   8787c:	aa1303e0 	mov	x0, x19
   87880:	f9407fe1 	ldr	x1, [sp, #248]
   87884:	97ffea49 	bl	821a8 <sprintf>
   87888:	8b204273 	add	x19, x19, w0, uxtw
   8788c:	17fffc7d 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPm: str+=sprintf(str,"%c%d", z==2?'q':(z==1?'d':'s'), m); break;
   87890:	71000aff 	cmp	w23, #0x2
   87894:	52800e22 	mov	w2, #0x71                  	// #113
   87898:	540000a0 	b.eq	878ac <disasm+0x31ac>  // b.none
   8789c:	710006ff 	cmp	w23, #0x1
   878a0:	52800c82 	mov	w2, #0x64                  	// #100
   878a4:	52800e60 	mov	w0, #0x73                  	// #115
   878a8:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   878ac:	b9407fe3 	ldr	w3, [sp, #124]
   878b0:	aa1303e0 	mov	x0, x19
   878b4:	f94057e1 	ldr	x1, [sp, #168]
   878b8:	97ffea3c 	bl	821a8 <sprintf>
   878bc:	8b204273 	add	x19, x19, w0, uxtw
   878c0:	17fffc70 	b	86a80 <disasm+0x2380>
				case disasm_arg_iz4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<(2+z)); break;
   878c4:	b94187e2 	ldr	w2, [sp, #388]
   878c8:	aa1303e0 	mov	x0, x19
   878cc:	f9407fe1 	ldr	x1, [sp, #248]
   878d0:	97ffea36 	bl	821a8 <sprintf>
   878d4:	8b204273 	add	x19, x19, w0, uxtw
   878d8:	17fffc6a 	b	86a80 <disasm+0x2380>
				case disasm_arg_im4_opt: str+=sprintf(str,!i?"":"#0x%x", i<<2); break;
   878dc:	b940c3e2 	ldr	w2, [sp, #192]
   878e0:	aa1303e0 	mov	x0, x19
   878e4:	f9407fe1 	ldr	x1, [sp, #248]
   878e8:	97ffea30 	bl	821a8 <sprintf>
   878ec:	8b204273 	add	x19, x19, w0, uxtw
   878f0:	17fffc64 	b	86a80 <disasm+0x2380>
				case disasm_arg_nRt: str+=sprintf(str,t==31?"%czr":"%c%d", (s?'w':'x'), t); break;
   878f4:	b9421be2 	ldr	w2, [sp, #536]
   878f8:	aa1303e0 	mov	x0, x19
   878fc:	f9409be1 	ldr	x1, [sp, #304]
   87900:	2a1a03e3 	mov	w3, w26
   87904:	97ffea29 	bl	821a8 <sprintf>
   87908:	8b204273 	add	x19, x19, w0, uxtw
   8790c:	17fffc5d 	b	86a80 <disasm+0x2380>
				case disasm_arg_j_opt: str+=sprintf(str,!j?"":"#0x%x", j); break;
   87910:	f9410be1 	ldr	x1, [sp, #528]
   87914:	aa1303e0 	mov	x0, x19
   87918:	2a1503e2 	mov	w2, w21
   8791c:	97ffea23 	bl	821a8 <sprintf>
   87920:	8b204273 	add	x19, x19, w0, uxtw
   87924:	17fffc57 	b	86a80 <disasm+0x2380>
				case disasm_arg_Rom: str+=sprintf(str,m==31?"%czr":"%c%d", (o&1?'x':'w'), m); break;
   87928:	b9407fe3 	ldr	w3, [sp, #124]
   8792c:	aa1303e0 	mov	x0, x19
   87930:	b9421fe2 	ldr	w2, [sp, #540]
   87934:	f9408be1 	ldr	x1, [sp, #272]
   87938:	97ffea1c 	bl	821a8 <sprintf>
   8793c:	8b204273 	add	x19, x19, w0, uxtw
   87940:	17fffc50 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87944:	b94083e1 	ldr	w1, [sp, #128]
   87948:	f9405be0 	ldr	x0, [sp, #176]
   8794c:	9134c000 	add	x0, x0, #0xd30
   87950:	97fff0c8 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_amountj: str+=sprintf(str,"%s", "%s #%d", disasm_str(extend64,o), j); break;
   87954:	f94077e2 	ldr	x2, [sp, #232]
   87958:	aa0003e3 	mov	x3, x0
   8795c:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87960:	aa1303e0 	mov	x0, x19
   87964:	913c6021 	add	x1, x1, #0xf18
   87968:	2a1503e4 	mov	w4, w21
   8796c:	97ffea0f 	bl	821a8 <sprintf>
   87970:	8b204273 	add	x19, x19, w0, uxtw
   87974:	17fffc43 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87978:	b94083e1 	ldr	w1, [sp, #128]
   8797c:	f9405be0 	ldr	x0, [sp, #176]
   87980:	9134c000 	add	x0, x0, #0xd30
   87984:	97fff0bb 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_amountz: str+=sprintf(str,"%s", "%s #%d", disasm_str(extend64,o), j?(s?4:z):0); break;
   87988:	52800004 	mov	w4, #0x0                   	// #0
   8798c:	340000b5 	cbz	w21, 879a0 <disasm+0x32a0>
   87990:	b940e7e1 	ldr	w1, [sp, #228]
   87994:	52800084 	mov	w4, #0x4                   	// #4
   87998:	7100003f 	cmp	w1, #0x0
   8799c:	1a8402e4 	csel	w4, w23, w4, eq  // eq = none
   879a0:	f94077e2 	ldr	x2, [sp, #232]
   879a4:	aa0003e3 	mov	x3, x0
   879a8:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   879ac:	aa1303e0 	mov	x0, x19
   879b0:	913c6021 	add	x1, x1, #0xf18
   879b4:	97ffe9fd 	bl	821a8 <sprintf>
   879b8:	8b204273 	add	x19, x19, w0, uxtw
   879bc:	17fffc31 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   879c0:	b94083e1 	ldr	w1, [sp, #128]
   879c4:	f9405be0 	ldr	x0, [sp, #176]
   879c8:	9134c000 	add	x0, x0, #0xd30
   879cc:	97fff0a9 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_amountjs: str+=sprintf(str,"%s", "%s #%d", disasm_str(extend64,o), j?(s?3:2):0); break;
   879d0:	f94077e2 	ldr	x2, [sp, #232]
   879d4:	710002bf 	cmp	w21, #0x0
   879d8:	b940e7e1 	ldr	w1, [sp, #228]
   879dc:	aa0003e3 	mov	x3, x0
   879e0:	aa1303e0 	mov	x0, x19
   879e4:	11000824 	add	w4, w1, #0x2
   879e8:	52800001 	mov	w1, #0x0                   	// #0
   879ec:	1a811084 	csel	w4, w4, w1, ne  // ne = any
   879f0:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   879f4:	913c6021 	add	x1, x1, #0xf18
   879f8:	97ffe9ec 	bl	821a8 <sprintf>
   879fc:	8b204273 	add	x19, x19, w0, uxtw
   87a00:	17fffc20 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87a04:	b94083e1 	ldr	w1, [sp, #128]
   87a08:	f9405be0 	ldr	x0, [sp, #176]
   87a0c:	9134c000 	add	x0, x0, #0xd30
   87a10:	97fff098 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_amountj2: str+=sprintf(str,"%s", "%s #%d", disasm_str(extend64,o), j?2:0); break;
   87a14:	b94223e4 	ldr	w4, [sp, #544]
   87a18:	aa0003e3 	mov	x3, x0
   87a1c:	f94077e2 	ldr	x2, [sp, #232]
   87a20:	aa1303e0 	mov	x0, x19
   87a24:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87a28:	913c6021 	add	x1, x1, #0xf18
   87a2c:	97ffe9df 	bl	821a8 <sprintf>
   87a30:	8b204273 	add	x19, x19, w0, uxtw
   87a34:	17fffc13 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87a38:	b94083e1 	ldr	w1, [sp, #128]
   87a3c:	f9405be0 	ldr	x0, [sp, #176]
   87a40:	9134c000 	add	x0, x0, #0xd30
   87a44:	97fff08b 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_amountj3: str+=sprintf(str,"%s", "%s #%d", disasm_str(extend64,o), j?3:0); break;
   87a48:	b94227e4 	ldr	w4, [sp, #548]
   87a4c:	aa0003e3 	mov	x3, x0
   87a50:	f94077e2 	ldr	x2, [sp, #232]
   87a54:	aa1303e0 	mov	x0, x19
   87a58:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87a5c:	913c6021 	add	x1, x1, #0xf18
   87a60:	97ffe9d2 	bl	821a8 <sprintf>
   87a64:	8b204273 	add	x19, x19, w0, uxtw
   87a68:	17fffc06 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87a6c:	f9405be0 	ldr	x0, [sp, #176]
   87a70:	2a1703e1 	mov	w1, w23
   87a74:	91356000 	add	x0, x0, #0xd58
   87a78:	97fff07e 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_shiftj_opt: str+=sprintf(str,"%s", !j?"":"%s #%d", disasm_str(shift,z), j); break;
   87a7c:	f94117e2 	ldr	x2, [sp, #552]
   87a80:	aa0003e3 	mov	x3, x0
   87a84:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87a88:	aa1303e0 	mov	x0, x19
   87a8c:	913c6021 	add	x1, x1, #0xf18
   87a90:	2a1503e4 	mov	w4, w21
   87a94:	97ffe9c5 	bl	821a8 <sprintf>
   87a98:	8b204273 	add	x19, x19, w0, uxtw
   87a9c:	17fffbf9 	b	86a80 <disasm+0x2380>
				case disasm_arg_Rsom: str+=sprintf(str,m==31?"%czr":"%c%d", (s&&(o&3)==3?'x':'w'), m); break;
   87aa0:	b940e7e0 	ldr	w0, [sp, #228]
   87aa4:	52800ee2 	mov	w2, #0x77                  	// #119
   87aa8:	340000c0 	cbz	w0, 87ac0 <disasm+0x33c0>
   87aac:	b94083e0 	ldr	w0, [sp, #128]
   87ab0:	12000400 	and	w0, w0, #0x3
   87ab4:	71000c1f 	cmp	w0, #0x3
   87ab8:	1a9f17e2 	cset	w2, eq  // eq = none
   87abc:	1101dc42 	add	w2, w2, #0x77
   87ac0:	b9407fe3 	ldr	w3, [sp, #124]
   87ac4:	aa1303e0 	mov	x0, x19
   87ac8:	f9408be1 	ldr	x1, [sp, #272]
   87acc:	97ffe9b7 	bl	821a8 <sprintf>
   87ad0:	8b204273 	add	x19, x19, w0, uxtw
   87ad4:	17fffbeb 	b	86a80 <disasm+0x2380>
				case disasm_arg_exts: str+=sprintf(str,"%s", "%s #%d", s?disasm_str(extend64,o):disasm_str(extend32,o), j); break;
   87ad8:	b940e7e0 	ldr	w0, [sp, #228]
   87adc:	b94083e1 	ldr	w1, [sp, #128]
   87ae0:	34008bc0 	cbz	w0, 88c58 <disasm+0x4558>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87ae4:	f9405be0 	ldr	x0, [sp, #176]
   87ae8:	9134c000 	add	x0, x0, #0xd30
   87aec:	97fff061 	bl	83c70 <disasm_str.part.0>
   87af0:	aa0003e3 	mov	x3, x0
				case disasm_arg_exts: str+=sprintf(str,"%s", "%s #%d", s?disasm_str(extend64,o):disasm_str(extend32,o), j); break;
   87af4:	f94077e2 	ldr	x2, [sp, #232]
   87af8:	aa1303e0 	mov	x0, x19
   87afc:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87b00:	2a1503e4 	mov	w4, w21
   87b04:	913c6021 	add	x1, x1, #0xf18
   87b08:	97ffe9a8 	bl	821a8 <sprintf>
   87b0c:	8b204273 	add	x19, x19, w0, uxtw
   87b10:	17fffbdc 	b	86a80 <disasm+0x2380>
				case disasm_arg_Wn: str+=sprintf(str,n==31?"wzr":"w%d", n); break;
   87b14:	f9411be1 	ldr	x1, [sp, #560]
   87b18:	aa1303e0 	mov	x0, x19
   87b1c:	2a1903e2 	mov	w2, w25
   87b20:	97ffe9a2 	bl	821a8 <sprintf>
   87b24:	8b204273 	add	x19, x19, w0, uxtw
   87b28:	17fffbd6 	b	86a80 <disasm+0x2380>
				case disasm_arg_Xd: str+=sprintf(str,d==31?"xzr":"x%d", d); break;
   87b2c:	b9408be2 	ldr	w2, [sp, #136]
   87b30:	aa1303e0 	mov	x0, x19
   87b34:	f94123e1 	ldr	x1, [sp, #576]
   87b38:	97ffe99c 	bl	821a8 <sprintf>
   87b3c:	8b204273 	add	x19, x19, w0, uxtw
   87b40:	17fffbd0 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vt16b: str+=sprintf(str,"V%d.16b", t); break;
   87b44:	aa1303e0 	mov	x0, x19
   87b48:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87b4c:	2a1a03e2 	mov	w2, w26
   87b50:	91044021 	add	x1, x1, #0x110
   87b54:	97ffe995 	bl	821a8 <sprintf>
   87b58:	8b204273 	add	x19, x19, w0, uxtw
   87b5c:	17fffbc9 	b	86a80 <disasm+0x2380>
				case disasm_arg_Wm: str+=sprintf(str,m==31?"wzr":"w%d", m); break;
   87b60:	b9407fe2 	ldr	w2, [sp, #124]
   87b64:	aa1303e0 	mov	x0, x19
   87b68:	f9411fe1 	ldr	x1, [sp, #568]
   87b6c:	97ffe98f 	bl	821a8 <sprintf>
   87b70:	8b204273 	add	x19, x19, w0, uxtw
   87b74:	17fffbc3 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vn16b: str+=sprintf(str,"V%d.16b", n); break;
   87b78:	aa1303e0 	mov	x0, x19
   87b7c:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87b80:	2a1903e2 	mov	w2, w25
   87b84:	91044021 	add	x1, x1, #0x110
   87b88:	97ffe988 	bl	821a8 <sprintf>
   87b8c:	8b204273 	add	x19, x19, w0, uxtw
   87b90:	17fffbbc 	b	86a80 <disasm+0x2380>
				case disasm_arg_Qt: str+=sprintf(str,"q%d", t); break;
   87b94:	aa1303e0 	mov	x0, x19
   87b98:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87b9c:	2a1a03e2 	mov	w2, w26
   87ba0:	91046021 	add	x1, x1, #0x118
   87ba4:	97ffe981 	bl	821a8 <sprintf>
   87ba8:	8b204273 	add	x19, x19, w0, uxtw
   87bac:	17fffbb5 	b	86a80 <disasm+0x2380>
				case disasm_arg_Sn: str+=sprintf(str,"s%d", n); break;
   87bb0:	aa1303e0 	mov	x0, x19
   87bb4:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87bb8:	2a1903e2 	mov	w2, w25
   87bbc:	91048021 	add	x1, x1, #0x120
   87bc0:	97ffe97a 	bl	821a8 <sprintf>
   87bc4:	8b204273 	add	x19, x19, w0, uxtw
   87bc8:	17fffbae 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vm4s: str+=sprintf(str,"V%d.4s", m); break;
   87bcc:	b9407fe2 	ldr	w2, [sp, #124]
   87bd0:	aa1303e0 	mov	x0, x19
   87bd4:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87bd8:	9104a021 	add	x1, x1, #0x128
   87bdc:	97ffe973 	bl	821a8 <sprintf>
   87be0:	8b204273 	add	x19, x19, w0, uxtw
   87be4:	17fffba7 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vt4s: str+=sprintf(str,"V%d.4s", t); break;
   87be8:	aa1303e0 	mov	x0, x19
   87bec:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87bf0:	2a1a03e2 	mov	w2, w26
   87bf4:	9104a021 	add	x1, x1, #0x128
   87bf8:	97ffe96c 	bl	821a8 <sprintf>
   87bfc:	8b204273 	add	x19, x19, w0, uxtw
   87c00:	17fffba0 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vn4s: str+=sprintf(str,"V%d.4s", n); break;
   87c04:	aa1303e0 	mov	x0, x19
   87c08:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87c0c:	2a1903e2 	mov	w2, w25
   87c10:	9104a021 	add	x1, x1, #0x128
   87c14:	97ffe965 	bl	821a8 <sprintf>
   87c18:	8b204273 	add	x19, x19, w0, uxtw
   87c1c:	17fffb99 	b	86a80 <disasm+0x2380>
				case disasm_arg_Qn: str+=sprintf(str,"q%d", n); break;
   87c20:	aa1303e0 	mov	x0, x19
   87c24:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87c28:	2a1903e2 	mov	w2, w25
   87c2c:	91046021 	add	x1, x1, #0x118
   87c30:	97ffe95e 	bl	821a8 <sprintf>
   87c34:	8b204273 	add	x19, x19, w0, uxtw
   87c38:	17fffb92 	b	86a80 <disasm+0x2380>
				case disasm_arg_St: str+=sprintf(str,"s%d", t); break;
   87c3c:	aa1303e0 	mov	x0, x19
   87c40:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87c44:	2a1a03e2 	mov	w2, w26
   87c48:	91048021 	add	x1, x1, #0x120
   87c4c:	97ffe957 	bl	821a8 <sprintf>
   87c50:	8b204273 	add	x19, x19, w0, uxtw
   87c54:	17fffb8b 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPjt: str+=sprintf(str,"%c%d", j&1?'b':((j&3)==2?'h':((j&7)==4?'s':'d')), t); break;
   87c58:	b940f7e0 	ldr	w0, [sp, #244]
   87c5c:	52800c42 	mov	w2, #0x62                  	// #98
   87c60:	35000140 	cbnz	w0, 87c88 <disasm+0x3588>
   87c64:	120006a0 	and	w0, w21, #0x3
   87c68:	52800d02 	mov	w2, #0x68                  	// #104
   87c6c:	7100081f 	cmp	w0, #0x2
   87c70:	540000c0 	b.eq	87c88 <disasm+0x3588>  // b.none
   87c74:	12000aa0 	and	w0, w21, #0x7
   87c78:	52800e62 	mov	w2, #0x73                  	// #115
   87c7c:	7100101f 	cmp	w0, #0x4
   87c80:	52800c80 	mov	w0, #0x64                  	// #100
   87c84:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   87c88:	f94057e1 	ldr	x1, [sp, #168]
   87c8c:	aa1303e0 	mov	x0, x19
   87c90:	2a1a03e3 	mov	w3, w26
   87c94:	97ffe945 	bl	821a8 <sprintf>
   87c98:	8b204273 	add	x19, x19, w0, uxtw
   87c9c:	17fffb79 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vnj: str+=sprintf(str,"V%d.%c", n, j&1?'b':((j&3)==2?'h':((j&7)==4?'s':'d'))); break;
   87ca0:	b940f7e0 	ldr	w0, [sp, #244]
   87ca4:	52800c43 	mov	w3, #0x62                  	// #98
   87ca8:	35000140 	cbnz	w0, 87cd0 <disasm+0x35d0>
   87cac:	120006a0 	and	w0, w21, #0x3
   87cb0:	52800d03 	mov	w3, #0x68                  	// #104
   87cb4:	7100081f 	cmp	w0, #0x2
   87cb8:	540000c0 	b.eq	87cd0 <disasm+0x35d0>  // b.none
   87cbc:	12000aa0 	and	w0, w21, #0x7
   87cc0:	52800e63 	mov	w3, #0x73                  	// #115
   87cc4:	7100101f 	cmp	w0, #0x4
   87cc8:	52800c80 	mov	w0, #0x64                  	// #100
   87ccc:	1a800063 	csel	w3, w3, w0, eq  // eq = none
   87cd0:	aa1303e0 	mov	x0, x19
   87cd4:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87cd8:	2a1903e2 	mov	w2, w25
   87cdc:	9104c021 	add	x1, x1, #0x130
   87ce0:	97ffe932 	bl	821a8 <sprintf>
   87ce4:	8b204273 	add	x19, x19, w0, uxtw
   87ce8:	17fffb66 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPidx: str+=sprintf(str,"%d", j>>(j&1?1:((j&3)==2?2:((j&7)==4?3:4))), t); break;
   87cec:	b940f7e0 	ldr	w0, [sp, #244]
   87cf0:	b94197e2 	ldr	w2, [sp, #404]
   87cf4:	35000140 	cbnz	w0, 87d1c <disasm+0x361c>
   87cf8:	120006a0 	and	w0, w21, #0x3
   87cfc:	b942a7e2 	ldr	w2, [sp, #676]
   87d00:	7100081f 	cmp	w0, #0x2
   87d04:	540000c0 	b.eq	87d1c <disasm+0x361c>  // b.none
   87d08:	12000aa0 	and	w0, w21, #0x7
   87d0c:	b942afe1 	ldr	w1, [sp, #684]
   87d10:	7100101f 	cmp	w0, #0x4
   87d14:	b942abe0 	ldr	w0, [sp, #680]
   87d18:	1a810002 	csel	w2, w0, w1, eq  // eq = none
   87d1c:	aa1303e0 	mov	x0, x19
   87d20:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87d24:	2a1a03e3 	mov	w3, w26
   87d28:	9104e021 	add	x1, x1, #0x138
   87d2c:	97ffe91f 	bl	821a8 <sprintf>
   87d30:	8b204273 	add	x19, x19, w0, uxtw
   87d34:	17fffb53 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vtjq: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,(j&1?0:((j&3)==2?2:(j&7)==4?4:6))+q)); break;
   87d38:	b940f7e0 	ldr	w0, [sp, #244]
   87d3c:	2a1803e1 	mov	w1, w24
   87d40:	35000140 	cbnz	w0, 87d68 <disasm+0x3668>
   87d44:	120006a0 	and	w0, w21, #0x3
   87d48:	11000b01 	add	w1, w24, #0x2
   87d4c:	7100081f 	cmp	w0, #0x2
   87d50:	540000c0 	b.eq	87d68 <disasm+0x3668>  // b.none
   87d54:	12000aa1 	and	w1, w21, #0x7
   87d58:	11001300 	add	w0, w24, #0x4
   87d5c:	7100103f 	cmp	w1, #0x4
   87d60:	11001b01 	add	w1, w24, #0x6
   87d64:	1a801021 	csel	w1, w1, w0, ne  // ne = any
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87d68:	f9405be0 	ldr	x0, [sp, #176]
   87d6c:	9133e000 	add	x0, x0, #0xcf8
   87d70:	97ffefc0 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_Vtjq: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,(j&1?0:((j&3)==2?2:(j&7)==4?4:6))+q)); break;
   87d74:	d0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   87d78:	aa0003e4 	mov	x4, x0
   87d7c:	913cc042 	add	x2, x2, #0xf30
   87d80:	aa1303e0 	mov	x0, x19
   87d84:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87d88:	2a1a03e3 	mov	w3, w26
   87d8c:	913c6021 	add	x1, x1, #0xf18
   87d90:	97ffe906 	bl	821a8 <sprintf>
   87d94:	8b204273 	add	x19, x19, w0, uxtw
   87d98:	17fffb3a 	b	86a80 <disasm+0x2380>
				case disasm_arg_Ht: str+=sprintf(str,"h%d", t); break;
   87d9c:	aa1303e0 	mov	x0, x19
   87da0:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87da4:	2a1a03e2 	mov	w2, w26
   87da8:	91050021 	add	x1, x1, #0x140
   87dac:	97ffe8ff 	bl	821a8 <sprintf>
   87db0:	8b204273 	add	x19, x19, w0, uxtw
   87db4:	17fffb33 	b	86a80 <disasm+0x2380>
				case disasm_arg_Hn: str+=sprintf(str,"h%d", n); break;
   87db8:	aa1303e0 	mov	x0, x19
   87dbc:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87dc0:	2a1903e2 	mov	w2, w25
   87dc4:	91050021 	add	x1, x1, #0x140
   87dc8:	97ffe8f8 	bl	821a8 <sprintf>
   87dcc:	8b204273 	add	x19, x19, w0, uxtw
   87dd0:	17fffb2c 	b	86a80 <disasm+0x2380>
				case disasm_arg_Hm: str+=sprintf(str,"h%d", m); break;
   87dd4:	b9407fe2 	ldr	w2, [sp, #124]
   87dd8:	aa1303e0 	mov	x0, x19
   87ddc:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87de0:	91050021 	add	x1, x1, #0x140
   87de4:	97ffe8f1 	bl	821a8 <sprintf>
   87de8:	8b204273 	add	x19, x19, w0, uxtw
   87dec:	17fffb25 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPn: str+=sprintf(str,"%c%d", z==2?'q':(z==1?'d':'s'), n); break;
   87df0:	71000aff 	cmp	w23, #0x2
   87df4:	52800e22 	mov	w2, #0x71                  	// #113
   87df8:	540000a0 	b.eq	87e0c <disasm+0x370c>  // b.none
   87dfc:	710006ff 	cmp	w23, #0x1
   87e00:	52800c82 	mov	w2, #0x64                  	// #100
   87e04:	52800e60 	mov	w0, #0x73                  	// #115
   87e08:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   87e0c:	f94057e1 	ldr	x1, [sp, #168]
   87e10:	aa1303e0 	mov	x0, x19
   87e14:	2a1903e3 	mov	w3, w25
   87e18:	97ffe8e4 	bl	821a8 <sprintf>
   87e1c:	8b204273 	add	x19, x19, w0, uxtw
   87e20:	17fffb18 	b	86a80 <disasm+0x2380>
				case disasm_arg_VtH1: str+=sprintf(str,"V%d.%dh", t, q?8:4); break;
   87e24:	b9411be3 	ldr	w3, [sp, #280]
   87e28:	aa1303e0 	mov	x0, x19
   87e2c:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87e30:	2a1a03e2 	mov	w2, w26
   87e34:	91052021 	add	x1, x1, #0x148
   87e38:	97ffe8dc 	bl	821a8 <sprintf>
   87e3c:	8b204273 	add	x19, x19, w0, uxtw
   87e40:	17fffb10 	b	86a80 <disasm+0x2380>
				case disasm_arg_VnH1: str+=sprintf(str,"V%d.%dh", n, q?8:4); break;
   87e44:	b9411be3 	ldr	w3, [sp, #280]
   87e48:	aa1303e0 	mov	x0, x19
   87e4c:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87e50:	2a1903e2 	mov	w2, w25
   87e54:	91052021 	add	x1, x1, #0x148
   87e58:	97ffe8d4 	bl	821a8 <sprintf>
   87e5c:	8b204273 	add	x19, x19, w0, uxtw
   87e60:	17fffb08 	b	86a80 <disasm+0x2380>
				case disasm_arg_VmH1: str+=sprintf(str,"V%d.%dh", m, q?8:4); break;
   87e64:	b9407fe2 	ldr	w2, [sp, #124]
   87e68:	aa1303e0 	mov	x0, x19
   87e6c:	b9411be3 	ldr	w3, [sp, #280]
   87e70:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87e74:	91052021 	add	x1, x1, #0x148
   87e78:	97ffe8cc 	bl	821a8 <sprintf>
   87e7c:	8b204273 	add	x19, x19, w0, uxtw
   87e80:	17fffb00 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87e84:	b9410be1 	ldr	w1, [sp, #264]
   87e88:	f9405be0 	ldr	x0, [sp, #176]
   87e8c:	9133e000 	add	x0, x0, #0xcf8
   87e90:	97ffef78 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_Vtzq: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,4+(z*2)+q)); break;
   87e94:	d0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   87e98:	aa0003e4 	mov	x4, x0
   87e9c:	913cc042 	add	x2, x2, #0xf30
   87ea0:	aa1303e0 	mov	x0, x19
   87ea4:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87ea8:	2a1a03e3 	mov	w3, w26
   87eac:	913c6021 	add	x1, x1, #0xf18
   87eb0:	97ffe8be 	bl	821a8 <sprintf>
   87eb4:	8b204273 	add	x19, x19, w0, uxtw
   87eb8:	17fffaf2 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87ebc:	b9410be1 	ldr	w1, [sp, #264]
   87ec0:	f9405be0 	ldr	x0, [sp, #176]
   87ec4:	9133e000 	add	x0, x0, #0xcf8
   87ec8:	97ffef6a 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_Vnzq: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,4+(z*2)+q)); break;
   87ecc:	d0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   87ed0:	aa0003e4 	mov	x4, x0
   87ed4:	913cc042 	add	x2, x2, #0xf30
   87ed8:	aa1303e0 	mov	x0, x19
   87edc:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87ee0:	2a1903e3 	mov	w3, w25
   87ee4:	913c6021 	add	x1, x1, #0xf18
   87ee8:	97ffe8b0 	bl	821a8 <sprintf>
   87eec:	8b204273 	add	x19, x19, w0, uxtw
   87ef0:	17fffae4 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87ef4:	b9410be1 	ldr	w1, [sp, #264]
   87ef8:	f9405be0 	ldr	x0, [sp, #176]
   87efc:	9133e000 	add	x0, x0, #0xcf8
   87f00:	97ffef5c 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_Vmzq: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,4+(z*2)+q)); break;
   87f04:	b9407fe3 	ldr	w3, [sp, #124]
   87f08:	aa0003e4 	mov	x4, x0
   87f0c:	d0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   87f10:	aa1303e0 	mov	x0, x19
   87f14:	913cc042 	add	x2, x2, #0xf30
   87f18:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87f1c:	913c6021 	add	x1, x1, #0xf18
   87f20:	97ffe8a2 	bl	821a8 <sprintf>
   87f24:	8b204273 	add	x19, x19, w0, uxtw
   87f28:	17fffad6 	b	86a80 <disasm+0x2380>
				case disasm_arg_simd0: str+=sprintf(str,"#0.0"); break;
   87f2c:	aa1303e0 	mov	x0, x19
   87f30:	f0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   87f34:	91054021 	add	x1, x1, #0x150
   87f38:	97ffe89c 	bl	821a8 <sprintf>
   87f3c:	8b204273 	add	x19, x19, w0, uxtw
   87f40:	17fffad0 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPz2t: str+=sprintf(str,"%c%d", z==1?'h':'s', t); break;
   87f44:	b94107e2 	ldr	w2, [sp, #260]
   87f48:	aa1303e0 	mov	x0, x19
   87f4c:	f94057e1 	ldr	x1, [sp, #168]
   87f50:	2a1a03e3 	mov	w3, w26
   87f54:	97ffe895 	bl	821a8 <sprintf>
   87f58:	8b204273 	add	x19, x19, w0, uxtw
   87f5c:	17fffac9 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPz2n: str+=sprintf(str,"%c%d", z==1?'h':'s', n); break;
   87f60:	b94107e2 	ldr	w2, [sp, #260]
   87f64:	aa1303e0 	mov	x0, x19
   87f68:	f94057e1 	ldr	x1, [sp, #168]
   87f6c:	2a1903e3 	mov	w3, w25
   87f70:	97ffe88e 	bl	821a8 <sprintf>
   87f74:	8b204273 	add	x19, x19, w0, uxtw
   87f78:	17fffac2 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPz2m: str+=sprintf(str,"%c%d", z==1?'h':'s', m); break;
   87f7c:	b9407fe3 	ldr	w3, [sp, #124]
   87f80:	aa1303e0 	mov	x0, x19
   87f84:	b94107e2 	ldr	w2, [sp, #260]
   87f88:	f94057e1 	ldr	x1, [sp, #168]
   87f8c:	97ffe887 	bl	821a8 <sprintf>
   87f90:	8b204273 	add	x19, x19, w0, uxtw
   87f94:	17fffabb 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87f98:	b940e3e1 	ldr	w1, [sp, #224]
   87f9c:	f9405be0 	ldr	x0, [sp, #176]
   87fa0:	9133e000 	add	x0, x0, #0xcf8
   87fa4:	97ffef33 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_VnT: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,(z<<1)|q)); break;
   87fa8:	d0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   87fac:	aa0003e4 	mov	x4, x0
   87fb0:	913cc042 	add	x2, x2, #0xf30
   87fb4:	aa1303e0 	mov	x0, x19
   87fb8:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87fbc:	2a1903e3 	mov	w3, w25
   87fc0:	913c6021 	add	x1, x1, #0xf18
   87fc4:	97ffe879 	bl	821a8 <sprintf>
   87fc8:	8b204273 	add	x19, x19, w0, uxtw
   87fcc:	17fffaad 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   87fd0:	b940e3e1 	ldr	w1, [sp, #224]
   87fd4:	f9405be0 	ldr	x0, [sp, #176]
   87fd8:	9133e000 	add	x0, x0, #0xcf8
   87fdc:	97ffef25 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_VmT: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,(z<<1)|q)); break;
   87fe0:	b9407fe3 	ldr	w3, [sp, #124]
   87fe4:	aa0003e4 	mov	x4, x0
   87fe8:	d0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   87fec:	aa1303e0 	mov	x0, x19
   87ff0:	913cc042 	add	x2, x2, #0xf30
   87ff4:	d0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   87ff8:	913c6021 	add	x1, x1, #0xf18
   87ffc:	97ffe86b 	bl	821a8 <sprintf>
   88000:	8b204273 	add	x19, x19, w0, uxtw
   88004:	17fffa9f 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPz3t: str+=sprintf(str,"%c%d", z==3?'d':(z==2?'s':(z==1?'h':'b')), t); break;
   88008:	71000eff 	cmp	w23, #0x3
   8800c:	52800c82 	mov	w2, #0x64                  	// #100
   88010:	54000100 	b.eq	88030 <disasm+0x3930>  // b.none
   88014:	71000aff 	cmp	w23, #0x2
   88018:	52800e62 	mov	w2, #0x73                  	// #115
   8801c:	540000a0 	b.eq	88030 <disasm+0x3930>  // b.none
   88020:	710006ff 	cmp	w23, #0x1
   88024:	52800d02 	mov	w2, #0x68                  	// #104
   88028:	52800c40 	mov	w0, #0x62                  	// #98
   8802c:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   88030:	f94057e1 	ldr	x1, [sp, #168]
   88034:	aa1303e0 	mov	x0, x19
   88038:	2a1a03e3 	mov	w3, w26
   8803c:	97ffe85b 	bl	821a8 <sprintf>
   88040:	8b204273 	add	x19, x19, w0, uxtw
   88044:	17fffa8f 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPz3n: str+=sprintf(str,"%c%d", z==3?'d':(z==2?'s':(z==1?'h':'b')), n); break;
   88048:	71000eff 	cmp	w23, #0x3
   8804c:	52800c82 	mov	w2, #0x64                  	// #100
   88050:	54000100 	b.eq	88070 <disasm+0x3970>  // b.none
   88054:	71000aff 	cmp	w23, #0x2
   88058:	52800e62 	mov	w2, #0x73                  	// #115
   8805c:	540000a0 	b.eq	88070 <disasm+0x3970>  // b.none
   88060:	710006ff 	cmp	w23, #0x1
   88064:	52800d02 	mov	w2, #0x68                  	// #104
   88068:	52800c40 	mov	w0, #0x62                  	// #98
   8806c:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   88070:	f94057e1 	ldr	x1, [sp, #168]
   88074:	aa1303e0 	mov	x0, x19
   88078:	2a1903e3 	mov	w3, w25
   8807c:	97ffe84b 	bl	821a8 <sprintf>
   88080:	8b204273 	add	x19, x19, w0, uxtw
   88084:	17fffa7f 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPz4n: str+=sprintf(str,"%c%d", z==2?'d':(z==1?'s':'h'), n); break;
   88088:	71000aff 	cmp	w23, #0x2
   8808c:	52800c82 	mov	w2, #0x64                  	// #100
   88090:	540000a0 	b.eq	880a4 <disasm+0x39a4>  // b.none
   88094:	710006ff 	cmp	w23, #0x1
   88098:	52800e62 	mov	w2, #0x73                  	// #115
   8809c:	52800d00 	mov	w0, #0x68                  	// #104
   880a0:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   880a4:	f94057e1 	ldr	x1, [sp, #168]
   880a8:	aa1303e0 	mov	x0, x19
   880ac:	2a1903e3 	mov	w3, w25
   880b0:	97ffe83e 	bl	821a8 <sprintf>
   880b4:	8b204273 	add	x19, x19, w0, uxtw
   880b8:	17fffa72 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   880bc:	b9410fe1 	ldr	w1, [sp, #268]
   880c0:	f9405be0 	ldr	x0, [sp, #176]
   880c4:	9133e000 	add	x0, x0, #0xcf8
   880c8:	97ffeeea 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_VnT3: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,(z<<1)+3)); break;
   880cc:	b0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   880d0:	aa0003e4 	mov	x4, x0
   880d4:	913cc042 	add	x2, x2, #0xf30
   880d8:	aa1303e0 	mov	x0, x19
   880dc:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   880e0:	2a1903e3 	mov	w3, w25
   880e4:	913c6021 	add	x1, x1, #0xf18
   880e8:	97ffe830 	bl	821a8 <sprintf>
   880ec:	8b204273 	add	x19, x19, w0, uxtw
   880f0:	17fffa64 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vn2d: str+=sprintf(str,"V%d.2d", n); break;
   880f4:	aa1303e0 	mov	x0, x19
   880f8:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   880fc:	2a1903e2 	mov	w2, w25
   88100:	91056021 	add	x1, x1, #0x158
   88104:	97ffe829 	bl	821a8 <sprintf>
   88108:	8b204273 	add	x19, x19, w0, uxtw
   8810c:	17fffa5d 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vn2h: str+=sprintf(str,"V%d.2h", n); break;
   88110:	aa1303e0 	mov	x0, x19
   88114:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   88118:	2a1903e2 	mov	w2, w25
   8811c:	91058021 	add	x1, x1, #0x160
   88120:	97ffe822 	bl	821a8 <sprintf>
   88124:	8b204273 	add	x19, x19, w0, uxtw
   88128:	17fffa56 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vnz: str+=sprintf(str,"V%d.2%c", n, z?'d':'s'); break;
   8812c:	b9424be3 	ldr	w3, [sp, #584]
   88130:	aa1303e0 	mov	x0, x19
   88134:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   88138:	2a1903e2 	mov	w2, w25
   8813c:	9105a021 	add	x1, x1, #0x168
   88140:	97ffe81a 	bl	821a8 <sprintf>
   88144:	8b204273 	add	x19, x19, w0, uxtw
   88148:	17fffa4e 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPz4t: str+=sprintf(str,"%c%d", z==2?'d':(z==1?'s':'h'), t); break;
   8814c:	71000aff 	cmp	w23, #0x2
   88150:	52800c82 	mov	w2, #0x64                  	// #100
   88154:	540000a0 	b.eq	88168 <disasm+0x3a68>  // b.none
   88158:	710006ff 	cmp	w23, #0x1
   8815c:	52800e62 	mov	w2, #0x73                  	// #115
   88160:	52800d00 	mov	w0, #0x68                  	// #104
   88164:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   88168:	f94057e1 	ldr	x1, [sp, #168]
   8816c:	aa1303e0 	mov	x0, x19
   88170:	2a1a03e3 	mov	w3, w26
   88174:	97ffe80d 	bl	821a8 <sprintf>
   88178:	8b204273 	add	x19, x19, w0, uxtw
   8817c:	17fffa41 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   88180:	b940c7e1 	ldr	w1, [sp, #196]
   88184:	f9405be0 	ldr	x0, [sp, #176]
   88188:	9133e000 	add	x0, x0, #0xcf8
   8818c:	97ffeeb9 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_Vtz: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,4+(z*2))); break;
   88190:	b0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   88194:	aa0003e4 	mov	x4, x0
   88198:	913cc042 	add	x2, x2, #0xf30
   8819c:	aa1303e0 	mov	x0, x19
   881a0:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   881a4:	2a1a03e3 	mov	w3, w26
   881a8:	913c6021 	add	x1, x1, #0xf18
   881ac:	97ffe7ff 	bl	821a8 <sprintf>
   881b0:	8b204273 	add	x19, x19, w0, uxtw
   881b4:	17fffa33 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPz3m: str+=sprintf(str,"%c%d", z==3?'d':(z==2?'s':(z==1?'h':'b')), m); break;
   881b8:	71000eff 	cmp	w23, #0x3
   881bc:	52800c82 	mov	w2, #0x64                  	// #100
   881c0:	54000100 	b.eq	881e0 <disasm+0x3ae0>  // b.none
   881c4:	71000aff 	cmp	w23, #0x2
   881c8:	52800e62 	mov	w2, #0x73                  	// #115
   881cc:	540000a0 	b.eq	881e0 <disasm+0x3ae0>  // b.none
   881d0:	710006ff 	cmp	w23, #0x1
   881d4:	52800d02 	mov	w2, #0x68                  	// #104
   881d8:	52800c40 	mov	w0, #0x62                  	// #98
   881dc:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   881e0:	b9407fe3 	ldr	w3, [sp, #124]
   881e4:	aa1303e0 	mov	x0, x19
   881e8:	f94057e1 	ldr	x1, [sp, #168]
   881ec:	97ffe7ef 	bl	821a8 <sprintf>
   881f0:	8b204273 	add	x19, x19, w0, uxtw
   881f4:	17fffa23 	b	86a80 <disasm+0x2380>
				case disasm_arg_Dt: str+=sprintf(str,"d%d", t); break;
   881f8:	aa1303e0 	mov	x0, x19
   881fc:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   88200:	2a1a03e2 	mov	w2, w26
   88204:	9105c021 	add	x1, x1, #0x170
   88208:	97ffe7e8 	bl	821a8 <sprintf>
   8820c:	8b204273 	add	x19, x19, w0, uxtw
   88210:	17fffa1c 	b	86a80 <disasm+0x2380>
				case disasm_arg_Dn: str+=sprintf(str,"d%d", n); break;
   88214:	aa1303e0 	mov	x0, x19
   88218:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   8821c:	2a1903e2 	mov	w2, w25
   88220:	9105c021 	add	x1, x1, #0x170
   88224:	97ffe7e1 	bl	821a8 <sprintf>
   88228:	8b204273 	add	x19, x19, w0, uxtw
   8822c:	17fffa15 	b	86a80 <disasm+0x2380>
				case disasm_arg_shrshift: str+=sprintf(str,"#%d", ((j>>3)==1?16:((j>>4)==1?32:((j>>5)==1?64:128)))-j); break;
   88230:	b940d7e0 	ldr	w0, [sp, #212]
   88234:	52800202 	mov	w2, #0x10                  	// #16
   88238:	7100041f 	cmp	w0, #0x1
   8823c:	54000140 	b.eq	88264 <disasm+0x3b64>  // b.none
   88240:	b940dbe0 	ldr	w0, [sp, #216]
   88244:	52800402 	mov	w2, #0x20                  	// #32
   88248:	7100041f 	cmp	w0, #0x1
   8824c:	540000c0 	b.eq	88264 <disasm+0x3b64>  // b.none
   88250:	b9411fe0 	ldr	w0, [sp, #284]
   88254:	52801002 	mov	w2, #0x80                  	// #128
   88258:	7100041f 	cmp	w0, #0x1
   8825c:	52800800 	mov	w0, #0x40                  	// #64
   88260:	1a801042 	csel	w2, w2, w0, ne  // ne = any
   88264:	aa1303e0 	mov	x0, x19
   88268:	4b150042 	sub	w2, w2, w21
   8826c:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   88270:	913d2021 	add	x1, x1, #0xf48
   88274:	97ffe7cd 	bl	821a8 <sprintf>
   88278:	8b204273 	add	x19, x19, w0, uxtw
   8827c:	17fffa01 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vtj2: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,((j>>3)==1?0:((j>>4)==1?2:((j>>5)==1?4:6)))|q)); break;
   88280:	b940d7e0 	ldr	w0, [sp, #212]
   88284:	2a1803e1 	mov	w1, w24
   88288:	7100041f 	cmp	w0, #0x1
   8828c:	54000140 	b.eq	882b4 <disasm+0x3bb4>  // b.none
   88290:	b940dbe0 	ldr	w0, [sp, #216]
   88294:	321f0301 	orr	w1, w24, #0x2
   88298:	7100041f 	cmp	w0, #0x1
   8829c:	540000c0 	b.eq	882b4 <disasm+0x3bb4>  // b.none
   882a0:	b9411fe0 	ldr	w0, [sp, #284]
   882a4:	321f0701 	orr	w1, w24, #0x6
   882a8:	7100041f 	cmp	w0, #0x1
   882ac:	321e0300 	orr	w0, w24, #0x4
   882b0:	1a801021 	csel	w1, w1, w0, ne  // ne = any
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   882b4:	f9405be0 	ldr	x0, [sp, #176]
   882b8:	9133e000 	add	x0, x0, #0xcf8
   882bc:	97ffee6d 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_Vtj2: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,((j>>3)==1?0:((j>>4)==1?2:((j>>5)==1?4:6)))|q)); break;
   882c0:	b0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   882c4:	aa0003e4 	mov	x4, x0
   882c8:	913cc042 	add	x2, x2, #0xf30
   882cc:	aa1303e0 	mov	x0, x19
   882d0:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   882d4:	2a1a03e3 	mov	w3, w26
   882d8:	913c6021 	add	x1, x1, #0xf18
   882dc:	97ffe7b3 	bl	821a8 <sprintf>
   882e0:	8b204273 	add	x19, x19, w0, uxtw
   882e4:	17fff9e7 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vnj2: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,((j>>3)==1?0:((j>>4)==1?2:((j>>5)==1?4:6)))|q)); break;
   882e8:	b940d7e0 	ldr	w0, [sp, #212]
   882ec:	2a1803e1 	mov	w1, w24
   882f0:	7100041f 	cmp	w0, #0x1
   882f4:	54000140 	b.eq	8831c <disasm+0x3c1c>  // b.none
   882f8:	b940dbe0 	ldr	w0, [sp, #216]
   882fc:	321f0301 	orr	w1, w24, #0x2
   88300:	7100041f 	cmp	w0, #0x1
   88304:	540000c0 	b.eq	8831c <disasm+0x3c1c>  // b.none
   88308:	b9411fe0 	ldr	w0, [sp, #284]
   8830c:	321f0701 	orr	w1, w24, #0x6
   88310:	7100041f 	cmp	w0, #0x1
   88314:	321e0300 	orr	w0, w24, #0x4
   88318:	1a801021 	csel	w1, w1, w0, ne  // ne = any
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8831c:	f9405be0 	ldr	x0, [sp, #176]
   88320:	9133e000 	add	x0, x0, #0xcf8
   88324:	97ffee53 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_Vnj2: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,((j>>3)==1?0:((j>>4)==1?2:((j>>5)==1?4:6)))|q)); break;
   88328:	b0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   8832c:	aa0003e4 	mov	x4, x0
   88330:	913cc042 	add	x2, x2, #0xf30
   88334:	aa1303e0 	mov	x0, x19
   88338:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   8833c:	2a1903e3 	mov	w3, w25
   88340:	913c6021 	add	x1, x1, #0xf18
   88344:	97ffe799 	bl	821a8 <sprintf>
   88348:	8b204273 	add	x19, x19, w0, uxtw
   8834c:	17fff9cd 	b	86a80 <disasm+0x2380>
				case disasm_arg_shlshift: str+=sprintf(str,"#%d", j-((j>>3)==1?8:((j>>4)==1?16:((j>>5)==1?32:64)))); break;
   88350:	b940d7e0 	ldr	w0, [sp, #212]
   88354:	52800102 	mov	w2, #0x8                   	// #8
   88358:	7100041f 	cmp	w0, #0x1
   8835c:	54000140 	b.eq	88384 <disasm+0x3c84>  // b.none
   88360:	b940dbe0 	ldr	w0, [sp, #216]
   88364:	52800202 	mov	w2, #0x10                  	// #16
   88368:	7100041f 	cmp	w0, #0x1
   8836c:	540000c0 	b.eq	88384 <disasm+0x3c84>  // b.none
   88370:	b9411fe0 	ldr	w0, [sp, #284]
   88374:	52800402 	mov	w2, #0x20                  	// #32
   88378:	7100041f 	cmp	w0, #0x1
   8837c:	52800800 	mov	w0, #0x40                  	// #64
   88380:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   88384:	aa1303e0 	mov	x0, x19
   88388:	4b0202a2 	sub	w2, w21, w2
   8838c:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   88390:	913d2021 	add	x1, x1, #0xf48
   88394:	97ffe785 	bl	821a8 <sprintf>
   88398:	8b204273 	add	x19, x19, w0, uxtw
   8839c:	17fff9b9 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPnj: str+=sprintf(str,"%c%d", (j>>3)==1?'h':((j>>4)==1?'s':'d'), n); break;
   883a0:	b940d7e0 	ldr	w0, [sp, #212]
   883a4:	52800d02 	mov	w2, #0x68                  	// #104
   883a8:	7100041f 	cmp	w0, #0x1
   883ac:	540000c0 	b.eq	883c4 <disasm+0x3cc4>  // b.none
   883b0:	b940dbe0 	ldr	w0, [sp, #216]
   883b4:	52800e62 	mov	w2, #0x73                  	// #115
   883b8:	7100041f 	cmp	w0, #0x1
   883bc:	52800c80 	mov	w0, #0x64                  	// #100
   883c0:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   883c4:	f94057e1 	ldr	x1, [sp, #168]
   883c8:	aa1303e0 	mov	x0, x19
   883cc:	2a1903e3 	mov	w3, w25
   883d0:	97ffe776 	bl	821a8 <sprintf>
   883d4:	8b204273 	add	x19, x19, w0, uxtw
   883d8:	17fff9aa 	b	86a80 <disasm+0x2380>
				case disasm_arg_VnTa: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,((j>>3)==1?3:((j>>4)==1?4:7)))); break;
   883dc:	b940d7e0 	ldr	w0, [sp, #212]
   883e0:	52800061 	mov	w1, #0x3                   	// #3
   883e4:	7100041f 	cmp	w0, #0x1
   883e8:	540000c0 	b.eq	88400 <disasm+0x3d00>  // b.none
   883ec:	b940dbe0 	ldr	w0, [sp, #216]
   883f0:	52800081 	mov	w1, #0x4                   	// #4
   883f4:	7100041f 	cmp	w0, #0x1
   883f8:	528000e0 	mov	w0, #0x7                   	// #7
   883fc:	1a800021 	csel	w1, w1, w0, eq  // eq = none
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   88400:	f9405be0 	ldr	x0, [sp, #176]
   88404:	9133e000 	add	x0, x0, #0xcf8
   88408:	97ffee1a 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_VnTa: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,((j>>3)==1?3:((j>>4)==1?4:7)))); break;
   8840c:	b0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   88410:	aa0003e4 	mov	x4, x0
   88414:	913cc042 	add	x2, x2, #0xf30
   88418:	aa1303e0 	mov	x0, x19
   8841c:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   88420:	2a1903e3 	mov	w3, w25
   88424:	913c6021 	add	x1, x1, #0xf18
   88428:	97ffe760 	bl	821a8 <sprintf>
   8842c:	8b204273 	add	x19, x19, w0, uxtw
   88430:	17fff994 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPjt2: str+=sprintf(str,"%c%d", (j>>3)==1?'b':((j>>4)==1?'h':((j>>5)==1?'s':'d')), t); break;
   88434:	b940d7e0 	ldr	w0, [sp, #212]
   88438:	52800c42 	mov	w2, #0x62                  	// #98
   8843c:	7100041f 	cmp	w0, #0x1
   88440:	54000140 	b.eq	88468 <disasm+0x3d68>  // b.none
   88444:	b940dbe0 	ldr	w0, [sp, #216]
   88448:	52800d02 	mov	w2, #0x68                  	// #104
   8844c:	7100041f 	cmp	w0, #0x1
   88450:	540000c0 	b.eq	88468 <disasm+0x3d68>  // b.none
   88454:	b9411fe0 	ldr	w0, [sp, #284]
   88458:	52800e62 	mov	w2, #0x73                  	// #115
   8845c:	7100041f 	cmp	w0, #0x1
   88460:	52800c80 	mov	w0, #0x64                  	// #100
   88464:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   88468:	f94057e1 	ldr	x1, [sp, #168]
   8846c:	aa1303e0 	mov	x0, x19
   88470:	2a1a03e3 	mov	w3, w26
   88474:	97ffe74d 	bl	821a8 <sprintf>
   88478:	8b204273 	add	x19, x19, w0, uxtw
   8847c:	17fff981 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPjn2: str+=sprintf(str,"%c%d", (j>>3)==1?'b':((j>>4)==1?'h':((j>>5)==1?'s':'d')), n); break;
   88480:	b940d7e0 	ldr	w0, [sp, #212]
   88484:	52800c42 	mov	w2, #0x62                  	// #98
   88488:	7100041f 	cmp	w0, #0x1
   8848c:	54000140 	b.eq	884b4 <disasm+0x3db4>  // b.none
   88490:	b940dbe0 	ldr	w0, [sp, #216]
   88494:	52800d02 	mov	w2, #0x68                  	// #104
   88498:	7100041f 	cmp	w0, #0x1
   8849c:	540000c0 	b.eq	884b4 <disasm+0x3db4>  // b.none
   884a0:	b9411fe0 	ldr	w0, [sp, #284]
   884a4:	52800e62 	mov	w2, #0x73                  	// #115
   884a8:	7100041f 	cmp	w0, #0x1
   884ac:	52800c80 	mov	w0, #0x64                  	// #100
   884b0:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   884b4:	f94057e1 	ldr	x1, [sp, #168]
   884b8:	aa1303e0 	mov	x0, x19
   884bc:	2a1903e3 	mov	w3, w25
   884c0:	97ffe73a 	bl	821a8 <sprintf>
   884c4:	8b204273 	add	x19, x19, w0, uxtw
   884c8:	17fff96e 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   884cc:	b94123e1 	ldr	w1, [sp, #288]
   884d0:	f9405be0 	ldr	x0, [sp, #176]
   884d4:	9133e000 	add	x0, x0, #0xcf8
   884d8:	97ffede6 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_Vtz3: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,(z<<1)+6)); break;
   884dc:	b0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   884e0:	aa0003e4 	mov	x4, x0
   884e4:	913cc042 	add	x2, x2, #0xf30
   884e8:	aa1303e0 	mov	x0, x19
   884ec:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   884f0:	2a1a03e3 	mov	w3, w26
   884f4:	913c6021 	add	x1, x1, #0xf18
   884f8:	97ffe72c 	bl	821a8 <sprintf>
   884fc:	8b204273 	add	x19, x19, w0, uxtw
   88500:	17fff960 	b	86a80 <disasm+0x2380>
				case disasm_arg_VmTs: str+=sprintf(str,"V%d.%c[%d]", m, z==1?'h':'s', j); break;
   88504:	b9407fe2 	ldr	w2, [sp, #124]
   88508:	aa1303e0 	mov	x0, x19
   8850c:	b94107e3 	ldr	w3, [sp, #260]
   88510:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   88514:	2a1503e4 	mov	w4, w21
   88518:	9105e021 	add	x1, x1, #0x178
   8851c:	97ffe723 	bl	821a8 <sprintf>
   88520:	8b204273 	add	x19, x19, w0, uxtw
   88524:	17fff957 	b	86a80 <disasm+0x2380>
				case disasm_arg_VmHs: str+=sprintf(str,"V%d.h[%d]", m, j); break;
   88528:	b9407fe2 	ldr	w2, [sp, #124]
   8852c:	aa1303e0 	mov	x0, x19
   88530:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   88534:	2a1503e3 	mov	w3, w21
   88538:	913d8021 	add	x1, x1, #0xf60
   8853c:	97ffe71b 	bl	821a8 <sprintf>
   88540:	8b204273 	add	x19, x19, w0, uxtw
   88544:	17fff94f 	b	86a80 <disasm+0x2380>
				case disasm_arg_VmTs2: str+=sprintf(str,"V%d.%c[%d]", m, z==1?'d':'s', j); break;
   88548:	b9407fe2 	ldr	w2, [sp, #124]
   8854c:	aa1303e0 	mov	x0, x19
   88550:	b9424fe3 	ldr	w3, [sp, #588]
   88554:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   88558:	2a1503e4 	mov	w4, w21
   8855c:	9105e021 	add	x1, x1, #0x178
   88560:	97ffe712 	bl	821a8 <sprintf>
   88564:	8b204273 	add	x19, x19, w0, uxtw
   88568:	17fff946 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vn116b: str+=sprintf(str,"{ V%d.16b }", n); break;
   8856c:	aa1303e0 	mov	x0, x19
   88570:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   88574:	2a1903e2 	mov	w2, w25
   88578:	91062021 	add	x1, x1, #0x188
   8857c:	97ffe70b 	bl	821a8 <sprintf>
   88580:	8b204273 	add	x19, x19, w0, uxtw
   88584:	17fff93f 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vn216b: str+=sprintf(str,"{ V%d.16b, V%d.16b }", n, (n+1)&0x1f); break;
   88588:	11000723 	add	w3, w25, #0x1
   8858c:	aa1303e0 	mov	x0, x19
   88590:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   88594:	12001063 	and	w3, w3, #0x1f
   88598:	91066021 	add	x1, x1, #0x198
   8859c:	2a1903e2 	mov	w2, w25
   885a0:	97ffe702 	bl	821a8 <sprintf>
   885a4:	8b204273 	add	x19, x19, w0, uxtw
   885a8:	17fff936 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vn316b: str+=sprintf(str,"{ V%d.16b, V%d.16b, V%d.16b }", n, (n+1)&0x1f, (n+2)&0x1f); break;
   885ac:	11000720 	add	w0, w25, #0x1
   885b0:	11000b24 	add	w4, w25, #0x2
   885b4:	12001003 	and	w3, w0, #0x1f
   885b8:	12001084 	and	w4, w4, #0x1f
   885bc:	aa1303e0 	mov	x0, x19
   885c0:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   885c4:	2a1903e2 	mov	w2, w25
   885c8:	9106c021 	add	x1, x1, #0x1b0
   885cc:	97ffe6f7 	bl	821a8 <sprintf>
   885d0:	8b204273 	add	x19, x19, w0, uxtw
   885d4:	17fff92b 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vn416b: str+=sprintf(str,"{ V%d.16b, V%d.16b, V%d.16b, V%d.16b }", n, (n+1)&0x1f, (n+2)&0x1f, (n+3)&0x1f); break;
   885d8:	11000b21 	add	w1, w25, #0x2
   885dc:	11000720 	add	w0, w25, #0x1
   885e0:	11000f25 	add	w5, w25, #0x3
   885e4:	12001024 	and	w4, w1, #0x1f
   885e8:	12001003 	and	w3, w0, #0x1f
   885ec:	120010a5 	and	w5, w5, #0x1f
   885f0:	aa1303e0 	mov	x0, x19
   885f4:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   885f8:	2a1903e2 	mov	w2, w25
   885fc:	91074021 	add	x1, x1, #0x1d0
   88600:	97ffe6ea 	bl	821a8 <sprintf>
   88604:	8b204273 	add	x19, x19, w0, uxtw
   88608:	17fff91e 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vtj: str+=sprintf(str,"V%d.%c", t, j&1?'b':((j&3)==2?'h':((j&7)==4?'s':'d'))); break;
   8860c:	b940f7e0 	ldr	w0, [sp, #244]
   88610:	52800c43 	mov	w3, #0x62                  	// #98
   88614:	35000140 	cbnz	w0, 8863c <disasm+0x3f3c>
   88618:	120006a0 	and	w0, w21, #0x3
   8861c:	52800d03 	mov	w3, #0x68                  	// #104
   88620:	7100081f 	cmp	w0, #0x2
   88624:	540000c0 	b.eq	8863c <disasm+0x3f3c>  // b.none
   88628:	12000aa0 	and	w0, w21, #0x7
   8862c:	52800e63 	mov	w3, #0x73                  	// #115
   88630:	7100101f 	cmp	w0, #0x4
   88634:	52800c80 	mov	w0, #0x64                  	// #100
   88638:	1a800063 	csel	w3, w3, w0, eq  // eq = none
   8863c:	aa1303e0 	mov	x0, x19
   88640:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   88644:	2a1a03e2 	mov	w2, w26
   88648:	9104c021 	add	x1, x1, #0x130
   8864c:	97ffe6d7 	bl	821a8 <sprintf>
   88650:	8b204273 	add	x19, x19, w0, uxtw
   88654:	17fff90b 	b	86a80 <disasm+0x2380>
				case disasm_arg_R2n: str+=sprintf(str,n==31?"%czr":"%c%d", ((j&15)==8?'x':'w'), n); break;
   88658:	b94253e2 	ldr	w2, [sp, #592]
   8865c:	aa1303e0 	mov	x0, x19
   88660:	f9409fe1 	ldr	x1, [sp, #312]
   88664:	2a1903e3 	mov	w3, w25
   88668:	97ffe6d0 	bl	821a8 <sprintf>
   8866c:	8b204273 	add	x19, x19, w0, uxtw
   88670:	17fff904 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPidxk: str+=sprintf(str,"%d", k>>(k&1?1:((k&3)==2?2:((k&7)==4?3:4))), t); break;
   88674:	b94077e1 	ldr	w1, [sp, #116]
   88678:	52800022 	mov	w2, #0x1                   	// #1
   8867c:	37000121 	tbnz	w1, #0, 886a0 <disasm+0x3fa0>
   88680:	12000420 	and	w0, w1, #0x3
   88684:	52800042 	mov	w2, #0x2                   	// #2
   88688:	6b02001f 	cmp	w0, w2
   8868c:	540000a0 	b.eq	886a0 <disasm+0x3fa0>  // b.none
   88690:	12000820 	and	w0, w1, #0x7
   88694:	7100101f 	cmp	w0, #0x4
   88698:	1a9f07e2 	cset	w2, ne  // ne = any
   8869c:	11000c42 	add	w2, w2, #0x3
   886a0:	b94077e0 	ldr	w0, [sp, #116]
   886a4:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   886a8:	2a1a03e3 	mov	w3, w26
   886ac:	9104e021 	add	x1, x1, #0x138
   886b0:	1ac22802 	asr	w2, w0, w2
   886b4:	aa1303e0 	mov	x0, x19
   886b8:	97ffe6bc 	bl	821a8 <sprintf>
   886bc:	8b204273 	add	x19, x19, w0, uxtw
   886c0:	17fff8f0 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   886c4:	b94127e1 	ldr	w1, [sp, #292]
   886c8:	f9405be0 	ldr	x0, [sp, #176]
   886cc:	9133e000 	add	x0, x0, #0xcf8
   886d0:	97ffed68 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_Vtzq2: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,2+(z*2)+q)); break;
   886d4:	b0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   886d8:	aa0003e4 	mov	x4, x0
   886dc:	913cc042 	add	x2, x2, #0xf30
   886e0:	aa1303e0 	mov	x0, x19
   886e4:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   886e8:	2a1a03e3 	mov	w3, w26
   886ec:	913c6021 	add	x1, x1, #0xf18
   886f0:	97ffe6ae 	bl	821a8 <sprintf>
   886f4:	8b204273 	add	x19, x19, w0, uxtw
   886f8:	17fff8e2 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   886fc:	b940d3e1 	ldr	w1, [sp, #208]
   88700:	f9405be0 	ldr	x0, [sp, #176]
   88704:	9133e000 	add	x0, x0, #0xcf8
   88708:	97ffed5a 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_VnT2: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,z+3)); break;
   8870c:	b0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   88710:	aa0003e4 	mov	x4, x0
   88714:	913cc042 	add	x2, x2, #0xf30
   88718:	aa1303e0 	mov	x0, x19
   8871c:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   88720:	2a1903e3 	mov	w3, w25
   88724:	913c6021 	add	x1, x1, #0xf18
   88728:	97ffe6a0 	bl	821a8 <sprintf>
   8872c:	8b204273 	add	x19, x19, w0, uxtw
   88730:	17fff8d4 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   88734:	b94123e1 	ldr	w1, [sp, #288]
   88738:	f9405be0 	ldr	x0, [sp, #176]
   8873c:	9133e000 	add	x0, x0, #0xcf8
   88740:	97ffed4c 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_Vnz3: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,(z<<1)+6)); break;
   88744:	b0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   88748:	aa0003e4 	mov	x4, x0
   8874c:	913cc042 	add	x2, x2, #0xf30
   88750:	aa1303e0 	mov	x0, x19
   88754:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   88758:	2a1903e3 	mov	w3, w25
   8875c:	913c6021 	add	x1, x1, #0xf18
   88760:	97ffe692 	bl	821a8 <sprintf>
   88764:	8b204273 	add	x19, x19, w0, uxtw
   88768:	17fff8c6 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   8876c:	b94127e1 	ldr	w1, [sp, #292]
   88770:	f9405be0 	ldr	x0, [sp, #176]
   88774:	9133e000 	add	x0, x0, #0xcf8
   88778:	97ffed3e 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_Vnzq2: str+=sprintf(str,"%s", "V%d.%s", n, disasm_str(quantum,2+(z*2)+q)); break;
   8877c:	b0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   88780:	aa0003e4 	mov	x4, x0
   88784:	913cc042 	add	x2, x2, #0xf30
   88788:	aa1303e0 	mov	x0, x19
   8878c:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   88790:	2a1903e3 	mov	w3, w25
   88794:	913c6021 	add	x1, x1, #0xf18
   88798:	97ffe684 	bl	821a8 <sprintf>
   8879c:	8b204273 	add	x19, x19, w0, uxtw
   887a0:	17fff8b8 	b	86a80 <disasm+0x2380>
				case disasm_arg_shift8: str+=sprintf(str,"#%d", 1<<(z+3)); break;
   887a4:	b9418be2 	ldr	w2, [sp, #392]
   887a8:	aa1303e0 	mov	x0, x19
   887ac:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   887b0:	913d2021 	add	x1, x1, #0xf48
   887b4:	97ffe67d 	bl	821a8 <sprintf>
   887b8:	8b204273 	add	x19, x19, w0, uxtw
   887bc:	17fff8b1 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   887c0:	b9410fe1 	ldr	w1, [sp, #268]
   887c4:	f9405be0 	ldr	x0, [sp, #176]
   887c8:	9133e000 	add	x0, x0, #0xcf8
   887cc:	97ffed29 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_VtT3: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,(z<<1)+3)); break;
   887d0:	b0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   887d4:	aa0003e4 	mov	x4, x0
   887d8:	913cc042 	add	x2, x2, #0xf30
   887dc:	aa1303e0 	mov	x0, x19
   887e0:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   887e4:	2a1a03e3 	mov	w3, w26
   887e8:	913c6021 	add	x1, x1, #0xf18
   887ec:	97ffe66f 	bl	821a8 <sprintf>
   887f0:	8b204273 	add	x19, x19, w0, uxtw
   887f4:	17fff8a3 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   887f8:	b9410fe1 	ldr	w1, [sp, #268]
   887fc:	f9405be0 	ldr	x0, [sp, #176]
   88800:	9133e000 	add	x0, x0, #0xcf8
   88804:	97ffed1b 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_VmT3: str+=sprintf(str,"%s", "V%d.%s", m, disasm_str(quantum,(z<<1)+3)); break;
   88808:	b9407fe3 	ldr	w3, [sp, #124]
   8880c:	aa0003e4 	mov	x4, x0
   88810:	b0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   88814:	aa1303e0 	mov	x0, x19
   88818:	913cc042 	add	x2, x2, #0xf30
   8881c:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   88820:	913c6021 	add	x1, x1, #0xf18
   88824:	97ffe661 	bl	821a8 <sprintf>
   88828:	8b204273 	add	x19, x19, w0, uxtw
   8882c:	17fff895 	b	86a80 <disasm+0x2380>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   88830:	b94257e1 	ldr	w1, [sp, #596]
   88834:	f9405be0 	ldr	x0, [sp, #176]
   88838:	9133e000 	add	x0, x0, #0xcf8
   8883c:	97ffed0d 	bl	83c70 <disasm_str.part.0>
				case disasm_arg_VtT4: str+=sprintf(str,"%s", "V%d.%s", t, disasm_str(quantum,z?8:3)); break;
   88840:	b0000062 	adrp	x2, 95000 <sd_init+0x2ce8>
   88844:	aa0003e4 	mov	x4, x0
   88848:	913cc042 	add	x2, x2, #0xf30
   8884c:	aa1303e0 	mov	x0, x19
   88850:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   88854:	2a1a03e3 	mov	w3, w26
   88858:	913c6021 	add	x1, x1, #0xf18
   8885c:	97ffe653 	bl	821a8 <sprintf>
   88860:	8b204273 	add	x19, x19, w0, uxtw
   88864:	17fff887 	b	86a80 <disasm+0x2380>
				case disasm_arg_imm8: str+=sprintf(str,"#%x", j); break;
   88868:	aa1303e0 	mov	x0, x19
   8886c:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   88870:	2a1503e2 	mov	w2, w21
   88874:	9107e021 	add	x1, x1, #0x1f8
   88878:	97ffe64c 	bl	821a8 <sprintf>
   8887c:	8b204273 	add	x19, x19, w0, uxtw
   88880:	17fff880 	b	86a80 <disasm+0x2380>
				case disasm_arg_amountk_opt: str+=sprintf(str,!k?"":"lsl #%d", 1<<(k*3)); break;
   88884:	b94143e2 	ldr	w2, [sp, #320]
   88888:	aa1303e0 	mov	x0, x19
   8888c:	f9412fe1 	ldr	x1, [sp, #600]
   88890:	97ffe646 	bl	821a8 <sprintf>
   88894:	8b204273 	add	x19, x19, w0, uxtw
   88898:	17fff87a 	b	86a80 <disasm+0x2380>
				case disasm_arg_amountk2_opt: str+=sprintf(str,!k?"":"msl #%d", 1<<(k*3)); break;
   8889c:	b94143e2 	ldr	w2, [sp, #320]
   888a0:	aa1303e0 	mov	x0, x19
   888a4:	f94133e1 	ldr	x1, [sp, #608]
   888a8:	97ffe640 	bl	821a8 <sprintf>
   888ac:	8b204273 	add	x19, x19, w0, uxtw
   888b0:	17fff874 	b	86a80 <disasm+0x2380>
				case disasm_arg_imm64: str+=sprintf(str,"#0x%02x%02x%02x%02x%02x%02x%02x%02x", j&128?255:0,j&64?255:0,j&32?255:0,j&16?255:0,j&8?255:0,j&4?255:0,j&2?255:0,j&1?255:0); break;
   888b4:	910803e0 	add	x0, sp, #0x200
   888b8:	b9427be6 	ldr	w6, [sp, #632]
   888bc:	b9427fe7 	ldr	w7, [sp, #636]
   888c0:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   888c4:	91080021 	add	x1, x1, #0x200
   888c8:	294d0c02 	ldp	w2, w3, [x0, #104]
   888cc:	294e1404 	ldp	w4, w5, [x0, #112]
   888d0:	b94283e0 	ldr	w0, [sp, #640]
   888d4:	b90003e0 	str	w0, [sp]
   888d8:	b94287e0 	ldr	w0, [sp, #644]
   888dc:	b9000be0 	str	w0, [sp, #8]
   888e0:	aa1303e0 	mov	x0, x19
   888e4:	97ffe631 	bl	821a8 <sprintf>
   888e8:	8b204273 	add	x19, x19, w0, uxtw
   888ec:	17fff865 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vt2d: str+=sprintf(str,"V%d.2d", t); break;
   888f0:	aa1303e0 	mov	x0, x19
   888f4:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   888f8:	2a1a03e2 	mov	w2, w26
   888fc:	91056021 	add	x1, x1, #0x158
   88900:	97ffe62a 	bl	821a8 <sprintf>
   88904:	8b204273 	add	x19, x19, w0, uxtw
   88908:	17fff85e 	b	86a80 <disasm+0x2380>
				case disasm_arg_F16: str+=sprintf(str,"#0x02x%02x", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF), (j&3)<<6); break;
   8890c:	b94147e2 	ldr	w2, [sp, #324]
   88910:	aa1303e0 	mov	x0, x19
   88914:	b9414be3 	ldr	w3, [sp, #328]
   88918:	f940abe1 	ldr	x1, [sp, #336]
   8891c:	97ffe623 	bl	821a8 <sprintf>
   88920:	8b204273 	add	x19, x19, w0, uxtw
   88924:	17fff857 	b	86a80 <disasm+0x2380>
				case disasm_arg_F32: str+=sprintf(str,"#0x02x%02x0000", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&32?1:0), (j&0x1f)<<3); break;
   88928:	b9414fe3 	ldr	w3, [sp, #332]
   8892c:	aa1303e0 	mov	x0, x19
   88930:	b9418fe2 	ldr	w2, [sp, #396]
   88934:	f94147e1 	ldr	x1, [sp, #648]
   88938:	97ffe61c 	bl	821a8 <sprintf>
   8893c:	8b204273 	add	x19, x19, w0, uxtw
   88940:	17fff850 	b	86a80 <disasm+0x2380>
				case disasm_arg_F64: str+=sprintf(str,"#0x02x%02x%06x", (j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&64?1:0), (j&64?128:0)|(j&64?64:0)|(j&0x3f), 0); break;
   88944:	b9415be3 	ldr	w3, [sp, #344]
   88948:	aa1303e0 	mov	x0, x19
   8894c:	b94193e2 	ldr	w2, [sp, #400]
   88950:	52800004 	mov	w4, #0x0                   	// #0
   88954:	f9414be1 	ldr	x1, [sp, #656]
   88958:	97ffe614 	bl	821a8 <sprintf>
   8895c:	8b204273 	add	x19, x19, w0, uxtw
   88960:	17fff848 	b	86a80 <disasm+0x2380>
				case disasm_arg_VmTs4b: str+=sprintf(str,"V%d.4b[%d]", m, j); break;
   88964:	b9407fe2 	ldr	w2, [sp, #124]
   88968:	aa1303e0 	mov	x0, x19
   8896c:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   88970:	2a1503e3 	mov	w3, w21
   88974:	9108a021 	add	x1, x1, #0x228
   88978:	97ffe60c 	bl	821a8 <sprintf>
   8897c:	8b204273 	add	x19, x19, w0, uxtw
   88980:	17fff840 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vm2d: str+=sprintf(str,"V%d.2d", m); break;
   88984:	b9407fe2 	ldr	w2, [sp, #124]
   88988:	aa1303e0 	mov	x0, x19
   8898c:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   88990:	91056021 	add	x1, x1, #0x158
   88994:	97ffe605 	bl	821a8 <sprintf>
   88998:	8b204273 	add	x19, x19, w0, uxtw
   8899c:	17fff839 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vm16b: str+=sprintf(str,"V%d.16b", m); break;
   889a0:	b9407fe2 	ldr	w2, [sp, #124]
   889a4:	aa1303e0 	mov	x0, x19
   889a8:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   889ac:	91044021 	add	x1, x1, #0x110
   889b0:	97ffe5fe 	bl	821a8 <sprintf>
   889b4:	8b204273 	add	x19, x19, w0, uxtw
   889b8:	17fff832 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vd16b: str+=sprintf(str,"V%d.16b", d); break;
   889bc:	b9408be2 	ldr	w2, [sp, #136]
   889c0:	aa1303e0 	mov	x0, x19
   889c4:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   889c8:	91044021 	add	x1, x1, #0x110
   889cc:	97ffe5f7 	bl	821a8 <sprintf>
   889d0:	8b204273 	add	x19, x19, w0, uxtw
   889d4:	17fff82b 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vd4s: str+=sprintf(str,"V%d.4s", d); break;
   889d8:	b9408be2 	ldr	w2, [sp, #136]
   889dc:	aa1303e0 	mov	x0, x19
   889e0:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   889e4:	9104a021 	add	x1, x1, #0x128
   889e8:	97ffe5f0 	bl	821a8 <sprintf>
   889ec:	8b204273 	add	x19, x19, w0, uxtw
   889f0:	17fff824 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPz5t: str+=sprintf(str,"%c%d", z==1?'d':(z==0?'s':'h'), t); break;
   889f4:	710006ff 	cmp	w23, #0x1
   889f8:	52800c82 	mov	w2, #0x64                  	// #100
   889fc:	540000a0 	b.eq	88a10 <disasm+0x4310>  // b.none
   88a00:	710002ff 	cmp	w23, #0x0
   88a04:	52800e62 	mov	w2, #0x73                  	// #115
   88a08:	52800d00 	mov	w0, #0x68                  	// #104
   88a0c:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   88a10:	f94057e1 	ldr	x1, [sp, #168]
   88a14:	aa1303e0 	mov	x0, x19
   88a18:	2a1a03e3 	mov	w3, w26
   88a1c:	97ffe5e3 	bl	821a8 <sprintf>
   88a20:	8b204273 	add	x19, x19, w0, uxtw
   88a24:	17fff817 	b	86a80 <disasm+0x2380>
				case disasm_arg_fbits: str+=sprintf(str,"#%d", 64-j); break;
   88a28:	aa1303e0 	mov	x0, x19
   88a2c:	52800802 	mov	w2, #0x40                  	// #64
   88a30:	b0000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   88a34:	4b150042 	sub	w2, w2, w21
   88a38:	913d2021 	add	x1, x1, #0xf48
   88a3c:	97ffe5db 	bl	821a8 <sprintf>
   88a40:	8b204273 	add	x19, x19, w0, uxtw
   88a44:	17fff80f 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPz5n: str+=sprintf(str,"%c%d", z==1?'d':(z==0?'s':'h'), n); break;
   88a48:	710006ff 	cmp	w23, #0x1
   88a4c:	52800c82 	mov	w2, #0x64                  	// #100
   88a50:	540000a0 	b.eq	88a64 <disasm+0x4364>  // b.none
   88a54:	710002ff 	cmp	w23, #0x0
   88a58:	52800e62 	mov	w2, #0x73                  	// #115
   88a5c:	52800d00 	mov	w0, #0x68                  	// #104
   88a60:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   88a64:	f94057e1 	ldr	x1, [sp, #168]
   88a68:	aa1303e0 	mov	x0, x19
   88a6c:	2a1903e3 	mov	w3, w25
   88a70:	97ffe5ce 	bl	821a8 <sprintf>
   88a74:	8b204273 	add	x19, x19, w0, uxtw
   88a78:	17fff802 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vn1d: str+=sprintf(str,"V%d.1d[n]", n); break;
   88a7c:	aa1303e0 	mov	x0, x19
   88a80:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   88a84:	2a1903e2 	mov	w2, w25
   88a88:	9108e021 	add	x1, x1, #0x238
   88a8c:	97ffe5c7 	bl	821a8 <sprintf>
   88a90:	8b204273 	add	x19, x19, w0, uxtw
   88a94:	17fff7fb 	b	86a80 <disasm+0x2380>
				case disasm_arg_Vt1d: str+=sprintf(str,"V%d.1d[1]", t); break;
   88a98:	aa1303e0 	mov	x0, x19
   88a9c:	d0000061 	adrp	x1, 96000 <sd_init+0x3ce8>
   88aa0:	2a1a03e2 	mov	w2, w26
   88aa4:	91092021 	add	x1, x1, #0x248
   88aa8:	97ffe5c0 	bl	821a8 <sprintf>
   88aac:	8b204273 	add	x19, x19, w0, uxtw
   88ab0:	17fff7f4 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPk5t: str+=sprintf(str,"%c%d", k==1?'d':(k==0?'s':'h'), t); break;
   88ab4:	b94077e0 	ldr	w0, [sp, #116]
   88ab8:	52800c82 	mov	w2, #0x64                  	// #100
   88abc:	7100041f 	cmp	w0, #0x1
   88ac0:	540000a0 	b.eq	88ad4 <disasm+0x43d4>  // b.none
   88ac4:	7100001f 	cmp	w0, #0x0
   88ac8:	52800e62 	mov	w2, #0x73                  	// #115
   88acc:	52800d00 	mov	w0, #0x68                  	// #104
   88ad0:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   88ad4:	f94057e1 	ldr	x1, [sp, #168]
   88ad8:	aa1303e0 	mov	x0, x19
   88adc:	2a1a03e3 	mov	w3, w26
   88ae0:	97ffe5b2 	bl	821a8 <sprintf>
   88ae4:	8b204273 	add	x19, x19, w0, uxtw
   88ae8:	17fff7e6 	b	86a80 <disasm+0x2380>
				case disasm_arg_FPz5m: str+=sprintf(str,"%c%d", z==1?'d':(z==0?'s':'h'), m); break;
   88aec:	710006ff 	cmp	w23, #0x1
   88af0:	52800c82 	mov	w2, #0x64                  	// #100
   88af4:	540000a0 	b.eq	88b08 <disasm+0x4408>  // b.none
   88af8:	710002ff 	cmp	w23, #0x0
   88afc:	52800e62 	mov	w2, #0x73                  	// #115
   88b00:	52800d00 	mov	w0, #0x68                  	// #104
   88b04:	1a800042 	csel	w2, w2, w0, eq  // eq = none
   88b08:	b9407fe3 	ldr	w3, [sp, #124]
   88b0c:	aa1303e0 	mov	x0, x19
   88b10:	f94057e1 	ldr	x1, [sp, #168]
   88b14:	97ffe5a5 	bl	821a8 <sprintf>
   88b18:	8b204273 	add	x19, x19, w0, uxtw
   88b1c:	17fff7d9 	b	86a80 <disasm+0x2380>
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   88b20:	71000eff 	cmp	w23, #0x3
   88b24:	54000da0 	b.eq	88cd8 <disasm+0x45d8>  // b.none
   88b28:	35000d17 	cbnz	w23, 88cc8 <disasm+0x45c8>
   88b2c:	b9414fe3 	ldr	w3, [sp, #332]
   88b30:	b942b7e2 	ldr	w2, [sp, #692]
   88b34:	f9414fe1 	ldr	x1, [sp, #664]
   88b38:	aa1303e0 	mov	x0, x19
   88b3c:	52800004 	mov	w4, #0x0                   	// #0
   88b40:	97ffe59a 	bl	821a8 <sprintf>
   88b44:	8b204273 	add	x19, x19, w0, uxtw
   88b48:	17fff7ce 	b	86a80 <disasm+0x2380>
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
   88b4c:	d0000043 	adrp	x3, 92000 <sd_readblock+0x158>
   88b50:	913aa063 	add	x3, x3, #0xea8
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88b54:	120010a4 	and	w4, w5, #0x1f
   88b58:	12001059 	and	w25, w2, #0x1f
   88b5c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   88b60:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
   88b64:	913fc060 	add	x0, x3, #0xff0
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88b68:	12000561 	and	w1, w11, #0x3
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   88b6c:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88b70:	120004f7 	and	w23, w7, #0x3
		q=0;
   88b74:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88b78:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88b7c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   88b80:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88b84:	290fffe4 	stp	w4, wzr, [sp, #124]
   88b88:	29117fff 	stp	wzr, wzr, [sp, #136]
   88b8c:	29127fff 	stp	wzr, wzr, [sp, #144]
   88b90:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   88b94:	790583e3 	strh	w3, [sp, #704]
   88b98:	390b0be2 	strb	w2, [sp, #706]
   88b9c:	17fff5f9 	b	86380 <disasm+0x1c80>
		j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88ba0:	12000ca3 	and	w3, w5, #0xf
   88ba4:	121e01ef 	and	w15, w15, #0x4
   88ba8:	12000508 	and	w8, w8, #0x3
		names="smull\0";
   88bac:	f0000041 	adrp	x1, 93000 <sd_init+0xce8>
   88bb0:	913ea021 	add	x1, x1, #0xfa8
		j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88bb4:	12001059 	and	w25, w2, #0x1f
   88bb8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   88bbc:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smull\0";
   88bc0:	d1038020 	sub	x0, x1, #0xe0
		j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88bc4:	2a0801f4 	orr	w20, w15, w8
		z=1;q=0;
   88bc8:	52800037 	mov	w23, #0x1                   	// #1
   88bcc:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88bd0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88bd4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   88bd8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88bdc:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   88be0:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88be4:	29117fff 	stp	wzr, wzr, [sp, #136]
   88be8:	29127fff 	stp	wzr, wzr, [sp, #144]
   88bec:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   88bf0:	790583e3 	strh	w3, [sp, #704]
   88bf4:	390b0be2 	strb	w2, [sp, #706]
   88bf8:	17fff5e2 	b	86380 <disasm+0x1c80>
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88bfc:	121f0294 	and	w20, w20, #0x2
   88c00:	1200018c 	and	w12, w12, #0x1
		names="smlal\0smlsl\0";
   88c04:	f0000043 	adrp	x3, 93000 <sd_init+0xce8>
   88c08:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88c0c:	120010a4 	and	w4, w5, #0x1f
   88c10:	12001059 	and	w25, w2, #0x1f
   88c14:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   88c18:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smlal\0smlsl\0";
   88c1c:	d103c060 	sub	x0, x3, #0xf0
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88c20:	2a0c0294 	orr	w20, w20, w12
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   88c24:	128f6ca3 	mov	w3, #0xffff849a            	// #-31590
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88c28:	12000221 	and	w1, w17, #0x1
		z=2;q=0;
   88c2c:	52800057 	mov	w23, #0x2                   	// #2
   88c30:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88c34:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   88c38:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88c3c:	290fffe4 	stp	w4, wzr, [sp, #124]
   88c40:	29117fff 	stp	wzr, wzr, [sp, #136]
   88c44:	29127fff 	stp	wzr, wzr, [sp, #144]
   88c48:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   88c4c:	790583e3 	strh	w3, [sp, #704]
   88c50:	390b0be2 	strb	w2, [sp, #706]
   88c54:	17fff5cb 	b	86380 <disasm+0x1c80>
char *disasm_str(char*s,int n) {if(!s)return "?";while(n){s++;if(!*s){s++;n--;}}return *s?s:"?";};
   88c58:	f9405be0 	ldr	x0, [sp, #176]
   88c5c:	9135c000 	add	x0, x0, #0xd70
   88c60:	97ffec04 	bl	83c70 <disasm_str.part.0>
   88c64:	aa0003e3 	mov	x3, x0
   88c68:	17fffba3 	b	87af4 <disasm+0x33f4>
		j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88c6c:	120010a3 	and	w3, w5, #0x1f
   88c70:	121f0294 	and	w20, w20, #0x2
   88c74:	1200018c 	and	w12, w12, #0x1
		names="smull\0";
   88c78:	f0000041 	adrp	x1, 93000 <sd_init+0xce8>
   88c7c:	913ea021 	add	x1, x1, #0xfa8
		j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88c80:	12001059 	and	w25, w2, #0x1f
   88c84:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   88c88:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smull\0";
   88c8c:	d1038020 	sub	x0, x1, #0xe0
		j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88c90:	2a0c0294 	orr	w20, w20, w12
		z=2;q=0;
   88c94:	52800057 	mov	w23, #0x2                   	// #2
   88c98:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88c9c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88ca0:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   88ca4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88ca8:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   88cac:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88cb0:	29117fff 	stp	wzr, wzr, [sp, #136]
   88cb4:	29127fff 	stp	wzr, wzr, [sp, #144]
   88cb8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   88cbc:	790583e3 	strh	w3, [sp, #704]
   88cc0:	390b0be2 	strb	w2, [sp, #706]
   88cc4:	17fff5af 	b	86380 <disasm+0x1c80>
				case disasm_arg_jz: str+=sprintf(str,z==3?"#0x02x%02x":(z==0?"#0x02x%02x0000":"#0x02x%02x%06x"), z==3?(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|((j>>2)&0xF):(j&128)|(j&64?0:64)|(j&64?32:0)|(j&64?16:0)|(j&64?8:0)|(j&64?4:0)|(j&64?2:0)|(j&(z==0?32:64)?1:0),z==3?(j&3)<<6:(z==0?(j&0x1f)<<3:(j&64?128:0)|(j&64?64:0)|(j&0x3f)), 0); break;
   88cc8:	b9415be3 	ldr	w3, [sp, #344]
   88ccc:	b942b3e2 	ldr	w2, [sp, #688]
   88cd0:	f9414fe1 	ldr	x1, [sp, #664]
   88cd4:	17ffff99 	b	88b38 <disasm+0x4438>
   88cd8:	b94147e2 	ldr	w2, [sp, #324]
   88cdc:	b9414be3 	ldr	w3, [sp, #328]
   88ce0:	f940abe1 	ldr	x1, [sp, #336]
   88ce4:	17ffff95 	b	88b38 <disasm+0x4438>
		names="fcvt\0";
   88ce8:	f0000041 	adrp	x1, 93000 <sd_init+0xce8>
   88cec:	913ea021 	add	x1, x1, #0xfa8
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88cf0:	12001059 	and	w25, w2, #0x1f
   88cf4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_St; args[1]=disasm_arg_Dn; 
   88cf8:	128dd1c2 	mov	w2, #0xffff9171            	// #-28303
		names="fcvt\0";
   88cfc:	d1036020 	sub	x0, x1, #0xd8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88d00:	52800017 	mov	w23, #0x0                   	// #0
   88d04:	52800018 	mov	w24, #0x0                   	// #0
   88d08:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88d0c:	52800014 	mov	w20, #0x0                   	// #0
   88d10:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   88d14:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88d18:	290fffff 	stp	wzr, wzr, [sp, #124]
   88d1c:	29117fff 	stp	wzr, wzr, [sp, #136]
   88d20:	29127fff 	stp	wzr, wzr, [sp, #144]
   88d24:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_St; args[1]=disasm_arg_Dn; 
   88d28:	790583e2 	strh	w2, [sp, #704]
   88d2c:	17fff595 	b	86380 <disasm+0x1c80>
		names="fcvt\0";
   88d30:	f0000041 	adrp	x1, 93000 <sd_init+0xce8>
   88d34:	913ea021 	add	x1, x1, #0xfa8
		z=((ic32_22)&0x3); k=((ic32_15)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88d38:	120004c3 	and	w3, w6, #0x3
   88d3c:	12001059 	and	w25, w2, #0x1f
   88d40:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPk5t; args[1]=disasm_arg_FPz5n; 
   88d44:	12886802 	mov	w2, #0xffffbcbf            	// #-17217
		names="fcvt\0";
   88d48:	d1036020 	sub	x0, x1, #0xd8
		z=((ic32_22)&0x3); k=((ic32_15)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88d4c:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88d50:	52800018 	mov	w24, #0x0                   	// #0
   88d54:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88d58:	52800014 	mov	w20, #0x0                   	// #0
   88d5c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   88d60:	290effe3 	stp	w3, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88d64:	290fffff 	stp	wzr, wzr, [sp, #124]
   88d68:	29117fff 	stp	wzr, wzr, [sp, #136]
   88d6c:	29127fff 	stp	wzr, wzr, [sp, #144]
   88d70:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPk5t; args[1]=disasm_arg_FPz5n; 
   88d74:	790583e2 	strh	w2, [sp, #704]
   88d78:	17fff582 	b	86380 <disasm+0x1c80>
		names="fmov\0fabs\0fneg\0fsqrt\0?\0?\0?\0?\0frintn\0frintp\0frintm\0frintz\0frinta\0?\0frintx\0frinti\0";
   88d7c:	f0000043 	adrp	x3, 93000 <sd_init+0xce8>
   88d80:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_15)&0xf); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88d84:	12001059 	and	w25, w2, #0x1f
   88d88:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; 
   88d8c:	128868a2 	mov	w2, #0xffffbcba            	// #-17222
		op=((ic32_15)&0xf); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88d90:	12000cc1 	and	w1, w6, #0xf
   88d94:	120004f7 	and	w23, w7, #0x3
		names="fmov\0fabs\0fneg\0fsqrt\0?\0?\0?\0?\0frintn\0frintp\0frintm\0frintz\0frinta\0?\0frintx\0frinti\0";
   88d98:	d1034060 	sub	x0, x3, #0xd0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88d9c:	52800018 	mov	w24, #0x0                   	// #0
   88da0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88da4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   88da8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88dac:	290fffff 	stp	wzr, wzr, [sp, #124]
   88db0:	29117fff 	stp	wzr, wzr, [sp, #136]
   88db4:	29127fff 	stp	wzr, wzr, [sp, #144]
   88db8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; 
   88dbc:	790583e2 	strh	w2, [sp, #704]
   88dc0:	17fff570 	b	86380 <disasm+0x1c80>
		names="fcmp\0fcmpe\0";
   88dc4:	f0000040 	adrp	x0, 93000 <sd_init+0xce8>
   88dc8:	913ea000 	add	x0, x0, #0xfa8
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); 
   88dcc:	12001059 	and	w25, w2, #0x1f
   88dd0:	12000021 	and	w1, w1, #0x1
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_simd0; 
   88dd4:	128fe862 	mov	w2, #0xffff80bc            	// #-32580
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); 
   88dd8:	120004f7 	and	w23, w7, #0x3
		names="fcmp\0fcmpe\0";
   88ddc:	d101e000 	sub	x0, x0, #0x78
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88de0:	52800018 	mov	w24, #0x0                   	// #0
   88de4:	5280001b 	mov	w27, #0x0                   	// #0
   88de8:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88dec:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   88df0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88df4:	290fffff 	stp	wzr, wzr, [sp, #124]
   88df8:	29117fff 	stp	wzr, wzr, [sp, #136]
   88dfc:	29127fff 	stp	wzr, wzr, [sp, #144]
   88e00:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_simd0; 
   88e04:	790583e2 	strh	w2, [sp, #704]
   88e08:	17fff55e 	b	86380 <disasm+0x1c80>
		names="fcmp\0fcmpe\0";
   88e0c:	f0000040 	adrp	x0, 93000 <sd_init+0xce8>
   88e10:	913ea000 	add	x0, x0, #0xfa8
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); 
   88e14:	120010a3 	and	w3, w5, #0x1f
   88e18:	12001059 	and	w25, w2, #0x1f
   88e1c:	12000021 	and	w1, w1, #0x1
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_FPz5m; 
   88e20:	1287e862 	mov	w2, #0xffffc0bc            	// #-16196
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); 
   88e24:	120004f7 	and	w23, w7, #0x3
		names="fcmp\0fcmpe\0";
   88e28:	d101e000 	sub	x0, x0, #0x78
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88e2c:	52800018 	mov	w24, #0x0                   	// #0
   88e30:	5280001b 	mov	w27, #0x0                   	// #0
   88e34:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88e38:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   88e3c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88e40:	290fffe3 	stp	w3, wzr, [sp, #124]
   88e44:	29117fff 	stp	wzr, wzr, [sp, #136]
   88e48:	29127fff 	stp	wzr, wzr, [sp, #144]
   88e4c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_FPz5m; 
   88e50:	790583e2 	strh	w2, [sp, #704]
   88e54:	17fff54b 	b	86380 <disasm+0x1c80>
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88e58:	120010a4 	and	w4, w5, #0x1f
		names="ffcmp\0ffcmpe\0";
   88e5c:	f0000043 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88e60:	12001059 	and	w25, w2, #0x1f
		names="ffcmp\0ffcmpe\0";
   88e64:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_FPz5m; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   88e68:	52981782 	mov	w2, #0xc0bc                	// #49340
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88e6c:	12000c14 	and	w20, w0, #0xf
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_FPz5m; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   88e70:	72a1e1a2 	movk	w2, #0xf0d, lsl #16
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88e74:	12000021 	and	w1, w1, #0x1
   88e78:	120004f7 	and	w23, w7, #0x3
		names="ffcmp\0ffcmpe\0";
   88e7c:	d1018060 	sub	x0, x3, #0x60
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88e80:	52800018 	mov	w24, #0x0                   	// #0
   88e84:	5280001b 	mov	w27, #0x0                   	// #0
   88e88:	5280001a 	mov	w26, #0x0                   	// #0
	uint32_t i=0;
   88e8c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88e90:	290fffe4 	stp	w4, wzr, [sp, #124]
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88e94:	12000d44 	and	w4, w10, #0xf
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88e98:	b9008bff 	str	wzr, [sp, #136]
		op=((ic32_4)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   88e9c:	b9008fe4 	str	w4, [sp, #140]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88ea0:	29127fff 	stp	wzr, wzr, [sp, #144]
   88ea4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5n; args[1]=disasm_arg_FPz5m; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   88ea8:	b902c3e2 	str	w2, [sp, #704]
   88eac:	17fff535 	b	86380 <disasm+0x1c80>
		names="fmov\0";
   88eb0:	f0000041 	adrp	x1, 93000 <sd_init+0xce8>
   88eb4:	913ea021 	add	x1, x1, #0xfa8
		z=((ic32_22)&0x3); j=((ic32_13)&0xff); t=((ic32)&0x1f); 
   88eb8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_jz; 
   88ebc:	1287c8a2 	mov	w2, #0xffffc1ba            	// #-15942
		names="fmov\0";
   88ec0:	d101a020 	sub	x0, x1, #0x68
		z=((ic32_22)&0x3); j=((ic32_13)&0xff); t=((ic32)&0x1f); 
   88ec4:	120004f7 	and	w23, w7, #0x3
   88ec8:	12001d74 	and	w20, w11, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88ecc:	52800018 	mov	w24, #0x0                   	// #0
   88ed0:	52800019 	mov	w25, #0x0                   	// #0
   88ed4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88ed8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   88edc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88ee0:	290fffff 	stp	wzr, wzr, [sp, #124]
   88ee4:	29117fff 	stp	wzr, wzr, [sp, #136]
   88ee8:	29127fff 	stp	wzr, wzr, [sp, #144]
   88eec:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_jz; 
   88ef0:	790583e2 	strh	w2, [sp, #704]
   88ef4:	17fff523 	b	86380 <disasm+0x1c80>
		names="adc\0adcs\0sbc\0sbcs\0";
   88ef8:	b0000063 	adrp	x3, 95000 <sd_init+0x2ce8>
   88efc:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88f00:	120006a1 	and	w1, w21, #0x3
   88f04:	120010a4 	and	w4, w5, #0x1f
   88f08:	12001059 	and	w25, w2, #0x1f
   88f0c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   88f10:	528001c2 	mov	w2, #0xe                   	// #14
		names="adc\0adcs\0sbc\0sbcs\0";
   88f14:	91298060 	add	x0, x3, #0xa60
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88f18:	12001d3b 	and	w27, w9, #0xff
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   88f1c:	52812163 	mov	w3, #0x90b                 	// #2315
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88f20:	52800017 	mov	w23, #0x0                   	// #0
   88f24:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88f28:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   88f2c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88f30:	290fffe4 	stp	w4, wzr, [sp, #124]
   88f34:	29117fff 	stp	wzr, wzr, [sp, #136]
   88f38:	29127fff 	stp	wzr, wzr, [sp, #144]
   88f3c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   88f40:	790583e3 	strh	w3, [sp, #704]
   88f44:	390b0be2 	strb	w2, [sp, #706]
   88f48:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88f4c:	17fff50d 	b	86380 <disasm+0x1c80>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88f50:	f240019f 	tst	x12, #0x1
   88f54:	120014a5 	and	w5, w5, #0x3f
   88f58:	128007e4 	mov	w4, #0xffffffc0            	// #-64
   88f5c:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="sbfm\0bfm\0ubfm\0";
   88f60:	b0000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88f64:	12001059 	and	w25, w2, #0x1f
		names="sbfm\0bfm\0ubfm\0";
   88f68:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88f6c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_i; args[3]=disasm_arg_j; 
   88f70:	52812162 	mov	w2, #0x90b                 	// #2315
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88f74:	2a0400a0 	orr	w0, w5, w4
   88f78:	120006a1 	and	w1, w21, #0x3
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_i; args[3]=disasm_arg_j; 
   88f7c:	72a1a0e2 	movk	w2, #0xd07, lsl #16
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88f80:	12001d3b 	and	w27, w9, #0xff
   88f84:	12001694 	and	w20, w20, #0x3f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88f88:	52800017 	mov	w23, #0x0                   	// #0
   88f8c:	52800018 	mov	w24, #0x0                   	// #0
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88f90:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="sbfm\0bfm\0ubfm\0";
   88f94:	91294060 	add	x0, x3, #0xa50
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88f98:	290fffff 	stp	wzr, wzr, [sp, #124]
   88f9c:	29117fff 	stp	wzr, wzr, [sp, #136]
   88fa0:	29127fff 	stp	wzr, wzr, [sp, #144]
   88fa4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_i; args[3]=disasm_arg_j; 
   88fa8:	b902c3e2 	str	w2, [sp, #704]
   88fac:	a9435bf5 	ldp	x21, x22, [sp, #48]
   88fb0:	17fff4f4 	b	86380 <disasm+0x1c80>
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88fb4:	12001042 	and	w2, w2, #0x1f
   88fb8:	121b09ad 	and	w13, w13, #0xe0
		names="movi\0";
   88fbc:	f0000041 	adrp	x1, 93000 <sd_init+0xce8>
   88fc0:	913ea021 	add	x1, x1, #0xfa8
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   88fc4:	2a0201b4 	orr	w20, w13, w2
   88fc8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_imm64; 
   88fcc:	1289ede2 	mov	w2, #0xffffb090            	// #-20336
		names="movi\0";
   88fd0:	91004020 	add	x0, x1, #0x10
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88fd4:	52800017 	mov	w23, #0x0                   	// #0
   88fd8:	52800018 	mov	w24, #0x0                   	// #0
   88fdc:	52800019 	mov	w25, #0x0                   	// #0
   88fe0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   88fe4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   88fe8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   88fec:	290fffff 	stp	wzr, wzr, [sp, #124]
   88ff0:	29117fff 	stp	wzr, wzr, [sp, #136]
   88ff4:	29127fff 	stp	wzr, wzr, [sp, #144]
   88ff8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_imm64; 
   88ffc:	790583e2 	strh	w2, [sp, #704]
   89000:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89004:	17fff4df 	b	86380 <disasm+0x1c80>
		names="fmadd\0fmsub\0fnmadd\0fnmsub\0";
   89008:	d0000043 	adrp	x3, 93000 <sd_init+0xce8>
   8900c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_20)&0x2)|((ic32_15)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89010:	120010a4 	and	w4, w5, #0x1f
   89014:	121f0101 	and	w1, w8, #0x2
   89018:	120000c6 	and	w6, w6, #0x1
   8901c:	1200101a 	and	w26, w0, #0x1f
		names="fmadd\0fmsub\0fnmadd\0fnmsub\0";
   89020:	d1004060 	sub	x0, x3, #0x10
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; args[3]=disasm_arg_FPz5t; args[4]=disasm_arg_FPz5n; args[5]=disasm_arg_FPz5d; 
   89024:	52979743 	mov	w3, #0xbcba                	// #48314
		op=((ic32_20)&0x2)|((ic32_15)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89028:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; args[3]=disasm_arg_FPz5t; args[4]=disasm_arg_FPz5n; args[5]=disasm_arg_FPz5d; 
   8902c:	72b75803 	movk	w3, #0xbac0, lsl #16
   89030:	1287a862 	mov	w2, #0xffffc2bc            	// #-15684
		op=((ic32_20)&0x2)|((ic32_15)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89034:	2a060021 	orr	w1, w1, w6
   89038:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8903c:	52800018 	mov	w24, #0x0                   	// #0
   89040:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   89044:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89048:	290fffe4 	stp	w4, wzr, [sp, #124]
		op=((ic32_20)&0x2)|((ic32_15)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8904c:	12001284 	and	w4, w20, #0x1f
	uint16_t op=0, om=0, j=0;
   89050:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32_20)&0x2)|((ic32_15)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89054:	b9008be4 	str	w4, [sp, #136]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89058:	2911ffff 	stp	wzr, wzr, [sp, #140]
   8905c:	2912ffff 	stp	wzr, wzr, [sp, #148]
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; args[3]=disasm_arg_FPz5t; args[4]=disasm_arg_FPz5n; args[5]=disasm_arg_FPz5d; 
   89060:	b902c3e3 	str	w3, [sp, #704]
   89064:	79058be2 	strh	w2, [sp, #708]
   89068:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8906c:	17fff4c5 	b	86380 <disasm+0x1c80>
		z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89070:	120010a3 	and	w3, w5, #0x1f
		names="fcsel\0";
   89074:	d0000041 	adrp	x1, 93000 <sd_init+0xce8>
		z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89078:	12001059 	and	w25, w2, #0x1f
		names="fcsel\0";
   8907c:	913ea021 	add	x1, x1, #0xfa8
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; args[3]=disasm_arg_c; 
   89080:	52979742 	mov	w2, #0xbcba                	// #48314
		z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89084:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; args[3]=disasm_arg_c; 
   89088:	72a1f802 	movk	w2, #0xfc0, lsl #16
		names="fcsel\0";
   8908c:	d1006020 	sub	x0, x1, #0x18
		z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89090:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89094:	52800018 	mov	w24, #0x0                   	// #0
   89098:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8909c:	52800014 	mov	w20, #0x0                   	// #0
   890a0:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   890a4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   890a8:	290fffe3 	stp	w3, wzr, [sp, #124]
		z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   890ac:	12000d43 	and	w3, w10, #0xf
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   890b0:	b9008bff 	str	wzr, [sp, #136]
		z=((ic32_22)&0x3); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   890b4:	b9008fe3 	str	w3, [sp, #140]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   890b8:	29127fff 	stp	wzr, wzr, [sp, #144]
   890bc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; args[3]=disasm_arg_c; 
   890c0:	b902c3e2 	str	w2, [sp, #704]
   890c4:	17fff4af 	b	86380 <disasm+0x1c80>
		names="fmul\0fdiv\0fadd\0fsub\0fmax\0fmin\0fmaxnm\0fminmn\0fnmul\0";
   890c8:	d0000043 	adrp	x3, 93000 <sd_init+0xce8>
   890cc:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   890d0:	120010a4 	and	w4, w5, #0x1f
   890d4:	12001059 	and	w25, w2, #0x1f
   890d8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; 
   890dc:	128007e2 	mov	w2, #0xffffffc0            	// #-64
		names="fmul\0fdiv\0fadd\0fsub\0fmax\0fmin\0fmaxnm\0fminmn\0fnmul\0";
   890e0:	d1014060 	sub	x0, x3, #0x50
		op=((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   890e4:	12000d41 	and	w1, w10, #0xf
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; 
   890e8:	128868a3 	mov	w3, #0xffffbcba            	// #-17222
		op=((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   890ec:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   890f0:	52800018 	mov	w24, #0x0                   	// #0
   890f4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   890f8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   890fc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89100:	290fffe4 	stp	w4, wzr, [sp, #124]
   89104:	29117fff 	stp	wzr, wzr, [sp, #136]
   89108:	29127fff 	stp	wzr, wzr, [sp, #144]
   8910c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_FPz5m; 
   89110:	790583e3 	strh	w3, [sp, #704]
   89114:	390b0be2 	strb	w2, [sp, #706]
   89118:	17fff49a 	b	86380 <disasm+0x1c80>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_21)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); t=((ic32)&0x1f); 
   8911c:	f240011f 	tst	x8, #0x1
   89120:	12003c42 	and	w2, w2, #0xffff
   89124:	52bfffe4 	mov	w4, #0xffff0000            	// #-65536
   89128:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="movn\0?\0movz\0movk\0";
   8912c:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_21)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); t=((ic32)&0x1f); 
   89130:	1200101a 	and	w26, w0, #0x1f
		names="movn\0?\0movz\0movk\0";
   89134:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_21)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); t=((ic32)&0x1f); 
   89138:	2a040040 	orr	w0, w2, w4
   8913c:	120006a1 	and	w1, w21, #0x3
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_i; args[2]=disasm_arg_j16_opt; 
   89140:	52800182 	mov	w2, #0xc                   	// #12
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_21)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); t=((ic32)&0x1f); 
   89144:	12001d3b 	and	w27, w9, #0xff
   89148:	12000594 	and	w20, w12, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8914c:	52800017 	mov	w23, #0x0                   	// #0
   89150:	52800018 	mov	w24, #0x0                   	// #0
   89154:	52800019 	mov	w25, #0x0                   	// #0
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_21)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); t=((ic32)&0x1f); 
   89158:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="movn\0?\0movz\0movk\0";
   8915c:	9128e060 	add	x0, x3, #0xa38
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_i; args[2]=disasm_arg_j16_opt; 
   89160:	5280e163 	mov	w3, #0x70b                 	// #1803
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89164:	290fffff 	stp	wzr, wzr, [sp, #124]
   89168:	29117fff 	stp	wzr, wzr, [sp, #136]
   8916c:	29127fff 	stp	wzr, wzr, [sp, #144]
   89170:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_i; args[2]=disasm_arg_j16_opt; 
   89174:	790583e3 	strh	w3, [sp, #704]
   89178:	390b0be2 	strb	w2, [sp, #706]
   8917c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89180:	17fff480 	b	86380 <disasm+0x1c80>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); k=((ic32_22)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89184:	f240019f 	tst	x12, #0x1
   89188:	120014a5 	and	w5, w5, #0x3f
   8918c:	128007e4 	mov	w4, #0xffffffc0            	// #-64
   89190:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="and\0orr\0eor\0ands\0";
   89194:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); k=((ic32_22)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89198:	1200101a 	and	w26, w0, #0x1f
		names="and\0orr\0eor\0ands\0";
   8919c:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); k=((ic32_22)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   891a0:	2a0400a0 	orr	w0, w5, w4
   891a4:	120006a1 	and	w1, w21, #0x3
   891a8:	120000e6 	and	w6, w7, #0x1
   891ac:	12001059 	and	w25, w2, #0x1f
   891b0:	12001d3b 	and	w27, w9, #0xff
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_Rn; args[2]=disasm_arg_ib; 
   891b4:	52800142 	mov	w2, #0xa                   	// #10
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); k=((ic32_22)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   891b8:	12001694 	and	w20, w20, #0x3f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   891bc:	52800017 	mov	w23, #0x0                   	// #0
   891c0:	52800018 	mov	w24, #0x0                   	// #0
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); k=((ic32_22)&0x1); i=((ic32_21)&1?(-1<<6):0)|((ic32_16)&0x3f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   891c4:	290e83e6 	stp	w6, w0, [sp, #116]
		names="and\0orr\0eor\0ands\0";
   891c8:	91288060 	add	x0, x3, #0xa20
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_Rn; args[2]=disasm_arg_ib; 
   891cc:	528120a3 	mov	w3, #0x905                 	// #2309
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   891d0:	290fffff 	stp	wzr, wzr, [sp, #124]
   891d4:	29117fff 	stp	wzr, wzr, [sp, #136]
   891d8:	29127fff 	stp	wzr, wzr, [sp, #144]
   891dc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_Rn; args[2]=disasm_arg_ib; 
   891e0:	790583e3 	strh	w3, [sp, #704]
   891e4:	390b0be2 	strb	w2, [sp, #706]
   891e8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   891ec:	17fff465 	b	86380 <disasm+0x1c80>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_22)&0x3); i=((ic32_21)&1?(-1<<12):0)|((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   891f0:	f240019f 	tst	x12, #0x1
   891f4:	12002e85 	and	w5, w20, #0xfff
   891f8:	1281ffe4 	mov	w4, #0xfffff000            	// #-4096
   891fc:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="add\0adds\0sub\0subs\0";
   89200:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_22)&0x3); i=((ic32_21)&1?(-1<<12):0)|((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89204:	12001059 	and	w25, w2, #0x1f
		names="add\0adds\0sub\0subs\0";
   89208:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_22)&0x3); i=((ic32_21)&1?(-1<<12):0)|((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8920c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_RnS; args[2]=disasm_arg_i; args[3]=disasm_arg_j12_opt; 
   89210:	5280c0a2 	mov	w2, #0x605                 	// #1541
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_22)&0x3); i=((ic32_21)&1?(-1<<12):0)|((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89214:	2a0400a0 	orr	w0, w5, w4
   89218:	120006a1 	and	w1, w21, #0x3
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_RnS; args[2]=disasm_arg_i; args[3]=disasm_arg_j12_opt; 
   8921c:	72a100e2 	movk	w2, #0x807, lsl #16
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_22)&0x3); i=((ic32_21)&1?(-1<<12):0)|((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89220:	12001d3b 	and	w27, w9, #0xff
   89224:	120004f4 	and	w20, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89228:	52800017 	mov	w23, #0x0                   	// #0
   8922c:	52800018 	mov	w24, #0x0                   	// #0
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); j=((ic32_22)&0x3); i=((ic32_21)&1?(-1<<12):0)|((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89230:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="add\0adds\0sub\0subs\0";
   89234:	9126e060 	add	x0, x3, #0x9b8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89238:	290fffff 	stp	wzr, wzr, [sp, #124]
   8923c:	29117fff 	stp	wzr, wzr, [sp, #136]
   89240:	29127fff 	stp	wzr, wzr, [sp, #144]
   89244:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_RnS; args[2]=disasm_arg_i; args[3]=disasm_arg_j12_opt; 
   89248:	b902c3e2 	str	w2, [sp, #704]
   8924c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89250:	17fff44c 	b	86380 <disasm+0x1c80>
		op=((ic32_31)&0x1); j=((ic32_29)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89254:	f240021f 	tst	x16, #0x1
   89258:	12004842 	and	w2, w2, #0x7ffff
   8925c:	52bfff04 	mov	w4, #0xfff80000            	// #-524288
   89260:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="adr\0adrp\0";
   89264:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_31)&0x1); j=((ic32_29)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89268:	1200101a 	and	w26, w0, #0x1f
		names="adr\0adrp\0";
   8926c:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_31)&0x1); j=((ic32_29)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89270:	2a040040 	orr	w0, w2, w4
   89274:	120006b4 	and	w20, w21, #0x3
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_labelij1; 
   89278:	52808062 	mov	w2, #0x403                 	// #1027
		op=((ic32_31)&0x1); j=((ic32_29)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8927c:	12003d21 	and	w1, w9, #0xffff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89280:	52800017 	mov	w23, #0x0                   	// #0
   89284:	52800018 	mov	w24, #0x0                   	// #0
   89288:	52800019 	mov	w25, #0x0                   	// #0
   8928c:	5280001b 	mov	w27, #0x0                   	// #0
		op=((ic32_31)&0x1); j=((ic32_29)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89290:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="adr\0adrp\0";
   89294:	91284060 	add	x0, x3, #0xa10
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89298:	290fffff 	stp	wzr, wzr, [sp, #124]
   8929c:	29117fff 	stp	wzr, wzr, [sp, #136]
   892a0:	29127fff 	stp	wzr, wzr, [sp, #144]
   892a4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_labelij1; 
   892a8:	790583e2 	strh	w2, [sp, #704]
   892ac:	a9435bf5 	ldp	x21, x22, [sp, #48]
   892b0:	17fff434 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0xc)|((ic32_23)&0x2)|((ic32_21)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   892b4:	121e0421 	and	w1, w1, #0xc
   892b8:	121f0210 	and	w16, w16, #0x2
   892bc:	2a100021 	orr	w1, w1, w16
   892c0:	12000186 	and	w6, w12, #0x1
		names="and\0bic\0add\0?\0orr\0orn\0adds\0?\0eor\0eon\0sub\0?\0ands\0bics\0subs\0";
   892c4:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_27)&0xc)|((ic32_23)&0x2)|((ic32_21)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   892c8:	12001059 	and	w25, w2, #0x1f
		names="and\0bic\0add\0?\0orr\0orn\0adds\0?\0eor\0eon\0sub\0?\0ands\0bics\0subs\0";
   892cc:	9102a063 	add	x3, x3, #0xa8
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_shiftj_opt; 
   892d0:	52812162 	mov	w2, #0x90b                 	// #2315
		op=((ic32_27)&0xc)|((ic32_23)&0x2)|((ic32_21)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   892d4:	120010a4 	and	w4, w5, #0x1f
   892d8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_shiftj_opt; 
   892dc:	72ac61c2 	movk	w2, #0x630e, lsl #16
		op=((ic32_27)&0xc)|((ic32_23)&0x2)|((ic32_21)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   892e0:	2a060021 	orr	w1, w1, w6
   892e4:	12001d3b 	and	w27, w9, #0xff
   892e8:	120004f7 	and	w23, w7, #0x3
   892ec:	12001694 	and	w20, w20, #0x3f
		names="and\0bic\0add\0?\0orr\0orn\0adds\0?\0eor\0eon\0sub\0?\0ands\0bics\0subs\0";
   892f0:	91274060 	add	x0, x3, #0x9d0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   892f4:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   892f8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   892fc:	290fffe4 	stp	w4, wzr, [sp, #124]
   89300:	29117fff 	stp	wzr, wzr, [sp, #136]
   89304:	29127fff 	stp	wzr, wzr, [sp, #144]
   89308:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_shiftj_opt; 
   8930c:	b902c3e2 	str	w2, [sp, #704]
   89310:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89314:	17fff41b 	b	86380 <disasm+0x1c80>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89318:	120010a4 	and	w4, w5, #0x1f
		names="add\0adds\0sub\0subs\0";
   8931c:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89320:	12001059 	and	w25, w2, #0x1f
		names="add\0adds\0sub\0subs\0";
   89324:	9102a063 	add	x3, x3, #0xa8
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_RnS; args[2]=disasm_arg_Rsom; args[3]=disasm_arg_exts; 
   89328:	5280c0a2 	mov	w2, #0x605                 	// #1541
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8932c:	120006a1 	and	w1, w21, #0x3
   89330:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_RnS; args[2]=disasm_arg_Rsom; args[3]=disasm_arg_exts; 
   89334:	72acac82 	movk	w2, #0x6564, lsl #16
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89338:	12001d3b 	and	w27, w9, #0xff
   8933c:	12000a94 	and	w20, w20, #0x7
		names="add\0adds\0sub\0subs\0";
   89340:	9126e060 	add	x0, x3, #0x9b8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89344:	52800017 	mov	w23, #0x0                   	// #0
   89348:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8934c:	290effff 	stp	wzr, wzr, [sp, #116]
		op=((ic32_29)&0x3); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89350:	b9007fe4 	str	w4, [sp, #124]
   89354:	12000964 	and	w4, w11, #0x7
   89358:	b90083e4 	str	w4, [sp, #128]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8935c:	29117fff 	stp	wzr, wzr, [sp, #136]
   89360:	29127fff 	stp	wzr, wzr, [sp, #144]
   89364:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_RtS; args[1]=disasm_arg_RnS; args[2]=disasm_arg_Rsom; args[3]=disasm_arg_exts; 
   89368:	b902c3e2 	str	w2, [sp, #704]
   8936c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89370:	17fff404 	b	86380 <disasm+0x1c80>
		names="str\0ldr\0";
   89374:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
   89378:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8937c:	1200101a 	and	w26, w0, #0x1f
		names="str\0ldr\0";
   89380:	9119e060 	add	x0, x3, #0x678
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   89384:	52852b63 	mov	w3, #0x295b                	// #10587
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89388:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8938c:	72ab8543 	movk	w3, #0x5c2a, lsl #16
   89390:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89394:	120000e1 	and	w1, w7, #0x1
   89398:	12001c97 	and	w23, w4, #0xff
   8939c:	1200021b 	and	w27, w16, #0x1
   893a0:	12002e94 	and	w20, w20, #0xfff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   893a4:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   893a8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   893ac:	290fffff 	stp	wzr, wzr, [sp, #124]
   893b0:	29117fff 	stp	wzr, wzr, [sp, #136]
   893b4:	29127fff 	stp	wzr, wzr, [sp, #144]
   893b8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   893bc:	b902c3e3 	str	w3, [sp, #704]
   893c0:	390b13e2 	strb	w2, [sp, #708]
   893c4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   893c8:	17fff3ee 	b	86380 <disasm+0x1c80>
		names="str\0ldr\0";
   893cc:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
   893d0:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   893d4:	12001c97 	and	w23, w4, #0xff
   893d8:	1200101a 	and	w26, w0, #0x1f
   893dc:	120010a4 	and	w4, w5, #0x1f
		names="str\0ldr\0";
   893e0:	9119e060 	add	x0, x3, #0x678
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountz; args[5]=disasm_arg_offe; 
   893e4:	52852b63 	mov	w3, #0x295b                	// #10587
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   893e8:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountz; args[5]=disasm_arg_offe; 
   893ec:	72aba543 	movk	w3, #0x5d2a, lsl #16
   893f0:	52856be2 	mov	w2, #0x2b5f                	// #11103
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   893f4:	120000e1 	and	w1, w7, #0x1
   893f8:	1200021b 	and	w27, w16, #0x1
   893fc:	12000154 	and	w20, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89400:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   89404:	290effff 	stp	wzr, wzr, [sp, #116]
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89408:	b9007fe4 	str	w4, [sp, #124]
   8940c:	12000964 	and	w4, w11, #0x7
   89410:	b90083e4 	str	w4, [sp, #128]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89414:	29117fff 	stp	wzr, wzr, [sp, #136]
   89418:	29127fff 	stp	wzr, wzr, [sp, #144]
   8941c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountz; args[5]=disasm_arg_offe; 
   89420:	b902c3e3 	str	w3, [sp, #704]
   89424:	79058be2 	strh	w2, [sp, #708]
   89428:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8942c:	17fff3d5 	b	86380 <disasm+0x1c80>
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89430:	f240011f 	tst	x8, #0x1
   89434:	1200214a 	and	w10, w10, #0x1ff
   89438:	12803fe5 	mov	w5, #0xfffffe00            	// #-512
   8943c:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="str\0ldr\0";
   89440:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89444:	1200101a 	and	w26, w0, #0x1f
		names="str\0ldr\0";
   89448:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8944c:	2a050140 	orr	w0, w10, w5
   89450:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="str\0ldr\0";
   89454:	9119e060 	add	x0, x3, #0x678
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   89458:	52852b63 	mov	w3, #0x295b                	// #10587
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8945c:	12001c97 	and	w23, w4, #0xff
   89460:	12001059 	and	w25, w2, #0x1f
   89464:	120001a4 	and	w4, w13, #0x1
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   89468:	52800562 	mov	w2, #0x2b                  	// #43
   8946c:	72a22543 	movk	w3, #0x112a, lsl #16
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89470:	120000e1 	and	w1, w7, #0x1
   89474:	1200021b 	and	w27, w16, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89478:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8947c:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89480:	290fffff 	stp	wzr, wzr, [sp, #124]
   89484:	29117fff 	stp	wzr, wzr, [sp, #136]
   89488:	29127fe4 	stp	w4, wzr, [sp, #144]
   8948c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   89490:	b902c3e3 	str	w3, [sp, #704]
   89494:	390b13e2 	strb	w2, [sp, #708]
   89498:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8949c:	17fff3b9 	b	86380 <disasm+0x1c80>
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   894a0:	f240011f 	tst	x8, #0x1
   894a4:	1200214a 	and	w10, w10, #0x1ff
   894a8:	12803fe5 	mov	w5, #0xfffffe00            	// #-512
   894ac:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="str\0ldr\0";
   894b0:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   894b4:	1200101a 	and	w26, w0, #0x1f
		names="str\0ldr\0";
   894b8:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   894bc:	2a050140 	orr	w0, w10, w5
   894c0:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="str\0ldr\0";
   894c4:	9119e060 	add	x0, x3, #0x678
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   894c8:	52852b63 	mov	w3, #0x295b                	// #10587
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   894cc:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   894d0:	72a56543 	movk	w3, #0x2b2a, lsl #16
   894d4:	52800222 	mov	w2, #0x11                  	// #17
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   894d8:	120000e1 	and	w1, w7, #0x1
   894dc:	12001c97 	and	w23, w4, #0xff
   894e0:	1200021b 	and	w27, w16, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   894e4:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   894e8:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   894ec:	290fffff 	stp	wzr, wzr, [sp, #124]
   894f0:	29117fff 	stp	wzr, wzr, [sp, #136]
   894f4:	29127fff 	stp	wzr, wzr, [sp, #144]
   894f8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   894fc:	b902c3e3 	str	w3, [sp, #704]
   89500:	390b13e2 	strb	w2, [sp, #708]
   89504:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89508:	17fff39e 	b	86380 <disasm+0x1c80>
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8950c:	f240011f 	tst	x8, #0x1
   89510:	1200214a 	and	w10, w10, #0x1ff
   89514:	12803fe5 	mov	w5, #0xfffffe00            	// #-512
   89518:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="stur\0ldur\0";
   8951c:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89520:	1200101a 	and	w26, w0, #0x1f
		names="stur\0ldur\0";
   89524:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89528:	2a050140 	orr	w0, w10, w5
   8952c:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="stur\0ldur\0";
   89530:	9126a060 	add	x0, x3, #0x9a8
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   89534:	52852b63 	mov	w3, #0x295b                	// #10587
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89538:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8953c:	72a22543 	movk	w3, #0x112a, lsl #16
   89540:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); s=((ic32_23)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89544:	120000e1 	and	w1, w7, #0x1
   89548:	12001c97 	and	w23, w4, #0xff
   8954c:	1200021b 	and	w27, w16, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89550:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89554:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89558:	290fffff 	stp	wzr, wzr, [sp, #124]
   8955c:	29117fff 	stp	wzr, wzr, [sp, #136]
   89560:	29127fff 	stp	wzr, wzr, [sp, #144]
   89564:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPst; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   89568:	b902c3e3 	str	w3, [sp, #704]
   8956c:	390b13e2 	strb	w2, [sp, #708]
   89570:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89574:	17fff383 	b	86380 <disasm+0x1c80>
		names="ccmn\0ccmp\0";
   89578:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); b=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   8957c:	12000081 	and	w1, w4, #0x1
		names="ccmn\0ccmp\0";
   89580:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); b=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   89584:	120010a4 	and	w4, w5, #0x1f
   89588:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rn; args[1]=disasm_arg_b; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   8958c:	52848122 	mov	w2, #0x2409                	// #9225
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); b=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   89590:	12000c14 	and	w20, w0, #0xf
		args[0]=disasm_arg_Rn; args[1]=disasm_arg_b; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   89594:	72a1e1a2 	movk	w2, #0xf0d, lsl #16
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); b=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   89598:	12001d3b 	and	w27, w9, #0xff
		names="ccmn\0ccmp\0";
   8959c:	91266060 	add	x0, x3, #0x998
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   895a0:	52800017 	mov	w23, #0x0                   	// #0
   895a4:	52800018 	mov	w24, #0x0                   	// #0
   895a8:	5280001a 	mov	w26, #0x0                   	// #0
	uint32_t i=0;
   895ac:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   895b0:	290fffff 	stp	wzr, wzr, [sp, #124]
   895b4:	b9008bff 	str	wzr, [sp, #136]
   895b8:	29127fff 	stp	wzr, wzr, [sp, #144]
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); b=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   895bc:	b9009be4 	str	w4, [sp, #152]
   895c0:	12000d44 	and	w4, w10, #0xf
   895c4:	b9008fe4 	str	w4, [sp, #140]
		args[0]=disasm_arg_Rn; args[1]=disasm_arg_b; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   895c8:	b902c3e2 	str	w2, [sp, #704]
   895cc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   895d0:	17fff36c 	b	86380 <disasm+0x1c80>
		names="ccmn\0ccmp\0";
   895d4:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   895d8:	12000081 	and	w1, w4, #0x1
		names="ccmn\0ccmp\0";
   895dc:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   895e0:	120010a4 	and	w4, w5, #0x1f
   895e4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rn; args[1]=disasm_arg_Rm; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   895e8:	5281c122 	mov	w2, #0xe09                 	// #3593
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   895ec:	12000c14 	and	w20, w0, #0xf
		args[0]=disasm_arg_Rn; args[1]=disasm_arg_Rm; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   895f0:	72a1e1a2 	movk	w2, #0xf0d, lsl #16
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   895f4:	12001d3b 	and	w27, w9, #0xff
		names="ccmn\0ccmp\0";
   895f8:	91266060 	add	x0, x3, #0x998
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   895fc:	52800017 	mov	w23, #0x0                   	// #0
   89600:	52800018 	mov	w24, #0x0                   	// #0
   89604:	5280001a 	mov	w26, #0x0                   	// #0
	uint32_t i=0;
   89608:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8960c:	290fffe4 	stp	w4, wzr, [sp, #124]
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   89610:	12000d44 	and	w4, w10, #0xf
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89614:	b9008bff 	str	wzr, [sp, #136]
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); j=((ic32)&0xf); 
   89618:	b9008fe4 	str	w4, [sp, #140]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8961c:	29127fff 	stp	wzr, wzr, [sp, #144]
   89620:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rn; args[1]=disasm_arg_Rm; args[2]=disasm_arg_j; args[3]=disasm_arg_c; 
   89624:	b902c3e2 	str	w2, [sp, #704]
   89628:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8962c:	17fff355 	b	86380 <disasm+0x1c80>
		op=((ic32_23)&0x2)|((ic32_22)&0x1); z=((ic32_30)&0x3); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89630:	f240019f 	tst	x12, #0x1
   89634:	120018c3 	and	w3, w6, #0x7f
   89638:	12800fe8 	mov	w8, #0xffffff80            	// #-128
   8963c:	1200101a 	and	w26, w0, #0x1f
   89640:	1a9f1108 	csel	w8, w8, wzr, ne  // ne = any
   89644:	12000200 	and	w0, w16, #0x1
   89648:	120000e7 	and	w7, w7, #0x1
   8964c:	121f0201 	and	w1, w16, #0x2
		names="stnp\0ldnp\0stp\0ldp\0";
   89650:	90000065 	adrp	x5, 95000 <sd_init+0x2ce8>
   89654:	9102a0a5 	add	x5, x5, #0xa8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89658:	29127fe0 	stp	w0, wzr, [sp, #144]
		op=((ic32_23)&0x2)|((ic32_22)&0x1); z=((ic32_30)&0x3); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8965c:	2a080060 	orr	w0, w3, w8
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_iz4_opt; args[5]=disasm_arg_offe; 
   89660:	528aea83 	mov	w3, #0x5754                	// #22356
		op=((ic32_23)&0x2)|((ic32_22)&0x1); z=((ic32_30)&0x3); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89664:	12001c97 	and	w23, w4, #0xff
   89668:	12001059 	and	w25, w2, #0x1f
   8966c:	12001284 	and	w4, w20, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_iz4_opt; args[5]=disasm_arg_offe; 
   89670:	52856b02 	mov	w2, #0x2b58                	// #11096
   89674:	72a54523 	movk	w3, #0x2a29, lsl #16
		op=((ic32_23)&0x2)|((ic32_22)&0x1); z=((ic32_30)&0x3); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89678:	2a070021 	orr	w1, w1, w7
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8967c:	52800018 	mov	w24, #0x0                   	// #0
   89680:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89684:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89688:	b90077ff 	str	wzr, [sp, #116]
		op=((ic32_23)&0x2)|((ic32_22)&0x1); z=((ic32_30)&0x3); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8968c:	b9007be0 	str	w0, [sp, #120]
		names="stnp\0ldnp\0stp\0ldp\0";
   89690:	9123e0a0 	add	x0, x5, #0x8f8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89694:	290fffe4 	stp	w4, wzr, [sp, #124]
   89698:	29117fff 	stp	wzr, wzr, [sp, #136]
   8969c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_iz4_opt; args[5]=disasm_arg_offe; 
   896a0:	b902c3e3 	str	w3, [sp, #704]
   896a4:	79058be2 	strh	w2, [sp, #708]
   896a8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   896ac:	17fff335 	b	86380 <disasm+0x1c80>
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   896b0:	f240019f 	tst	x12, #0x1
   896b4:	120018c6 	and	w6, w6, #0x7f
   896b8:	12800fe5 	mov	w5, #0xffffff80            	// #-128
   896bc:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="stp\0ldp\0";
   896c0:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   896c4:	1200101a 	and	w26, w0, #0x1f
		names="stp\0ldp\0";
   896c8:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   896cc:	2a0500c0 	orr	w0, w6, w5
   896d0:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="stp\0ldp\0";
   896d4:	9123a060 	add	x0, x3, #0x8e8
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_iz4_opt; 
   896d8:	528aea83 	mov	w3, #0x5754                	// #22356
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   896dc:	12001c97 	and	w23, w4, #0xff
   896e0:	12001059 	and	w25, w2, #0x1f
   896e4:	12001284 	and	w4, w20, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_iz4_opt; 
   896e8:	528b0562 	mov	w2, #0x582b                	// #22571
   896ec:	72a54523 	movk	w3, #0x2a29, lsl #16
		op=((ic32_22)&0x1); z=((ic32_30)&0x3); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   896f0:	120000e1 	and	w1, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   896f4:	52800018 	mov	w24, #0x0                   	// #0
   896f8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   896fc:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89700:	290fffe4 	stp	w4, wzr, [sp, #124]
   89704:	29117fff 	stp	wzr, wzr, [sp, #136]
   89708:	29127fff 	stp	wzr, wzr, [sp, #144]
   8970c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_iz4_opt; 
   89710:	b902c3e3 	str	w3, [sp, #704]
   89714:	79058be2 	strh	w2, [sp, #708]
   89718:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8971c:	17fff319 	b	86380 <disasm+0x1c80>
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); 
   89720:	120010a3 	and	w3, w5, #0x1f
		names="cmn\0cmp\0";
   89724:	90000060 	adrp	x0, 95000 <sd_init+0x2ce8>
   89728:	9102a000 	add	x0, x0, #0xa8
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); 
   8972c:	b9007fe3 	str	w3, [sp, #124]
   89730:	12000963 	and	w3, w11, #0x7
   89734:	12001059 	and	w25, w2, #0x1f
   89738:	12000081 	and	w1, w4, #0x1
		args[0]=disasm_arg_RnS; args[1]=disasm_arg_Rsom; args[2]=disasm_arg_exts; 
   8973c:	52800ca2 	mov	w2, #0x65                  	// #101
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); 
   89740:	12001d3b 	and	w27, w9, #0xff
   89744:	12000a94 	and	w20, w20, #0x7
		names="cmn\0cmp\0";
   89748:	91262000 	add	x0, x0, #0x988
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8974c:	52800017 	mov	w23, #0x0                   	// #0
   89750:	52800018 	mov	w24, #0x0                   	// #0
   89754:	5280001a 	mov	w26, #0x0                   	// #0
	uint32_t i=0;
   89758:	290effff 	stp	wzr, wzr, [sp, #116]
		op=((ic32_30)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_10)&0x7); n=((ic32_5)&0x1f); 
   8975c:	b90083e3 	str	w3, [sp, #128]
		args[0]=disasm_arg_RnS; args[1]=disasm_arg_Rsom; args[2]=disasm_arg_exts; 
   89760:	528c80c3 	mov	w3, #0x6406                	// #25606
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89764:	29117fff 	stp	wzr, wzr, [sp, #136]
   89768:	29127fff 	stp	wzr, wzr, [sp, #144]
   8976c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_RnS; args[1]=disasm_arg_Rsom; args[2]=disasm_arg_exts; 
   89770:	790583e3 	strh	w3, [sp, #704]
   89774:	390b0be2 	strb	w2, [sp, #706]
   89778:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8977c:	17fff301 	b	86380 <disasm+0x1c80>
		z=((ic32_30)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89780:	f240021f 	tst	x16, #0x1
   89784:	12004842 	and	w2, w2, #0x7ffff
   89788:	52bfff03 	mov	w3, #0xfff80000            	// #-524288
   8978c:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="ldr\0";
   89790:	d0000041 	adrp	x1, 93000 <sd_init+0xce8>
		z=((ic32_30)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89794:	1200101a 	and	w26, w0, #0x1f
		names="ldr\0";
   89798:	913ea021 	add	x1, x1, #0xfa8
		z=((ic32_30)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8979c:	2a030040 	orr	w0, w2, w3
   897a0:	12001c97 	and	w23, w4, #0xff
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_labeli4; 
   897a4:	52820a82 	mov	w2, #0x1054                	// #4180
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   897a8:	52800018 	mov	w24, #0x0                   	// #0
   897ac:	52800019 	mov	w25, #0x0                   	// #0
   897b0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   897b4:	52800014 	mov	w20, #0x0                   	// #0
		z=((ic32_30)&0x3); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   897b8:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldr\0";
   897bc:	91398020 	add	x0, x1, #0xe60
	uint16_t op=0, om=0, j=0;
   897c0:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   897c4:	290fffff 	stp	wzr, wzr, [sp, #124]
   897c8:	29117fff 	stp	wzr, wzr, [sp, #136]
   897cc:	29127fff 	stp	wzr, wzr, [sp, #144]
   897d0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_labeli4; 
   897d4:	790583e2 	strh	w2, [sp, #704]
   897d8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   897dc:	17fff2e9 	b	86380 <disasm+0x1c80>
		op=((ic32_29)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   897e0:	121f02a1 	and	w1, w21, #0x2
   897e4:	12000294 	and	w20, w20, #0x1
   897e8:	120010a4 	and	w4, w5, #0x1f
		names="csel\0csinc\0csinv\0csneg\0";
   897ec:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_29)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   897f0:	12001059 	and	w25, w2, #0x1f
		names="csel\0csinc\0csinv\0csneg\0";
   897f4:	9102a063 	add	x3, x3, #0xa8
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_c; 
   897f8:	52812162 	mov	w2, #0x90b                 	// #2315
		op=((ic32_29)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   897fc:	2a140021 	orr	w1, w1, w20
   89800:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_c; 
   89804:	72a1e1c2 	movk	w2, #0xf0e, lsl #16
		op=((ic32_29)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89808:	12001d3b 	and	w27, w9, #0xff
		names="csel\0csinc\0csinv\0csneg\0";
   8980c:	9125c060 	add	x0, x3, #0x970
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89810:	52800017 	mov	w23, #0x0                   	// #0
   89814:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89818:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8981c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89820:	290fffe4 	stp	w4, wzr, [sp, #124]
		op=((ic32_29)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89824:	12000d44 	and	w4, w10, #0xf
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89828:	b9008bff 	str	wzr, [sp, #136]
		op=((ic32_29)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); c=((ic32_12)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8982c:	b9008fe4 	str	w4, [sp, #140]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89830:	29127fff 	stp	wzr, wzr, [sp, #144]
   89834:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_c; 
   89838:	b902c3e2 	str	w2, [sp, #704]
   8983c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89840:	17fff2d0 	b	86380 <disasm+0x1c80>
		op=((ic32_11)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89844:	12000294 	and	w20, w20, #0x1
   89848:	121f01a1 	and	w1, w13, #0x2
		names="rbit\0rev16\0clz\0cls\0";
   8984c:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
   89850:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_11)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89854:	2a140021 	orr	w1, w1, w20
   89858:	12001059 	and	w25, w2, #0x1f
   8985c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; 
   89860:	52812162 	mov	w2, #0x90b                 	// #2315
		op=((ic32_11)&0x2)|((ic32_10)&0x1); s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89864:	12001d3b 	and	w27, w9, #0xff
		names="rbit\0rev16\0clz\0cls\0";
   89868:	91256060 	add	x0, x3, #0x958
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8986c:	52800017 	mov	w23, #0x0                   	// #0
   89870:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89874:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89878:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8987c:	290fffff 	stp	wzr, wzr, [sp, #124]
   89880:	29117fff 	stp	wzr, wzr, [sp, #136]
   89884:	29127fff 	stp	wzr, wzr, [sp, #144]
   89888:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; 
   8988c:	790583e2 	strh	w2, [sp, #704]
   89890:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89894:	17fff2bb 	b	86380 <disasm+0x1c80>
		names="rev\0";
   89898:	90000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   8989c:	9102a021 	add	x1, x1, #0xa8
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   898a0:	12001059 	and	w25, w2, #0x1f
   898a4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; 
   898a8:	52812162 	mov	w2, #0x90b                 	// #2315
		names="rev\0";
   898ac:	91254020 	add	x0, x1, #0x950
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   898b0:	12001d3b 	and	w27, w9, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   898b4:	52800017 	mov	w23, #0x0                   	// #0
   898b8:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   898bc:	52800014 	mov	w20, #0x0                   	// #0
   898c0:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   898c4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   898c8:	290fffff 	stp	wzr, wzr, [sp, #124]
   898cc:	29117fff 	stp	wzr, wzr, [sp, #136]
   898d0:	29127fff 	stp	wzr, wzr, [sp, #144]
   898d4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; 
   898d8:	790583e2 	strh	w2, [sp, #704]
   898dc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   898e0:	17fff2a8 	b	86380 <disasm+0x1c80>
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); t=((ic32)&0x1f); 
   898e4:	120010a2 	and	w2, w5, #0x1f
		names="ngc\0";
   898e8:	90000061 	adrp	x1, 95000 <sd_init+0x2ce8>
   898ec:	9102a021 	add	x1, x1, #0xa8
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); t=((ic32)&0x1f); 
   898f0:	1200101a 	and	w26, w0, #0x1f
   898f4:	12001d3b 	and	w27, w9, #0xff
		names="ngc\0";
   898f8:	91252020 	add	x0, x1, #0x948
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   898fc:	52800017 	mov	w23, #0x0                   	// #0
   89900:	52800018 	mov	w24, #0x0                   	// #0
   89904:	52800019 	mov	w25, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89908:	52800014 	mov	w20, #0x0                   	// #0
   8990c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   89910:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89914:	290fffe2 	stp	w2, wzr, [sp, #124]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; 
   89918:	5281c162 	mov	w2, #0xe0b                 	// #3595
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8991c:	29117fff 	stp	wzr, wzr, [sp, #136]
   89920:	29127fff 	stp	wzr, wzr, [sp, #144]
   89924:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; 
   89928:	790583e2 	strh	w2, [sp, #704]
   8992c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89930:	17fff294 	b	86380 <disasm+0x1c80>
		op=((ic32_30)&0x2)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89934:	f240011f 	tst	x8, #0x1
   89938:	121f0081 	and	w1, w4, #0x2
   8993c:	1200214a 	and	w10, w10, #0x1ff
   89940:	12803fe4 	mov	w4, #0xfffffe00            	// #-512
   89944:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="?\0ldtrsb\0ldursw\0ldtrsw\0";
   89948:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_30)&0x2)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8994c:	1200101a 	and	w26, w0, #0x1f
		names="?\0ldtrsb\0ldursw\0ldtrsw\0";
   89950:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_30)&0x2)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89954:	2a040140 	orr	w0, w10, w4
   89958:	120001ad 	and	w13, w13, #0x1
   8995c:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="?\0ldtrsb\0ldursw\0ldtrsw\0";
   89960:	9124c060 	add	x0, x3, #0x930
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   89964:	52852063 	mov	w3, #0x2903                	// #10499
		op=((ic32_30)&0x2)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89968:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8996c:	72a22543 	movk	w3, #0x112a, lsl #16
   89970:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_30)&0x2)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89974:	2a0d0021 	orr	w1, w1, w13
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89978:	52800017 	mov	w23, #0x0                   	// #0
   8997c:	52800018 	mov	w24, #0x0                   	// #0
   89980:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89984:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89988:	290fffff 	stp	wzr, wzr, [sp, #124]
   8998c:	29117fff 	stp	wzr, wzr, [sp, #136]
   89990:	29127fff 	stp	wzr, wzr, [sp, #144]
   89994:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   89998:	b902c3e3 	str	w3, [sp, #704]
   8999c:	390b13e2 	strb	w2, [sp, #708]
   899a0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   899a4:	17fff277 	b	86380 <disasm+0x1c80>
		op=((ic32_24)&0x1); b=((ic32_26)&0x20)|((ic32_19)&0x1f); i=((ic32_18)&1?(-1<<14):0)|((ic32_5)&0x3fff); t=((ic32)&0x1f); 
   899a8:	f9404fe1 	ldr	x1, [sp, #152]
   899ac:	1200137b 	and	w27, w27, #0x1f
   899b0:	12003442 	and	w2, w2, #0x3fff
   899b4:	1287ffe4 	mov	w4, #0xffffc000            	// #-16384
		names="tbz\0tbnz\0";
   899b8:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_24)&0x1); b=((ic32_26)&0x20)|((ic32_19)&0x1f); i=((ic32_18)&1?(-1<<14):0)|((ic32_5)&0x3fff); t=((ic32)&0x1f); 
   899bc:	1200101a 	and	w26, w0, #0x1f
   899c0:	f240003f 	tst	x1, #0x1
   899c4:	531a7c01 	lsr	w1, w0, #26
   899c8:	121b0021 	and	w1, w1, #0x20
   899cc:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
   899d0:	2a1b0021 	orr	w1, w1, w27
   899d4:	2a040040 	orr	w0, w2, w4
		names="tbz\0tbnz\0";
   899d8:	9102a063 	add	x3, x3, #0xa8
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_b; args[2]=disasm_arg_labeli4; 
   899dc:	52800202 	mov	w2, #0x10                  	// #16
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   899e0:	52800017 	mov	w23, #0x0                   	// #0
   899e4:	52800018 	mov	w24, #0x0                   	// #0
   899e8:	52800019 	mov	w25, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   899ec:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   899f0:	5280001b 	mov	w27, #0x0                   	// #0
		op=((ic32_24)&0x1); b=((ic32_26)&0x20)|((ic32_19)&0x1f); i=((ic32_18)&1?(-1<<14):0)|((ic32_5)&0x3fff); t=((ic32)&0x1f); 
   899f4:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="tbz\0tbnz\0";
   899f8:	91248060 	add	x0, x3, #0x920
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_b; args[2]=disasm_arg_labeli4; 
   899fc:	52848063 	mov	w3, #0x2403                	// #9219
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89a00:	290fffff 	stp	wzr, wzr, [sp, #124]
   89a04:	29117fff 	stp	wzr, wzr, [sp, #136]
   89a08:	29127fff 	stp	wzr, wzr, [sp, #144]
		op=((ic32_24)&0x1); b=((ic32_26)&0x20)|((ic32_19)&0x1f); i=((ic32_18)&1?(-1<<14):0)|((ic32_5)&0x3fff); t=((ic32)&0x1f); 
   89a0c:	b9009be1 	str	w1, [sp, #152]
   89a10:	120002c1 	and	w1, w22, #0x1
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_b; args[2]=disasm_arg_labeli4; 
   89a14:	790583e3 	strh	w3, [sp, #704]
   89a18:	390b0be2 	strb	w2, [sp, #706]
   89a1c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89a20:	17fff258 	b	86380 <disasm+0x1c80>
		op=((ic32_24)&0x1); s=((ic32_31)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89a24:	f240021f 	tst	x16, #0x1
   89a28:	12004842 	and	w2, w2, #0x7ffff
   89a2c:	52bfff04 	mov	w4, #0xfff80000            	// #-524288
   89a30:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="cbz\0cbnz\0";
   89a34:	90000063 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_24)&0x1); s=((ic32_31)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89a38:	1200101a 	and	w26, w0, #0x1f
		names="cbz\0cbnz\0";
   89a3c:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_24)&0x1); s=((ic32_31)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89a40:	2a040040 	orr	w0, w2, w4
   89a44:	120002c1 	and	w1, w22, #0x1
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_labeli4; 
   89a48:	52820162 	mov	w2, #0x100b                	// #4107
		op=((ic32_24)&0x1); s=((ic32_31)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89a4c:	12001d3b 	and	w27, w9, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89a50:	52800017 	mov	w23, #0x0                   	// #0
   89a54:	52800018 	mov	w24, #0x0                   	// #0
   89a58:	52800019 	mov	w25, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89a5c:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32_24)&0x1); s=((ic32_31)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   89a60:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="cbz\0cbnz\0";
   89a64:	91244060 	add	x0, x3, #0x910
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89a68:	290fffff 	stp	wzr, wzr, [sp, #124]
   89a6c:	29117fff 	stp	wzr, wzr, [sp, #136]
   89a70:	29127fff 	stp	wzr, wzr, [sp, #144]
   89a74:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_labeli4; 
   89a78:	790583e2 	strh	w2, [sp, #704]
   89a7c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89a80:	17fff240 	b	86380 <disasm+0x1c80>
		names="xtn2\0";
   89a84:	d0000041 	adrp	x1, 93000 <sd_init+0xce8>
   89a88:	913ea021 	add	x1, x1, #0xfa8
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89a8c:	12001059 	and	w25, w2, #0x1f
   89a90:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT2; 
   89a94:	128b3b42 	mov	w2, #0xffffa625            	// #-23003
		names="xtn2\0";
   89a98:	910e6020 	add	x0, x1, #0x398
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89a9c:	120004f7 	and	w23, w7, #0x3
		q=1;
   89aa0:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89aa4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89aa8:	52800014 	mov	w20, #0x0                   	// #0
   89aac:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   89ab0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89ab4:	290fffff 	stp	wzr, wzr, [sp, #124]
   89ab8:	29117fff 	stp	wzr, wzr, [sp, #136]
   89abc:	29127fff 	stp	wzr, wzr, [sp, #144]
   89ac0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT2; 
   89ac4:	790583e2 	strh	w2, [sp, #704]
   89ac8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89acc:	17fff22d 	b	86380 <disasm+0x1c80>
		names="fcvtl2\0";
   89ad0:	d0000041 	adrp	x1, 93000 <sd_init+0xce8>
   89ad4:	913ea021 	add	x1, x1, #0xfa8
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89ad8:	12001059 	and	w25, w2, #0x1f
   89adc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_Vnzq2; 
   89ae0:	128aeca2 	mov	w2, #0xffffa89a            	// #-22374
		names="fcvtl2\0";
   89ae4:	910e4020 	add	x0, x1, #0x390
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89ae8:	120000f7 	and	w23, w7, #0x1
		q=1;
   89aec:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89af0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89af4:	52800014 	mov	w20, #0x0                   	// #0
   89af8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   89afc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89b00:	290fffff 	stp	wzr, wzr, [sp, #124]
   89b04:	29117fff 	stp	wzr, wzr, [sp, #136]
   89b08:	29127fff 	stp	wzr, wzr, [sp, #144]
   89b0c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_Vnzq2; 
   89b10:	790583e2 	strh	w2, [sp, #704]
   89b14:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89b18:	17fff21a 	b	86380 <disasm+0x1c80>
		names="fcvtn2\0";
   89b1c:	d0000041 	adrp	x1, 93000 <sd_init+0xce8>
   89b20:	913ea021 	add	x1, x1, #0xfa8
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89b24:	12001059 	and	w25, w2, #0x1f
   89b28:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_Vnz3; 
   89b2c:	128b0b42 	mov	w2, #0xffffa7a5            	// #-22619
		names="fcvtn2\0";
   89b30:	910e2020 	add	x0, x1, #0x388
		z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89b34:	120000f7 	and	w23, w7, #0x1
		q=1;
   89b38:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89b3c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89b40:	52800014 	mov	w20, #0x0                   	// #0
   89b44:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   89b48:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89b4c:	290fffff 	stp	wzr, wzr, [sp, #124]
   89b50:	29117fff 	stp	wzr, wzr, [sp, #136]
   89b54:	29127fff 	stp	wzr, wzr, [sp, #144]
   89b58:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_Vnz3; 
   89b5c:	790583e2 	strh	w2, [sp, #704]
   89b60:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89b64:	17fff207 	b	86380 <disasm+0x1c80>
		names="aese\0aesd\0aesmc\0aesimc\0";
   89b68:	d0000043 	adrp	x3, 93000 <sd_init+0xce8>
   89b6c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89b70:	12001059 	and	w25, w2, #0x1f
   89b74:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt16b; args[1]=disasm_arg_Vn16b; 
   89b78:	528d4d22 	mov	w2, #0x6a69                	// #27241
		op=((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89b7c:	12000541 	and	w1, w10, #0x3
		names="aese\0aesd\0aesmc\0aesimc\0";
   89b80:	910dc060 	add	x0, x3, #0x370
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89b84:	52800017 	mov	w23, #0x0                   	// #0
   89b88:	52800018 	mov	w24, #0x0                   	// #0
   89b8c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89b90:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89b94:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89b98:	290fffff 	stp	wzr, wzr, [sp, #124]
   89b9c:	29117fff 	stp	wzr, wzr, [sp, #136]
   89ba0:	29127fff 	stp	wzr, wzr, [sp, #144]
   89ba4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt16b; args[1]=disasm_arg_Vn16b; 
   89ba8:	790583e2 	strh	w2, [sp, #704]
   89bac:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89bb0:	17fff1f4 	b	86380 <disasm+0x1c80>
		names="ins\0";
   89bb4:	d0000041 	adrp	x1, 93000 <sd_init+0xce8>
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_R2n; 
   89bb8:	52853443 	mov	w3, #0x29a2                	// #10658
		names="ins\0";
   89bbc:	913ea021 	add	x1, x1, #0xfa8
		j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89bc0:	12001059 	and	w25, w2, #0x1f
   89bc4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_R2n; 
   89bc8:	72a56e83 	movk	w3, #0x2b74, lsl #16
		names="ins\0";
   89bcc:	910da020 	add	x0, x1, #0x368
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_R2n; 
   89bd0:	12800b82 	mov	w2, #0xffffffa3            	// #-93
		j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89bd4:	120010b4 	and	w20, w5, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89bd8:	52800017 	mov	w23, #0x0                   	// #0
   89bdc:	52800018 	mov	w24, #0x0                   	// #0
   89be0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89be4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   89be8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89bec:	290fffff 	stp	wzr, wzr, [sp, #124]
   89bf0:	29117fff 	stp	wzr, wzr, [sp, #136]
   89bf4:	29127fff 	stp	wzr, wzr, [sp, #144]
   89bf8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_R2n; 
   89bfc:	b902c3e3 	str	w3, [sp, #704]
   89c00:	390b13e2 	strb	w2, [sp, #708]
   89c04:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89c08:	17fff1de 	b	86380 <disasm+0x1c80>
		names="stxrh\0stlxrh\0?\0?\0?\0?\0?\0?\0?\0?\0cash\0caslh\0?\0?\0casah\0casalh\0";
   89c0c:	d0000043 	adrp	x3, 93000 <sd_init+0xce8>
   89c10:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_20)&0xe)|((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89c14:	121f0901 	and	w1, w8, #0xe
   89c18:	120000c6 	and	w6, w6, #0x1
   89c1c:	1200101a 	and	w26, w0, #0x1f
		names="stxrh\0stlxrh\0?\0?\0?\0?\0?\0?\0?\0?\0cash\0caslh\0?\0?\0casah\0casalh\0";
   89c20:	910ca060 	add	x0, x3, #0x328
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   89c24:	528a6a43 	mov	w3, #0x5352                	// #21330
		op=((ic32_20)&0xe)|((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89c28:	120010a4 	and	w4, w5, #0x1f
   89c2c:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   89c30:	72a54523 	movk	w3, #0x2a29, lsl #16
   89c34:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_20)&0xe)|((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89c38:	2a060021 	orr	w1, w1, w6
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89c3c:	52800017 	mov	w23, #0x0                   	// #0
   89c40:	52800018 	mov	w24, #0x0                   	// #0
   89c44:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89c48:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89c4c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89c50:	290fffff 	stp	wzr, wzr, [sp, #124]
   89c54:	29117fe4 	stp	w4, wzr, [sp, #136]
   89c58:	29127fff 	stp	wzr, wzr, [sp, #144]
   89c5c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   89c60:	b902c3e3 	str	w3, [sp, #704]
   89c64:	390b13e2 	strb	w2, [sp, #708]
   89c68:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89c6c:	17fff1c5 	b	86380 <disasm+0x1c80>
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89c70:	531a7c01 	lsr	w1, w0, #26
   89c74:	121f056b 	and	w11, w11, #0x6
   89c78:	121d0021 	and	w1, w1, #0x8
   89c7c:	12000146 	and	w6, w10, #0x1
   89c80:	2a0b0021 	orr	w1, w1, w11
   89c84:	121f0294 	and	w20, w20, #0x2
   89c88:	1200018c 	and	w12, w12, #0x1
		names="smlal\0sqdmlal\0smlsl\0sqdmlsl\0smull\0sqdmull\0?\0?\0umlal\0?\0umlsl\0?\0umull\0";
   89c8c:	d0000043 	adrp	x3, 93000 <sd_init+0xce8>
   89c90:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89c94:	120010a4 	and	w4, w5, #0x1f
   89c98:	12001059 	and	w25, w2, #0x1f
   89c9c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   89ca0:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smlal\0sqdmlal\0smlsl\0sqdmlsl\0smull\0sqdmull\0?\0?\0umlal\0?\0umlsl\0?\0umull\0";
   89ca4:	910a6060 	add	x0, x3, #0x298
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89ca8:	2a060021 	orr	w1, w1, w6
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   89cac:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89cb0:	2a0c0294 	orr	w20, w20, w12
		z=2;q=0;
   89cb4:	52800057 	mov	w23, #0x2                   	// #2
   89cb8:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89cbc:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   89cc0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89cc4:	290fffe4 	stp	w4, wzr, [sp, #124]
   89cc8:	29117fff 	stp	wzr, wzr, [sp, #136]
   89ccc:	29127fff 	stp	wzr, wzr, [sp, #144]
   89cd0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   89cd4:	790583e3 	strh	w3, [sp, #704]
   89cd8:	390b0be2 	strb	w2, [sp, #706]
   89cdc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89ce0:	17fff1a8 	b	86380 <disasm+0x1c80>
		names="sshll\0usshll\0";
   89ce4:	d0000043 	adrp	x3, 93000 <sd_init+0xce8>
   89ce8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89cec:	120002a1 	and	w1, w21, #0x1
   89cf0:	12001059 	and	w25, w2, #0x1f
   89cf4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shlshift; 
   89cf8:	12800d42 	mov	w2, #0xffffff95            	// #-107
		names="sshll\0usshll\0";
   89cfc:	910c6060 	add	x0, x3, #0x318
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89d00:	120018b4 	and	w20, w5, #0x7f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shlshift; 
   89d04:	128d0d83 	mov	w3, #0xffff9793            	// #-26733
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89d08:	52800017 	mov	w23, #0x0                   	// #0
		q=0;
   89d0c:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89d10:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   89d14:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89d18:	290fffff 	stp	wzr, wzr, [sp, #124]
   89d1c:	29117fff 	stp	wzr, wzr, [sp, #136]
   89d20:	29127fff 	stp	wzr, wzr, [sp, #144]
   89d24:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shlshift; 
   89d28:	790583e3 	strh	w3, [sp, #704]
   89d2c:	390b0be2 	strb	w2, [sp, #706]
   89d30:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89d34:	17fff193 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89d38:	121e0021 	and	w1, w1, #0x4
   89d3c:	120005ad 	and	w13, w13, #0x3
		names="?\0rshrn\0sqshrn\0sqrshrn\0sqshrun\0sqrshrun\0uqshrn\0uqrshrn\0";
   89d40:	d0000043 	adrp	x3, 93000 <sd_init+0xce8>
   89d44:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89d48:	12001059 	and	w25, w2, #0x1f
   89d4c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shrshift; 
   89d50:	12800da2 	mov	w2, #0xffffff92            	// #-110
		names="?\0rshrn\0sqshrn\0sqrshrn\0sqshrun\0sqrshrun\0uqshrn\0uqrshrn\0";
   89d54:	910b8060 	add	x0, x3, #0x2e0
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89d58:	2a0d0021 	orr	w1, w1, w13
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shrshift; 
   89d5c:	128d0d83 	mov	w3, #0xffff9793            	// #-26733
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89d60:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89d64:	52800017 	mov	w23, #0x0                   	// #0
		q=0;
   89d68:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89d6c:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   89d70:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89d74:	290fffff 	stp	wzr, wzr, [sp, #124]
   89d78:	29117fff 	stp	wzr, wzr, [sp, #136]
   89d7c:	29127fff 	stp	wzr, wzr, [sp, #144]
   89d80:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shrshift; 
   89d84:	790583e3 	strh	w3, [sp, #704]
   89d88:	390b0be2 	strb	w2, [sp, #706]
   89d8c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89d90:	17fff17c 	b	86380 <disasm+0x1c80>
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89d94:	121d0361 	and	w1, w27, #0x8
   89d98:	121f056b 	and	w11, w11, #0x6
   89d9c:	2a0b0021 	orr	w1, w1, w11
   89da0:	12000146 	and	w6, w10, #0x1
   89da4:	121e01ef 	and	w15, w15, #0x4
   89da8:	12000508 	and	w8, w8, #0x3
		names="smlal\0sqdmlal\0smlsl\0sqdmlsl\0smull\0sqdmull\0?\0?\0umlal\0?\0umlsl\0?\0umull\0";
   89dac:	d0000043 	adrp	x3, 93000 <sd_init+0xce8>
   89db0:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89db4:	12000ca4 	and	w4, w5, #0xf
   89db8:	12001059 	and	w25, w2, #0x1f
   89dbc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   89dc0:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smlal\0sqdmlal\0smlsl\0sqdmlsl\0smull\0sqdmull\0?\0?\0umlal\0?\0umlsl\0?\0umull\0";
   89dc4:	910a6060 	add	x0, x3, #0x298
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89dc8:	2a060021 	orr	w1, w1, w6
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   89dcc:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89dd0:	2a0801f4 	orr	w20, w15, w8
		z=1;q=0;
   89dd4:	52800037 	mov	w23, #0x1                   	// #1
   89dd8:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89ddc:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   89de0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89de4:	290fffe4 	stp	w4, wzr, [sp, #124]
   89de8:	29117fff 	stp	wzr, wzr, [sp, #136]
   89dec:	29127fff 	stp	wzr, wzr, [sp, #144]
   89df0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   89df4:	790583e3 	strh	w3, [sp, #704]
   89df8:	390b0be2 	strb	w2, [sp, #706]
   89dfc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89e00:	17fff160 	b	86380 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89e04:	121c02e1 	and	w1, w23, #0x10
   89e08:	12000d4a 	and	w10, w10, #0xf
		names="saddl\0saddw\0ssubl\0ssubw\0addhn\0sabal\0subhn\0sabdl\0smlal\0sqdmlal\0smlsl\0sqdmlsl\0?\0sqdmull\0pmull\0?\0uaddl\0uaddw\0usubl\0usubw\0raddhn\0uabal\0rsubhn\0uabdl\0umlal\0?\0umlsl\0?\0?\0?\0umull\0";
   89e0c:	d0000043 	adrp	x3, 93000 <sd_init+0xce8>
   89e10:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89e14:	120010a4 	and	w4, w5, #0x1f
   89e18:	12001059 	and	w25, w2, #0x1f
   89e1c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   89e20:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="saddl\0saddw\0ssubl\0ssubw\0addhn\0sabal\0subhn\0sabdl\0smlal\0sqdmlal\0smlsl\0sqdmlsl\0?\0sqdmull\0pmull\0?\0uaddl\0uaddw\0usubl\0usubw\0raddhn\0uabal\0rsubhn\0uabdl\0umlal\0?\0umlsl\0?\0?\0?\0umull\0";
   89e24:	9107a060 	add	x0, x3, #0x1e8
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89e28:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   89e2c:	128f6aa3 	mov	w3, #0xffff84aa            	// #-31574
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89e30:	120004f7 	and	w23, w7, #0x3
		q=0;
   89e34:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89e38:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89e3c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89e40:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89e44:	290fffe4 	stp	w4, wzr, [sp, #124]
   89e48:	29117fff 	stp	wzr, wzr, [sp, #136]
   89e4c:	29127fff 	stp	wzr, wzr, [sp, #144]
   89e50:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   89e54:	790583e3 	strh	w3, [sp, #704]
   89e58:	390b0be2 	strb	w2, [sp, #706]
   89e5c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89e60:	17fff148 	b	86380 <disasm+0x1c80>
		names="pmull\0umull\0";
   89e64:	d0000043 	adrp	x3, 93000 <sd_init+0xce8>
   89e68:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_29)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89e6c:	120002a1 	and	w1, w21, #0x1
   89e70:	120010a4 	and	w4, w5, #0x1f
   89e74:	12001059 	and	w25, w2, #0x1f
   89e78:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT4; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   89e7c:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="pmull\0umull\0";
   89e80:	91076060 	add	x0, x3, #0x1d8
		op=((ic32_29)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89e84:	120004f7 	and	w23, w7, #0x3
		args[0]=disasm_arg_VtT4; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   89e88:	128f6a63 	mov	w3, #0xffff84ac            	// #-31572
		q=0;
   89e8c:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89e90:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89e94:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89e98:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89e9c:	290fffe4 	stp	w4, wzr, [sp, #124]
   89ea0:	29117fff 	stp	wzr, wzr, [sp, #136]
   89ea4:	29127fff 	stp	wzr, wzr, [sp, #144]
   89ea8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT4; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   89eac:	790583e3 	strh	w3, [sp, #704]
   89eb0:	390b0be2 	strb	w2, [sp, #706]
   89eb4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89eb8:	17fff132 	b	86380 <disasm+0x1c80>
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89ebc:	121f0301 	and	w1, w24, #0x2
   89ec0:	1200016b 	and	w11, w11, #0x1
		names="addhn\0subhn\0raddhn\0rsubhn\0";
   89ec4:	d0000043 	adrp	x3, 93000 <sd_init+0xce8>
   89ec8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89ecc:	120010a4 	and	w4, w5, #0x1f
   89ed0:	12001059 	and	w25, w2, #0x1f
   89ed4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT3; 
   89ed8:	12800a82 	mov	w2, #0xffffffab            	// #-85
		names="addhn\0subhn\0raddhn\0rsubhn\0";
   89edc:	9106e060 	add	x0, x3, #0x1b8
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89ee0:	2a0b0021 	orr	w1, w1, w11
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT3; 
   89ee4:	128edb43 	mov	w3, #0xffff8925            	// #-30427
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89ee8:	120004f7 	and	w23, w7, #0x3
		q=0;
   89eec:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89ef0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89ef4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89ef8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89efc:	290fffe4 	stp	w4, wzr, [sp, #124]
   89f00:	29117fff 	stp	wzr, wzr, [sp, #136]
   89f04:	29127fff 	stp	wzr, wzr, [sp, #144]
   89f08:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT3; 
   89f0c:	790583e3 	strh	w3, [sp, #704]
   89f10:	390b0be2 	strb	w2, [sp, #706]
   89f14:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89f18:	17fff11a 	b	86380 <disasm+0x1c80>
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89f1c:	121f0301 	and	w1, w24, #0x2
   89f20:	1200016b 	and	w11, w11, #0x1
		names="saddw\0ssubw\0uaddw\0usubw\0";
   89f24:	d0000043 	adrp	x3, 93000 <sd_init+0xce8>
   89f28:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89f2c:	120010a4 	and	w4, w5, #0x1f
   89f30:	12001059 	and	w25, w2, #0x1f
   89f34:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT; 
   89f38:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="saddw\0ssubw\0uaddw\0usubw\0";
   89f3c:	91066060 	add	x0, x3, #0x198
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89f40:	2a0b0021 	orr	w1, w1, w11
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT; 
   89f44:	128ecaa3 	mov	w3, #0xffff89aa            	// #-30294
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89f48:	120004f7 	and	w23, w7, #0x3
		q=0;
   89f4c:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89f50:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89f54:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89f58:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89f5c:	290fffe4 	stp	w4, wzr, [sp, #124]
   89f60:	29117fff 	stp	wzr, wzr, [sp, #136]
   89f64:	29127fff 	stp	wzr, wzr, [sp, #144]
   89f68:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT; 
   89f6c:	790583e3 	strh	w3, [sp, #704]
   89f70:	390b0be2 	strb	w2, [sp, #706]
   89f74:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89f78:	17fff102 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89f7c:	121e0021 	and	w1, w1, #0x4
   89f80:	1200056b 	and	w11, w11, #0x3
		names="?\0xtn\0sqxtn\0?\0?\0sqxtun\0uqxtn\0fcvtxn\0";
   89f84:	d0000043 	adrp	x3, 93000 <sd_init+0xce8>
   89f88:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89f8c:	12001059 	and	w25, w2, #0x1f
   89f90:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; 
   89f94:	128edb42 	mov	w2, #0xffff8925            	// #-30427
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89f98:	2a0b0021 	orr	w1, w1, w11
   89f9c:	120004f7 	and	w23, w7, #0x3
		names="?\0xtn\0sqxtn\0?\0?\0sqxtun\0uqxtn\0fcvtxn\0";
   89fa0:	9105c060 	add	x0, x3, #0x170
		q=0;
   89fa4:	52800018 	mov	w24, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89fa8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   89fac:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   89fb0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   89fb4:	290fffff 	stp	wzr, wzr, [sp, #124]
   89fb8:	29117fff 	stp	wzr, wzr, [sp, #136]
   89fbc:	29127fff 	stp	wzr, wzr, [sp, #144]
   89fc0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; 
   89fc4:	790583e2 	strh	w2, [sp, #704]
   89fc8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   89fcc:	17fff0ed 	b	86380 <disasm+0x1c80>
		names="ldaddb\0ldclrb\0ldeorb\0ldsetb\0ldsmaxb\0ldsminb\0ldumaxb\0lduminb\0swpb\0?\0?\0?\0?\0?\0?\0?\0ldaddlb\0ldclrlb\0ldeorlb\0ldsetlb\0ldsmaxlb\0ldsminlb\0ldumaxlb\0lduminlb\0swplb\0?\0?\0?\0?\0?\0?\0?\0ldaddab\0ldclrab\0ldeorab\0ldsetab\0ldsmaxab\0ldsminab\0ldumaxab\0lduminab\0swpab\0?\0?\0?\0?\0?\0?\0?\0ldaddalb\0ldclralb\0ldeoralb\0ldsetalb\0ldsmaxalb\0ldsminalb\0ldumaxalb\0lduminalb\0swpalb\0";
   89fd0:	d0000043 	adrp	x3, 93000 <sd_init+0xce8>
   89fd4:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89fd8:	121c0421 	and	w1, w1, #0x30
   89fdc:	12000d4a 	and	w10, w10, #0xf
   89fe0:	1200101a 	and	w26, w0, #0x1f
		names="ldaddb\0ldclrb\0ldeorb\0ldsetb\0ldsmaxb\0ldsminb\0ldumaxb\0lduminb\0swpb\0?\0?\0?\0?\0?\0?\0?\0ldaddlb\0ldclrlb\0ldeorlb\0ldsetlb\0ldsmaxlb\0ldsminlb\0ldumaxlb\0lduminlb\0swplb\0?\0?\0?\0?\0?\0?\0?\0ldaddab\0ldclrab\0ldeorab\0ldsetab\0ldsmaxab\0ldsminab\0ldumaxab\0lduminab\0swpab\0?\0?\0?\0?\0?\0?\0?\0ldaddalb\0ldclralb\0ldeoralb\0ldsetalb\0ldsmaxalb\0ldsminalb\0ldumaxalb\0lduminalb\0swpalb\0";
   89fe4:	91006060 	add	x0, x3, #0x18
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   89fe8:	528a6a43 	mov	w3, #0x5352                	// #21330
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89fec:	120010a4 	and	w4, w5, #0x1f
   89ff0:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   89ff4:	72a54523 	movk	w3, #0x2a29, lsl #16
   89ff8:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   89ffc:	2a0a0021 	orr	w1, w1, w10
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a000:	52800017 	mov	w23, #0x0                   	// #0
   8a004:	52800018 	mov	w24, #0x0                   	// #0
   8a008:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a00c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8a010:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a014:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a018:	29117fe4 	stp	w4, wzr, [sp, #136]
   8a01c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a020:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8a024:	b902c3e3 	str	w3, [sp, #704]
   8a028:	390b13e2 	strb	w2, [sp, #708]
   8a02c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a030:	17fff0d4 	b	86380 <disasm+0x1c80>
		j=((ic32_16)&0x1f); k=((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a034:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_Vnj; args[5]=disasm_arg_offs; args[6]=disasm_arg_FPidxk; args[7]=disasm_arg_offe; 
   8a038:	d2853442 	mov	x2, #0x29a2                	// #10658
   8a03c:	f2a56e82 	movk	x2, #0x2b74, lsl #16
		names="ins\0";
   8a040:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_Vnj; args[5]=disasm_arg_offs; args[6]=disasm_arg_FPidxk; args[7]=disasm_arg_offe; 
   8a044:	f2c52e62 	movk	x2, #0x2973, lsl #32
		names="ins\0";
   8a048:	913ea021 	add	x1, x1, #0xfa8
		j=((ic32_16)&0x1f); k=((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a04c:	12000da3 	and	w3, w13, #0xf
   8a050:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_Vnj; args[5]=disasm_arg_offs; args[6]=disasm_arg_FPidxk; args[7]=disasm_arg_offe; 
   8a054:	f2e57482 	movk	x2, #0x2ba4, lsl #48
		names="ins\0";
   8a058:	910da020 	add	x0, x1, #0x368
		j=((ic32_16)&0x1f); k=((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a05c:	120010b4 	and	w20, w5, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a060:	52800017 	mov	w23, #0x0                   	// #0
   8a064:	52800018 	mov	w24, #0x0                   	// #0
   8a068:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a06c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a070:	290effe3 	stp	w3, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a074:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a078:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a07c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a080:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj; args[1]=disasm_arg_offs; args[2]=disasm_arg_FPidx; args[3]=disasm_arg_offe; args[4]=disasm_arg_Vnj; args[5]=disasm_arg_offs; args[6]=disasm_arg_FPidxk; args[7]=disasm_arg_offe; 
   8a084:	f90163e2 	str	x2, [sp, #704]
   8a088:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a08c:	17fff0bd 	b	86380 <disasm+0x1c80>
		p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a090:	f240019f 	tst	x12, #0x1
   8a094:	120018c6 	and	w6, w6, #0x7f
   8a098:	12800fe3 	mov	w3, #0xffffff80            	// #-128
   8a09c:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="ldpsw\0";
   8a0a0:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
		p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a0a4:	1200101a 	and	w26, w0, #0x1f
		names="ldpsw\0";
   8a0a8:	913ea021 	add	x1, x1, #0xfa8
		p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a0ac:	2a0300c0 	orr	w0, w6, w3
   8a0b0:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldpsw\0";
   8a0b4:	9113c020 	add	x0, x1, #0x4f0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_im4_opt; args[5]=disasm_arg_offe; 
   8a0b8:	5285a061 	mov	w1, #0x2d03                	// #11523
		p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a0bc:	12000204 	and	w4, w16, #0x1
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_im4_opt; args[5]=disasm_arg_offe; 
   8a0c0:	72a54521 	movk	w1, #0x2a29, lsl #16
		p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a0c4:	12001059 	and	w25, w2, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a0c8:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_im4_opt; args[5]=disasm_arg_offe; 
   8a0cc:	52856b22 	mov	w2, #0x2b59                	// #11097
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a0d0:	52800018 	mov	w24, #0x0                   	// #0
   8a0d4:	5280001b 	mov	w27, #0x0                   	// #0
   8a0d8:	b90083ff 	str	wzr, [sp, #128]
   8a0dc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a0e0:	29127fe4 	stp	w4, wzr, [sp, #144]
		p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a0e4:	12001284 	and	w4, w20, #0x1f
	uint16_t op=0, om=0, j=0;
   8a0e8:	52800014 	mov	w20, #0x0                   	// #0
		p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a0ec:	b9007fe4 	str	w4, [sp, #124]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a0f0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_im4_opt; args[5]=disasm_arg_offe; 
   8a0f4:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   8a0f8:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_im4_opt; args[5]=disasm_arg_offe; 
   8a0fc:	79058be2 	strh	w2, [sp, #708]
   8a100:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a104:	17fff09f 	b	86380 <disasm+0x1c80>
		i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a108:	f240019f 	tst	x12, #0x1
   8a10c:	120018c6 	and	w6, w6, #0x7f
   8a110:	12800fe3 	mov	w3, #0xffffff80            	// #-128
   8a114:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="ldpsw\0";
   8a118:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
		i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a11c:	1200101a 	and	w26, w0, #0x1f
		names="ldpsw\0";
   8a120:	913ea021 	add	x1, x1, #0xfa8
		i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a124:	2a0300c0 	orr	w0, w6, w3
   8a128:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldpsw\0";
   8a12c:	9113c020 	add	x0, x1, #0x4f0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_im4_opt; 
   8a130:	5285a061 	mov	w1, #0x2d03                	// #11523
		i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a134:	12001284 	and	w4, w20, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_im4_opt; 
   8a138:	72a54521 	movk	w1, #0x2a29, lsl #16
		i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a13c:	12001059 	and	w25, w2, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a140:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_im4_opt; 
   8a144:	528b2562 	mov	w2, #0x592b                	// #22827
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a148:	52800018 	mov	w24, #0x0                   	// #0
   8a14c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a150:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a154:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a158:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a15c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a160:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_im4_opt; 
   8a164:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   8a168:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_im4_opt; 
   8a16c:	79058be2 	strh	w2, [sp, #708]
   8a170:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a174:	17fff083 	b	86380 <disasm+0x1c80>
		op=((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a178:	121f0294 	and	w20, w20, #0x2
   8a17c:	1200018c 	and	w12, w12, #0x1
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
   8a180:	90000043 	adrp	x3, 92000 <sd_readblock+0x158>
   8a184:	913aa063 	add	x3, x3, #0xea8
		op=((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a188:	120010a4 	and	w4, w5, #0x1f
   8a18c:	12001059 	and	w25, w2, #0x1f
   8a190:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   8a194:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
   8a198:	913fc060 	add	x0, x3, #0xff0
		op=((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a19c:	2a0c0294 	orr	w20, w20, w12
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   8a1a0:	128f0e43 	mov	w3, #0xffff878d            	// #-30835
		op=((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a1a4:	12000621 	and	w1, w17, #0x3
		z=2;
   8a1a8:	52800057 	mov	w23, #0x2                   	// #2
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a1ac:	52800018 	mov	w24, #0x0                   	// #0
   8a1b0:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8a1b4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a1b8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a1bc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a1c0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a1c4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   8a1c8:	790583e3 	strh	w3, [sp, #704]
   8a1cc:	390b0be2 	strb	w2, [sp, #706]
   8a1d0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a1d4:	17fff06b 	b	86380 <disasm+0x1c80>
		op=((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a1d8:	121f0294 	and	w20, w20, #0x2
   8a1dc:	1200018c 	and	w12, w12, #0x1
		names="sqdmulh\0sqrdmulh\0";
   8a1e0:	b0000043 	adrp	x3, 93000 <sd_init+0xce8>
   8a1e4:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a1e8:	120010a4 	and	w4, w5, #0x1f
   8a1ec:	12001059 	and	w25, w2, #0x1f
   8a1f0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz4n; args[2]=disasm_arg_VmTs; 
   8a1f4:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sqdmulh\0sqrdmulh\0";
   8a1f8:	91132060 	add	x0, x3, #0x4c8
		op=((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a1fc:	2a0c0294 	orr	w20, w20, w12
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz4n; args[2]=disasm_arg_VmTs; 
   8a200:	128eee43 	mov	w3, #0xffff888d            	// #-30579
		op=((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a204:	12000141 	and	w1, w10, #0x1
		z=2;
   8a208:	52800057 	mov	w23, #0x2                   	// #2
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a20c:	52800018 	mov	w24, #0x0                   	// #0
   8a210:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8a214:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a218:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a21c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a220:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a224:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz4n; args[2]=disasm_arg_VmTs; 
   8a228:	790583e3 	strh	w3, [sp, #704]
   8a22c:	390b0be2 	strb	w2, [sp, #706]
   8a230:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a234:	17fff053 	b	86380 <disasm+0x1c80>
		names="shl\0sqshl\0";
   8a238:	b0000043 	adrp	x3, 93000 <sd_init+0xce8>
   8a23c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_13)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a240:	12001059 	and	w25, w2, #0x1f
   8a244:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shlshift; 
   8a248:	12800d42 	mov	w2, #0xffffff95            	// #-107
		names="shl\0sqshl\0";
   8a24c:	91138060 	add	x0, x3, #0x4e0
		op=((ic32_13)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a250:	12000161 	and	w1, w11, #0x1
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shlshift; 
   8a254:	128dcde3 	mov	w3, #0xffff9190            	// #-28272
		op=((ic32_13)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a258:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a25c:	52800017 	mov	w23, #0x0                   	// #0
   8a260:	52800018 	mov	w24, #0x0                   	// #0
   8a264:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8a268:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a26c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a270:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a274:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a278:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shlshift; 
   8a27c:	790583e3 	strh	w3, [sp, #704]
   8a280:	390b0be2 	strb	w2, [sp, #706]
   8a284:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a288:	17fff03e 	b	86380 <disasm+0x1c80>
		op=((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a28c:	121e01ef 	and	w15, w15, #0x4
   8a290:	12000508 	and	w8, w8, #0x3
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
   8a294:	90000043 	adrp	x3, 92000 <sd_readblock+0x158>
   8a298:	913aa063 	add	x3, x3, #0xea8
		op=((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a29c:	12000ca4 	and	w4, w5, #0xf
   8a2a0:	12001059 	and	w25, w2, #0x1f
   8a2a4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   8a2a8:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
   8a2ac:	913fc060 	add	x0, x3, #0xff0
		op=((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a2b0:	2a0801f4 	orr	w20, w15, w8
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   8a2b4:	128f0e43 	mov	w3, #0xffff878d            	// #-30835
		op=((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a2b8:	12000621 	and	w1, w17, #0x3
		z=1;
   8a2bc:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a2c0:	52800018 	mov	w24, #0x0                   	// #0
   8a2c4:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8a2c8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a2cc:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a2d0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a2d4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a2d8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   8a2dc:	790583e3 	strh	w3, [sp, #704]
   8a2e0:	390b0be2 	strb	w2, [sp, #706]
   8a2e4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a2e8:	17fff026 	b	86380 <disasm+0x1c80>
		op=((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a2ec:	121e01ef 	and	w15, w15, #0x4
   8a2f0:	12000508 	and	w8, w8, #0x3
		names="sqdmulh\0sqrdmulh\0";
   8a2f4:	b0000043 	adrp	x3, 93000 <sd_init+0xce8>
   8a2f8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a2fc:	12000ca4 	and	w4, w5, #0xf
   8a300:	12001059 	and	w25, w2, #0x1f
   8a304:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz4n; args[2]=disasm_arg_VmTs; 
   8a308:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sqdmulh\0sqrdmulh\0";
   8a30c:	91132060 	add	x0, x3, #0x4c8
		op=((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a310:	2a0801f4 	orr	w20, w15, w8
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz4n; args[2]=disasm_arg_VmTs; 
   8a314:	128eee43 	mov	w3, #0xffff888d            	// #-30579
		op=((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a318:	12000141 	and	w1, w10, #0x1
		z=1;
   8a31c:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a320:	52800018 	mov	w24, #0x0                   	// #0
   8a324:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8a328:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a32c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a330:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a334:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a338:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz4n; args[2]=disasm_arg_VmTs; 
   8a33c:	790583e3 	strh	w3, [sp, #704]
   8a340:	390b0be2 	strb	w2, [sp, #706]
   8a344:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a348:	17fff00e 	b	86380 <disasm+0x1c80>
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
   8a34c:	90000043 	adrp	x3, 92000 <sd_readblock+0x158>
   8a350:	913aa063 	add	x3, x3, #0xea8
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a354:	120010a4 	and	w4, w5, #0x1f
   8a358:	12001059 	and	w25, w2, #0x1f
   8a35c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz2n; args[2]=disasm_arg_FPz2m; 
   8a360:	12800f82 	mov	w2, #0xffffff83            	// #-125
		names="sqdmlal\0sqdmlsl\0sqdmull\0";
   8a364:	913fc060 	add	x0, x3, #0xff0
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a368:	12000561 	and	w1, w11, #0x3
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz2n; args[2]=disasm_arg_FPz2m; 
   8a36c:	128fae43 	mov	w3, #0xffff828d            	// #-32115
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a370:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a374:	52800018 	mov	w24, #0x0                   	// #0
   8a378:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a37c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8a380:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a384:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a388:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a38c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a390:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz2n; args[2]=disasm_arg_FPz2m; 
   8a394:	790583e3 	strh	w3, [sp, #704]
   8a398:	390b0be2 	strb	w2, [sp, #706]
   8a39c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a3a0:	17ffeff8 	b	86380 <disasm+0x1c80>
		names="frecps\0frsqrts\0";
   8a3a4:	b0000043 	adrp	x3, 93000 <sd_init+0xce8>
   8a3a8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_23)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a3ac:	120010a4 	and	w4, w5, #0x1f
   8a3b0:	12001059 	and	w25, w2, #0x1f
   8a3b4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8a3b8:	52800ae2 	mov	w2, #0x57                  	// #87
		names="frecps\0frsqrts\0";
   8a3bc:	9112c060 	add	x0, x3, #0x4b0
		op=((ic32_23)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a3c0:	12000201 	and	w1, w16, #0x1
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8a3c4:	528f2a83 	mov	w3, #0x7954                	// #31060
		op=((ic32_23)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a3c8:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a3cc:	52800018 	mov	w24, #0x0                   	// #0
   8a3d0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a3d4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8a3d8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a3dc:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a3e0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a3e4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a3e8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8a3ec:	790583e3 	strh	w3, [sp, #704]
   8a3f0:	390b0be2 	strb	w2, [sp, #706]
   8a3f4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a3f8:	17ffefe2 	b	86380 <disasm+0x1c80>
		names="addp\0";
   8a3fc:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
   8a400:	913ea021 	add	x1, x1, #0xfa8
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a404:	12001059 	and	w25, w2, #0x1f
   8a408:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_Vn2d; 
   8a40c:	128eaf22 	mov	w2, #0xffff8a86            	// #-30074
		names="addp\0";
   8a410:	91130020 	add	x0, x1, #0x4c0
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a414:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a418:	52800018 	mov	w24, #0x0                   	// #0
   8a41c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a420:	52800014 	mov	w20, #0x0                   	// #0
   8a424:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a428:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a42c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a430:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a434:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a438:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_Vn2d; 
   8a43c:	790583e2 	strh	w2, [sp, #704]
   8a440:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a444:	17ffefcf 	b	86380 <disasm+0x1c80>
		names="frecps\0frsqrts\0";
   8a448:	b0000043 	adrp	x3, 93000 <sd_init+0xce8>
   8a44c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_23)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a450:	120010a4 	and	w4, w5, #0x1f
   8a454:	12001059 	and	w25, w2, #0x1f
   8a458:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8a45c:	52800f02 	mov	w2, #0x78                  	// #120
		names="frecps\0frsqrts\0";
   8a460:	9112c060 	add	x0, x3, #0x4b0
		op=((ic32_23)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a464:	12000201 	and	w1, w16, #0x1
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8a468:	528eeec3 	mov	w3, #0x7776                	// #30582
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a46c:	52800017 	mov	w23, #0x0                   	// #0
   8a470:	52800018 	mov	w24, #0x0                   	// #0
   8a474:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a478:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8a47c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a480:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a484:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a488:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a48c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8a490:	790583e3 	strh	w3, [sp, #704]
   8a494:	390b0be2 	strb	w2, [sp, #706]
   8a498:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a49c:	17ffefb9 	b	86380 <disasm+0x1c80>
		op=((ic32_21)&0x4)|((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a4a0:	121e0181 	and	w1, w12, #0x4
   8a4a4:	1200054a 	and	w10, w10, #0x3
		names="fmaxnmp\0faddp\0?\0fmaxp\0fminnmp\0?\0?\0fminp\0";
   8a4a8:	b0000043 	adrp	x3, 93000 <sd_init+0xce8>
   8a4ac:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_21)&0x4)|((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a4b0:	12001059 	and	w25, w2, #0x1f
   8a4b4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Vn2h; 
   8a4b8:	128e9122 	mov	w2, #0xffff8b76            	// #-29834
		op=((ic32_21)&0x4)|((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a4bc:	2a0a0021 	orr	w1, w1, w10
		names="fmaxnmp\0faddp\0?\0fmaxp\0fminnmp\0?\0?\0fminp\0";
   8a4c0:	91120060 	add	x0, x3, #0x480
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a4c4:	52800017 	mov	w23, #0x0                   	// #0
   8a4c8:	52800018 	mov	w24, #0x0                   	// #0
   8a4cc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a4d0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8a4d4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a4d8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a4dc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a4e0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a4e4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Vn2h; 
   8a4e8:	790583e2 	strh	w2, [sp, #704]
   8a4ec:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a4f0:	17ffefa4 	b	86380 <disasm+0x1c80>
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a4f4:	120010a3 	and	w3, w5, #0x1f
		names="fcmeq\0";
   8a4f8:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
   8a4fc:	913ea021 	add	x1, x1, #0xfa8
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a500:	12001059 	and	w25, w2, #0x1f
   8a504:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8a508:	52800ae2 	mov	w2, #0x57                  	// #87
		names="fcmeq\0";
   8a50c:	9111e020 	add	x0, x1, #0x478
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a510:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a514:	52800018 	mov	w24, #0x0                   	// #0
   8a518:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a51c:	52800014 	mov	w20, #0x0                   	// #0
   8a520:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a524:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a528:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8a52c:	528f2a83 	mov	w3, #0x7954                	// #31060
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a530:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a534:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a538:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8a53c:	790583e3 	strh	w3, [sp, #704]
   8a540:	390b0be2 	strb	w2, [sp, #706]
   8a544:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a548:	17ffef8e 	b	86380 <disasm+0x1c80>
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a54c:	120010a3 	and	w3, w5, #0x1f
		names="fmulx\0";
   8a550:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
   8a554:	913ea021 	add	x1, x1, #0xfa8
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a558:	12001059 	and	w25, w2, #0x1f
   8a55c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8a560:	52800ae2 	mov	w2, #0x57                  	// #87
		names="fmulx\0";
   8a564:	9111c020 	add	x0, x1, #0x470
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a568:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a56c:	52800018 	mov	w24, #0x0                   	// #0
   8a570:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a574:	52800014 	mov	w20, #0x0                   	// #0
   8a578:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a57c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a580:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8a584:	528f2a83 	mov	w3, #0x7954                	// #31060
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a588:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a58c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a590:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   8a594:	790583e3 	strh	w3, [sp, #704]
   8a598:	390b0be2 	strb	w2, [sp, #706]
   8a59c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a5a0:	17ffef78 	b	86380 <disasm+0x1c80>
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a5a4:	120010a3 	and	w3, w5, #0x1f
		names="fcmeq\0";
   8a5a8:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
   8a5ac:	913ea021 	add	x1, x1, #0xfa8
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a5b0:	12001059 	and	w25, w2, #0x1f
   8a5b4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8a5b8:	52800f02 	mov	w2, #0x78                  	// #120
		names="fcmeq\0";
   8a5bc:	9111e020 	add	x0, x1, #0x478
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a5c0:	52800017 	mov	w23, #0x0                   	// #0
   8a5c4:	52800018 	mov	w24, #0x0                   	// #0
   8a5c8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a5cc:	52800014 	mov	w20, #0x0                   	// #0
   8a5d0:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a5d4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a5d8:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8a5dc:	528eeec3 	mov	w3, #0x7776                	// #30582
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a5e0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a5e4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a5e8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8a5ec:	790583e3 	strh	w3, [sp, #704]
   8a5f0:	390b0be2 	strb	w2, [sp, #706]
   8a5f4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a5f8:	17ffef62 	b	86380 <disasm+0x1c80>
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a5fc:	120010a3 	and	w3, w5, #0x1f
		names="fmulx\0";
   8a600:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
   8a604:	913ea021 	add	x1, x1, #0xfa8
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a608:	12001059 	and	w25, w2, #0x1f
   8a60c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8a610:	52800f02 	mov	w2, #0x78                  	// #120
		names="fmulx\0";
   8a614:	9111c020 	add	x0, x1, #0x470
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a618:	52800017 	mov	w23, #0x0                   	// #0
   8a61c:	52800018 	mov	w24, #0x0                   	// #0
   8a620:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a624:	52800014 	mov	w20, #0x0                   	// #0
   8a628:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a62c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a630:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8a634:	528eeec3 	mov	w3, #0x7776                	// #30582
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a638:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a63c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a640:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   8a644:	790583e3 	strh	w3, [sp, #704]
   8a648:	390b0be2 	strb	w2, [sp, #706]
   8a64c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a650:	17ffef4c 	b	86380 <disasm+0x1c80>
		names="sha256su0\0";
   8a654:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
   8a658:	913ea021 	add	x1, x1, #0xfa8
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a65c:	12001059 	and	w25, w2, #0x1f
   8a660:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
   8a664:	528dedc2 	mov	w2, #0x6f6e                	// #28526
		names="sha256su0\0";
   8a668:	91118020 	add	x0, x1, #0x460
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a66c:	52800017 	mov	w23, #0x0                   	// #0
   8a670:	52800018 	mov	w24, #0x0                   	// #0
   8a674:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a678:	52800014 	mov	w20, #0x0                   	// #0
   8a67c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a680:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a684:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a688:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a68c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a690:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
   8a694:	790583e2 	strh	w2, [sp, #704]
   8a698:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a69c:	17ffef39 	b	86380 <disasm+0x1c80>
		names="sha1su1\0";
   8a6a0:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
   8a6a4:	913ea021 	add	x1, x1, #0xfa8
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a6a8:	12001059 	and	w25, w2, #0x1f
   8a6ac:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
   8a6b0:	528dedc2 	mov	w2, #0x6f6e                	// #28526
		names="sha1su1\0";
   8a6b4:	91114020 	add	x0, x1, #0x450
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a6b8:	52800017 	mov	w23, #0x0                   	// #0
   8a6bc:	52800018 	mov	w24, #0x0                   	// #0
   8a6c0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a6c4:	52800014 	mov	w20, #0x0                   	// #0
   8a6c8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a6cc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a6d0:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a6d4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a6d8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a6dc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
   8a6e0:	790583e2 	strh	w2, [sp, #704]
   8a6e4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a6e8:	17ffef26 	b	86380 <disasm+0x1c80>
		names="sha1h\0";
   8a6ec:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
   8a6f0:	913ea021 	add	x1, x1, #0xfa8
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a6f4:	12001059 	and	w25, w2, #0x1f
   8a6f8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_St; args[1]=disasm_arg_Sn; 
   8a6fc:	528d8e22 	mov	w2, #0x6c71                	// #27761
		names="sha1h\0";
   8a700:	91112020 	add	x0, x1, #0x448
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a704:	52800017 	mov	w23, #0x0                   	// #0
   8a708:	52800018 	mov	w24, #0x0                   	// #0
   8a70c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a710:	52800014 	mov	w20, #0x0                   	// #0
   8a714:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a718:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a71c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a720:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a724:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a728:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_St; args[1]=disasm_arg_Sn; 
   8a72c:	790583e2 	strh	w2, [sp, #704]
   8a730:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a734:	17ffef13 	b	86380 <disasm+0x1c80>
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a738:	120010a3 	and	w3, w5, #0x1f
		names="sha256su1\0";
   8a73c:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
   8a740:	913ea021 	add	x1, x1, #0xfa8
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a744:	12001059 	and	w25, w2, #0x1f
   8a748:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8a74c:	52800da2 	mov	w2, #0x6d                  	// #109
		names="sha256su1\0";
   8a750:	9110e020 	add	x0, x1, #0x438
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a754:	52800017 	mov	w23, #0x0                   	// #0
   8a758:	52800018 	mov	w24, #0x0                   	// #0
   8a75c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a760:	52800014 	mov	w20, #0x0                   	// #0
   8a764:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a768:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a76c:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8a770:	528dedc3 	mov	w3, #0x6f6e                	// #28526
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a774:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a778:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a77c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8a780:	790583e3 	strh	w3, [sp, #704]
   8a784:	390b0be2 	strb	w2, [sp, #706]
   8a788:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a78c:	17ffeefd 	b	86380 <disasm+0x1c80>
		names="sha256h\0sha256h2\0";
   8a790:	b0000043 	adrp	x3, 93000 <sd_init+0xce8>
   8a794:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_12)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a798:	120010a4 	and	w4, w5, #0x1f
   8a79c:	12001059 	and	w25, w2, #0x1f
   8a7a0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Qn; args[2]=disasm_arg_Vm4s; 
   8a7a4:	52800da2 	mov	w2, #0x6d                  	// #109
		names="sha256h\0sha256h2\0";
   8a7a8:	91108060 	add	x0, x3, #0x420
		op=((ic32_12)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a7ac:	12000141 	and	w1, w10, #0x1
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Qn; args[2]=disasm_arg_Vm4s; 
   8a7b0:	528e0d63 	mov	w3, #0x706b                	// #28779
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a7b4:	52800017 	mov	w23, #0x0                   	// #0
   8a7b8:	52800018 	mov	w24, #0x0                   	// #0
   8a7bc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a7c0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8a7c4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a7c8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a7cc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a7d0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a7d4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Qn; args[2]=disasm_arg_Vm4s; 
   8a7d8:	790583e3 	strh	w3, [sp, #704]
   8a7dc:	390b0be2 	strb	w2, [sp, #706]
   8a7e0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a7e4:	17ffeee7 	b	86380 <disasm+0x1c80>
		names="sha1c\0sha1p\0sha1m\0sha1su0\0";
   8a7e8:	b0000043 	adrp	x3, 93000 <sd_init+0xce8>
   8a7ec:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_12)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a7f0:	120010a4 	and	w4, w5, #0x1f
   8a7f4:	12001059 	and	w25, w2, #0x1f
   8a7f8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Sn; args[2]=disasm_arg_Vm4s; 
   8a7fc:	52800da2 	mov	w2, #0x6d                  	// #109
		names="sha1c\0sha1p\0sha1m\0sha1su0\0";
   8a800:	91100060 	add	x0, x3, #0x400
		op=((ic32_12)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a804:	12000541 	and	w1, w10, #0x3
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Sn; args[2]=disasm_arg_Vm4s; 
   8a808:	528d8d63 	mov	w3, #0x6c6b                	// #27755
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a80c:	52800017 	mov	w23, #0x0                   	// #0
   8a810:	52800018 	mov	w24, #0x0                   	// #0
   8a814:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a818:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8a81c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a820:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a824:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a828:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a82c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Sn; args[2]=disasm_arg_Vm4s; 
   8a830:	790583e3 	strh	w3, [sp, #704]
   8a834:	390b0be2 	strb	w2, [sp, #706]
   8a838:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a83c:	17ffeed1 	b	86380 <disasm+0x1c80>
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a840:	120010a3 	and	w3, w5, #0x1f
		names="sha1su0\0";
   8a844:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
   8a848:	913ea021 	add	x1, x1, #0xfa8
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a84c:	12001059 	and	w25, w2, #0x1f
   8a850:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8a854:	52800da2 	mov	w2, #0x6d                  	// #109
		names="sha1su0\0";
   8a858:	910fc020 	add	x0, x1, #0x3f0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a85c:	52800017 	mov	w23, #0x0                   	// #0
   8a860:	52800018 	mov	w24, #0x0                   	// #0
   8a864:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a868:	52800014 	mov	w20, #0x0                   	// #0
   8a86c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a870:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a874:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8a878:	528dedc3 	mov	w3, #0x6f6e                	// #28526
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a87c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a880:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a884:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8a888:	790583e3 	strh	w3, [sp, #704]
   8a88c:	390b0be2 	strb	w2, [sp, #706]
   8a890:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a894:	17ffeebb 	b	86380 <disasm+0x1c80>
		names="dup\0";
   8a898:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8a89c:	528e6e43 	mov	w3, #0x7372                	// #29554
		names="dup\0";
   8a8a0:	913ea021 	add	x1, x1, #0xfa8
		j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a8a4:	12001059 	and	w25, w2, #0x1f
   8a8a8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8a8ac:	72ae8523 	movk	w3, #0x7429, lsl #16
		names="dup\0";
   8a8b0:	910fa020 	add	x0, x1, #0x3e8
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8a8b4:	52800562 	mov	w2, #0x2b                  	// #43
		j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a8b8:	120010b4 	and	w20, w5, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a8bc:	52800017 	mov	w23, #0x0                   	// #0
   8a8c0:	52800018 	mov	w24, #0x0                   	// #0
   8a8c4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a8c8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a8cc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a8d0:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a8d4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a8d8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a8dc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8a8e0:	b902c3e3 	str	w3, [sp, #704]
   8a8e4:	390b13e2 	strb	w2, [sp, #708]
   8a8e8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a8ec:	17ffeea5 	b	86380 <disasm+0x1c80>
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); c=((ic32)&0xf); 
   8a8f0:	f240021f 	tst	x16, #0x1
   8a8f4:	12004842 	and	w2, w2, #0x7ffff
   8a8f8:	12000c00 	and	w0, w0, #0xf
   8a8fc:	52bfff03 	mov	w3, #0xfff80000            	// #-524288
   8a900:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="b.%s\0";
   8a904:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
   8a908:	913ea021 	add	x1, x1, #0xfa8
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); c=((ic32)&0xf); 
   8a90c:	291103ff 	stp	wzr, w0, [sp, #136]
   8a910:	2a030040 	orr	w0, w2, w3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a914:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_labeli4; 
   8a918:	52800202 	mov	w2, #0x10                  	// #16
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a91c:	52800018 	mov	w24, #0x0                   	// #0
   8a920:	52800019 	mov	w25, #0x0                   	// #0
   8a924:	5280001b 	mov	w27, #0x0                   	// #0
   8a928:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a92c:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a930:	b90077ff 	str	wzr, [sp, #116]
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); c=((ic32)&0xf); 
   8a934:	b9007be0 	str	w0, [sp, #120]
		names="b.%s\0";
   8a938:	910f8020 	add	x0, x1, #0x3e0
	uint16_t op=0, om=0, j=0;
   8a93c:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a940:	290fffff 	stp	wzr, wzr, [sp, #124]
   8a944:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a948:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_labeli4; 
   8a94c:	390b03e2 	strb	w2, [sp, #704]
   8a950:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a954:	17ffee8b 	b	86380 <disasm+0x1c80>
		j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a958:	120010a3 	and	w3, w5, #0x1f
   8a95c:	121f0294 	and	w20, w20, #0x2
   8a960:	1200018c 	and	w12, w12, #0x1
		names="smull2\0";
   8a964:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
   8a968:	913ea021 	add	x1, x1, #0xfa8
		j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a96c:	12001059 	and	w25, w2, #0x1f
   8a970:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a974:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smull2\0";
   8a978:	910f6020 	add	x0, x1, #0x3d8
		j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a97c:	2a0c0294 	orr	w20, w20, w12
		z=2;q=1;
   8a980:	52800057 	mov	w23, #0x2                   	// #2
   8a984:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a988:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8a98c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8a990:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a994:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a998:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a99c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8a9a0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8a9a4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a9a8:	790583e3 	strh	w3, [sp, #704]
   8a9ac:	390b0be2 	strb	w2, [sp, #706]
   8a9b0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8a9b4:	17ffee73 	b	86380 <disasm+0x1c80>
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a9b8:	121f0294 	and	w20, w20, #0x2
   8a9bc:	1200018c 	and	w12, w12, #0x1
		names="smlal2\0smlsl2\0";
   8a9c0:	b0000043 	adrp	x3, 93000 <sd_init+0xce8>
   8a9c4:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a9c8:	120010a4 	and	w4, w5, #0x1f
   8a9cc:	12001059 	and	w25, w2, #0x1f
   8a9d0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a9d4:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smlal2\0smlsl2\0";
   8a9d8:	910f2060 	add	x0, x3, #0x3c8
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a9dc:	2a0c0294 	orr	w20, w20, w12
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8a9e0:	128f6ca3 	mov	w3, #0xffff849a            	// #-31590
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8a9e4:	12000221 	and	w1, w17, #0x1
		z=2;q=1;
   8a9e8:	52800057 	mov	w23, #0x2                   	// #2
   8a9ec:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a9f0:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8a9f4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8a9f8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8a9fc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8aa00:	29127fff 	stp	wzr, wzr, [sp, #144]
   8aa04:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8aa08:	790583e3 	strh	w3, [sp, #704]
   8aa0c:	390b0be2 	strb	w2, [sp, #706]
   8aa10:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8aa14:	17ffee5b 	b	86380 <disasm+0x1c80>
		j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aa18:	12000ca3 	and	w3, w5, #0xf
   8aa1c:	121e01ef 	and	w15, w15, #0x4
   8aa20:	12000508 	and	w8, w8, #0x3
		names="smull2\0";
   8aa24:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
   8aa28:	913ea021 	add	x1, x1, #0xfa8
		j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aa2c:	12001059 	and	w25, w2, #0x1f
   8aa30:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8aa34:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smull2\0";
   8aa38:	910f6020 	add	x0, x1, #0x3d8
		z=1;q=1;
   8aa3c:	52800037 	mov	w23, #0x1                   	// #1
		j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aa40:	2a0801f4 	orr	w20, w15, w8
		z=1;q=1;
   8aa44:	2a1703f8 	mov	w24, w23
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aa48:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8aa4c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8aa50:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aa54:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8aa58:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aa5c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8aa60:	29127fff 	stp	wzr, wzr, [sp, #144]
   8aa64:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8aa68:	790583e3 	strh	w3, [sp, #704]
   8aa6c:	390b0be2 	strb	w2, [sp, #706]
   8aa70:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8aa74:	17ffee43 	b	86380 <disasm+0x1c80>
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aa78:	121e01ef 	and	w15, w15, #0x4
   8aa7c:	12000508 	and	w8, w8, #0x3
		names="smlal2\0smlsl2\0";
   8aa80:	b0000043 	adrp	x3, 93000 <sd_init+0xce8>
   8aa84:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aa88:	12000ca4 	and	w4, w5, #0xf
   8aa8c:	12001059 	and	w25, w2, #0x1f
   8aa90:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8aa94:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smlal2\0smlsl2\0";
   8aa98:	910f2060 	add	x0, x3, #0x3c8
		z=1;q=1;
   8aa9c:	52800037 	mov	w23, #0x1                   	// #1
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8aaa0:	128f6ca3 	mov	w3, #0xffff849a            	// #-31590
		op=((ic32_14)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aaa4:	2a0801f4 	orr	w20, w15, w8
   8aaa8:	12000221 	and	w1, w17, #0x1
		z=1;q=1;
   8aaac:	2a1703f8 	mov	w24, w23
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aab0:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8aab4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aab8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8aabc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8aac0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8aac4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8aac8:	790583e3 	strh	w3, [sp, #704]
   8aacc:	390b0be2 	strb	w2, [sp, #706]
   8aad0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8aad4:	17ffee2b 	b	86380 <disasm+0x1c80>
		names="sqdmlal2\0sqdmlsl2\0sqdmull2\0";
   8aad8:	b0000043 	adrp	x3, 93000 <sd_init+0xce8>
   8aadc:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aae0:	120010a4 	and	w4, w5, #0x1f
   8aae4:	12001059 	and	w25, w2, #0x1f
   8aae8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8aaec:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="sqdmlal2\0sqdmlsl2\0sqdmull2\0";
   8aaf0:	910ea060 	add	x0, x3, #0x3a8
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aaf4:	12000561 	and	w1, w11, #0x3
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8aaf8:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		op=((ic32_13)&0x3); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aafc:	120004f7 	and	w23, w7, #0x3
		q=1;
   8ab00:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ab04:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ab08:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ab0c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ab10:	290fffe4 	stp	w4, wzr, [sp, #124]
   8ab14:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ab18:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ab1c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8ab20:	790583e3 	strh	w3, [sp, #704]
   8ab24:	390b0be2 	strb	w2, [sp, #706]
   8ab28:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ab2c:	17ffee15 	b	86380 <disasm+0x1c80>
		names="shll2\0";
   8ab30:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
   8ab34:	913ea021 	add	x1, x1, #0xfa8
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ab38:	12001059 	and	w25, w2, #0x1f
   8ab3c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_shift8; 
   8ab40:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		names="shll2\0";
   8ab44:	910e8020 	add	x0, x1, #0x3a0
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_shift8; 
   8ab48:	12800ac2 	mov	w2, #0xffffffa9            	// #-87
		z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ab4c:	120004f7 	and	w23, w7, #0x3
		q=1;
   8ab50:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ab54:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ab58:	52800014 	mov	w20, #0x0                   	// #0
   8ab5c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8ab60:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ab64:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ab68:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ab6c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ab70:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_shift8; 
   8ab74:	790583e3 	strh	w3, [sp, #704]
   8ab78:	390b0be2 	strb	w2, [sp, #706]
   8ab7c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ab80:	17ffee00 	b	86380 <disasm+0x1c80>
		op=((ic32_23)&0x2)|((ic32_22)&0x1); s=((ic32_31)&0x1); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ab84:	f240019f 	tst	x12, #0x1
   8ab88:	120018c5 	and	w5, w6, #0x7f
   8ab8c:	12800fe4 	mov	w4, #0xffffff80            	// #-128
   8ab90:	1200101a 	and	w26, w0, #0x1f
   8ab94:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
   8ab98:	12000200 	and	w0, w16, #0x1
		names="stnp\0ldnp\0stp\0ldp\0";
   8ab9c:	f0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8aba0:	9102a063 	add	x3, x3, #0xa8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aba4:	29127fe0 	stp	w0, wzr, [sp, #144]
		op=((ic32_23)&0x2)|((ic32_22)&0x1); s=((ic32_31)&0x1); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aba8:	2a0400a0 	orr	w0, w5, w4
   8abac:	120000e7 	and	w7, w7, #0x1
   8abb0:	121f0201 	and	w1, w16, #0x2
   8abb4:	b9007be0 	str	w0, [sp, #120]
		names="stnp\0ldnp\0stp\0ldp\0";
   8abb8:	9123e060 	add	x0, x3, #0x8f8
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_is4_opt; args[5]=disasm_arg_offe; 
   8abbc:	5281c163 	mov	w3, #0xe0b                 	// #3595
		op=((ic32_23)&0x2)|((ic32_22)&0x1); s=((ic32_31)&0x1); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8abc0:	12001286 	and	w6, w20, #0x1f
   8abc4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_is4_opt; args[5]=disasm_arg_offe; 
   8abc8:	72a54523 	movk	w3, #0x2a29, lsl #16
   8abcc:	52856ac2 	mov	w2, #0x2b56                	// #11094
		op=((ic32_23)&0x2)|((ic32_22)&0x1); s=((ic32_31)&0x1); p=((ic32_23)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8abd0:	12001d3b 	and	w27, w9, #0xff
   8abd4:	2a070021 	orr	w1, w1, w7
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8abd8:	52800017 	mov	w23, #0x0                   	// #0
   8abdc:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8abe0:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8abe4:	b90077ff 	str	wzr, [sp, #116]
   8abe8:	290fffe6 	stp	w6, wzr, [sp, #124]
   8abec:	29117fff 	stp	wzr, wzr, [sp, #136]
   8abf0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_is4_opt; args[5]=disasm_arg_offe; 
   8abf4:	b902c3e3 	str	w3, [sp, #704]
   8abf8:	79058be2 	strh	w2, [sp, #708]
   8abfc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ac00:	17ffede0 	b	86380 <disasm+0x1c80>
		op=((ic32_22)&0x1); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ac04:	f240019f 	tst	x12, #0x1
   8ac08:	120018c6 	and	w6, w6, #0x7f
   8ac0c:	12800fe4 	mov	w4, #0xffffff80            	// #-128
   8ac10:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="stp\0ldp\0";
   8ac14:	f0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_22)&0x1); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ac18:	1200101a 	and	w26, w0, #0x1f
		names="stp\0ldp\0";
   8ac1c:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_22)&0x1); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ac20:	2a0400c0 	orr	w0, w6, w4
   8ac24:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="stp\0ldp\0";
   8ac28:	9123a060 	add	x0, x3, #0x8e8
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_is4_opt; 
   8ac2c:	5281c163 	mov	w3, #0xe0b                 	// #3595
		op=((ic32_22)&0x1); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ac30:	12001285 	and	w5, w20, #0x1f
   8ac34:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_is4_opt; 
   8ac38:	72a54523 	movk	w3, #0x2a29, lsl #16
   8ac3c:	528ac562 	mov	w2, #0x562b                	// #22059
		op=((ic32_22)&0x1); s=((ic32_31)&0x1); i=((ic32_21)&1?(-1<<7):0)|((ic32_15)&0x7f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ac40:	120000e1 	and	w1, w7, #0x1
   8ac44:	12001d3b 	and	w27, w9, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ac48:	52800017 	mov	w23, #0x0                   	// #0
   8ac4c:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ac50:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ac54:	290fffe5 	stp	w5, wzr, [sp, #124]
   8ac58:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ac5c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ac60:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_is4_opt; 
   8ac64:	b902c3e3 	str	w3, [sp, #704]
   8ac68:	79058be2 	strh	w2, [sp, #708]
   8ac6c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ac70:	17ffedc4 	b	86380 <disasm+0x1c80>
		names="fcvtms\0fcvtmu\0";
   8ac74:	f0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8ac78:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ac7c:	12001059 	and	w25, w2, #0x1f
   8ac80:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; 
   8ac84:	12887e82 	mov	w2, #0xffffbc0b            	// #-17397
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ac88:	120000a1 	and	w1, w5, #0x1
   8ac8c:	12001d3b 	and	w27, w9, #0xff
   8ac90:	120004f7 	and	w23, w7, #0x3
		names="fcvtms\0fcvtmu\0";
   8ac94:	91236060 	add	x0, x3, #0x8d8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ac98:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ac9c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8aca0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aca4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8aca8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8acac:	29127fff 	stp	wzr, wzr, [sp, #144]
   8acb0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; 
   8acb4:	790583e2 	strh	w2, [sp, #704]
   8acb8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8acbc:	17ffedb1 	b	86380 <disasm+0x1c80>
		names="fcvtns\0fcvtnu\0scvtf\0ucvtf\0fcvtas\0fcvtau\0fmov\0fmov\0fcvtns\0fcvtnu\0";
   8acc0:	f0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8acc4:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_16)&0xf); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8acc8:	12001059 	and	w25, w2, #0x1f
   8accc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; 
   8acd0:	12887e82 	mov	w2, #0xffffbc0b            	// #-17397
		op=((ic32_16)&0xf); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8acd4:	12000ca1 	and	w1, w5, #0xf
   8acd8:	12001d3b 	and	w27, w9, #0xff
   8acdc:	120004f7 	and	w23, w7, #0x3
		names="fcvtns\0fcvtnu\0scvtf\0ucvtf\0fcvtas\0fcvtau\0fmov\0fmov\0fcvtns\0fcvtnu\0";
   8ace0:	91224060 	add	x0, x3, #0x890
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ace4:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ace8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8acec:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8acf0:	290fffff 	stp	wzr, wzr, [sp, #124]
   8acf4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8acf8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8acfc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; 
   8ad00:	790583e2 	strh	w2, [sp, #704]
   8ad04:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ad08:	17ffed9e 	b	86380 <disasm+0x1c80>
		op=((ic32>>17)&0x2)|((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ad0c:	53117c01 	lsr	w1, w0, #17
   8ad10:	120000a5 	and	w5, w5, #0x1
   8ad14:	121f0021 	and	w1, w1, #0x2
		names="scvtf\0ucvtf\0fmov\0fmov\0";
   8ad18:	f0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8ad1c:	9102a063 	add	x3, x3, #0xa8
		op=((ic32>>17)&0x2)|((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ad20:	12001059 	and	w25, w2, #0x1f
   8ad24:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_Rn; 
   8ad28:	52813742 	mov	w2, #0x9ba                 	// #2490
		op=((ic32>>17)&0x2)|((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ad2c:	12001d3b 	and	w27, w9, #0xff
   8ad30:	120004f7 	and	w23, w7, #0x3
   8ad34:	2a050021 	orr	w1, w1, w5
		names="scvtf\0ucvtf\0fmov\0fmov\0";
   8ad38:	9121e060 	add	x0, x3, #0x878
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ad3c:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ad40:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ad44:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ad48:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ad4c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ad50:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ad54:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_Rn; 
   8ad58:	790583e2 	strh	w2, [sp, #704]
   8ad5c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ad60:	17ffed88 	b	86380 <disasm+0x1c80>
		names="fcvtzs\0fcvtzu\0";
   8ad64:	b0000043 	adrp	x3, 93000 <sd_init+0xce8>
   8ad68:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ad6c:	12001059 	and	w25, w2, #0x1f
   8ad70:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_fbits; 
   8ad74:	12800882 	mov	w2, #0xffffffbb            	// #-69
		names="fcvtzs\0fcvtzu\0";
   8ad78:	912e4060 	add	x0, x3, #0xb90
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ad7c:	120000a1 	and	w1, w5, #0x1
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_fbits; 
   8ad80:	12887e83 	mov	w3, #0xffffbc0b            	// #-17397
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ad84:	12001d3b 	and	w27, w9, #0xff
   8ad88:	120004f7 	and	w23, w7, #0x3
   8ad8c:	12001694 	and	w20, w20, #0x3f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ad90:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8ad94:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ad98:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ad9c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ada0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ada4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_FPz5n; args[2]=disasm_arg_fbits; 
   8ada8:	790583e3 	strh	w3, [sp, #704]
   8adac:	390b0be2 	strb	w2, [sp, #706]
   8adb0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8adb4:	17ffed73 	b	86380 <disasm+0x1c80>
		names="scvtf\0ucvtf\0";
   8adb8:	b0000043 	adrp	x3, 93000 <sd_init+0xce8>
   8adbc:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8adc0:	12001059 	and	w25, w2, #0x1f
   8adc4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_Rn; args[2]=disasm_arg_fbits; 
   8adc8:	12800882 	mov	w2, #0xffffffbb            	// #-69
		names="scvtf\0ucvtf\0";
   8adcc:	912e0060 	add	x0, x3, #0xb80
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8add0:	120000a1 	and	w1, w5, #0x1
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_Rn; args[2]=disasm_arg_fbits; 
   8add4:	52813743 	mov	w3, #0x9ba                 	// #2490
		op=((ic32_16)&0x1); s=((ic32_31)&0x1); z=((ic32_22)&0x3); j=((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8add8:	12001d3b 	and	w27, w9, #0xff
   8addc:	120004f7 	and	w23, w7, #0x3
   8ade0:	12001694 	and	w20, w20, #0x3f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ade4:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8ade8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8adec:	290fffff 	stp	wzr, wzr, [sp, #124]
   8adf0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8adf4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8adf8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz5t; args[1]=disasm_arg_Rn; args[2]=disasm_arg_fbits; 
   8adfc:	790583e3 	strh	w3, [sp, #704]
   8ae00:	390b0be2 	strb	w2, [sp, #706]
   8ae04:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ae08:	17ffed5e 	b	86380 <disasm+0x1c80>
		names="fmov\0";
   8ae0c:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
   8ae10:	913ea021 	add	x1, x1, #0xfa8
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ae14:	12001059 	and	w25, w2, #0x1f
   8ae18:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt1d; args[1]=disasm_arg_Rn; 
   8ae1c:	528137c2 	mov	w2, #0x9be                 	// #2494
		names="fmov\0";
   8ae20:	d101a020 	sub	x0, x1, #0x68
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ae24:	12001d3b 	and	w27, w9, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ae28:	52800017 	mov	w23, #0x0                   	// #0
   8ae2c:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ae30:	52800014 	mov	w20, #0x0                   	// #0
   8ae34:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8ae38:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ae3c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ae40:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ae44:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ae48:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt1d; args[1]=disasm_arg_Rn; 
   8ae4c:	790583e2 	strh	w2, [sp, #704]
   8ae50:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ae54:	17ffed4b 	b	86380 <disasm+0x1c80>
		names="fmov\0";
   8ae58:	b0000041 	adrp	x1, 93000 <sd_init+0xce8>
   8ae5c:	913ea021 	add	x1, x1, #0xfa8
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ae60:	12001059 	and	w25, w2, #0x1f
   8ae64:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Vn1d; 
   8ae68:	12885e82 	mov	w2, #0xffffbd0b            	// #-17141
		names="fmov\0";
   8ae6c:	d101a020 	sub	x0, x1, #0x68
		s=((ic32_31)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ae70:	12001d3b 	and	w27, w9, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ae74:	52800017 	mov	w23, #0x0                   	// #0
   8ae78:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ae7c:	52800014 	mov	w20, #0x0                   	// #0
   8ae80:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8ae84:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ae88:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ae8c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ae90:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ae94:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Vn1d; 
   8ae98:	790583e2 	strh	w2, [sp, #704]
   8ae9c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8aea0:	17ffed38 	b	86380 <disasm+0x1c80>
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aea4:	120010a4 	and	w4, w5, #0x1f
		names="madd\0msub\0";
   8aea8:	f0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aeac:	12001059 	and	w25, w2, #0x1f
		names="madd\0msub\0";
   8aeb0:	9102a063 	add	x3, x3, #0xa8
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_Rd; 
   8aeb4:	52812162 	mov	w2, #0x90b                 	// #2315
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aeb8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_Rd; 
   8aebc:	72a9e1c2 	movk	w2, #0x4f0e, lsl #16
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aec0:	120000c1 	and	w1, w6, #0x1
   8aec4:	12001d3b 	and	w27, w9, #0xff
		names="madd\0msub\0";
   8aec8:	9121a060 	add	x0, x3, #0x868
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aecc:	52800017 	mov	w23, #0x0                   	// #0
   8aed0:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8aed4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aed8:	290fffe4 	stp	w4, wzr, [sp, #124]
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aedc:	12001284 	and	w4, w20, #0x1f
	uint16_t op=0, om=0, j=0;
   8aee0:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8aee4:	b9008be4 	str	w4, [sp, #136]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8aee8:	2911ffff 	stp	wzr, wzr, [sp, #140]
   8aeec:	2912ffff 	stp	wzr, wzr, [sp, #148]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_Rd; 
   8aef0:	b902c3e2 	str	w2, [sp, #704]
   8aef4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8aef8:	17ffed22 	b	86380 <disasm+0x1c80>
		names="mul\0mneg\0";
   8aefc:	f0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8af00:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8af04:	120010a4 	and	w4, w5, #0x1f
   8af08:	12001059 	and	w25, w2, #0x1f
   8af0c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8af10:	528001c2 	mov	w2, #0xe                   	// #14
		names="mul\0mneg\0";
   8af14:	91216060 	add	x0, x3, #0x858
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8af18:	120000c1 	and	w1, w6, #0x1
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8af1c:	52812163 	mov	w3, #0x90b                 	// #2315
		op=((ic32_15)&0x1); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8af20:	12001d3b 	and	w27, w9, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8af24:	52800017 	mov	w23, #0x0                   	// #0
   8af28:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8af2c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8af30:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8af34:	290fffe4 	stp	w4, wzr, [sp, #124]
   8af38:	29117fff 	stp	wzr, wzr, [sp, #136]
   8af3c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8af40:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8af44:	790583e3 	strh	w3, [sp, #704]
   8af48:	390b0be2 	strb	w2, [sp, #706]
   8af4c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8af50:	17ffed0c 	b	86380 <disasm+0x1c80>
		names="?\0?\0udiv\0sdiv\0?\0?\0?\0?\0lslv\0lsrv\0asrv\0rorv\0?\0?\0?\0?\0crc32b\0crc32h\0crc32w\0crc32x\0crc32cb\0crc32ch\0crc32cw\0crc32cx\0";
   8af54:	f0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8af58:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_10)&0x1f); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8af5c:	12001281 	and	w1, w20, #0x1f
   8af60:	120010a4 	and	w4, w5, #0x1f
   8af64:	12001059 	and	w25, w2, #0x1f
   8af68:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8af6c:	528001c2 	mov	w2, #0xe                   	// #14
		names="?\0?\0udiv\0sdiv\0?\0?\0?\0?\0lslv\0lsrv\0asrv\0rorv\0?\0?\0?\0?\0crc32b\0crc32h\0crc32w\0crc32x\0crc32cb\0crc32ch\0crc32cw\0crc32cx\0";
   8af70:	911fa060 	add	x0, x3, #0x7e8
		op=((ic32_10)&0x1f); s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8af74:	12001d3b 	and	w27, w9, #0xff
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8af78:	52812163 	mov	w3, #0x90b                 	// #2315
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8af7c:	52800017 	mov	w23, #0x0                   	// #0
   8af80:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8af84:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8af88:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8af8c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8af90:	29117fff 	stp	wzr, wzr, [sp, #136]
   8af94:	29127fff 	stp	wzr, wzr, [sp, #144]
   8af98:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8af9c:	790583e3 	strh	w3, [sp, #704]
   8afa0:	390b0be2 	strb	w2, [sp, #706]
   8afa4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8afa8:	17ffecf6 	b	86380 <disasm+0x1c80>
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8afac:	120010a3 	and	w3, w5, #0x1f
		names="adc\0";
   8afb0:	f0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8afb4:	9102a021 	add	x1, x1, #0xa8
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8afb8:	12001059 	and	w25, w2, #0x1f
   8afbc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8afc0:	528001c2 	mov	w2, #0xe                   	// #14
		names="adc\0";
   8afc4:	911f8020 	add	x0, x1, #0x7e0
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8afc8:	12001d3b 	and	w27, w9, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8afcc:	52800017 	mov	w23, #0x0                   	// #0
   8afd0:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8afd4:	52800014 	mov	w20, #0x0                   	// #0
   8afd8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8afdc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8afe0:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8afe4:	52812163 	mov	w3, #0x90b                 	// #2315
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8afe8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8afec:	29127fff 	stp	wzr, wzr, [sp, #144]
   8aff0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; 
   8aff4:	790583e3 	strh	w3, [sp, #704]
   8aff8:	390b0be2 	strb	w2, [sp, #706]
   8affc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b000:	17ffece0 	b	86380 <disasm+0x1c80>
		op=((ic32_31)&0x1); i=((ic32_25)&1?(-1<<26):0)|((ic32)&0x3ffffff); 
   8b004:	f24002ff 	tst	x23, #0x1
   8b008:	12006403 	and	w3, w0, #0x3ffffff
   8b00c:	52bf8002 	mov	w2, #0xfc000000            	// #-67108864
   8b010:	1a9f1042 	csel	w2, w2, wzr, ne  // ne = any
   8b014:	2a020062 	orr	w2, w3, w2
		names="b\0bl\0";
   8b018:	d0000040 	adrp	x0, 95000 <sd_init+0x2ce8>
   8b01c:	9102a000 	add	x0, x0, #0xa8
		op=((ic32_31)&0x1); i=((ic32_25)&1?(-1<<26):0)|((ic32)&0x3ffffff); 
   8b020:	12003d21 	and	w1, w9, #0xffff
		names="b\0bl\0";
   8b024:	911f6000 	add	x0, x0, #0x7d8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b028:	52800017 	mov	w23, #0x0                   	// #0
   8b02c:	52800018 	mov	w24, #0x0                   	// #0
   8b030:	52800019 	mov	w25, #0x0                   	// #0
   8b034:	5280001b 	mov	w27, #0x0                   	// #0
   8b038:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b03c:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32_31)&0x1); i=((ic32_25)&1?(-1<<26):0)|((ic32)&0x3ffffff); 
   8b040:	290e8bff 	stp	wzr, w2, [sp, #116]
		args[0]=disasm_arg_labeli4; 
   8b044:	52800202 	mov	w2, #0x10                  	// #16
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b048:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b04c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b050:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b054:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_labeli4; 
   8b058:	390b03e2 	strb	w2, [sp, #704]
   8b05c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b060:	17ffecc8 	b	86380 <disasm+0x1c80>
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); i=((ic32_15)&1?(-1<<6):0)|((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b064:	f24000df 	tst	x6, #0x1
   8b068:	12001694 	and	w20, w20, #0x3f
   8b06c:	128007e3 	mov	w3, #0xffffffc0            	// #-64
   8b070:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="extr\0";
   8b074:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); i=((ic32_15)&1?(-1<<6):0)|((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b078:	12001059 	and	w25, w2, #0x1f
		names="extr\0";
   8b07c:	9102a021 	add	x1, x1, #0xa8
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); i=((ic32_15)&1?(-1<<6):0)|((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b080:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_i; 
   8b084:	52812162 	mov	w2, #0x90b                 	// #2315
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); i=((ic32_15)&1?(-1<<6):0)|((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b088:	2a030280 	orr	w0, w20, w3
   8b08c:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_i; 
   8b090:	72a0e1c2 	movk	w2, #0x70e, lsl #16
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); i=((ic32_15)&1?(-1<<6):0)|((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b094:	12001d3b 	and	w27, w9, #0xff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b098:	52800017 	mov	w23, #0x0                   	// #0
   8b09c:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b0a0:	52800014 	mov	w20, #0x0                   	// #0
		s=((ic32_31)&0x1); m=((ic32_16)&0x1f); i=((ic32_15)&1?(-1<<6):0)|((ic32_10)&0x3f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b0a4:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="extr\0";
   8b0a8:	911f4020 	add	x0, x1, #0x7d0
	uint16_t op=0, om=0, j=0;
   8b0ac:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b0b0:	290fffe4 	stp	w4, wzr, [sp, #124]
   8b0b4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b0b8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b0bc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rn; args[2]=disasm_arg_Rm; args[3]=disasm_arg_i; 
   8b0c0:	b902c3e2 	str	w2, [sp, #704]
   8b0c4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b0c8:	17ffecae 	b	86380 <disasm+0x1c80>
		names="str\0ldr\0";
   8b0cc:	d0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8b0d0:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b0d4:	1200101a 	and	w26, w0, #0x1f
		names="str\0ldr\0";
   8b0d8:	9119e060 	add	x0, x3, #0x678
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8b0dc:	52852163 	mov	w3, #0x290b                	// #10507
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b0e0:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8b0e4:	72ab8543 	movk	w3, #0x5c2a, lsl #16
   8b0e8:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b0ec:	120000e1 	and	w1, w7, #0x1
   8b0f0:	1200009b 	and	w27, w4, #0x1
   8b0f4:	12002e94 	and	w20, w20, #0xfff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b0f8:	52800017 	mov	w23, #0x0                   	// #0
   8b0fc:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8b100:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b104:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b108:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b10c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b110:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8b114:	b902c3e3 	str	w3, [sp, #704]
   8b118:	390b13e2 	strb	w2, [sp, #708]
   8b11c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b120:	17ffec98 	b	86380 <disasm+0x1c80>
		op=((ic32_18)&0x30)|((ic32_12)&0xf); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b124:	53127c01 	lsr	w1, w0, #18
		names="ldadd\0ldclr\0ldeor\0ldset\0ldsmax\0ldsmin\0ldumax\0ldumin\0swp\0?\0?\0?\0?\0?\0?\0?\0ldaddl\0ldclrl\0ldeorl\0ldsetl\0ldsmaxl\0ldsminl\0ldumaxl\0lduminl\0swpl\0?\0?\0?\0?\0?\0?\0?\0ldadda\0ldclra\0ldeora\0ldseta\0ldsmaxa\0ldsmina\0ldumaxa\0ldumina\0swpa\0?\0?\0?\0?\0?\0?\0?\0ldaddal\0ldclral\0ldeoral\0ldsetal\0ldsmaxal\0ldsminal\0ldumaxal\0lduminal\0swpal\0";
   8b128:	d0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8b12c:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_18)&0x30)|((ic32_12)&0xf); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b130:	121c0421 	and	w1, w1, #0x30
   8b134:	12000d4a 	and	w10, w10, #0xf
   8b138:	1200101a 	and	w26, w0, #0x1f
		names="ldadd\0ldclr\0ldeor\0ldset\0ldsmax\0ldsmin\0ldumax\0ldumin\0swp\0?\0?\0?\0?\0?\0?\0?\0ldaddl\0ldclrl\0ldeorl\0ldsetl\0ldsmaxl\0ldsminl\0ldumaxl\0lduminl\0swpl\0?\0?\0?\0?\0?\0?\0?\0ldadda\0ldclra\0ldeora\0ldseta\0ldsmaxa\0ldsmina\0ldumaxa\0ldumina\0swpa\0?\0?\0?\0?\0?\0?\0?\0ldaddal\0ldclral\0ldeoral\0ldsetal\0ldsmaxal\0ldsminal\0ldumaxal\0lduminal\0swpal\0";
   8b13c:	911a8060 	add	x0, x3, #0x6a0
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8b140:	528169e3 	mov	w3, #0xb4f                 	// #2895
		op=((ic32_18)&0x30)|((ic32_12)&0xf); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b144:	1200009b 	and	w27, w4, #0x1
   8b148:	12001059 	and	w25, w2, #0x1f
   8b14c:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8b150:	72a54523 	movk	w3, #0x2a29, lsl #16
   8b154:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_18)&0x30)|((ic32_12)&0xf); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b158:	2a0a0021 	orr	w1, w1, w10
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b15c:	52800017 	mov	w23, #0x0                   	// #0
   8b160:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b164:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8b168:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b16c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b170:	29117fe4 	stp	w4, wzr, [sp, #136]
   8b174:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b178:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8b17c:	b902c3e3 	str	w3, [sp, #704]
   8b180:	390b13e2 	strb	w2, [sp, #708]
   8b184:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b188:	17ffec7e 	b	86380 <disasm+0x1c80>
		names="str\0ldr\0";
   8b18c:	d0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8b190:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b194:	1200009b 	and	w27, w4, #0x1
   8b198:	1200101a 	and	w26, w0, #0x1f
   8b19c:	120010a4 	and	w4, w5, #0x1f
		names="str\0ldr\0";
   8b1a0:	9119e060 	add	x0, x3, #0x678
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountjs; args[5]=disasm_arg_offe; 
   8b1a4:	52852163 	mov	w3, #0x290b                	// #10507
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b1a8:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountjs; args[5]=disasm_arg_offe; 
   8b1ac:	72aba543 	movk	w3, #0x5d2a, lsl #16
   8b1b0:	52856c02 	mov	w2, #0x2b60                	// #11104
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b1b4:	120000e1 	and	w1, w7, #0x1
   8b1b8:	12000154 	and	w20, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b1bc:	52800017 	mov	w23, #0x0                   	// #0
   8b1c0:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8b1c4:	290effff 	stp	wzr, wzr, [sp, #116]
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b1c8:	b9007fe4 	str	w4, [sp, #124]
   8b1cc:	12000964 	and	w4, w11, #0x7
   8b1d0:	b90083e4 	str	w4, [sp, #128]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b1d4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b1d8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b1dc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountjs; args[5]=disasm_arg_offe; 
   8b1e0:	b902c3e3 	str	w3, [sp, #704]
   8b1e4:	79058be2 	strh	w2, [sp, #708]
   8b1e8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b1ec:	17ffec65 	b	86380 <disasm+0x1c80>
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b1f0:	f240011f 	tst	x8, #0x1
   8b1f4:	1200214a 	and	w10, w10, #0x1ff
   8b1f8:	12803fe5 	mov	w5, #0xfffffe00            	// #-512
   8b1fc:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="str\0ldr\0";
   8b200:	d0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b204:	1200101a 	and	w26, w0, #0x1f
		names="str\0ldr\0";
   8b208:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b20c:	2a050140 	orr	w0, w10, w5
   8b210:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="str\0ldr\0";
   8b214:	9119e060 	add	x0, x3, #0x678
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8b218:	52852163 	mov	w3, #0x290b                	// #10507
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b21c:	1200009b 	and	w27, w4, #0x1
   8b220:	12001059 	and	w25, w2, #0x1f
   8b224:	120001a4 	and	w4, w13, #0x1
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8b228:	52800562 	mov	w2, #0x2b                  	// #43
   8b22c:	72a22543 	movk	w3, #0x112a, lsl #16
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b230:	120000e1 	and	w1, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b234:	52800017 	mov	w23, #0x0                   	// #0
   8b238:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b23c:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b240:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b244:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b248:	29127fe4 	stp	w4, wzr, [sp, #144]
   8b24c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8b250:	b902c3e3 	str	w3, [sp, #704]
   8b254:	390b13e2 	strb	w2, [sp, #708]
   8b258:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b25c:	17ffec49 	b	86380 <disasm+0x1c80>
		op=((ic32_21)&0x2)|((ic32_11)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b260:	f240011f 	tst	x8, #0x1
   8b264:	1200214a 	and	w10, w10, #0x1ff
   8b268:	12803fe5 	mov	w5, #0xfffffe00            	// #-512
   8b26c:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="stur\0sttr\0ldur\0ldtr\0";
   8b270:	d0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_21)&0x2)|((ic32_11)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b274:	1200101a 	and	w26, w0, #0x1f
		names="stur\0sttr\0ldur\0ldtr\0";
   8b278:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_21)&0x2)|((ic32_11)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b27c:	2a050140 	orr	w0, w10, w5
   8b280:	121f0181 	and	w1, w12, #0x2
   8b284:	120001ad 	and	w13, w13, #0x1
   8b288:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="stur\0sttr\0ldur\0ldtr\0";
   8b28c:	911a2060 	add	x0, x3, #0x688
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8b290:	52852163 	mov	w3, #0x290b                	// #10507
		op=((ic32_21)&0x2)|((ic32_11)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b294:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8b298:	72a22543 	movk	w3, #0x112a, lsl #16
   8b29c:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_21)&0x2)|((ic32_11)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b2a0:	2a0d0021 	orr	w1, w1, w13
   8b2a4:	1200009b 	and	w27, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b2a8:	52800017 	mov	w23, #0x0                   	// #0
   8b2ac:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b2b0:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b2b4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b2b8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b2bc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b2c0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8b2c4:	b902c3e3 	str	w3, [sp, #704]
   8b2c8:	390b13e2 	strb	w2, [sp, #708]
   8b2cc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b2d0:	17ffec2c 	b	86380 <disasm+0x1c80>
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b2d4:	f240011f 	tst	x8, #0x1
   8b2d8:	1200214a 	and	w10, w10, #0x1ff
   8b2dc:	12803fe5 	mov	w5, #0xfffffe00            	// #-512
   8b2e0:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="str\0ldr\0";
   8b2e4:	d0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b2e8:	1200101a 	and	w26, w0, #0x1f
		names="str\0ldr\0";
   8b2ec:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b2f0:	2a050140 	orr	w0, w10, w5
   8b2f4:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="str\0ldr\0";
   8b2f8:	9119e060 	add	x0, x3, #0x678
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8b2fc:	52852163 	mov	w3, #0x290b                	// #10507
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b300:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8b304:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8b308:	52800222 	mov	w2, #0x11                  	// #17
		op=((ic32_22)&0x1); s=((ic32_30)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b30c:	120000e1 	and	w1, w7, #0x1
   8b310:	1200009b 	and	w27, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b314:	52800017 	mov	w23, #0x0                   	// #0
   8b318:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b31c:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b320:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b324:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b328:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b32c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8b330:	b902c3e3 	str	w3, [sp, #704]
   8b334:	390b13e2 	strb	w2, [sp, #708]
   8b338:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b33c:	17ffec11 	b	86380 <disasm+0x1c80>
		op=((ic32_21)&0x6)|((ic32_15)&0x1); s=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b340:	121f0581 	and	w1, w12, #0x6
   8b344:	120000c6 	and	w6, w6, #0x1
		names="?\0?\0ldxr\0ldaxr\0stllr\0stlr\0ldlar\0ldar\0";
   8b348:	d0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_21)&0x6)|((ic32_15)&0x1); s=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b34c:	12001059 	and	w25, w2, #0x1f
		names="?\0?\0ldxr\0ldaxr\0stllr\0stlr\0ldlar\0ldar\0";
   8b350:	9102a063 	add	x3, x3, #0xa8
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8b354:	52852162 	mov	w2, #0x290b                	// #10507
		op=((ic32_21)&0x6)|((ic32_15)&0x1); s=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b358:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8b35c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_21)&0x6)|((ic32_15)&0x1); s=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b360:	2a060021 	orr	w1, w1, w6
   8b364:	1200009b 	and	w27, w4, #0x1
		names="?\0?\0ldxr\0ldaxr\0stllr\0stlr\0ldlar\0ldar\0";
   8b368:	91194060 	add	x0, x3, #0x650
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b36c:	52800017 	mov	w23, #0x0                   	// #0
   8b370:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b374:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8b378:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b37c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b380:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b384:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b388:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8b38c:	b902c3e2 	str	w2, [sp, #704]
   8b390:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b394:	17ffebfb 	b	86380 <disasm+0x1c80>
		names="cas\0casl\0casa\0casal\0";
   8b398:	d0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8b39c:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_21)&0x2)|((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b3a0:	121f0181 	and	w1, w12, #0x2
   8b3a4:	120000c6 	and	w6, w6, #0x1
   8b3a8:	1200101a 	and	w26, w0, #0x1f
		names="cas\0casl\0casa\0casal\0";
   8b3ac:	9118e060 	add	x0, x3, #0x638
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8b3b0:	528169e3 	mov	w3, #0xb4f                 	// #2895
		op=((ic32_21)&0x2)|((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b3b4:	1200009b 	and	w27, w4, #0x1
   8b3b8:	12001059 	and	w25, w2, #0x1f
   8b3bc:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8b3c0:	72a54523 	movk	w3, #0x2a29, lsl #16
   8b3c4:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_21)&0x2)|((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b3c8:	2a060021 	orr	w1, w1, w6
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b3cc:	52800017 	mov	w23, #0x0                   	// #0
   8b3d0:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b3d4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8b3d8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b3dc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b3e0:	29117fe4 	stp	w4, wzr, [sp, #136]
   8b3e4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b3e8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8b3ec:	b902c3e3 	str	w3, [sp, #704]
   8b3f0:	390b13e2 	strb	w2, [sp, #708]
   8b3f4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b3f8:	17ffebe2 	b	86380 <disasm+0x1c80>
		names="ldxp\0ldaxp\0";
   8b3fc:	d0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8b400:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b404:	1200101a 	and	w26, w0, #0x1f
		names="ldxp\0ldaxp\0";
   8b408:	9118a060 	add	x0, x3, #0x628
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8b40c:	5281c163 	mov	w3, #0xe0b                 	// #3595
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b410:	1200009b 	and	w27, w4, #0x1
   8b414:	12001059 	and	w25, w2, #0x1f
   8b418:	12001284 	and	w4, w20, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8b41c:	72a54523 	movk	w3, #0x2a29, lsl #16
   8b420:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b424:	120000c1 	and	w1, w6, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b428:	52800017 	mov	w23, #0x0                   	// #0
   8b42c:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b430:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8b434:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b438:	290fffe4 	stp	w4, wzr, [sp, #124]
   8b43c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b440:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b444:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Rm; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8b448:	b902c3e3 	str	w3, [sp, #704]
   8b44c:	390b13e2 	strb	w2, [sp, #708]
   8b450:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b454:	17ffebcb 	b	86380 <disasm+0x1c80>
		names="stxp\0stlxp\0";
   8b458:	d0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8b45c:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b460:	1200009b 	and	w27, w4, #0x1
   8b464:	1200101a 	and	w26, w0, #0x1f
   8b468:	120010a4 	and	w4, w5, #0x1f
		names="stxp\0stlxp\0";
   8b46c:	91186060 	add	x0, x3, #0x618
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_Rm; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8b470:	52816a43 	mov	w3, #0xb52                 	// #2898
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b474:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_Rm; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8b478:	72a521c3 	movk	w3, #0x290e, lsl #16
   8b47c:	52856542 	mov	w2, #0x2b2a                	// #11050
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b480:	120000c1 	and	w1, w6, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b484:	52800017 	mov	w23, #0x0                   	// #0
   8b488:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8b48c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b490:	b90083ff 	str	wzr, [sp, #128]
   8b494:	29117fe4 	stp	w4, wzr, [sp, #136]
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b498:	12001284 	and	w4, w20, #0x1f
	uint16_t op=0, om=0, j=0;
   8b49c:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); m=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b4a0:	b9007fe4 	str	w4, [sp, #124]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b4a4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b4a8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Rt; args[2]=disasm_arg_Rm; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8b4ac:	b902c3e3 	str	w3, [sp, #704]
   8b4b0:	79058be2 	strh	w2, [sp, #708]
   8b4b4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b4b8:	17ffebb2 	b	86380 <disasm+0x1c80>
		names="prfm\0";
   8b4bc:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8b4c0:	52852aa3 	mov	w3, #0x2955                	// #10581
		names="prfm\0";
   8b4c4:	9102a021 	add	x1, x1, #0xa8
		j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b4c8:	12001059 	and	w25, w2, #0x1f
   8b4cc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8b4d0:	72ab8543 	movk	w3, #0x5c2a, lsl #16
		names="prfm\0";
   8b4d4:	91182020 	add	x0, x1, #0x608
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8b4d8:	52800562 	mov	w2, #0x2b                  	// #43
		j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b4dc:	12002e94 	and	w20, w20, #0xfff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b4e0:	52800017 	mov	w23, #0x0                   	// #0
   8b4e4:	52800018 	mov	w24, #0x0                   	// #0
   8b4e8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b4ec:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b4f0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b4f4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b4f8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b4fc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b500:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8b504:	b902c3e3 	str	w3, [sp, #704]
   8b508:	390b13e2 	strb	w2, [sp, #708]
   8b50c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b510:	17ffeb9c 	b	86380 <disasm+0x1c80>
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b514:	120010a3 	and	w3, w5, #0x1f
   8b518:	b9007fe3 	str	w3, [sp, #124]
   8b51c:	12000963 	and	w3, w11, #0x7
		names="prfm\0";
   8b520:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8b524:	9102a021 	add	x1, x1, #0xa8
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b528:	b90083e3 	str	w3, [sp, #128]
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj3; args[5]=disasm_arg_offe; 
   8b52c:	52852aa3 	mov	w3, #0x2955                	// #10581
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b530:	12001059 	and	w25, w2, #0x1f
   8b534:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj3; args[5]=disasm_arg_offe; 
   8b538:	52856c42 	mov	w2, #0x2b62                	// #11106
		names="prfm\0";
   8b53c:	91182020 	add	x0, x1, #0x608
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj3; args[5]=disasm_arg_offe; 
   8b540:	72aba543 	movk	w3, #0x5d2a, lsl #16
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b544:	12000154 	and	w20, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b548:	52800017 	mov	w23, #0x0                   	// #0
   8b54c:	52800018 	mov	w24, #0x0                   	// #0
   8b550:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b554:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b558:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b55c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b560:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b564:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj3; args[5]=disasm_arg_offe; 
   8b568:	b902c3e3 	str	w3, [sp, #704]
   8b56c:	79058be2 	strh	w2, [sp, #708]
   8b570:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b574:	17ffeb83 	b	86380 <disasm+0x1c80>
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b578:	f240011f 	tst	x8, #0x1
   8b57c:	1200214a 	and	w10, w10, #0x1ff
   8b580:	12803fe3 	mov	w3, #0xfffffe00            	// #-512
   8b584:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="prfum\0";
   8b588:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b58c:	1200101a 	and	w26, w0, #0x1f
		names="prfum\0";
   8b590:	9102a021 	add	x1, x1, #0xa8
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b594:	2a030140 	orr	w0, w10, w3
   8b598:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="prfum\0";
   8b59c:	91184020 	add	x0, x1, #0x610
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8b5a0:	52852aa1 	mov	w1, #0x2955                	// #10581
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8b5a4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8b5a8:	72a22541 	movk	w1, #0x112a, lsl #16
   8b5ac:	52800562 	mov	w2, #0x2b                  	// #43
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b5b0:	52800017 	mov	w23, #0x0                   	// #0
   8b5b4:	52800018 	mov	w24, #0x0                   	// #0
   8b5b8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b5bc:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b5c0:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b5c4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b5c8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b5cc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8b5d0:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   8b5d4:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8b5d8:	390b13e2 	strb	w2, [sp, #708]
   8b5dc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b5e0:	17ffeb68 	b	86380 <disasm+0x1c80>
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8b5e4:	f240021f 	tst	x16, #0x1
   8b5e8:	12004842 	and	w2, w2, #0x7ffff
   8b5ec:	52bfff03 	mov	w3, #0xfff80000            	// #-524288
   8b5f0:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="prfm\0";
   8b5f4:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8b5f8:	1200101a 	and	w26, w0, #0x1f
		names="prfm\0";
   8b5fc:	9102a021 	add	x1, x1, #0xa8
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8b600:	2a030040 	orr	w0, w2, w3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b604:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_labeli4; 
   8b608:	52820aa2 	mov	w2, #0x1055                	// #4181
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b60c:	52800018 	mov	w24, #0x0                   	// #0
   8b610:	52800019 	mov	w25, #0x0                   	// #0
   8b614:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b618:	52800014 	mov	w20, #0x0                   	// #0
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8b61c:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="prfm\0";
   8b620:	91182020 	add	x0, x1, #0x608
	uint16_t op=0, om=0, j=0;
   8b624:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b628:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b62c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b630:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b634:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_prf_op; args[1]=disasm_arg_labeli4; 
   8b638:	790583e2 	strh	w2, [sp, #704]
   8b63c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b640:	17ffeb50 	b	86380 <disasm+0x1c80>
		names="eret\0drps\0";
   8b644:	d0000040 	adrp	x0, 95000 <sd_init+0x2ce8>
   8b648:	9102a000 	add	x0, x0, #0xa8
		op=((ic32_21)&0x1); 
   8b64c:	12000181 	and	w1, w12, #0x1
		names="eret\0drps\0";
   8b650:	9117e000 	add	x0, x0, #0x5f8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b654:	52800017 	mov	w23, #0x0                   	// #0
   8b658:	52800018 	mov	w24, #0x0                   	// #0
   8b65c:	52800019 	mov	w25, #0x0                   	// #0
   8b660:	5280001b 	mov	w27, #0x0                   	// #0
   8b664:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b668:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8b66c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b670:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b674:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b678:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b67c:	b9009bff 	str	wzr, [sp, #152]
   8b680:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b684:	17ffeb3f 	b	86380 <disasm+0x1c80>
		names="br\0blr\0ret\0";
   8b688:	d0000040 	adrp	x0, 95000 <sd_init+0x2ce8>
   8b68c:	9102a000 	add	x0, x0, #0xa8
		op=((ic32_21)&0x3); n=((ic32_5)&0x1f); 
   8b690:	12001059 	and	w25, w2, #0x1f
   8b694:	12000581 	and	w1, w12, #0x3
		args[0]=disasm_arg_Xn; 
   8b698:	52800462 	mov	w2, #0x23                  	// #35
		names="br\0blr\0ret\0";
   8b69c:	9117a000 	add	x0, x0, #0x5e8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b6a0:	52800017 	mov	w23, #0x0                   	// #0
   8b6a4:	52800018 	mov	w24, #0x0                   	// #0
   8b6a8:	5280001b 	mov	w27, #0x0                   	// #0
   8b6ac:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b6b0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8b6b4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b6b8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b6bc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b6c0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b6c4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xn; 
   8b6c8:	390b03e2 	strb	w2, [sp, #704]
   8b6cc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b6d0:	17ffeb2c 	b	86380 <disasm+0x1c80>
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b6d4:	12000764 	and	w4, w27, #0x3
		names="mrs\0";
   8b6d8:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8b6dc:	9102a021 	add	x1, x1, #0xa8
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b6e0:	12000c63 	and	w3, w3, #0xf
   8b6e4:	12000854 	and	w20, w2, #0x7
   8b6e8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_sysreg; 
   8b6ec:	52840062 	mov	w2, #0x2003                	// #8195
		names="mrs\0";
   8b6f0:	91178020 	add	x0, x1, #0x5e0
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b6f4:	12000d59 	and	w25, w10, #0xf
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b6f8:	52800017 	mov	w23, #0x0                   	// #0
   8b6fc:	52800018 	mov	w24, #0x0                   	// #0
   8b700:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b704:	52800001 	mov	w1, #0x0                   	// #0
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b708:	290f0fff 	stp	wzr, w3, [sp, #120]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b70c:	b90083ff 	str	wzr, [sp, #128]
   8b710:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b714:	29127fe4 	stp	w4, wzr, [sp, #144]
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b718:	120008a4 	and	w4, w5, #0x7
   8b71c:	b90077e4 	str	w4, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b720:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_sysreg; 
   8b724:	790583e2 	strh	w2, [sp, #704]
   8b728:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b72c:	17ffeb15 	b	86380 <disasm+0x1c80>
		i=((ic32_18)&1?(-1<<3):0)|((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b730:	f9404fe1 	ldr	x1, [sp, #152]
   8b734:	120008a5 	and	w5, w5, #0x7
   8b738:	128000e4 	mov	w4, #0xfffffff8            	// #-8
   8b73c:	1200101a 	and	w26, w0, #0x1f
   8b740:	12000c63 	and	w3, w3, #0xf
   8b744:	12000854 	and	w20, w2, #0x7
   8b748:	f240003f 	tst	x1, #0x1
		names="sysl\0";
   8b74c:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
		i=((ic32_18)&1?(-1<<3):0)|((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b750:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="sysl\0";
   8b754:	9102a021 	add	x1, x1, #0xa8
		i=((ic32_18)&1?(-1<<3):0)|((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b758:	2a0400a0 	orr	w0, w5, w4
   8b75c:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="sysl\0";
   8b760:	91176020 	add	x0, x1, #0x5d8
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_i; args[2]=disasm_arg_Cn; args[3]=disasm_arg_Cm; args[4]=disasm_arg_j; 
   8b764:	5280e061 	mov	w1, #0x703                 	// #1795
   8b768:	72a44421 	movk	w1, #0x2221, lsl #16
   8b76c:	528001a2 	mov	w2, #0xd                   	// #13
		i=((ic32_18)&1?(-1<<3):0)|((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b770:	12000d59 	and	w25, w10, #0xf
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b774:	52800017 	mov	w23, #0x0                   	// #0
   8b778:	52800018 	mov	w24, #0x0                   	// #0
   8b77c:	5280001b 	mov	w27, #0x0                   	// #0
   8b780:	290fffe3 	stp	w3, wzr, [sp, #124]
   8b784:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b788:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b78c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_i; args[2]=disasm_arg_Cn; args[3]=disasm_arg_Cm; args[4]=disasm_arg_j; 
   8b790:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   8b794:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_i; args[2]=disasm_arg_Cn; args[3]=disasm_arg_Cm; args[4]=disasm_arg_j; 
   8b798:	390b13e2 	strb	w2, [sp, #708]
   8b79c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b7a0:	17ffeaf8 	b	86380 <disasm+0x1c80>
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b7a4:	12000764 	and	w4, w27, #0x3
		names="msr\0";
   8b7a8:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8b7ac:	9102a021 	add	x1, x1, #0xa8
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b7b0:	12000c63 	and	w3, w3, #0xf
   8b7b4:	12000854 	and	w20, w2, #0x7
   8b7b8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_sysreg; args[1]=disasm_arg_Xt; 
   8b7bc:	52806402 	mov	w2, #0x320                 	// #800
		names="msr\0";
   8b7c0:	9116c020 	add	x0, x1, #0x5b0
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b7c4:	12000d59 	and	w25, w10, #0xf
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b7c8:	52800017 	mov	w23, #0x0                   	// #0
   8b7cc:	52800018 	mov	w24, #0x0                   	// #0
   8b7d0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b7d4:	52800001 	mov	w1, #0x0                   	// #0
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b7d8:	290f0fff 	stp	wzr, w3, [sp, #120]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b7dc:	b90083ff 	str	wzr, [sp, #128]
   8b7e0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b7e4:	29127fe4 	stp	w4, wzr, [sp, #144]
		p=((ic32_19)&0x3); k=((ic32_16)&0x7); n=((ic32_12)&0xf); m=((ic32_8)&0xf); j=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b7e8:	120008a4 	and	w4, w5, #0x7
   8b7ec:	b90077e4 	str	w4, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b7f0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_sysreg; args[1]=disasm_arg_Xt; 
   8b7f4:	790583e2 	strh	w2, [sp, #704]
   8b7f8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b7fc:	17ffeae1 	b	86380 <disasm+0x1c80>
		n=((ic32_14)&0x10)|((ic32>>7)&0x8)|((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b800:	53077c01 	lsr	w1, w0, #7
   8b804:	121c0231 	and	w17, w17, #0x10
   8b808:	121d0021 	and	w1, w1, #0x8
   8b80c:	12000842 	and	w2, w2, #0x7
   8b810:	2a110031 	orr	w17, w1, w17
		names="tlbi\0";
   8b814:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8b818:	9102a021 	add	x1, x1, #0xa8
		n=((ic32_14)&0x10)|((ic32>>7)&0x8)|((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b81c:	2a020239 	orr	w25, w17, w2
   8b820:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_tl0; args[1]=disasm_arg_Xt_opt; 
   8b824:	528383a2 	mov	w2, #0x1c1d                	// #7197
		names="tlbi\0";
   8b828:	91174020 	add	x0, x1, #0x5d0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b82c:	52800017 	mov	w23, #0x0                   	// #0
   8b830:	52800018 	mov	w24, #0x0                   	// #0
   8b834:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b838:	52800014 	mov	w20, #0x0                   	// #0
   8b83c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b840:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b844:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b848:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b84c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b850:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_tl0; args[1]=disasm_arg_Xt_opt; 
   8b854:	790583e2 	strh	w2, [sp, #704]
   8b858:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b85c:	17ffeac9 	b	86380 <disasm+0x1c80>
		a=((ic32_14)&0x8)|((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b860:	121d0231 	and	w17, w17, #0x8
   8b864:	12000842 	and	w2, w2, #0x7
   8b868:	2a020222 	orr	w2, w17, w2
		names="at\0";
   8b86c:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8b870:	9102a021 	add	x1, x1, #0xa8
		a=((ic32_14)&0x8)|((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b874:	1200101a 	and	w26, w0, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b878:	52800017 	mov	w23, #0x0                   	// #0
		names="at\0";
   8b87c:	91170020 	add	x0, x1, #0x5c0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b880:	52800018 	mov	w24, #0x0                   	// #0
   8b884:	52800019 	mov	w25, #0x0                   	// #0
   8b888:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b88c:	52800014 	mov	w20, #0x0                   	// #0
   8b890:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b894:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b898:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b89c:	29117fff 	stp	wzr, wzr, [sp, #136]
		a=((ic32_14)&0x8)|((ic32_5)&0x7); t=((ic32)&0x1f); 
   8b8a0:	29120bff 	stp	wzr, w2, [sp, #144]
		args[0]=disasm_arg_a2; args[1]=disasm_arg_Xt; 
   8b8a4:	528062c2 	mov	w2, #0x316                 	// #790
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b8a8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_a2; args[1]=disasm_arg_Xt; 
   8b8ac:	790583e2 	strh	w2, [sp, #704]
   8b8b0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b8b4:	17ffeab3 	b	86380 <disasm+0x1c80>
		n=((ic32_8)&0x4)|((ic32>>6)&0x2)|((ic32_5)&0x1); t=((ic32)&0x1f); 
   8b8b8:	53067c01 	lsr	w1, w0, #6
   8b8bc:	121e0063 	and	w3, w3, #0x4
   8b8c0:	121f0021 	and	w1, w1, #0x2
   8b8c4:	12000042 	and	w2, w2, #0x1
   8b8c8:	2a030021 	orr	w1, w1, w3
		names="tlbi\0";
   8b8cc:	d0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8b8d0:	9102a063 	add	x3, x3, #0xa8
		n=((ic32_8)&0x4)|((ic32>>6)&0x2)|((ic32_5)&0x1); t=((ic32)&0x1f); 
   8b8d4:	2a020039 	orr	w25, w1, w2
   8b8d8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_tl2; args[1]=disasm_arg_Xt_opt; 
   8b8dc:	528383e2 	mov	w2, #0x1c1f                	// #7199
		names="tlbi\0";
   8b8e0:	91174060 	add	x0, x3, #0x5d0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b8e4:	52800017 	mov	w23, #0x0                   	// #0
   8b8e8:	52800018 	mov	w24, #0x0                   	// #0
   8b8ec:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b8f0:	52800014 	mov	w20, #0x0                   	// #0
   8b8f4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b8f8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b8fc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b900:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b904:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b908:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_tl2; args[1]=disasm_arg_Xt_opt; 
   8b90c:	790583e2 	strh	w2, [sp, #704]
   8b910:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b914:	17ffea9b 	b	86380 <disasm+0x1c80>
		n=((ic32_9)&0x2)|((ic32>>7)&0x1); t=((ic32)&0x1f); 
   8b918:	d3471c02 	ubfx	x2, x0, #7, #1
   8b91c:	121f01ef 	and	w15, w15, #0x2
		names="tlbi\0";
   8b920:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8b924:	9102a021 	add	x1, x1, #0xa8
		n=((ic32_9)&0x2)|((ic32>>7)&0x1); t=((ic32)&0x1f); 
   8b928:	2a0f0059 	orr	w25, w2, w15
   8b92c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_tl1; args[1]=disasm_arg_Xt_opt; 
   8b930:	528383c2 	mov	w2, #0x1c1e                	// #7198
		names="tlbi\0";
   8b934:	91174020 	add	x0, x1, #0x5d0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b938:	52800017 	mov	w23, #0x0                   	// #0
   8b93c:	52800018 	mov	w24, #0x0                   	// #0
   8b940:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b944:	52800014 	mov	w20, #0x0                   	// #0
   8b948:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b94c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b950:	290fffff 	stp	wzr, wzr, [sp, #124]
   8b954:	29117fff 	stp	wzr, wzr, [sp, #136]
   8b958:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b95c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_tl1; args[1]=disasm_arg_Xt_opt; 
   8b960:	790583e2 	strh	w2, [sp, #704]
   8b964:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b968:	17ffea86 	b	86380 <disasm+0x1c80>
		c=((ic32_15)&0x2)|((ic32_10)&0x1); t=((ic32)&0x1f); 
   8b96c:	12000294 	and	w20, w20, #0x1
   8b970:	121f00c6 	and	w6, w6, #0x2
   8b974:	2a1400c2 	orr	w2, w6, w20
		names="ic\0";
   8b978:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8b97c:	9102a021 	add	x1, x1, #0xa8
		c=((ic32_15)&0x2)|((ic32_10)&0x1); t=((ic32)&0x1f); 
   8b980:	1200101a 	and	w26, w0, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b984:	52800017 	mov	w23, #0x0                   	// #0
		names="ic\0";
   8b988:	91172020 	add	x0, x1, #0x5c8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b98c:	52800018 	mov	w24, #0x0                   	// #0
   8b990:	52800019 	mov	w25, #0x0                   	// #0
   8b994:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b998:	52800014 	mov	w20, #0x0                   	// #0
   8b99c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b9a0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b9a4:	290fffff 	stp	wzr, wzr, [sp, #124]
		c=((ic32_15)&0x2)|((ic32_10)&0x1); t=((ic32)&0x1f); 
   8b9a8:	29110bff 	stp	wzr, w2, [sp, #136]
		args[0]=disasm_arg_ic; args[1]=disasm_arg_Xt_opt; 
   8b9ac:	52838362 	mov	w2, #0x1c1b                	// #7195
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b9b0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8b9b4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_ic; args[1]=disasm_arg_Xt_opt; 
   8b9b8:	790583e2 	strh	w2, [sp, #704]
   8b9bc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8b9c0:	17ffea70 	b	86380 <disasm+0x1c80>
		d=((ic32_9)&0x2)|((ic32_8)&0x1); t=((ic32)&0x1f); 
   8b9c4:	121f01ef 	and	w15, w15, #0x2
   8b9c8:	12000063 	and	w3, w3, #0x1
   8b9cc:	2a0301e2 	orr	w2, w15, w3
		names="dc\0";
   8b9d0:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8b9d4:	9102a021 	add	x1, x1, #0xa8
		d=((ic32_9)&0x2)|((ic32_8)&0x1); t=((ic32)&0x1f); 
   8b9d8:	1200101a 	and	w26, w0, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b9dc:	52800017 	mov	w23, #0x0                   	// #0
		names="dc\0";
   8b9e0:	9116e020 	add	x0, x1, #0x5b8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b9e4:	52800018 	mov	w24, #0x0                   	// #0
   8b9e8:	52800019 	mov	w25, #0x0                   	// #0
   8b9ec:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8b9f0:	52800014 	mov	w20, #0x0                   	// #0
   8b9f4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8b9f8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8b9fc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ba00:	29117fe2 	stp	w2, wzr, [sp, #136]
		args[0]=disasm_arg_dc2; args[1]=disasm_arg_Xt; 
   8ba04:	52806342 	mov	w2, #0x31a                 	// #794
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ba08:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ba0c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_dc2; args[1]=disasm_arg_Xt; 
   8ba10:	790583e2 	strh	w2, [sp, #704]
   8ba14:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ba18:	17ffea5a 	b	86380 <disasm+0x1c80>
		names="dc\0";
   8ba1c:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8ba20:	9102a021 	add	x1, x1, #0xa8
		t=((ic32)&0x1f); 
   8ba24:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_ZVA; args[1]=disasm_arg_Xt; 
   8ba28:	52806322 	mov	w2, #0x319                 	// #793
		names="dc\0";
   8ba2c:	9116e020 	add	x0, x1, #0x5b8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ba30:	52800017 	mov	w23, #0x0                   	// #0
   8ba34:	52800018 	mov	w24, #0x0                   	// #0
   8ba38:	52800019 	mov	w25, #0x0                   	// #0
   8ba3c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ba40:	52800014 	mov	w20, #0x0                   	// #0
   8ba44:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8ba48:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ba4c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ba50:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ba54:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ba58:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_ZVA; args[1]=disasm_arg_Xt; 
   8ba5c:	790583e2 	strh	w2, [sp, #704]
   8ba60:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ba64:	17ffea47 	b	86380 <disasm+0x1c80>
		d=((ic32_10)&0x1); t=((ic32)&0x1f); 
   8ba68:	12000282 	and	w2, w20, #0x1
		names="dc\0";
   8ba6c:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8ba70:	9102a021 	add	x1, x1, #0xa8
		d=((ic32_10)&0x1); t=((ic32)&0x1f); 
   8ba74:	1200101a 	and	w26, w0, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ba78:	52800017 	mov	w23, #0x0                   	// #0
		names="dc\0";
   8ba7c:	9116e020 	add	x0, x1, #0x5b8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ba80:	52800018 	mov	w24, #0x0                   	// #0
   8ba84:	52800019 	mov	w25, #0x0                   	// #0
   8ba88:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ba8c:	52800014 	mov	w20, #0x0                   	// #0
   8ba90:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8ba94:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ba98:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ba9c:	29117fe2 	stp	w2, wzr, [sp, #136]
		args[0]=disasm_arg_dc1; args[1]=disasm_arg_Xt; 
   8baa0:	52806302 	mov	w2, #0x318                 	// #792
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8baa4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8baa8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_dc1; args[1]=disasm_arg_Xt; 
   8baac:	790583e2 	strh	w2, [sp, #704]
   8bab0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bab4:	17ffea33 	b	86380 <disasm+0x1c80>
		a=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8bab8:	12000842 	and	w2, w2, #0x7
		names="at\0";
   8babc:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8bac0:	9102a021 	add	x1, x1, #0xa8
		a=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8bac4:	1200101a 	and	w26, w0, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bac8:	52800017 	mov	w23, #0x0                   	// #0
		names="at\0";
   8bacc:	91170020 	add	x0, x1, #0x5c0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bad0:	52800018 	mov	w24, #0x0                   	// #0
   8bad4:	52800019 	mov	w25, #0x0                   	// #0
   8bad8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8badc:	52800014 	mov	w20, #0x0                   	// #0
   8bae0:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8bae4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bae8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8baec:	29117fff 	stp	wzr, wzr, [sp, #136]
		a=((ic32_5)&0x7); t=((ic32)&0x1f); 
   8baf0:	29120bff 	stp	wzr, w2, [sp, #144]
		args[0]=disasm_arg_a1; args[1]=disasm_arg_Xt; 
   8baf4:	528062a2 	mov	w2, #0x315                 	// #789
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8baf8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_a1; args[1]=disasm_arg_Xt; 
   8bafc:	790583e2 	strh	w2, [sp, #704]
   8bb00:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bb04:	17ffea1f 	b	86380 <disasm+0x1c80>
		a=((ic32_5)&0x3); t=((ic32)&0x1f); 
   8bb08:	12000442 	and	w2, w2, #0x3
		names="at\0";
   8bb0c:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8bb10:	9102a021 	add	x1, x1, #0xa8
		a=((ic32_5)&0x3); t=((ic32)&0x1f); 
   8bb14:	1200101a 	and	w26, w0, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bb18:	52800017 	mov	w23, #0x0                   	// #0
		names="at\0";
   8bb1c:	91170020 	add	x0, x1, #0x5c0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bb20:	52800018 	mov	w24, #0x0                   	// #0
   8bb24:	52800019 	mov	w25, #0x0                   	// #0
   8bb28:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8bb2c:	52800014 	mov	w20, #0x0                   	// #0
   8bb30:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8bb34:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bb38:	290fffff 	stp	wzr, wzr, [sp, #124]
   8bb3c:	29117fff 	stp	wzr, wzr, [sp, #136]
		a=((ic32_5)&0x3); t=((ic32)&0x1f); 
   8bb40:	29120bff 	stp	wzr, w2, [sp, #144]
		args[0]=disasm_arg_a0; args[1]=disasm_arg_Xt; 
   8bb44:	52806282 	mov	w2, #0x314                 	// #788
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bb48:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_a0; args[1]=disasm_arg_Xt; 
   8bb4c:	790583e2 	strh	w2, [sp, #704]
   8bb50:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bb54:	17ffea0b 	b	86380 <disasm+0x1c80>
		d=((ic32_5)&0x3); t=((ic32)&0x1f); 
   8bb58:	12000442 	and	w2, w2, #0x3
		names="dc\0";
   8bb5c:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8bb60:	9102a021 	add	x1, x1, #0xa8
		d=((ic32_5)&0x3); t=((ic32)&0x1f); 
   8bb64:	1200101a 	and	w26, w0, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bb68:	52800017 	mov	w23, #0x0                   	// #0
		names="dc\0";
   8bb6c:	9116e020 	add	x0, x1, #0x5b8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bb70:	52800018 	mov	w24, #0x0                   	// #0
   8bb74:	52800019 	mov	w25, #0x0                   	// #0
   8bb78:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8bb7c:	52800014 	mov	w20, #0x0                   	// #0
   8bb80:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8bb84:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bb88:	290fffff 	stp	wzr, wzr, [sp, #124]
   8bb8c:	29117fe2 	stp	w2, wzr, [sp, #136]
		args[0]=disasm_arg_dc0; args[1]=disasm_arg_Xt; 
   8bb90:	528062e2 	mov	w2, #0x317                 	// #791
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bb94:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bb98:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_dc0; args[1]=disasm_arg_Xt; 
   8bb9c:	790583e2 	strh	w2, [sp, #704]
   8bba0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bba4:	17ffe9f7 	b	86380 <disasm+0x1c80>
		i=((ic32_11)&1?(-1<<4):0)|((ic32_8)&0xf); p=((ic32_5)&0x7); 
   8bba8:	f24001bf 	tst	x13, #0x1
   8bbac:	12000c63 	and	w3, w3, #0xf
   8bbb0:	128001e1 	mov	w1, #0xfffffff0            	// #-16
   8bbb4:	1a9f1021 	csel	w1, w1, wzr, ne  // ne = any
   8bbb8:	12000842 	and	w2, w2, #0x7
   8bbbc:	2a010061 	orr	w1, w3, w1
		names="msr\0";
   8bbc0:	d0000040 	adrp	x0, 95000 <sd_init+0x2ce8>
   8bbc4:	9102a000 	add	x0, x0, #0xa8
   8bbc8:	9116c000 	add	x0, x0, #0x5b0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bbcc:	52800017 	mov	w23, #0x0                   	// #0
   8bbd0:	52800018 	mov	w24, #0x0                   	// #0
   8bbd4:	52800019 	mov	w25, #0x0                   	// #0
   8bbd8:	5280001b 	mov	w27, #0x0                   	// #0
   8bbdc:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8bbe0:	52800014 	mov	w20, #0x0                   	// #0
		i=((ic32_11)&1?(-1<<4):0)|((ic32_8)&0xf); p=((ic32_5)&0x7); 
   8bbe4:	290e87ff 	stp	wzr, w1, [sp, #116]
	uint16_t op=0, om=0, j=0;
   8bbe8:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bbec:	290fffff 	stp	wzr, wzr, [sp, #124]
   8bbf0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bbf4:	29127fe2 	stp	w2, wzr, [sp, #144]
		args[0]=disasm_arg_pstate; args[1]=disasm_arg_i; 
   8bbf8:	5280e242 	mov	w2, #0x712                 	// #1810
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bbfc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_pstate; args[1]=disasm_arg_i; 
   8bc00:	790583e2 	strh	w2, [sp, #704]
   8bc04:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bc08:	17ffe9de 	b	86380 <disasm+0x1c80>
		names="dsb\0dmb\0?\0isb\0";
   8bc0c:	d0000040 	adrp	x0, 95000 <sd_init+0x2ce8>
   8bc10:	9102a000 	add	x0, x0, #0xa8
		op=((ic32_5)&0x3); j=((ic32_8)&0xf); 
   8bc14:	12000441 	and	w1, w2, #0x3
   8bc18:	12000c74 	and	w20, w3, #0xf
		args[0]=disasm_arg_sh; 
   8bc1c:	52800262 	mov	w2, #0x13                  	// #19
		names="dsb\0dmb\0?\0isb\0";
   8bc20:	91168000 	add	x0, x0, #0x5a0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bc24:	52800017 	mov	w23, #0x0                   	// #0
   8bc28:	52800018 	mov	w24, #0x0                   	// #0
   8bc2c:	52800019 	mov	w25, #0x0                   	// #0
   8bc30:	5280001b 	mov	w27, #0x0                   	// #0
   8bc34:	5280001a 	mov	w26, #0x0                   	// #0
	uint32_t i=0;
   8bc38:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bc3c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8bc40:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bc44:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bc48:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_sh; 
   8bc4c:	390b03e2 	strb	w2, [sp, #704]
   8bc50:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bc54:	17ffe9cb 	b	86380 <disasm+0x1c80>
		i=((ic32_11)&1?(-1<<4):0)|((ic32_8)&0xf); 
   8bc58:	f24001bf 	tst	x13, #0x1
   8bc5c:	12000c63 	and	w3, w3, #0xf
   8bc60:	128001e1 	mov	w1, #0xfffffff0            	// #-16
   8bc64:	1a9f1021 	csel	w1, w1, wzr, ne  // ne = any
   8bc68:	2a010061 	orr	w1, w3, w1
		names="clrex\0";
   8bc6c:	d0000040 	adrp	x0, 95000 <sd_init+0x2ce8>
   8bc70:	9102a000 	add	x0, x0, #0xa8
		args[0]=disasm_arg_i_opt; 
   8bc74:	52800222 	mov	w2, #0x11                  	// #17
		names="clrex\0";
   8bc78:	91166000 	add	x0, x0, #0x598
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bc7c:	52800017 	mov	w23, #0x0                   	// #0
   8bc80:	52800018 	mov	w24, #0x0                   	// #0
   8bc84:	52800019 	mov	w25, #0x0                   	// #0
   8bc88:	5280001b 	mov	w27, #0x0                   	// #0
   8bc8c:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8bc90:	52800014 	mov	w20, #0x0                   	// #0
		i=((ic32_11)&1?(-1<<4):0)|((ic32_8)&0xf); 
   8bc94:	290e87ff 	stp	wzr, w1, [sp, #116]
	uint16_t op=0, om=0, j=0;
   8bc98:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bc9c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8bca0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bca4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bca8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_i_opt; 
   8bcac:	390b03e2 	strb	w2, [sp, #704]
   8bcb0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bcb4:	17ffe9b3 	b	86380 <disasm+0x1c80>
		op=((ic32>>6)&0x8)|((ic32_5)&0x7); 
   8bcb8:	53067c01 	lsr	w1, w0, #6
   8bcbc:	12000842 	and	w2, w2, #0x7
   8bcc0:	121d0021 	and	w1, w1, #0x8
		names="nop\0yield\0wfe\0wfi\0sev\0sevl\0?\0?\0esb\0psc\0";
   8bcc4:	d0000040 	adrp	x0, 95000 <sd_init+0x2ce8>
   8bcc8:	9102a000 	add	x0, x0, #0xa8
		op=((ic32>>6)&0x8)|((ic32_5)&0x7); 
   8bccc:	2a020021 	orr	w1, w1, w2
		names="nop\0yield\0wfe\0wfi\0sev\0sevl\0?\0?\0esb\0psc\0";
   8bcd0:	9115c000 	add	x0, x0, #0x570
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bcd4:	52800017 	mov	w23, #0x0                   	// #0
   8bcd8:	52800018 	mov	w24, #0x0                   	// #0
   8bcdc:	52800019 	mov	w25, #0x0                   	// #0
   8bce0:	5280001b 	mov	w27, #0x0                   	// #0
   8bce4:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8bce8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8bcec:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bcf0:	290fffff 	stp	wzr, wzr, [sp, #124]
   8bcf4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bcf8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bcfc:	b9009bff 	str	wzr, [sp, #152]
   8bd00:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bd04:	17ffe99f 	b	86380 <disasm+0x1c80>
		op=((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
   8bd08:	f240011f 	tst	x8, #0x1
   8bd0c:	12003c42 	and	w2, w2, #0xffff
   8bd10:	52bfffe4 	mov	w4, #0xffff0000            	// #-65536
   8bd14:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="?\0dcsp1\0dcps2\0dcps3\0";
   8bd18:	d0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
   8bd1c:	12000401 	and	w1, w0, #0x3
		names="?\0dcsp1\0dcps2\0dcps3\0";
   8bd20:	9102a063 	add	x3, x3, #0xa8
		op=((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
   8bd24:	2a040040 	orr	w0, w2, w4
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bd28:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_i_opt; 
   8bd2c:	52800222 	mov	w2, #0x11                  	// #17
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bd30:	52800018 	mov	w24, #0x0                   	// #0
   8bd34:	52800019 	mov	w25, #0x0                   	// #0
   8bd38:	5280001b 	mov	w27, #0x0                   	// #0
   8bd3c:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8bd40:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
   8bd44:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="?\0dcsp1\0dcps2\0dcps3\0";
   8bd48:	91156060 	add	x0, x3, #0x558
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bd4c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8bd50:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bd54:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bd58:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_i_opt; 
   8bd5c:	390b03e2 	strb	w2, [sp, #704]
   8bd60:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bd64:	17ffe987 	b	86380 <disasm+0x1c80>
		names="hlt\0";
   8bd68:	d0000040 	adrp	x0, 95000 <sd_init+0x2ce8>
   8bd6c:	9102a000 	add	x0, x0, #0xa8
   8bd70:	91154000 	add	x0, x0, #0x550
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bd74:	52800017 	mov	w23, #0x0                   	// #0
   8bd78:	52800018 	mov	w24, #0x0                   	// #0
   8bd7c:	52800019 	mov	w25, #0x0                   	// #0
   8bd80:	5280001b 	mov	w27, #0x0                   	// #0
   8bd84:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8bd88:	52800014 	mov	w20, #0x0                   	// #0
   8bd8c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8bd90:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bd94:	290fffff 	stp	wzr, wzr, [sp, #124]
   8bd98:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bd9c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bda0:	b9009bff 	str	wzr, [sp, #152]
   8bda4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bda8:	17ffe976 	b	86380 <disasm+0x1c80>
		op=((ic32_19)&0x4)|((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
   8bdac:	f240011f 	tst	x8, #0x1
   8bdb0:	12003c42 	and	w2, w2, #0xffff
   8bdb4:	52bfffe3 	mov	w3, #0xffff0000            	// #-65536
   8bdb8:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
   8bdbc:	121e0366 	and	w6, w27, #0x4
   8bdc0:	12000401 	and	w1, w0, #0x3
   8bdc4:	2a030042 	orr	w2, w2, w3
		names="?\0svc\0hvc\0smc\0brk\0";
   8bdc8:	d0000040 	adrp	x0, 95000 <sd_init+0x2ce8>
   8bdcc:	9102a000 	add	x0, x0, #0xa8
		op=((ic32_19)&0x4)|((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
   8bdd0:	2a0100c1 	orr	w1, w6, w1
		names="?\0svc\0hvc\0smc\0brk\0";
   8bdd4:	9114e000 	add	x0, x0, #0x538
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bdd8:	52800017 	mov	w23, #0x0                   	// #0
   8bddc:	52800018 	mov	w24, #0x0                   	// #0
   8bde0:	52800019 	mov	w25, #0x0                   	// #0
   8bde4:	5280001b 	mov	w27, #0x0                   	// #0
   8bde8:	5280001a 	mov	w26, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8bdec:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32_19)&0x4)|((ic32)&0x3); i=((ic32_20)&1?(-1<<16):0)|((ic32_5)&0xffff); 
   8bdf0:	290e8bff 	stp	wzr, w2, [sp, #116]
		args[0]=disasm_arg_i; 
   8bdf4:	528000e2 	mov	w2, #0x7                   	// #7
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bdf8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8bdfc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8be00:	29127fff 	stp	wzr, wzr, [sp, #144]
   8be04:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_i; 
   8be08:	390b03e2 	strb	w2, [sp, #704]
   8be0c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8be10:	17ffe95c 	b	86380 <disasm+0x1c80>
		names="sm4e\0";
   8be14:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8be18:	9102a021 	add	x1, x1, #0xa8
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8be1c:	12001059 	and	w25, w2, #0x1f
   8be20:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
   8be24:	528dedc2 	mov	w2, #0x6f6e                	// #28526
		names="sm4e\0";
   8be28:	9114c020 	add	x0, x1, #0x530
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8be2c:	52800017 	mov	w23, #0x0                   	// #0
   8be30:	52800018 	mov	w24, #0x0                   	// #0
   8be34:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8be38:	52800014 	mov	w20, #0x0                   	// #0
   8be3c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8be40:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8be44:	290fffff 	stp	wzr, wzr, [sp, #124]
   8be48:	29117fff 	stp	wzr, wzr, [sp, #136]
   8be4c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8be50:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; 
   8be54:	790583e2 	strh	w2, [sp, #704]
   8be58:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8be5c:	17ffe949 	b	86380 <disasm+0x1c80>
		names="sha512su0\0";
   8be60:	d0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8be64:	9102a021 	add	x1, x1, #0xa8
		n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8be68:	12001059 	and	w25, w2, #0x1f
   8be6c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_Vn2d; 
   8be70:	128ea9c2 	mov	w2, #0xffff8ab1            	// #-30031
		names="sha512su0\0";
   8be74:	91148020 	add	x0, x1, #0x520
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8be78:	52800017 	mov	w23, #0x0                   	// #0
   8be7c:	52800018 	mov	w24, #0x0                   	// #0
   8be80:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8be84:	52800014 	mov	w20, #0x0                   	// #0
   8be88:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8be8c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8be90:	290fffff 	stp	wzr, wzr, [sp, #124]
   8be94:	29117fff 	stp	wzr, wzr, [sp, #136]
   8be98:	29127fff 	stp	wzr, wzr, [sp, #144]
   8be9c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_Vn2d; 
   8bea0:	790583e2 	strh	w2, [sp, #704]
   8bea4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bea8:	17ffe936 	b	86380 <disasm+0x1c80>
		names="sm3partw1\0sm3partw2\0sm4ekey\0";
   8beac:	d0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8beb0:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_10)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8beb4:	12000681 	and	w1, w20, #0x3
   8beb8:	120010a4 	and	w4, w5, #0x1f
   8bebc:	12001059 	and	w25, w2, #0x1f
   8bec0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8bec4:	52800da2 	mov	w2, #0x6d                  	// #109
		names="sm3partw1\0sm3partw2\0sm4ekey\0";
   8bec8:	91140060 	add	x0, x3, #0x500
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8becc:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8bed0:	528dedc3 	mov	w3, #0x6f6e                	// #28526
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bed4:	52800018 	mov	w24, #0x0                   	// #0
   8bed8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8bedc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8bee0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bee4:	290fffe4 	stp	w4, wzr, [sp, #124]
   8bee8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8beec:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bef0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; 
   8bef4:	790583e3 	strh	w3, [sp, #704]
   8bef8:	390b0be2 	strb	w2, [sp, #706]
   8befc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bf00:	17ffe920 	b	86380 <disasm+0x1c80>
		names="sha512su1\0rax1\0";
   8bf04:	d0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8bf08:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_10)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bf0c:	12000281 	and	w1, w20, #0x1
   8bf10:	120010a4 	and	w4, w5, #0x1f
   8bf14:	12001059 	and	w25, w2, #0x1f
   8bf18:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_Vn2d; args[2]=disasm_arg_Vm2d; 
   8bf1c:	12800922 	mov	w2, #0xffffffb6            	// #-74
		names="sha512su1\0rax1\0";
   8bf20:	9113c060 	add	x0, x3, #0x4f0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bf24:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_Vn2d; args[2]=disasm_arg_Vm2d; 
   8bf28:	128ea9c3 	mov	w3, #0xffff8ab1            	// #-30031
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bf2c:	52800018 	mov	w24, #0x0                   	// #0
   8bf30:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8bf34:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8bf38:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bf3c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8bf40:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bf44:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bf48:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_Vn2d; args[2]=disasm_arg_Vm2d; 
   8bf4c:	790583e3 	strh	w3, [sp, #704]
   8bf50:	390b0be2 	strb	w2, [sp, #706]
   8bf54:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bf58:	17ffe90a 	b	86380 <disasm+0x1c80>
		names="sha512h\0sha512h2\0";
   8bf5c:	d0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8bf60:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_10)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bf64:	12000281 	and	w1, w20, #0x1
   8bf68:	120010a4 	and	w4, w5, #0x1f
   8bf6c:	12001059 	and	w25, w2, #0x1f
   8bf70:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Qn; args[2]=disasm_arg_Vm2d; 
   8bf74:	12800922 	mov	w2, #0xffffffb6            	// #-74
		names="sha512h\0sha512h2\0";
   8bf78:	91136060 	add	x0, x3, #0x4d8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bf7c:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Qn; args[2]=disasm_arg_Vm2d; 
   8bf80:	528e0d63 	mov	w3, #0x706b                	// #28779
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bf84:	52800018 	mov	w24, #0x0                   	// #0
   8bf88:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8bf8c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8bf90:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bf94:	290fffe4 	stp	w4, wzr, [sp, #124]
   8bf98:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bf9c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bfa0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Qt; args[1]=disasm_arg_Qn; args[2]=disasm_arg_Vm2d; 
   8bfa4:	790583e3 	strh	w3, [sp, #704]
   8bfa8:	390b0be2 	strb	w2, [sp, #706]
   8bfac:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8bfb0:	17ffe8f4 	b	86380 <disasm+0x1c80>
		names="sm3tt1a\0sm3tt1b\0sm3tt2a\0sm3tt2b\0";
   8bfb4:	d0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8bfb8:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_10)&0x3); m=((ic32_16)&0x1f); j=((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bfbc:	12000681 	and	w1, w20, #0x3
   8bfc0:	120010a4 	and	w4, w5, #0x1f
   8bfc4:	12001059 	and	w25, w2, #0x1f
   8bfc8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_VmTs; 
   8bfcc:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sm3tt1a\0sm3tt1b\0sm3tt2a\0sm3tt2b\0";
   8bfd0:	9112c060 	add	x0, x3, #0x4b0
		op=((ic32_10)&0x3); m=((ic32_16)&0x1f); j=((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8bfd4:	12000554 	and	w20, w10, #0x3
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_VmTs; 
   8bfd8:	528dedc3 	mov	w3, #0x6f6e                	// #28526
		z=0;
   8bfdc:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bfe0:	52800018 	mov	w24, #0x0                   	// #0
   8bfe4:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8bfe8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8bfec:	290fffe4 	stp	w4, wzr, [sp, #124]
   8bff0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8bff4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8bff8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_VmTs; 
   8bffc:	790583e3 	strh	w3, [sp, #704]
   8c000:	390b0be2 	strb	w2, [sp, #706]
   8c004:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c008:	17ffe8de 	b	86380 <disasm+0x1c80>
		m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c00c:	120010a3 	and	w3, w5, #0x1f
		names="sm3ss1\0";
   8c010:	b0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
		m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c014:	12001059 	and	w25, w2, #0x1f
		names="sm3ss1\0";
   8c018:	9102a021 	add	x1, x1, #0xa8
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; args[3]=disasm_arg_Vd4s; 
   8c01c:	528dedc2 	mov	w2, #0x6f6e                	// #28526
		m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c020:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; args[3]=disasm_arg_Vd4s; 
   8c024:	72b72da2 	movk	w2, #0xb96d, lsl #16
		names="sm3ss1\0";
   8c028:	9112a020 	add	x0, x1, #0x4a8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c02c:	52800017 	mov	w23, #0x0                   	// #0
   8c030:	52800018 	mov	w24, #0x0                   	// #0
   8c034:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c038:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8c03c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c040:	290fffe3 	stp	w3, wzr, [sp, #124]
		m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c044:	12001283 	and	w3, w20, #0x1f
	uint16_t op=0, om=0, j=0;
   8c048:	52800014 	mov	w20, #0x0                   	// #0
		m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c04c:	b9008be3 	str	w3, [sp, #136]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c050:	2911ffff 	stp	wzr, wzr, [sp, #140]
   8c054:	2912ffff 	stp	wzr, wzr, [sp, #148]
		args[0]=disasm_arg_Vt4s; args[1]=disasm_arg_Vn4s; args[2]=disasm_arg_Vm4s; args[3]=disasm_arg_Vd4s; 
   8c058:	b902c3e2 	str	w2, [sp, #704]
   8c05c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c060:	17ffe8c8 	b	86380 <disasm+0x1c80>
		op=((ic32_21)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c064:	120010a4 	and	w4, w5, #0x1f
		names="eor3\0bcax\0";
   8c068:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_21)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c06c:	12001059 	and	w25, w2, #0x1f
		names="eor3\0bcax\0";
   8c070:	9102a063 	add	x3, x3, #0xa8
		args[0]=disasm_arg_Vt16b; args[1]=disasm_arg_Vn16b; args[2]=disasm_arg_Vm16b; args[3]=disasm_arg_Vd16b; 
   8c074:	528d4d22 	mov	w2, #0x6a69                	// #27241
		op=((ic32_21)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c078:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt16b; args[1]=disasm_arg_Vn16b; args[2]=disasm_arg_Vm16b; args[3]=disasm_arg_Vd16b; 
   8c07c:	72b716e2 	movk	w2, #0xb8b7, lsl #16
		op=((ic32_21)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c080:	12000181 	and	w1, w12, #0x1
		names="eor3\0bcax\0";
   8c084:	91126060 	add	x0, x3, #0x498
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c088:	52800017 	mov	w23, #0x0                   	// #0
   8c08c:	52800018 	mov	w24, #0x0                   	// #0
   8c090:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8c094:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c098:	290fffe4 	stp	w4, wzr, [sp, #124]
		op=((ic32_21)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c09c:	12001284 	and	w4, w20, #0x1f
	uint16_t op=0, om=0, j=0;
   8c0a0:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32_21)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c0a4:	b9008be4 	str	w4, [sp, #136]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c0a8:	2911ffff 	stp	wzr, wzr, [sp, #140]
   8c0ac:	2912ffff 	stp	wzr, wzr, [sp, #148]
		args[0]=disasm_arg_Vt16b; args[1]=disasm_arg_Vn16b; args[2]=disasm_arg_Vm16b; args[3]=disasm_arg_Vd16b; 
   8c0b0:	b902c3e2 	str	w2, [sp, #704]
   8c0b4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c0b8:	17ffe8b2 	b	86380 <disasm+0x1c80>
		names="ldrsw\0";
   8c0bc:	b0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8c0c0:	52852063 	mov	w3, #0x2903                	// #10499
		names="ldrsw\0";
   8c0c4:	9102a021 	add	x1, x1, #0xa8
		j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c0c8:	12001059 	and	w25, w2, #0x1f
   8c0cc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8c0d0:	72ab8543 	movk	w3, #0x5c2a, lsl #16
		names="ldrsw\0";
   8c0d4:	91110020 	add	x0, x1, #0x440
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8c0d8:	52800562 	mov	w2, #0x2b                  	// #43
		j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c0dc:	12002e94 	and	w20, w20, #0xfff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c0e0:	52800017 	mov	w23, #0x0                   	// #0
   8c0e4:	52800018 	mov	w24, #0x0                   	// #0
   8c0e8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c0ec:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8c0f0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c0f4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c0f8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c0fc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c100:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8c104:	b902c3e3 	str	w3, [sp, #704]
   8c108:	390b13e2 	strb	w2, [sp, #708]
   8c10c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c110:	17ffe89c 	b	86380 <disasm+0x1c80>
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c114:	120010a3 	and	w3, w5, #0x1f
   8c118:	b9007fe3 	str	w3, [sp, #124]
   8c11c:	12000963 	and	w3, w11, #0x7
		names="ldrsw\0";
   8c120:	b0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
   8c124:	9102a021 	add	x1, x1, #0xa8
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c128:	b90083e3 	str	w3, [sp, #128]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj2; args[5]=disasm_arg_offe; 
   8c12c:	52852063 	mov	w3, #0x2903                	// #10499
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c130:	12001059 	and	w25, w2, #0x1f
   8c134:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj2; args[5]=disasm_arg_offe; 
   8c138:	52856c22 	mov	w2, #0x2b61                	// #11105
		names="ldrsw\0";
   8c13c:	91110020 	add	x0, x1, #0x440
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj2; args[5]=disasm_arg_offe; 
   8c140:	72aba543 	movk	w3, #0x5d2a, lsl #16
		m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c144:	12000154 	and	w20, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c148:	52800017 	mov	w23, #0x0                   	// #0
   8c14c:	52800018 	mov	w24, #0x0                   	// #0
   8c150:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c154:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8c158:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c15c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c160:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c164:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj2; args[5]=disasm_arg_offe; 
   8c168:	b902c3e3 	str	w3, [sp, #704]
   8c16c:	79058be2 	strh	w2, [sp, #708]
   8c170:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c174:	17ffe883 	b	86380 <disasm+0x1c80>
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c178:	f240011f 	tst	x8, #0x1
   8c17c:	1200214a 	and	w10, w10, #0x1ff
   8c180:	12803fe3 	mov	w3, #0xfffffe00            	// #-512
   8c184:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="ldrsw\0";
   8c188:	b0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c18c:	1200101a 	and	w26, w0, #0x1f
		names="ldrsw\0";
   8c190:	9102a021 	add	x1, x1, #0xa8
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c194:	2a030140 	orr	w0, w10, w3
   8c198:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldrsw\0";
   8c19c:	91110020 	add	x0, x1, #0x440
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c1a0:	52852061 	mov	w1, #0x2903                	// #10499
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c1a4:	120001a4 	and	w4, w13, #0x1
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c1a8:	72a22541 	movk	w1, #0x112a, lsl #16
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c1ac:	12001059 	and	w25, w2, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c1b0:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c1b4:	52800562 	mov	w2, #0x2b                  	// #43
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c1b8:	52800018 	mov	w24, #0x0                   	// #0
   8c1bc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c1c0:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c1c4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c1c8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c1cc:	29127fe4 	stp	w4, wzr, [sp, #144]
   8c1d0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c1d4:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   8c1d8:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8c1dc:	390b13e2 	strb	w2, [sp, #708]
   8c1e0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c1e4:	17ffe867 	b	86380 <disasm+0x1c80>
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c1e8:	f240011f 	tst	x8, #0x1
   8c1ec:	1200214a 	and	w10, w10, #0x1ff
   8c1f0:	12803fe3 	mov	w3, #0xfffffe00            	// #-512
   8c1f4:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="ldrsw\0";
   8c1f8:	b0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c1fc:	1200101a 	and	w26, w0, #0x1f
		names="ldrsw\0";
   8c200:	9102a021 	add	x1, x1, #0xa8
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c204:	2a030140 	orr	w0, w10, w3
   8c208:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldrsw\0";
   8c20c:	91110020 	add	x0, x1, #0x440
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8c210:	52852061 	mov	w1, #0x2903                	// #10499
		i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c214:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8c218:	72a56541 	movk	w1, #0x2b2a, lsl #16
   8c21c:	52800222 	mov	w2, #0x11                  	// #17
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c220:	52800017 	mov	w23, #0x0                   	// #0
   8c224:	52800018 	mov	w24, #0x0                   	// #0
   8c228:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c22c:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c230:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c234:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c238:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c23c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8c240:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   8c244:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8c248:	390b13e2 	strb	w2, [sp, #708]
   8c24c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c250:	17ffe84c 	b	86380 <disasm+0x1c80>
		names="smulh\0umulh\0";
   8c254:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8c258:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_23)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c25c:	120010a4 	and	w4, w5, #0x1f
   8c260:	12001059 	and	w25, w2, #0x1f
   8c264:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xn; args[2]=disasm_arg_Xm; 
   8c268:	528005a2 	mov	w2, #0x2d                  	// #45
		names="smulh\0umulh\0";
   8c26c:	91122060 	add	x0, x3, #0x488
		op=((ic32_23)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c270:	12000201 	and	w1, w16, #0x1
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xn; args[2]=disasm_arg_Xm; 
   8c274:	52846063 	mov	w3, #0x2303                	// #8963
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c278:	52800017 	mov	w23, #0x0                   	// #0
   8c27c:	52800018 	mov	w24, #0x0                   	// #0
   8c280:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c284:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c288:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c28c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8c290:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c294:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c298:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Xn; args[2]=disasm_arg_Xm; 
   8c29c:	790583e3 	strh	w3, [sp, #704]
   8c2a0:	390b0be2 	strb	w2, [sp, #706]
   8c2a4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c2a8:	17ffe836 	b	86380 <disasm+0x1c80>
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c2ac:	120010a4 	and	w4, w5, #0x1f
   8c2b0:	121f00e1 	and	w1, w7, #0x2
   8c2b4:	120000c6 	and	w6, w6, #0x1
		names="smaddl\0smsubl\0umaddl\0umsubl\0";
   8c2b8:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c2bc:	12001059 	and	w25, w2, #0x1f
		names="smaddl\0smsubl\0umaddl\0umsubl\0";
   8c2c0:	9102a063 	add	x3, x3, #0xa8
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Wn; args[2]=disasm_arg_Wm; args[3]=disasm_arg_Xd; 
   8c2c4:	528cc062 	mov	w2, #0x6603                	// #26115
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c2c8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Wn; args[2]=disasm_arg_Wm; args[3]=disasm_arg_Xd; 
   8c2cc:	72ad0ce2 	movk	w2, #0x6867, lsl #16
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c2d0:	2a060021 	orr	w1, w1, w6
		names="smaddl\0smsubl\0umaddl\0umsubl\0";
   8c2d4:	9111a060 	add	x0, x3, #0x468
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c2d8:	52800017 	mov	w23, #0x0                   	// #0
   8c2dc:	52800018 	mov	w24, #0x0                   	// #0
   8c2e0:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8c2e4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c2e8:	290fffe4 	stp	w4, wzr, [sp, #124]
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c2ec:	12001284 	and	w4, w20, #0x1f
	uint16_t op=0, om=0, j=0;
   8c2f0:	52800014 	mov	w20, #0x0                   	// #0
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); d=((ic32_10)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c2f4:	b9008be4 	str	w4, [sp, #136]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c2f8:	2911ffff 	stp	wzr, wzr, [sp, #140]
   8c2fc:	2912ffff 	stp	wzr, wzr, [sp, #148]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Wn; args[2]=disasm_arg_Wm; args[3]=disasm_arg_Xd; 
   8c300:	b902c3e2 	str	w2, [sp, #704]
   8c304:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c308:	17ffe81e 	b	86380 <disasm+0x1c80>
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c30c:	121f00e1 	and	w1, w7, #0x2
   8c310:	120000c6 	and	w6, w6, #0x1
		names="smull\0smnegl\0umull\0umnegl\0";
   8c314:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8c318:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c31c:	120010a4 	and	w4, w5, #0x1f
   8c320:	12001059 	and	w25, w2, #0x1f
   8c324:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Wn; args[2]=disasm_arg_Wm; 
   8c328:	52800ce2 	mov	w2, #0x67                  	// #103
		names="smull\0smnegl\0umull\0umnegl\0";
   8c32c:	91112060 	add	x0, x3, #0x448
		op=((ic32_22)&0x2)|((ic32_15)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c330:	2a060021 	orr	w1, w1, w6
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Wn; args[2]=disasm_arg_Wm; 
   8c334:	528cc063 	mov	w3, #0x6603                	// #26115
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c338:	52800017 	mov	w23, #0x0                   	// #0
   8c33c:	52800018 	mov	w24, #0x0                   	// #0
   8c340:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c344:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c348:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c34c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8c350:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c354:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c358:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_Wn; args[2]=disasm_arg_Wm; 
   8c35c:	790583e3 	strh	w3, [sp, #704]
   8c360:	390b0be2 	strb	w2, [sp, #706]
   8c364:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c368:	17ffe806 	b	86380 <disasm+0x1c80>
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8c36c:	f240021f 	tst	x16, #0x1
   8c370:	12004842 	and	w2, w2, #0x7ffff
   8c374:	52bfff03 	mov	w3, #0xfff80000            	// #-524288
   8c378:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="ldrsw\0";
   8c37c:	b0000041 	adrp	x1, 95000 <sd_init+0x2ce8>
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8c380:	1200101a 	and	w26, w0, #0x1f
		names="ldrsw\0";
   8c384:	9102a021 	add	x1, x1, #0xa8
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8c388:	2a030040 	orr	w0, w2, w3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c38c:	52800017 	mov	w23, #0x0                   	// #0
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_labeli4; 
   8c390:	52820062 	mov	w2, #0x1003                	// #4099
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c394:	52800018 	mov	w24, #0x0                   	// #0
   8c398:	52800019 	mov	w25, #0x0                   	// #0
   8c39c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c3a0:	52800014 	mov	w20, #0x0                   	// #0
		i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8c3a4:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldrsw\0";
   8c3a8:	91110020 	add	x0, x1, #0x440
	uint16_t op=0, om=0, j=0;
   8c3ac:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c3b0:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c3b4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c3b8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c3bc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Xt; args[1]=disasm_arg_labeli4; 
   8c3c0:	790583e2 	strh	w2, [sp, #704]
   8c3c4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c3c8:	17ffe7ee 	b	86380 <disasm+0x1c80>
		names="stxr\0stlxr\0";
   8c3cc:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8c3d0:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c3d4:	1200101a 	and	w26, w0, #0x1f
		names="stxr\0stlxr\0";
   8c3d8:	9110c060 	add	x0, x3, #0x430
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8c3dc:	528a6a43 	mov	w3, #0x5352                	// #21330
		op=((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c3e0:	120010a4 	and	w4, w5, #0x1f
   8c3e4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8c3e8:	72a54523 	movk	w3, #0x2a29, lsl #16
   8c3ec:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_15)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c3f0:	120000c1 	and	w1, w6, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c3f4:	52800017 	mov	w23, #0x0                   	// #0
   8c3f8:	52800018 	mov	w24, #0x0                   	// #0
   8c3fc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c400:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c404:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c408:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c40c:	29117fe4 	stp	w4, wzr, [sp, #136]
   8c410:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c414:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8c418:	b902c3e3 	str	w3, [sp, #704]
   8c41c:	390b13e2 	strb	w2, [sp, #708]
   8c420:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c424:	17ffe7d7 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c428:	121e0021 	and	w1, w1, #0x4
   8c42c:	12000631 	and	w17, w17, #0x3
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
   8c430:	f0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8c434:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c438:	12000098 	and	w24, w4, #0x1
   8c43c:	12001059 	and	w25, w2, #0x1f
   8c440:	120010a4 	and	w4, w5, #0x1f
   8c444:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_VmTs2; 
   8c448:	12800c42 	mov	w2, #0xffffff9d            	// #-99
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
   8c44c:	912b6060 	add	x0, x3, #0xad8
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c450:	2a110021 	orr	w1, w1, w17
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_VmTs2; 
   8c454:	528fcfa3 	mov	w3, #0x7e7d                	// #32381
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c458:	120001b4 	and	w20, w13, #0x1
		z=1;
   8c45c:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c460:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8c464:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c468:	290fffe4 	stp	w4, wzr, [sp, #124]
   8c46c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c470:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c474:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_VmTs2; 
   8c478:	790583e3 	strh	w3, [sp, #704]
   8c47c:	390b0be2 	strb	w2, [sp, #706]
   8c480:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c484:	17ffe7bf 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c488:	121e0021 	and	w1, w1, #0x4
   8c48c:	12000631 	and	w17, w17, #0x3
   8c490:	121f0294 	and	w20, w20, #0x2
   8c494:	1200018c 	and	w12, w12, #0x1
		names="fmla\0fmls\0fmul\0sqrdmulh\0?\0?\0fmulx\0sqrdmlah\0";
   8c498:	f0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8c49c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c4a0:	12000098 	and	w24, w4, #0x1
   8c4a4:	12001059 	and	w25, w2, #0x1f
   8c4a8:	120010a4 	and	w4, w5, #0x1f
   8c4ac:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_VmTs2; 
   8c4b0:	12800c42 	mov	w2, #0xffffff9d            	// #-99
		names="fmla\0fmls\0fmul\0sqrdmulh\0?\0?\0fmulx\0sqrdmlah\0";
   8c4b4:	912e8060 	add	x0, x3, #0xba0
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c4b8:	2a110021 	orr	w1, w1, w17
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_VmTs2; 
   8c4bc:	528fcfa3 	mov	w3, #0x7e7d                	// #32381
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c4c0:	2a0c0294 	orr	w20, w20, w12
		z=0;
   8c4c4:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c4c8:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8c4cc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c4d0:	290fffe4 	stp	w4, wzr, [sp, #124]
   8c4d4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c4d8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c4dc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_VmTs2; 
   8c4e0:	790583e3 	strh	w3, [sp, #704]
   8c4e4:	390b0be2 	strb	w2, [sp, #706]
   8c4e8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c4ec:	17ffe7a5 	b	86380 <disasm+0x1c80>
		op=((ic32_29)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c4f0:	121f0294 	and	w20, w20, #0x2
   8c4f4:	1200018c 	and	w12, w12, #0x1
		names="sdot\0udot\0";
   8c4f8:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8c4fc:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_29)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c500:	120002a1 	and	w1, w21, #0x1
   8c504:	12000098 	and	w24, w4, #0x1
   8c508:	12001059 	and	w25, w2, #0x1f
   8c50c:	120010a4 	and	w4, w5, #0x1f
   8c510:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs4b; 
   8c514:	12800942 	mov	w2, #0xffffffb5            	// #-75
		names="sdot\0udot\0";
   8c518:	91022060 	add	x0, x3, #0x88
		op=((ic32_29)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c51c:	2a0c0294 	orr	w20, w20, w12
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs4b; 
   8c520:	128f7043 	mov	w3, #0xffff847d            	// #-31619
		z=0;
   8c524:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c528:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8c52c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c530:	290fffe4 	stp	w4, wzr, [sp, #124]
   8c534:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c538:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c53c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs4b; 
   8c540:	790583e3 	strh	w3, [sp, #704]
   8c544:	390b0be2 	strb	w2, [sp, #706]
   8c548:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c54c:	17ffe78d 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c550:	121e0021 	and	w1, w1, #0x4
   8c554:	1200054a 	and	w10, w10, #0x3
		names="?\0shl\0?\0sqshl\0sri\0sli\0sqshlu\0uqshl\0";
   8c558:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8c55c:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c560:	12001059 	and	w25, w2, #0x1f
   8c564:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shlshift; 
   8c568:	12800d42 	mov	w2, #0xffffff95            	// #-107
		names="?\0shl\0?\0sqshl\0sri\0sli\0sqshlu\0uqshl\0";
   8c56c:	91102060 	add	x0, x3, #0x408
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c570:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shlshift; 
   8c574:	128d6d83 	mov	w3, #0xffff9493            	// #-27501
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c578:	12000098 	and	w24, w4, #0x1
   8c57c:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c580:	52800017 	mov	w23, #0x0                   	// #0
   8c584:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8c588:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c58c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c590:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c594:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c598:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shlshift; 
   8c59c:	790583e3 	strh	w3, [sp, #704]
   8c5a0:	390b0be2 	strb	w2, [sp, #706]
   8c5a4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c5a8:	17ffe776 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c5ac:	121e0021 	and	w1, w1, #0x4
   8c5b0:	12000631 	and	w17, w17, #0x3
   8c5b4:	121e01ef 	and	w15, w15, #0x4
   8c5b8:	12000508 	and	w8, w8, #0x3
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
   8c5bc:	f0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8c5c0:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c5c4:	12000098 	and	w24, w4, #0x1
   8c5c8:	12001059 	and	w25, w2, #0x1f
   8c5cc:	12000ca4 	and	w4, w5, #0xf
   8c5d0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmHs; 
   8c5d4:	12800c62 	mov	w2, #0xffffff9c            	// #-100
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
   8c5d8:	912b6060 	add	x0, x3, #0xad8
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c5dc:	2a110021 	orr	w1, w1, w17
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmHs; 
   8c5e0:	528f6f43 	mov	w3, #0x7b7a                	// #31610
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c5e4:	2a0801f4 	orr	w20, w15, w8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c5e8:	52800017 	mov	w23, #0x0                   	// #0
   8c5ec:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8c5f0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c5f4:	290fffe4 	stp	w4, wzr, [sp, #124]
   8c5f8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c5fc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c600:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmHs; 
   8c604:	790583e3 	strh	w3, [sp, #704]
   8c608:	390b0be2 	strb	w2, [sp, #706]
   8c60c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c610:	17ffe75c 	b	86380 <disasm+0x1c80>
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_12)&0x1); t=((ic32)&0x1f); 
   8c614:	12001042 	and	w2, w2, #0x1f
   8c618:	121b09ad 	and	w13, w13, #0xe0
		names="movi\0mvni\0";
   8c61c:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_12)&0x1); t=((ic32)&0x1f); 
   8c620:	2a0201b4 	orr	w20, w13, w2
		names="movi\0mvni\0";
   8c624:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_12)&0x1); t=((ic32)&0x1f); 
   8c628:	12000142 	and	w2, w10, #0x1
   8c62c:	120002a1 	and	w1, w21, #0x1
   8c630:	1200101a 	and	w26, w0, #0x1f
   8c634:	12000098 	and	w24, w4, #0x1
		names="movi\0mvni\0";
   8c638:	910fe060 	add	x0, x3, #0x3f8
		z=2;
   8c63c:	52800057 	mov	w23, #0x2                   	// #2
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk2_opt; 
   8c640:	128a5b43 	mov	w3, #0xffffad25            	// #-21211
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c644:	52800019 	mov	w25, #0x0                   	// #0
   8c648:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8c64c:	290effe2 	stp	w2, wzr, [sp, #116]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk2_opt; 
   8c650:	12800a02 	mov	w2, #0xffffffaf            	// #-81
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c654:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c658:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c65c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c660:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk2_opt; 
   8c664:	790583e3 	strh	w3, [sp, #704]
   8c668:	390b0be2 	strb	w2, [sp, #706]
   8c66c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c670:	17ffe744 	b	86380 <disasm+0x1c80>
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x1); t=((ic32)&0x1f); 
   8c674:	12001042 	and	w2, w2, #0x1f
   8c678:	121b09ad 	and	w13, w13, #0xe0
   8c67c:	121f0318 	and	w24, w24, #0x2
   8c680:	12000141 	and	w1, w10, #0x1
		names="movi\0orr\0mvni\0bic\0";
   8c684:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x1); t=((ic32)&0x1f); 
   8c688:	2a0201b4 	orr	w20, w13, w2
		names="movi\0orr\0mvni\0bic\0";
   8c68c:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x1); t=((ic32)&0x1f); 
   8c690:	12000162 	and	w2, w11, #0x1
   8c694:	2a010301 	orr	w1, w24, w1
   8c698:	1200101a 	and	w26, w0, #0x1f
   8c69c:	12000098 	and	w24, w4, #0x1
		names="movi\0orr\0mvni\0bic\0";
   8c6a0:	910f8060 	add	x0, x3, #0x3e0
		z=1;
   8c6a4:	52800037 	mov	w23, #0x1                   	// #1
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk_opt; 
   8c6a8:	128a5b43 	mov	w3, #0xffffad25            	// #-21211
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c6ac:	52800019 	mov	w25, #0x0                   	// #0
   8c6b0:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8c6b4:	290effe2 	stp	w2, wzr, [sp, #116]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk_opt; 
   8c6b8:	12800a22 	mov	w2, #0xffffffae            	// #-82
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c6bc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c6c0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c6c4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c6c8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk_opt; 
   8c6cc:	790583e3 	strh	w3, [sp, #704]
   8c6d0:	390b0be2 	strb	w2, [sp, #706]
   8c6d4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c6d8:	17ffe72a 	b	86380 <disasm+0x1c80>
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x3); t=((ic32)&0x1f); 
   8c6dc:	12001042 	and	w2, w2, #0x1f
   8c6e0:	121b09ad 	and	w13, w13, #0xe0
   8c6e4:	121f0301 	and	w1, w24, #0x2
   8c6e8:	1200014a 	and	w10, w10, #0x1
		names="movi\0orr\0mvni\0bic\0";
   8c6ec:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x3); t=((ic32)&0x1f); 
   8c6f0:	2a0201b4 	orr	w20, w13, w2
		names="movi\0orr\0mvni\0bic\0";
   8c6f4:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x3); t=((ic32)&0x1f); 
   8c6f8:	12000562 	and	w2, w11, #0x3
   8c6fc:	1200101a 	and	w26, w0, #0x1f
   8c700:	2a0a0021 	orr	w1, w1, w10
		names="movi\0orr\0mvni\0bic\0";
   8c704:	910f8060 	add	x0, x3, #0x3e0
		op=((ic32_28)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); k=((ic32_13)&0x3); t=((ic32)&0x1f); 
   8c708:	12000098 	and	w24, w4, #0x1
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk_opt; 
   8c70c:	128a5b43 	mov	w3, #0xffffad25            	// #-21211
		z=2;
   8c710:	52800057 	mov	w23, #0x2                   	// #2
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c714:	52800019 	mov	w25, #0x0                   	// #0
   8c718:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8c71c:	290effe2 	stp	w2, wzr, [sp, #116]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk_opt; 
   8c720:	12800a22 	mov	w2, #0xffffffae            	// #-82
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c724:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c728:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c72c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c730:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; args[2]=disasm_arg_amountk_opt; 
   8c734:	790583e3 	strh	w3, [sp, #704]
   8c738:	390b0be2 	strb	w2, [sp, #706]
   8c73c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c740:	17ffe710 	b	86380 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_18)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c744:	53127c03 	lsr	w3, w0, #18
   8c748:	121c02e1 	and	w1, w23, #0x10
   8c74c:	121d007e 	and	w30, w3, #0x8
   8c750:	120009a6 	and	w6, w13, #0x7
   8c754:	2a1e0021 	orr	w1, w1, w30
		names="?\0?\0sdot\0?\0?\0?\0?\0?\0add\0cmtst\0mla\0mul\0smaxp\0sminp\0sqdmulh\0addp\0sqrdmlah\0sqrdmlsh\0udot\0?\0?\0?\0?\0?\0sub\0cmeq\0mls\0pmul\0umaxp\0uminp\0cqrdmulh\0";
   8c758:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8c75c:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_25)&0x10)|((ic32_18)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c760:	12000098 	and	w24, w4, #0x1
   8c764:	12001059 	and	w25, w2, #0x1f
   8c768:	120010a4 	and	w4, w5, #0x1f
   8c76c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8c770:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="?\0?\0sdot\0?\0?\0?\0?\0?\0add\0cmtst\0mla\0mul\0smaxp\0sminp\0sqdmulh\0addp\0sqrdmlah\0sqrdmlsh\0udot\0?\0?\0?\0?\0?\0sub\0cmeq\0mls\0pmul\0umaxp\0uminp\0cqrdmulh\0";
   8c774:	910d6060 	add	x0, x3, #0x358
		op=((ic32_25)&0x10)|((ic32_18)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c778:	2a060021 	orr	w1, w1, w6
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8c77c:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
		op=((ic32_25)&0x10)|((ic32_18)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c780:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c784:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c788:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c78c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c790:	290fffe4 	stp	w4, wzr, [sp, #124]
   8c794:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c798:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c79c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8c7a0:	790583e3 	strh	w3, [sp, #704]
   8c7a4:	390b0be2 	strb	w2, [sp, #706]
   8c7a8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c7ac:	17ffe6f5 	b	86380 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c7b0:	121c02e1 	and	w1, w23, #0x10
   8c7b4:	121d0108 	and	w8, w8, #0x8
   8c7b8:	2a080021 	orr	w1, w1, w8
   8c7bc:	120009a6 	and	w6, w13, #0x7
		names="fmaxnm\0fmla\0fadd\0?\0fcmeq\0?\0fmax\0frecps\0fminnm\0fmls\0fsub\0?\0?\0?\0fmin\0frsqrts\0fmaxnmp\0?\0faddp\0fmul\0fcmge\0facge\0fmaxp\0fdiv\0fminnmp\0?\0fabd\0?\0fcmgt\0facgt\0fminp\0";
   8c7c0:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8c7c4:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c7c8:	12000098 	and	w24, w4, #0x1
   8c7cc:	12001059 	and	w25, w2, #0x1f
   8c7d0:	120010a4 	and	w4, w5, #0x1f
   8c7d4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8c7d8:	52800fe2 	mov	w2, #0x7f                  	// #127
		names="fmaxnm\0fmla\0fadd\0?\0fcmeq\0?\0fmax\0frecps\0fminnm\0fmls\0fsub\0?\0?\0?\0fmin\0frsqrts\0fmaxnmp\0?\0faddp\0fmul\0fcmge\0facge\0fmaxp\0fdiv\0fminnmp\0?\0fabd\0?\0fcmgt\0facgt\0fminp\0";
   8c7dc:	910ae060 	add	x0, x3, #0x2b8
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c7e0:	2a060021 	orr	w1, w1, w6
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8c7e4:	528fcfa3 	mov	w3, #0x7e7d                	// #32381
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c7e8:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c7ec:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c7f0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c7f4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c7f8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8c7fc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c800:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c804:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8c808:	790583e3 	strh	w3, [sp, #704]
   8c80c:	390b0be2 	strb	w2, [sp, #706]
   8c810:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c814:	17ffe6db 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_22)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c818:	121e0021 	and	w1, w1, #0x4
   8c81c:	120004e7 	and	w7, w7, #0x3
		names="and\0bic\0orr\0orn\0eor\0bsl\0bit\0bif\0";
   8c820:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8c824:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_27)&0x4)|((ic32_22)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c828:	12000098 	and	w24, w4, #0x1
   8c82c:	12001059 	and	w25, w2, #0x1f
   8c830:	120010a4 	and	w4, w5, #0x1f
   8c834:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8c838:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="and\0bic\0orr\0orn\0eor\0bsl\0bit\0bif\0";
   8c83c:	910a4060 	add	x0, x3, #0x290
		op=((ic32_27)&0x4)|((ic32_22)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c840:	2a070021 	orr	w1, w1, w7
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8c844:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
		z=0;
   8c848:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c84c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c850:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c854:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c858:	290fffe4 	stp	w4, wzr, [sp, #124]
   8c85c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c860:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c864:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8c868:	790583e3 	strh	w3, [sp, #704]
   8c86c:	390b0be2 	strb	w2, [sp, #706]
   8c870:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c874:	17ffe6c3 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_15)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c878:	121f00c6 	and	w6, w6, #0x2
   8c87c:	121e0021 	and	w1, w1, #0x4
   8c880:	2a060021 	orr	w1, w1, w6
		names="smaxv\0?\0sminv\0addv\0umaxv\0?\0uminv\0";
   8c884:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
		op=((ic32_27)&0x4)|((ic32_15)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c888:	12000146 	and	w6, w10, #0x1
		names="smaxv\0?\0sminv\0addv\0umaxv\0?\0uminv\0";
   8c88c:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_27)&0x4)|((ic32_15)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c890:	12001059 	and	w25, w2, #0x1f
   8c894:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_VnT; 
   8c898:	128f6f22 	mov	w2, #0xffff8486            	// #-31610
		op=((ic32_27)&0x4)|((ic32_15)&0x2)|((ic32_12)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c89c:	2a060021 	orr	w1, w1, w6
   8c8a0:	12000098 	and	w24, w4, #0x1
   8c8a4:	120004f7 	and	w23, w7, #0x3
		names="smaxv\0?\0sminv\0addv\0umaxv\0?\0uminv\0";
   8c8a8:	9109a060 	add	x0, x3, #0x268
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c8ac:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c8b0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c8b4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c8b8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c8bc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c8c0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c8c4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_VnT; 
   8c8c8:	790583e2 	strh	w2, [sp, #704]
   8c8cc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c8d0:	17ffe6ac 	b	86380 <disasm+0x1c80>
		names="saddlv\0uaddlv\0";
   8c8d4:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8c8d8:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c8dc:	120002a1 	and	w1, w21, #0x1
   8c8e0:	12001059 	and	w25, w2, #0x1f
   8c8e4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_VnT; 
   8c8e8:	128f6e42 	mov	w2, #0xffff848d            	// #-31603
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c8ec:	12000098 	and	w24, w4, #0x1
   8c8f0:	120004f7 	and	w23, w7, #0x3
		names="saddlv\0uaddlv\0";
   8c8f4:	91096060 	add	x0, x3, #0x258
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c8f8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c8fc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c900:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c904:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c908:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c90c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c910:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_VnT; 
   8c914:	790583e2 	strh	w2, [sp, #704]
   8c918:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c91c:	17ffe699 	b	86380 <disasm+0x1c80>
		op=((ic32_24)&0x20)|((ic32_19)&0x10)|((ic32_13)&0x8)|((ic32_12)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c920:	121b02c1 	and	w1, w22, #0x20
   8c924:	121c037b 	and	w27, w27, #0x10
   8c928:	121d0166 	and	w6, w11, #0x8
   8c92c:	1200094a 	and	w10, w10, #0x7
   8c930:	2a1b0021 	orr	w1, w1, w27
   8c934:	2a0a00c6 	orr	w6, w6, w10
		names="?\0?\0?\0?\0?\0?\0?\0?\0frintn\0frintm\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0fabs\0?\0?\0?\0?\0fcmgt\0fcmeq\0fcmlt\0?\0frintp\0frintz\0fcvtps\0fcvtzs\0urecpe\0frecpe\0?\0frecpx\0?\0?\0?\0?\0?\0?\0?\0?\0?\0frintx\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0?\0?\0fcmge\0fcmle\0?\0fneg\0frinta\0frinti\0fcvtpu\0fcvtzu\0?\0frsqrte\0?\0fsqrt\0";
   8c938:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8c93c:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_24)&0x20)|((ic32_19)&0x10)|((ic32_13)&0x8)|((ic32_12)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c940:	12001059 	and	w25, w2, #0x1f
   8c944:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; 
   8c948:	528fcfa2 	mov	w2, #0x7e7d                	// #32381
		op=((ic32_24)&0x20)|((ic32_19)&0x10)|((ic32_13)&0x8)|((ic32_12)&0x7); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c94c:	2a0100c1 	orr	w1, w6, w1
   8c950:	12000098 	and	w24, w4, #0x1
   8c954:	120000f7 	and	w23, w7, #0x1
		names="?\0?\0?\0?\0?\0?\0?\0?\0frintn\0frintm\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0fabs\0?\0?\0?\0?\0fcmgt\0fcmeq\0fcmlt\0?\0frintp\0frintz\0fcvtps\0fcvtzs\0urecpe\0frecpe\0?\0frecpx\0?\0?\0?\0?\0?\0?\0?\0?\0?\0frintx\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0?\0?\0fcmge\0fcmle\0?\0fneg\0frinta\0frinti\0fcvtpu\0fcvtzu\0?\0frsqrte\0?\0fsqrt\0";
   8c958:	91050060 	add	x0, x3, #0x140
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c95c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c960:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c964:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c968:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c96c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c970:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c974:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; 
   8c978:	790583e2 	strh	w2, [sp, #704]
   8c97c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c980:	17ffe680 	b	86380 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_12)&0xf); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c984:	121c02e1 	and	w1, w23, #0x10
   8c988:	12000d4a 	and	w10, w10, #0xf
		names="rev64\0rev16\0saddlp\0suqadd\0cls\0cnt\0sadalp\0sqabs\0cmgt\0cmeq\0cmlt\0abs\0?\0?\0?\0?\0rev32\0?\0uaddlp\0usqadd\0clz\0?\0uadalp\0sqneg\0cmge\0cmle\0?\0neg\0";
   8c98c:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8c990:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_25)&0x10)|((ic32_12)&0xf); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c994:	12001059 	and	w25, w2, #0x1f
   8c998:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8c99c:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		op=((ic32_25)&0x10)|((ic32_12)&0xf); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c9a0:	2a0a0021 	orr	w1, w1, w10
   8c9a4:	12000098 	and	w24, w4, #0x1
   8c9a8:	120004f7 	and	w23, w7, #0x3
		names="rev64\0rev16\0saddlp\0suqadd\0cls\0cnt\0sadalp\0sqabs\0cmgt\0cmeq\0cmlt\0abs\0?\0?\0?\0?\0rev32\0?\0uaddlp\0usqadd\0clz\0?\0uadalp\0sqneg\0cmge\0cmle\0?\0neg\0";
   8c9ac:	9102e060 	add	x0, x3, #0xb8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c9b0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8c9b4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8c9b8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8c9bc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8c9c0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8c9c4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8c9c8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8c9cc:	790583e2 	strh	w2, [sp, #704]
   8c9d0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8c9d4:	17ffe66b 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c9d8:	121e0021 	and	w1, w1, #0x4
   8c9dc:	1200054a 	and	w10, w10, #0x3
		names="cmgt\0cmeq\0cmlt\0abs\0cmge\0cmle\0?\0neg\0";
   8c9e0:	f0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8c9e4:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c9e8:	12001059 	and	w25, w2, #0x1f
   8c9ec:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_simd0; 
   8c9f0:	12800fe2 	mov	w2, #0xffffff80            	// #-128
		names="cmgt\0cmeq\0cmlt\0abs\0cmge\0cmle\0?\0neg\0";
   8c9f4:	91266060 	add	x0, x3, #0x998
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8c9f8:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_simd0; 
   8c9fc:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ca00:	12000098 	and	w24, w4, #0x1
   8ca04:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ca08:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ca0c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ca10:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ca14:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ca18:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ca1c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ca20:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_simd0; 
   8ca24:	790583e3 	strh	w3, [sp, #704]
   8ca28:	390b0be2 	strb	w2, [sp, #706]
   8ca2c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ca30:	17ffe654 	b	86380 <disasm+0x1c80>
		op=((ic32_28)&0x2)|((ic32_14)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ca34:	121f0301 	and	w1, w24, #0x2
   8ca38:	12000231 	and	w17, w17, #0x1
		names="saddlp\0sadalp\0uaddlp\0uadalp\0";
   8ca3c:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8ca40:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_28)&0x2)|((ic32_14)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ca44:	12001059 	and	w25, w2, #0x1f
   8ca48:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_VnT; 
   8ca4c:	128f6b42 	mov	w2, #0xffff84a5            	// #-31579
		op=((ic32_28)&0x2)|((ic32_14)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ca50:	2a110021 	orr	w1, w1, w17
   8ca54:	12000098 	and	w24, w4, #0x1
   8ca58:	120004f7 	and	w23, w7, #0x3
		names="saddlp\0sadalp\0uaddlp\0uadalp\0";
   8ca5c:	91026060 	add	x0, x3, #0x98
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ca60:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ca64:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ca68:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ca6c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ca70:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ca74:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ca78:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq2; args[1]=disasm_arg_VnT; 
   8ca7c:	790583e2 	strh	w2, [sp, #704]
   8ca80:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ca84:	17ffe63f 	b	86380 <disasm+0x1c80>
		names="sdot\0udot\0";
   8ca88:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8ca8c:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ca90:	120002a1 	and	w1, w21, #0x1
   8ca94:	12000098 	and	w24, w4, #0x1
   8ca98:	12001059 	and	w25, w2, #0x1f
   8ca9c:	120010a4 	and	w4, w5, #0x1f
   8caa0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8caa4:	52800fe2 	mov	w2, #0x7f                  	// #127
		names="sdot\0udot\0";
   8caa8:	91022060 	add	x0, x3, #0x88
		op=((ic32_29)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8caac:	120004f7 	and	w23, w7, #0x3
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8cab0:	528fc4a3 	mov	w3, #0x7e25                	// #32293
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cab4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cab8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8cabc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cac0:	290fffe4 	stp	w4, wzr, [sp, #124]
   8cac4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cac8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cacc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8cad0:	790583e3 	strh	w3, [sp, #704]
   8cad4:	390b0be2 	strb	w2, [sp, #706]
   8cad8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cadc:	17ffe629 	b	86380 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cae0:	121c02e1 	and	w1, w23, #0x10
   8cae4:	121d0108 	and	w8, w8, #0x8
   8cae8:	2a080021 	orr	w1, w1, w8
   8caec:	12000946 	and	w6, w10, #0x7
		names="frintn\0frintm\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0fabs\0frintp\0frintz\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0frintx\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0frinta\0frinti\0fcvtpu\0fcvtzu\0?\0frsqrte\0?\0fsqrt\0";
   8caf0:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8caf4:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8caf8:	12001059 	and	w25, w2, #0x1f
   8cafc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; 
   8cb00:	528f6f42 	mov	w2, #0x7b7a                	// #31610
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cb04:	2a060021 	orr	w1, w1, w6
   8cb08:	12000098 	and	w24, w4, #0x1
		names="frintn\0frintm\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0fabs\0frintp\0frintz\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0frintx\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0frinta\0frinti\0fcvtpu\0fcvtzu\0?\0frsqrte\0?\0fsqrt\0";
   8cb0c:	d100c060 	sub	x0, x3, #0x30
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cb10:	52800017 	mov	w23, #0x0                   	// #0
   8cb14:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cb18:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8cb1c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cb20:	290fffff 	stp	wzr, wzr, [sp, #124]
   8cb24:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cb28:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cb2c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; 
   8cb30:	790583e2 	strh	w2, [sp, #704]
   8cb34:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cb38:	17ffe612 	b	86380 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cb3c:	121c02e1 	and	w1, w23, #0x10
   8cb40:	121d0108 	and	w8, w8, #0x8
   8cb44:	2a080021 	orr	w1, w1, w8
   8cb48:	120009a6 	and	w6, w13, #0x7
		names="fmaxnm\0fmla\0fadd\0fmulx\0fcmeq\0?\0fmax\0frecps\0fminnm\0fmls\0fsub\0?\0?\0?\0fmin\0frsqrts\0fmaxnmp\0?\0faddp\0fmul\0fcmge\0facge\0fmaxp\0fdiv\0fminnmp\0?\0fabd\0?\0fcmgt\0facgt\0fminp\0";
   8cb4c:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8cb50:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cb54:	12000098 	and	w24, w4, #0x1
   8cb58:	12001059 	and	w25, w2, #0x1f
   8cb5c:	120010a4 	and	w4, w5, #0x1f
   8cb60:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8cb64:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="fmaxnm\0fmla\0fadd\0fmulx\0fcmeq\0?\0fmax\0frecps\0fminnm\0fmls\0fsub\0?\0?\0?\0fmin\0frsqrts\0fmaxnmp\0?\0faddp\0fmul\0fcmge\0facge\0fmaxp\0fdiv\0fminnmp\0?\0fabd\0?\0fcmgt\0facgt\0fminp\0";
   8cb68:	d1034060 	sub	x0, x3, #0xd0
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_11)&0x7); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cb6c:	2a060021 	orr	w1, w1, w6
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8cb70:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
		z=1;
   8cb74:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cb78:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cb7c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8cb80:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cb84:	290fffe4 	stp	w4, wzr, [sp, #124]
   8cb88:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cb8c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cb90:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8cb94:	790583e3 	strh	w3, [sp, #704]
   8cb98:	390b0be2 	strb	w2, [sp, #706]
   8cb9c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cba0:	17ffe5f8 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cba4:	121e0021 	and	w1, w1, #0x4
   8cba8:	1200054a 	and	w10, w10, #0x3
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0?\0fneg\0";
   8cbac:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8cbb0:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cbb4:	12001059 	and	w25, w2, #0x1f
   8cbb8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_simd0; 
   8cbbc:	12800fe2 	mov	w2, #0xffffff80            	// #-128
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0?\0fneg\0";
   8cbc0:	d103e060 	sub	x0, x3, #0xf8
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cbc4:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_simd0; 
   8cbc8:	528fcfa3 	mov	w3, #0x7e7d                	// #32381
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cbcc:	12000098 	and	w24, w4, #0x1
   8cbd0:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cbd4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cbd8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8cbdc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cbe0:	290fffff 	stp	wzr, wzr, [sp, #124]
   8cbe4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cbe8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cbec:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_simd0; 
   8cbf0:	790583e3 	strh	w3, [sp, #704]
   8cbf4:	390b0be2 	strb	w2, [sp, #706]
   8cbf8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cbfc:	17ffe5e1 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cc00:	121e0021 	and	w1, w1, #0x4
   8cc04:	1200054a 	and	w10, w10, #0x3
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0?\0fneg\0";
   8cc08:	b0000043 	adrp	x3, 95000 <sd_init+0x2ce8>
   8cc0c:	9102a063 	add	x3, x3, #0xa8
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cc10:	12001059 	and	w25, w2, #0x1f
   8cc14:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_simd0; 
   8cc18:	12800fe2 	mov	w2, #0xffffff80            	// #-128
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0?\0fneg\0";
   8cc1c:	d103e060 	sub	x0, x3, #0xf8
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cc20:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_simd0; 
   8cc24:	528f6f43 	mov	w3, #0x7b7a                	// #31610
		op=((ic32_27)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cc28:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cc2c:	52800017 	mov	w23, #0x0                   	// #0
   8cc30:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cc34:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8cc38:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cc3c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8cc40:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cc44:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cc48:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_simd0; 
   8cc4c:	790583e3 	strh	w3, [sp, #704]
   8cc50:	390b0be2 	strb	w2, [sp, #706]
   8cc54:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cc58:	17ffe5ca 	b	86380 <disasm+0x1c80>
		names="ldrsb\0ldrsh\0";
   8cc5c:	f0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8cc60:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cc64:	1200101a 	and	w26, w0, #0x1f
		names="ldrsb\0ldrsh\0";
   8cc68:	913e6060 	add	x0, x3, #0xf98
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8cc6c:	52852b43 	mov	w3, #0x295a                	// #10586
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cc70:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8cc74:	72ab8543 	movk	w3, #0x5c2a, lsl #16
   8cc78:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cc7c:	12000081 	and	w1, w4, #0x1
   8cc80:	120000fb 	and	w27, w7, #0x1
   8cc84:	12002e94 	and	w20, w20, #0xfff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cc88:	52800017 	mov	w23, #0x0                   	// #0
   8cc8c:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8cc90:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cc94:	290fffff 	stp	wzr, wzr, [sp, #124]
   8cc98:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cc9c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cca0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8cca4:	b902c3e3 	str	w3, [sp, #704]
   8cca8:	390b13e2 	strb	w2, [sp, #708]
   8ccac:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ccb0:	17ffe5b4 	b	86380 <disasm+0x1c80>
		names="strb\0ldrb\0strh\0ldrh\0";
   8ccb4:	f0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8ccb8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_29)&0x2)|((ic32_22)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ccbc:	121f02a1 	and	w1, w21, #0x2
   8ccc0:	120000e7 	and	w7, w7, #0x1
   8ccc4:	1200101a 	and	w26, w0, #0x1f
		names="strb\0ldrb\0strh\0ldrh\0";
   8ccc8:	913e0060 	add	x0, x3, #0xf80
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8cccc:	52852a63 	mov	w3, #0x2953                	// #10579
		op=((ic32_29)&0x2)|((ic32_22)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ccd0:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8ccd4:	72ab8543 	movk	w3, #0x5c2a, lsl #16
   8ccd8:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_29)&0x2)|((ic32_22)&0x1); j=((ic32_10)&0xfff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ccdc:	2a070021 	orr	w1, w1, w7
   8cce0:	12002e94 	and	w20, w20, #0xfff
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cce4:	52800017 	mov	w23, #0x0                   	// #0
   8cce8:	52800018 	mov	w24, #0x0                   	// #0
   8ccec:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8ccf0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ccf4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ccf8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ccfc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cd00:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_j_opt; args[4]=disasm_arg_offe; 
   8cd04:	b902c3e3 	str	w3, [sp, #704]
   8cd08:	390b13e2 	strb	w2, [sp, #708]
   8cd0c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cd10:	17ffe59c 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cd14:	f240011f 	tst	x8, #0x1
   8cd18:	1200214a 	and	w10, w10, #0x1ff
   8cd1c:	12803fe4 	mov	w4, #0xfffffe00            	// #-512
   8cd20:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
   8cd24:	121f0585 	and	w5, w12, #0x6
   8cd28:	120001ad 	and	w13, w13, #0x1
		names="sturb\0sttrb\0ldurb\0ldtrb\0?\0ldtrsb\0?\0ldtrsb\0sturh\0sttrh\0ldurh\0ldtrh\0";
   8cd2c:	f0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cd30:	1200101a 	and	w26, w0, #0x1f
		names="sturb\0sttrb\0ldurb\0ldtrb\0?\0ldtrsb\0?\0ldtrsb\0sturh\0sttrh\0ldurh\0ldtrh\0";
   8cd34:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cd38:	2a040140 	orr	w0, w10, w4
   8cd3c:	121d0021 	and	w1, w1, #0x8
   8cd40:	2a0d00a5 	orr	w5, w5, w13
   8cd44:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="sturb\0sttrb\0ldurb\0ldtrb\0?\0ldtrsb\0?\0ldtrsb\0sturh\0sttrh\0ldurh\0ldtrh\0";
   8cd48:	913f0060 	add	x0, x3, #0xfc0
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8cd4c:	52852a63 	mov	w3, #0x2953                	// #10579
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cd50:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8cd54:	72a22543 	movk	w3, #0x112a, lsl #16
   8cd58:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_11)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cd5c:	2a0100a1 	orr	w1, w5, w1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cd60:	52800017 	mov	w23, #0x0                   	// #0
   8cd64:	52800018 	mov	w24, #0x0                   	// #0
   8cd68:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cd6c:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cd70:	290fffff 	stp	wzr, wzr, [sp, #124]
   8cd74:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cd78:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cd7c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8cd80:	b902c3e3 	str	w3, [sp, #704]
   8cd84:	390b13e2 	strb	w2, [sp, #708]
   8cd88:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cd8c:	17ffe57d 	b	86380 <disasm+0x1c80>
		names="ldrsb\0ldrsh\0";
   8cd90:	f0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8cd94:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cd98:	12000081 	and	w1, w4, #0x1
   8cd9c:	1200101a 	and	w26, w0, #0x1f
   8cda0:	120010a4 	and	w4, w5, #0x1f
		names="ldrsb\0ldrsh\0";
   8cda4:	913e6060 	add	x0, x3, #0xf98
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj; args[5]=disasm_arg_offe; 
   8cda8:	52852b43 	mov	w3, #0x295a                	// #10586
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cdac:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj; args[5]=disasm_arg_offe; 
   8cdb0:	72aba543 	movk	w3, #0x5d2a, lsl #16
   8cdb4:	52856bc2 	mov	w2, #0x2b5e                	// #11102
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cdb8:	120000fb 	and	w27, w7, #0x1
   8cdbc:	12000154 	and	w20, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cdc0:	52800017 	mov	w23, #0x0                   	// #0
   8cdc4:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8cdc8:	290effff 	stp	wzr, wzr, [sp, #116]
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cdcc:	b9007fe4 	str	w4, [sp, #124]
   8cdd0:	12000964 	and	w4, w11, #0x7
   8cdd4:	b90083e4 	str	w4, [sp, #128]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cdd8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cddc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cde0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj; args[5]=disasm_arg_offe; 
   8cde4:	b902c3e3 	str	w3, [sp, #704]
   8cde8:	79058be2 	strh	w2, [sp, #708]
   8cdec:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cdf0:	17ffe564 	b	86380 <disasm+0x1c80>
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cdf4:	f240011f 	tst	x8, #0x1
   8cdf8:	1200214a 	and	w10, w10, #0x1ff
   8cdfc:	12803fe5 	mov	w5, #0xfffffe00            	// #-512
   8ce00:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="ldrsb\0ldrsh\0";
   8ce04:	f0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ce08:	1200101a 	and	w26, w0, #0x1f
		names="ldrsb\0ldrsh\0";
   8ce0c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ce10:	2a050140 	orr	w0, w10, w5
   8ce14:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldrsb\0ldrsh\0";
   8ce18:	913e6060 	add	x0, x3, #0xf98
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8ce1c:	52852b43 	mov	w3, #0x295a                	// #10586
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ce20:	12000081 	and	w1, w4, #0x1
   8ce24:	12001059 	and	w25, w2, #0x1f
   8ce28:	120001a4 	and	w4, w13, #0x1
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8ce2c:	52800562 	mov	w2, #0x2b                  	// #43
   8ce30:	72a22543 	movk	w3, #0x112a, lsl #16
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ce34:	120000fb 	and	w27, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ce38:	52800017 	mov	w23, #0x0                   	// #0
   8ce3c:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ce40:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ce44:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ce48:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ce4c:	29127fe4 	stp	w4, wzr, [sp, #144]
   8ce50:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8ce54:	b902c3e3 	str	w3, [sp, #704]
   8ce58:	390b13e2 	strb	w2, [sp, #708]
   8ce5c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ce60:	17ffe548 	b	86380 <disasm+0x1c80>
		op=((ic32_29)&0x2)|((ic32_11)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ce64:	f240011f 	tst	x8, #0x1
   8ce68:	1200214a 	and	w10, w10, #0x1ff
   8ce6c:	12803fe4 	mov	w4, #0xfffffe00            	// #-512
   8ce70:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="ldursb\0?\0ldursh\0ldtrsh\0";
   8ce74:	f0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_29)&0x2)|((ic32_11)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ce78:	1200101a 	and	w26, w0, #0x1f
		names="ldursb\0?\0ldursh\0ldtrsh\0";
   8ce7c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_29)&0x2)|((ic32_11)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ce80:	2a040140 	orr	w0, w10, w4
   8ce84:	121f02a1 	and	w1, w21, #0x2
   8ce88:	120001ad 	and	w13, w13, #0x1
   8ce8c:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldursb\0?\0ldursh\0ldtrsh\0";
   8ce90:	913ea060 	add	x0, x3, #0xfa8
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8ce94:	52852b43 	mov	w3, #0x295a                	// #10586
		op=((ic32_29)&0x2)|((ic32_11)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ce98:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8ce9c:	72a22543 	movk	w3, #0x112a, lsl #16
   8cea0:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_29)&0x2)|((ic32_11)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cea4:	2a0d0021 	orr	w1, w1, w13
   8cea8:	120000fb 	and	w27, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ceac:	52800017 	mov	w23, #0x0                   	// #0
   8ceb0:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ceb4:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ceb8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8cebc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cec0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cec4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8cec8:	b902c3e3 	str	w3, [sp, #704]
   8cecc:	390b13e2 	strb	w2, [sp, #708]
   8ced0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ced4:	17ffe52b 	b	86380 <disasm+0x1c80>
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ced8:	f240011f 	tst	x8, #0x1
   8cedc:	1200214a 	and	w10, w10, #0x1ff
   8cee0:	12803fe5 	mov	w5, #0xfffffe00            	// #-512
   8cee4:	1a9f10a5 	csel	w5, w5, wzr, ne  // ne = any
		names="ldrsb\0ldrsh\0";
   8cee8:	f0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ceec:	1200101a 	and	w26, w0, #0x1f
		names="ldrsb\0ldrsh\0";
   8cef0:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cef4:	2a050140 	orr	w0, w10, w5
   8cef8:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldrsb\0ldrsh\0";
   8cefc:	913e6060 	add	x0, x3, #0xf98
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8cf00:	52852b43 	mov	w3, #0x295a                	// #10586
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cf04:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8cf08:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8cf0c:	52800222 	mov	w2, #0x11                  	// #17
		op=((ic32_30)&0x1); s=((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cf10:	12000081 	and	w1, w4, #0x1
   8cf14:	120000fb 	and	w27, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cf18:	52800017 	mov	w23, #0x0                   	// #0
   8cf1c:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8cf20:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cf24:	290fffff 	stp	wzr, wzr, [sp, #124]
   8cf28:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cf2c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cf30:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_nRt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8cf34:	b902c3e3 	str	w3, [sp, #704]
   8cf38:	390b13e2 	strb	w2, [sp, #708]
   8cf3c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cf40:	17ffe510 	b	86380 <disasm+0x1c80>
		names="strb\0ldrb\0strh\0ldrh\0";
   8cf44:	f0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8cf48:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_29)&0x2)|((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cf4c:	121f02a1 	and	w1, w21, #0x2
   8cf50:	120010a4 	and	w4, w5, #0x1f
   8cf54:	120000e7 	and	w7, w7, #0x1
   8cf58:	1200101a 	and	w26, w0, #0x1f
		names="strb\0ldrb\0strh\0ldrh\0";
   8cf5c:	913e0060 	add	x0, x3, #0xf80
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj; args[5]=disasm_arg_offe; 
   8cf60:	52852a63 	mov	w3, #0x2953                	// #10579
		op=((ic32_29)&0x2)|((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cf64:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj; args[5]=disasm_arg_offe; 
   8cf68:	72aba543 	movk	w3, #0x5d2a, lsl #16
   8cf6c:	52856bc2 	mov	w2, #0x2b5e                	// #11102
		op=((ic32_29)&0x2)|((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cf70:	2a070021 	orr	w1, w1, w7
   8cf74:	12000154 	and	w20, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cf78:	52800017 	mov	w23, #0x0                   	// #0
   8cf7c:	52800018 	mov	w24, #0x0                   	// #0
   8cf80:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8cf84:	290effff 	stp	wzr, wzr, [sp, #116]
		op=((ic32_29)&0x2)|((ic32_22)&0x1); m=((ic32_16)&0x1f); o=((ic32_13)&0x7); j=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cf88:	b9007fe4 	str	w4, [sp, #124]
   8cf8c:	12000964 	and	w4, w11, #0x7
   8cf90:	b90083e4 	str	w4, [sp, #128]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cf94:	29117fff 	stp	wzr, wzr, [sp, #136]
   8cf98:	29127fff 	stp	wzr, wzr, [sp, #144]
   8cf9c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_Rom; args[4]=disasm_arg_amountj; args[5]=disasm_arg_offe; 
   8cfa0:	b902c3e3 	str	w3, [sp, #704]
   8cfa4:	79058be2 	strh	w2, [sp, #708]
   8cfa8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8cfac:	17ffe4f5 	b	86380 <disasm+0x1c80>
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cfb0:	f240011f 	tst	x8, #0x1
   8cfb4:	1200214a 	and	w10, w10, #0x1ff
   8cfb8:	12803fe4 	mov	w4, #0xfffffe00            	// #-512
   8cfbc:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="strb\0ldrb\0strh\0ldrh\0";
   8cfc0:	f0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cfc4:	1200101a 	and	w26, w0, #0x1f
		names="strb\0ldrb\0strh\0ldrh\0";
   8cfc8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cfcc:	2a040140 	orr	w0, w10, w4
   8cfd0:	121f02a1 	and	w1, w21, #0x2
   8cfd4:	120000e7 	and	w7, w7, #0x1
   8cfd8:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="strb\0ldrb\0strh\0ldrh\0";
   8cfdc:	913e0060 	add	x0, x3, #0xf80
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8cfe0:	52852a63 	mov	w3, #0x2953                	// #10579
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cfe4:	120001a5 	and	w5, w13, #0x1
   8cfe8:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8cfec:	72a22543 	movk	w3, #0x112a, lsl #16
   8cff0:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); p=((ic32_11)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8cff4:	2a070021 	orr	w1, w1, w7
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8cff8:	52800017 	mov	w23, #0x0                   	// #0
   8cffc:	52800018 	mov	w24, #0x0                   	// #0
   8d000:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d004:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d008:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d00c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d010:	29127fe5 	stp	w5, wzr, [sp, #144]
   8d014:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_i_opt; args[4]=disasm_arg_offe; 
   8d018:	b902c3e3 	str	w3, [sp, #704]
   8d01c:	390b13e2 	strb	w2, [sp, #708]
   8d020:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d024:	17ffe4d7 	b	86380 <disasm+0x1c80>
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d028:	f240011f 	tst	x8, #0x1
   8d02c:	1200214a 	and	w10, w10, #0x1ff
   8d030:	12803fe4 	mov	w4, #0xfffffe00            	// #-512
   8d034:	1a9f1084 	csel	w4, w4, wzr, ne  // ne = any
		names="strb\0ldrb\0strh\0ldrh\0";
   8d038:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d03c:	1200101a 	and	w26, w0, #0x1f
		names="strb\0ldrb\0strh\0ldrh\0";
   8d040:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d044:	2a040140 	orr	w0, w10, w4
   8d048:	121f02a1 	and	w1, w21, #0x2
   8d04c:	120000e7 	and	w7, w7, #0x1
   8d050:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="strb\0ldrb\0strh\0ldrh\0";
   8d054:	913e0060 	add	x0, x3, #0xf80
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8d058:	52852a63 	mov	w3, #0x2953                	// #10579
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d05c:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8d060:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8d064:	52800222 	mov	w2, #0x11                  	// #17
		op=((ic32_29)&0x2)|((ic32_22)&0x1); i=((ic32_20)&1?(-1<<9):0)|((ic32_12)&0x1ff); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d068:	2a070021 	orr	w1, w1, w7
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d06c:	52800017 	mov	w23, #0x0                   	// #0
   8d070:	52800018 	mov	w24, #0x0                   	// #0
   8d074:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d078:	52800014 	mov	w20, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d07c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d080:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d084:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d088:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i_opt; 
   8d08c:	b902c3e3 	str	w3, [sp, #704]
   8d090:	390b13e2 	strb	w2, [sp, #708]
   8d094:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d098:	17ffe4ba 	b	86380 <disasm+0x1c80>
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d09c:	121f0294 	and	w20, w20, #0x2
   8d0a0:	1200018c 	and	w12, w12, #0x1
		names="mla\0mls\0";
   8d0a4:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8d0a8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d0ac:	12000098 	and	w24, w4, #0x1
   8d0b0:	12001059 	and	w25, w2, #0x1f
   8d0b4:	120010a4 	and	w4, w5, #0x1f
   8d0b8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d0bc:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="mla\0mls\0";
   8d0c0:	913dc060 	add	x0, x3, #0xf70
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d0c4:	2a0c0294 	orr	w20, w20, w12
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d0c8:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
		op=((ic32_14)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d0cc:	12000221 	and	w1, w17, #0x1
   8d0d0:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d0d4:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8d0d8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d0dc:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d0e0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d0e4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d0e8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d0ec:	790583e3 	strh	w3, [sp, #704]
   8d0f0:	390b0be2 	strb	w2, [sp, #706]
   8d0f4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d0f8:	17ffe4a2 	b	86380 <disasm+0x1c80>
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d0fc:	121f0294 	and	w20, w20, #0x2
   8d100:	1200018c 	and	w12, w12, #0x1
		names="sqrdmlah\0sqrdmlsh\0";
   8d104:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8d108:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d10c:	12000098 	and	w24, w4, #0x1
   8d110:	12001059 	and	w25, w2, #0x1f
   8d114:	120010a4 	and	w4, w5, #0x1f
   8d118:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d11c:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sqrdmlah\0sqrdmlsh\0";
   8d120:	911ac060 	add	x0, x3, #0x6b0
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d124:	2a0c0294 	orr	w20, w20, w12
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d128:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d12c:	12000161 	and	w1, w11, #0x1
		z=2;
   8d130:	52800057 	mov	w23, #0x2                   	// #2
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d134:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8d138:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d13c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d140:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d144:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d148:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d14c:	790583e3 	strh	w3, [sp, #704]
   8d150:	390b0be2 	strb	w2, [sp, #706]
   8d154:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d158:	17ffe48a 	b	86380 <disasm+0x1c80>
		names="ushr\0usra\0urshr\0ursra\0sri\0sli\0sqshlu\0uqshl\0?\0?\0?\0?\0?\0?\0ucvtf\0";
   8d15c:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8d160:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_12)&0xf); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d164:	12001059 	and	w25, w2, #0x1f
   8d168:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d16c:	12800da2 	mov	w2, #0xffffff92            	// #-110
		names="ushr\0usra\0urshr\0ursra\0sri\0sli\0sqshlu\0uqshl\0?\0?\0?\0?\0?\0?\0ucvtf\0";
   8d170:	913cc060 	add	x0, x3, #0xf30
		op=((ic32_12)&0xf); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d174:	12000d41 	and	w1, w10, #0xf
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d178:	128d6d83 	mov	w3, #0xffff9493            	// #-27501
		op=((ic32_12)&0xf); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d17c:	12000098 	and	w24, w4, #0x1
   8d180:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d184:	52800017 	mov	w23, #0x0                   	// #0
   8d188:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8d18c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d190:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d194:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d198:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d19c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d1a0:	790583e3 	strh	w3, [sp, #704]
   8d1a4:	390b0be2 	strb	w2, [sp, #706]
   8d1a8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d1ac:	17ffe475 	b	86380 <disasm+0x1c80>
		names="fcvtzu\0";
   8d1b0:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8d1b4:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d1b8:	12001059 	and	w25, w2, #0x1f
   8d1bc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d1c0:	128d6d83 	mov	w3, #0xffff9493            	// #-27501
		names="fcvtzu\0";
   8d1c4:	913ca020 	add	x0, x1, #0xf28
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d1c8:	12800da2 	mov	w2, #0xffffff92            	// #-110
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d1cc:	12000098 	and	w24, w4, #0x1
   8d1d0:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d1d4:	52800017 	mov	w23, #0x0                   	// #0
   8d1d8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d1dc:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d1e0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d1e4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d1e8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d1ec:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d1f0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d1f4:	790583e3 	strh	w3, [sp, #704]
   8d1f8:	390b0be2 	strb	w2, [sp, #706]
   8d1fc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d200:	17ffe460 	b	86380 <disasm+0x1c80>
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d204:	121e01ef 	and	w15, w15, #0x4
   8d208:	12000508 	and	w8, w8, #0x3
		names="sqrdmlah\0sqrdmlsh\0";
   8d20c:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8d210:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d214:	12000098 	and	w24, w4, #0x1
   8d218:	12001059 	and	w25, w2, #0x1f
   8d21c:	12000ca4 	and	w4, w5, #0xf
   8d220:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d224:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sqrdmlah\0sqrdmlsh\0";
   8d228:	911ac060 	add	x0, x3, #0x6b0
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d22c:	2a0801f4 	orr	w20, w15, w8
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d230:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d234:	12000161 	and	w1, w11, #0x1
		z=1;
   8d238:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d23c:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8d240:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d244:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d248:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d24c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d250:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d254:	790583e3 	strh	w3, [sp, #704]
   8d258:	390b0be2 	strb	w2, [sp, #706]
   8d25c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d260:	17ffe448 	b	86380 <disasm+0x1c80>
		names="uhadd\0uqadd\0urhadd\0?\0uhsub\0uqsub\0cmhi\0cmhs\0ushl\0uqshl\0urshl\0uqrshl\0umax\0umin\0uabd\0uaba\0sub\0cmeq\0mls\0pmul\0umaxp\0uminp\0cqrdmulh\0";
   8d264:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8d268:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_11)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d26c:	12000098 	and	w24, w4, #0x1
   8d270:	12001059 	and	w25, w2, #0x1f
   8d274:	120010a4 	and	w4, w5, #0x1f
   8d278:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8d27c:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="uhadd\0uqadd\0urhadd\0?\0uhsub\0uqsub\0cmhi\0cmhs\0ushl\0uqshl\0urshl\0uqrshl\0umax\0umin\0uabd\0uaba\0sub\0cmeq\0mls\0pmul\0umaxp\0uminp\0cqrdmulh\0";
   8d280:	913aa060 	add	x0, x3, #0xea8
		op=((ic32_11)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d284:	120011a1 	and	w1, w13, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8d288:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
		op=((ic32_11)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d28c:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d290:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d294:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d298:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d29c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d2a0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d2a4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d2a8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8d2ac:	790583e3 	strh	w3, [sp, #704]
   8d2b0:	390b0be2 	strb	w2, [sp, #706]
   8d2b4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d2b8:	17ffe432 	b	86380 <disasm+0x1c80>
		names="fsqrt\0";
   8d2bc:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8d2c0:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d2c4:	12001059 	and	w25, w2, #0x1f
   8d2c8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8d2cc:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		names="fsqrt\0";
   8d2d0:	913a8020 	add	x0, x1, #0xea0
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d2d4:	12000098 	and	w24, w4, #0x1
		z=1;
   8d2d8:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d2dc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d2e0:	52800014 	mov	w20, #0x0                   	// #0
   8d2e4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d2e8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d2ec:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d2f0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d2f4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d2f8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8d2fc:	790583e2 	strh	w2, [sp, #704]
   8d300:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d304:	17ffe41f 	b	86380 <disasm+0x1c80>
		names="frinta\0frinti\0";
   8d308:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8d30c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d310:	12001059 	and	w25, w2, #0x1f
   8d314:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8d318:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d31c:	12000141 	and	w1, w10, #0x1
   8d320:	12000098 	and	w24, w4, #0x1
		names="frinta\0frinti\0";
   8d324:	913a4060 	add	x0, x3, #0xe90
		z=1;
   8d328:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d32c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d330:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d334:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d338:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d33c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d340:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d344:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8d348:	790583e2 	strh	w2, [sp, #704]
   8d34c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d350:	17ffe40c 	b	86380 <disasm+0x1c80>
		names="fneg\0";
   8d354:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8d358:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d35c:	12001059 	and	w25, w2, #0x1f
   8d360:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8d364:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		names="fneg\0";
   8d368:	913a2020 	add	x0, x1, #0xe88
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d36c:	12000098 	and	w24, w4, #0x1
		z=1;
   8d370:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d374:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d378:	52800014 	mov	w20, #0x0                   	// #0
   8d37c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d380:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d384:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d388:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d38c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d390:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8d394:	790583e2 	strh	w2, [sp, #704]
   8d398:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d39c:	17ffe3f9 	b	86380 <disasm+0x1c80>
		names="fcmgt\0facgt\0";
   8d3a0:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8d3a4:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d3a8:	12000098 	and	w24, w4, #0x1
   8d3ac:	12001059 	and	w25, w2, #0x1f
   8d3b0:	120010a4 	and	w4, w5, #0x1f
   8d3b4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d3b8:	52800f82 	mov	w2, #0x7c                  	// #124
		names="fcmgt\0facgt\0";
   8d3bc:	911a8060 	add	x0, x3, #0x6a0
		op=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d3c0:	120001a1 	and	w1, w13, #0x1
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d3c4:	528f6f43 	mov	w3, #0x7b7a                	// #31610
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d3c8:	52800017 	mov	w23, #0x0                   	// #0
   8d3cc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d3d0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d3d4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d3d8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d3dc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d3e0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d3e4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d3e8:	790583e3 	strh	w3, [sp, #704]
   8d3ec:	390b0be2 	strb	w2, [sp, #706]
   8d3f0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d3f4:	17ffe3e3 	b	86380 <disasm+0x1c80>
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d3f8:	120010a3 	and	w3, w5, #0x1f
		names="fabd\0";
   8d3fc:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8d400:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d404:	12001059 	and	w25, w2, #0x1f
   8d408:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d40c:	52800f82 	mov	w2, #0x7c                  	// #124
		names="fabd\0";
   8d410:	911a6020 	add	x0, x1, #0x698
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d414:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d418:	52800017 	mov	w23, #0x0                   	// #0
   8d41c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d420:	52800014 	mov	w20, #0x0                   	// #0
   8d424:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d428:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d42c:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d430:	528f6f43 	mov	w3, #0x7b7a                	// #31610
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d434:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d438:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d43c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d440:	790583e3 	strh	w3, [sp, #704]
   8d444:	390b0be2 	strb	w2, [sp, #706]
   8d448:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d44c:	17ffe3cd 	b	86380 <disasm+0x1c80>
		names="not\0rbit\0";
   8d450:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8d454:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d458:	12001059 	and	w25, w2, #0x1f
   8d45c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8d460:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d464:	120000e1 	and	w1, w7, #0x1
   8d468:	12000098 	and	w24, w4, #0x1
		names="not\0rbit\0";
   8d46c:	9139e060 	add	x0, x3, #0xe78
		z=0;
   8d470:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d474:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d478:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d47c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d480:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d484:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d488:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d48c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8d490:	790583e2 	strh	w2, [sp, #704]
   8d494:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d498:	17ffe3ba 	b	86380 <disasm+0x1c80>
		names="frintx\0";
   8d49c:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8d4a0:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d4a4:	12001059 	and	w25, w2, #0x1f
   8d4a8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8d4ac:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		names="frintx\0";
   8d4b0:	9139c020 	add	x0, x1, #0xe70
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d4b4:	12000098 	and	w24, w4, #0x1
		z=1;
   8d4b8:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d4bc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d4c0:	52800014 	mov	w20, #0x0                   	// #0
   8d4c4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d4c8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d4cc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d4d0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d4d4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d4d8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8d4dc:	790583e2 	strh	w2, [sp, #704]
   8d4e0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d4e4:	17ffe3a7 	b	86380 <disasm+0x1c80>
		names="fcmge\0facge\0";
   8d4e8:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8d4ec:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d4f0:	12000098 	and	w24, w4, #0x1
   8d4f4:	12001059 	and	w25, w2, #0x1f
   8d4f8:	120010a4 	and	w4, w5, #0x1f
   8d4fc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d500:	52800f82 	mov	w2, #0x7c                  	// #124
		names="fcmge\0facge\0";
   8d504:	911a2060 	add	x0, x3, #0x688
		op=((ic32_11)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d508:	120001a1 	and	w1, w13, #0x1
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d50c:	528f6f43 	mov	w3, #0x7b7a                	// #31610
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d510:	52800017 	mov	w23, #0x0                   	// #0
   8d514:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d518:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d51c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d520:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d524:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d528:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d52c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d530:	790583e3 	strh	w3, [sp, #704]
   8d534:	390b0be2 	strb	w2, [sp, #706]
   8d538:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d53c:	17ffe391 	b	86380 <disasm+0x1c80>
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); i=((ic32_14)&1?(-1<<4):0)|((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d540:	f240023f 	tst	x17, #0x1
   8d544:	12000dad 	and	w13, w13, #0xf
   8d548:	128001e3 	mov	w3, #0xfffffff0            	// #-16
   8d54c:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="ext\0";
   8d550:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); i=((ic32_14)&1?(-1<<4):0)|((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d554:	12001059 	and	w25, w2, #0x1f
		names="ext\0";
   8d558:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); i=((ic32_14)&1?(-1<<4):0)|((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d55c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; args[3]=disasm_arg_i; 
   8d560:	529084a2 	mov	w2, #0x8425                	// #33829
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); i=((ic32_14)&1?(-1<<4):0)|((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d564:	2a0301a0 	orr	w0, w13, w3
   8d568:	12000098 	and	w24, w4, #0x1
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; args[3]=disasm_arg_i; 
   8d56c:	72a0f0a2 	movk	w2, #0x785, lsl #16
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); i=((ic32_14)&1?(-1<<4):0)|((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d570:	120010a4 	and	w4, w5, #0x1f
		z=0;
   8d574:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d578:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d57c:	52800014 	mov	w20, #0x0                   	// #0
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); i=((ic32_14)&1?(-1<<4):0)|((ic32_11)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d580:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ext\0";
   8d584:	9139a020 	add	x0, x1, #0xe68
	uint16_t op=0, om=0, j=0;
   8d588:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d58c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d590:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d594:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d598:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; args[3]=disasm_arg_i; 
   8d59c:	b902c3e2 	str	w2, [sp, #704]
   8d5a0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d5a4:	17ffe377 	b	86380 <disasm+0x1c80>
		q=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d5a8:	1200009b 	and	w27, w4, #0x1
		names="dup\0";
   8d5ac:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8d5b0:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d5b4:	12001059 	and	w25, w2, #0x1f
   8d5b8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtjq; args[1]=disasm_arg_Rn; 
   8d5bc:	52812ea2 	mov	w2, #0x975                 	// #2421
		names="dup\0";
   8d5c0:	910fa020 	add	x0, x1, #0x3e8
		q=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d5c4:	120010b4 	and	w20, w5, #0x1f
   8d5c8:	2a1b03f8 	mov	w24, w27
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d5cc:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d5d0:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d5d4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d5d8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d5dc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d5e0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d5e4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtjq; args[1]=disasm_arg_Rn; 
   8d5e8:	790583e2 	strh	w2, [sp, #704]
   8d5ec:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d5f0:	17ffe364 	b	86380 <disasm+0x1c80>
		s=((ic32_30)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8d5f4:	f240021f 	tst	x16, #0x1
   8d5f8:	12004842 	and	w2, w2, #0x7ffff
   8d5fc:	52bfff03 	mov	w3, #0xfff80000            	// #-524288
   8d600:	1a9f1063 	csel	w3, w3, wzr, ne  // ne = any
		names="ldr\0";
   8d604:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
		s=((ic32_30)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8d608:	1200101a 	and	w26, w0, #0x1f
		names="ldr\0";
   8d60c:	913ea021 	add	x1, x1, #0xfa8
		s=((ic32_30)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8d610:	2a030040 	orr	w0, w2, w3
   8d614:	1200009b 	and	w27, w4, #0x1
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_labeli4; 
   8d618:	52820162 	mov	w2, #0x100b                	// #4107
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d61c:	52800017 	mov	w23, #0x0                   	// #0
   8d620:	52800018 	mov	w24, #0x0                   	// #0
   8d624:	52800019 	mov	w25, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d628:	52800014 	mov	w20, #0x0                   	// #0
		s=((ic32_30)&0x1); i=((ic32_23)&1?(-1<<19):0)|((ic32_5)&0x7ffff); t=((ic32)&0x1f); 
   8d62c:	290e83ff 	stp	wzr, w0, [sp, #116]
		names="ldr\0";
   8d630:	91398020 	add	x0, x1, #0xe60
	uint16_t op=0, om=0, j=0;
   8d634:	52800001 	mov	w1, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d638:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d63c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d640:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d644:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_labeli4; 
   8d648:	790583e2 	strh	w2, [sp, #704]
   8d64c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d650:	17ffe34c 	b	86380 <disasm+0x1c80>
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d654:	121f0161 	and	w1, w11, #0x2
   8d658:	1200014a 	and	w10, w10, #0x1
   8d65c:	121f0294 	and	w20, w20, #0x2
   8d660:	1200018c 	and	w12, w12, #0x1
		names="mul\0fmul\0sqdmulh\0sqrdmulh\0";
   8d664:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8d668:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d66c:	12000098 	and	w24, w4, #0x1
   8d670:	12001059 	and	w25, w2, #0x1f
   8d674:	120010a4 	and	w4, w5, #0x1f
   8d678:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d67c:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="mul\0fmul\0sqdmulh\0sqrdmulh\0";
   8d680:	91390060 	add	x0, x3, #0xe40
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d684:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d688:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d68c:	2a0c0294 	orr	w20, w20, w12
		z=2;
   8d690:	52800057 	mov	w23, #0x2                   	// #2
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d694:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8d698:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d69c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d6a0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d6a4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d6a8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d6ac:	790583e3 	strh	w3, [sp, #704]
   8d6b0:	390b0be2 	strb	w2, [sp, #706]
   8d6b4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d6b8:	17ffe332 	b	86380 <disasm+0x1c80>
		names="fcvtzs\0";
   8d6bc:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8d6c0:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d6c4:	12001059 	and	w25, w2, #0x1f
   8d6c8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d6cc:	128d6d83 	mov	w3, #0xffff9493            	// #-27501
		names="fcvtzs\0";
   8d6d0:	9138e020 	add	x0, x1, #0xe38
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d6d4:	12800da2 	mov	w2, #0xffffff92            	// #-110
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d6d8:	12000098 	and	w24, w4, #0x1
   8d6dc:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d6e0:	52800017 	mov	w23, #0x0                   	// #0
   8d6e4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d6e8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d6ec:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d6f0:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d6f4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d6f8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d6fc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d700:	790583e3 	strh	w3, [sp, #704]
   8d704:	390b0be2 	strb	w2, [sp, #706]
   8d708:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d70c:	17ffe31d 	b	86380 <disasm+0x1c80>
		names="scvtf\0";
   8d710:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8d714:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d718:	12001059 	and	w25, w2, #0x1f
   8d71c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d720:	128d6d83 	mov	w3, #0xffff9493            	// #-27501
		names="scvtf\0";
   8d724:	9138c020 	add	x0, x1, #0xe30
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d728:	12800da2 	mov	w2, #0xffffff92            	// #-110
		q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d72c:	12000098 	and	w24, w4, #0x1
   8d730:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d734:	52800017 	mov	w23, #0x0                   	// #0
   8d738:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d73c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d740:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d744:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d748:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d74c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d750:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d754:	790583e3 	strh	w3, [sp, #704]
   8d758:	390b0be2 	strb	w2, [sp, #706]
   8d75c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d760:	17ffe308 	b	86380 <disasm+0x1c80>
		names="sshr\0ssra\0srshr\0srsra\0";
   8d764:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8d768:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d76c:	12001059 	and	w25, w2, #0x1f
   8d770:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d774:	12800da2 	mov	w2, #0xffffff92            	// #-110
		names="sshr\0ssra\0srshr\0srsra\0";
   8d778:	91386060 	add	x0, x3, #0xe18
		op=((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d77c:	12000541 	and	w1, w10, #0x3
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d780:	128d6d83 	mov	w3, #0xffff9493            	// #-27501
		op=((ic32_12)&0x3); q=((ic32_30)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d784:	12000098 	and	w24, w4, #0x1
   8d788:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d78c:	52800017 	mov	w23, #0x0                   	// #0
   8d790:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8d794:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d798:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d79c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d7a0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d7a4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_Vnj2; args[2]=disasm_arg_shrshift; 
   8d7a8:	790583e3 	strh	w3, [sp, #704]
   8d7ac:	390b0be2 	strb	w2, [sp, #706]
   8d7b0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d7b4:	17ffe2f3 	b	86380 <disasm+0x1c80>
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d7b8:	121f0161 	and	w1, w11, #0x2
   8d7bc:	1200014a 	and	w10, w10, #0x1
   8d7c0:	121e01ef 	and	w15, w15, #0x4
   8d7c4:	12000508 	and	w8, w8, #0x3
		names="mul\0?\0sqdmulh\0sqrdmulh\0";
   8d7c8:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8d7cc:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d7d0:	12000098 	and	w24, w4, #0x1
   8d7d4:	12001059 	and	w25, w2, #0x1f
   8d7d8:	12000ca4 	and	w4, w5, #0xf
   8d7dc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d7e0:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="mul\0?\0sqdmulh\0sqrdmulh\0";
   8d7e4:	91380060 	add	x0, x3, #0xe00
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d7e8:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d7ec:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
		op=((ic32_13)&0x2)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); q=((ic32_30)&0x1); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d7f0:	2a0801f4 	orr	w20, w15, w8
		z=1;
   8d7f4:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d7f8:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8d7fc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d800:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d804:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d808:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d80c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8d810:	790583e3 	strh	w3, [sp, #704]
   8d814:	390b0be2 	strb	w2, [sp, #706]
   8d818:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d81c:	17ffe2d9 	b	86380 <disasm+0x1c80>
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d820:	12001042 	and	w2, w2, #0x1f
   8d824:	121b09ad 	and	w13, w13, #0xe0
		names="fmov\0";
   8d828:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8d82c:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d830:	2a0201b4 	orr	w20, w13, w2
   8d834:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_F16; 
   8d838:	1289bb42 	mov	w2, #0xffffb225            	// #-19931
		names="fmov\0";
   8d83c:	d101a020 	sub	x0, x1, #0x68
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d840:	12000098 	and	w24, w4, #0x1
		z=1;
   8d844:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d848:	52800019 	mov	w25, #0x0                   	// #0
   8d84c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d850:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d854:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d858:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d85c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d860:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d864:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_F16; 
   8d868:	790583e2 	strh	w2, [sp, #704]
   8d86c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d870:	17ffe2c4 	b	86380 <disasm+0x1c80>
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d874:	12001042 	and	w2, w2, #0x1f
   8d878:	121b09ad 	and	w13, w13, #0xe0
		names="fmov\0";
   8d87c:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8d880:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d884:	2a0201b4 	orr	w20, w13, w2
   8d888:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_F32; 
   8d88c:	12899b42 	mov	w2, #0xffffb325            	// #-19675
		names="fmov\0";
   8d890:	d101a020 	sub	x0, x1, #0x68
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d894:	12000098 	and	w24, w4, #0x1
		z=2;
   8d898:	52800057 	mov	w23, #0x2                   	// #2
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d89c:	52800019 	mov	w25, #0x0                   	// #0
   8d8a0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d8a4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d8a8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d8ac:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d8b0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d8b4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d8b8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_F32; 
   8d8bc:	790583e2 	strh	w2, [sp, #704]
   8d8c0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d8c4:	17ffe2af 	b	86380 <disasm+0x1c80>
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d8c8:	12001042 	and	w2, w2, #0x1f
   8d8cc:	121b09ad 	and	w13, w13, #0xe0
		names="movi\0";
   8d8d0:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8d8d4:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d8d8:	2a0201b4 	orr	w20, w13, w2
   8d8dc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; 
   8d8e0:	128a5b42 	mov	w2, #0xffffad25            	// #-21211
		names="movi\0";
   8d8e4:	91004020 	add	x0, x1, #0x10
		q=((ic32_30)&0x1); j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d8e8:	12000098 	and	w24, w4, #0x1
		z=0;
   8d8ec:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d8f0:	52800019 	mov	w25, #0x0                   	// #0
   8d8f4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d8f8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8d8fc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d900:	290fffff 	stp	wzr, wzr, [sp, #124]
   8d904:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d908:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d90c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_imm8; 
   8d910:	790583e2 	strh	w2, [sp, #704]
   8d914:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d918:	17ffe29a 	b	86380 <disasm+0x1c80>
		op=((ic32_16)&0x20)|((ic32_10)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d91c:	12001294 	and	w20, w20, #0x1f
   8d920:	121b00a1 	and	w1, w5, #0x20
		names="?\0?\0?\0?\0?\0?\0uzp1\0?\0?\0?\0trn1\0?\0?\0?\0zip1\0?\0?\0?\0?\0?\0?\0?\0uzp2\0?\0?\0?\0trn2\0?\0?\0?\0zip2\0?\0?\0shadd\0?\0sqadd\0?\0srhadd\0?\0?\0?\0?\0?\0sqsub\0?\0cmgt\0?\0cmge\0?\0sshl\0?\0sqshl\0?\0srshl\0?\0sqrshl\0?\0smax\0?\0smin\0?\0sabd\0?\0saba\0";
   8d924:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_16)&0x20)|((ic32_10)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d928:	1200101a 	and	w26, w0, #0x1f
		names="?\0?\0?\0?\0?\0?\0uzp1\0?\0?\0?\0trn1\0?\0?\0?\0zip1\0?\0?\0?\0?\0?\0?\0?\0uzp2\0?\0?\0?\0trn2\0?\0?\0?\0zip2\0?\0?\0shadd\0?\0sqadd\0?\0srhadd\0?\0?\0?\0?\0?\0sqsub\0?\0cmgt\0?\0cmge\0?\0sshl\0?\0sqshl\0?\0srshl\0?\0sqrshl\0?\0smax\0?\0smin\0?\0sabd\0?\0saba\0";
   8d92c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_16)&0x20)|((ic32_10)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d930:	120010a0 	and	w0, w5, #0x1f
   8d934:	12001059 	and	w25, w2, #0x1f
   8d938:	2a140021 	orr	w1, w1, w20
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8d93c:	12800f42 	mov	w2, #0xffffff85            	// #-123
		op=((ic32_16)&0x20)|((ic32_10)&0x1f); q=((ic32_30)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d940:	12000098 	and	w24, w4, #0x1
   8d944:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d948:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d94c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d950:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d954:	290fffe0 	stp	w0, wzr, [sp, #124]
		names="?\0?\0?\0?\0?\0?\0uzp1\0?\0?\0?\0trn1\0?\0?\0?\0zip1\0?\0?\0?\0?\0?\0?\0?\0uzp2\0?\0?\0?\0trn2\0?\0?\0?\0zip2\0?\0?\0shadd\0?\0sqadd\0?\0srhadd\0?\0?\0?\0?\0?\0sqsub\0?\0cmgt\0?\0cmge\0?\0sshl\0?\0sqshl\0?\0srshl\0?\0sqrshl\0?\0smax\0?\0smin\0?\0sabd\0?\0saba\0";
   8d958:	9134e060 	add	x0, x3, #0xd38
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8d95c:	128f7b43 	mov	w3, #0xffff8425            	// #-31707
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d960:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d964:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d968:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8d96c:	790583e3 	strh	w3, [sp, #704]
   8d970:	390b0be2 	strb	w2, [sp, #706]
   8d974:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d978:	17ffe282 	b	86380 <disasm+0x1c80>
		names="frecps\0frsqrts\0";
   8d97c:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8d980:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_23)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d984:	12000098 	and	w24, w4, #0x1
   8d988:	12001059 	and	w25, w2, #0x1f
   8d98c:	120010a4 	and	w4, w5, #0x1f
   8d990:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d994:	52800f82 	mov	w2, #0x7c                  	// #124
		names="frecps\0frsqrts\0";
   8d998:	9112c060 	add	x0, x3, #0x4b0
		op=((ic32_23)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d99c:	12000201 	and	w1, w16, #0x1
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d9a0:	528f6f43 	mov	w3, #0x7b7a                	// #31610
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d9a4:	52800017 	mov	w23, #0x0                   	// #0
   8d9a8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8d9ac:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8d9b0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8d9b4:	290fffe4 	stp	w4, wzr, [sp, #124]
   8d9b8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8d9bc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8d9c0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8d9c4:	790583e3 	strh	w3, [sp, #704]
   8d9c8:	390b0be2 	strb	w2, [sp, #706]
   8d9cc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8d9d0:	17ffe26c 	b	86380 <disasm+0x1c80>
		op=((ic32_21)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d9d4:	121e0181 	and	w1, w12, #0x4
   8d9d8:	1200054a 	and	w10, w10, #0x3
		names="fmaxnmv\0?\0?\0fmaxv\0fminnmv\0?\0?\0fminv\0";
   8d9dc:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8d9e0:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_21)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d9e4:	12001059 	and	w25, w2, #0x1f
   8d9e8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Vnzq2; 
   8d9ec:	128af122 	mov	w2, #0xffffa876            	// #-22410
		op=((ic32_21)&0x4)|((ic32_12)&0x3); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8d9f0:	2a0a0021 	orr	w1, w1, w10
   8d9f4:	12000098 	and	w24, w4, #0x1
		names="fmaxnmv\0?\0?\0fmaxv\0fminnmv\0?\0?\0fminv\0";
   8d9f8:	9113e060 	add	x0, x3, #0x4f8
		z=0;
   8d9fc:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8da00:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8da04:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8da08:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8da0c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8da10:	29117fff 	stp	wzr, wzr, [sp, #136]
   8da14:	29127fff 	stp	wzr, wzr, [sp, #144]
   8da18:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Vnzq2; 
   8da1c:	790583e2 	strh	w2, [sp, #704]
   8da20:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8da24:	17ffe257 	b	86380 <disasm+0x1c80>
		names="frintp\0frintz\0";
   8da28:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8da2c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8da30:	12001059 	and	w25, w2, #0x1f
   8da34:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8da38:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8da3c:	12000141 	and	w1, w10, #0x1
   8da40:	12000098 	and	w24, w4, #0x1
		names="frintp\0frintz\0";
   8da44:	9134a060 	add	x0, x3, #0xd28
		z=1;
   8da48:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8da4c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8da50:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8da54:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8da58:	290fffff 	stp	wzr, wzr, [sp, #124]
   8da5c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8da60:	29127fff 	stp	wzr, wzr, [sp, #144]
   8da64:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8da68:	790583e2 	strh	w2, [sp, #704]
   8da6c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8da70:	17ffe244 	b	86380 <disasm+0x1c80>
		q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8da74:	120010a3 	and	w3, w5, #0x1f
		names="fmulx\0";
   8da78:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8da7c:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8da80:	12001059 	and	w25, w2, #0x1f
   8da84:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8da88:	52800fe2 	mov	w2, #0x7f                  	// #127
		names="fmulx\0";
   8da8c:	9111c020 	add	x0, x1, #0x470
		q=((ic32_30)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8da90:	12000098 	and	w24, w4, #0x1
   8da94:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8da98:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8da9c:	52800014 	mov	w20, #0x0                   	// #0
   8daa0:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8daa4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8daa8:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8daac:	528fcfa3 	mov	w3, #0x7e7d                	// #32381
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dab0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dab4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dab8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtzq; args[1]=disasm_arg_Vnzq; args[2]=disasm_arg_Vmzq; 
   8dabc:	790583e3 	strh	w3, [sp, #704]
   8dac0:	390b0be2 	strb	w2, [sp, #706]
   8dac4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8dac8:	17ffe22e 	b	86380 <disasm+0x1c80>
		names="fabs\0";
   8dacc:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8dad0:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dad4:	12001059 	and	w25, w2, #0x1f
   8dad8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8dadc:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		names="fabs\0";
   8dae0:	91348020 	add	x0, x1, #0xd20
		q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dae4:	12000098 	and	w24, w4, #0x1
		z=1;
   8dae8:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8daec:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8daf0:	52800014 	mov	w20, #0x0                   	// #0
   8daf4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8daf8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dafc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8db00:	29117fff 	stp	wzr, wzr, [sp, #136]
   8db04:	29127fff 	stp	wzr, wzr, [sp, #144]
   8db08:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8db0c:	790583e2 	strh	w2, [sp, #704]
   8db10:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8db14:	17ffe21b 	b	86380 <disasm+0x1c80>
		names="frintn\0frintm\0";
   8db18:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8db1c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8db20:	12001059 	and	w25, w2, #0x1f
   8db24:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8db28:	128f7b42 	mov	w2, #0xffff8425            	// #-31707
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8db2c:	12000141 	and	w1, w10, #0x1
   8db30:	12000098 	and	w24, w4, #0x1
		names="frintn\0frintm\0";
   8db34:	91344060 	add	x0, x3, #0xd10
		z=1;
   8db38:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8db3c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8db40:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8db44:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8db48:	290fffff 	stp	wzr, wzr, [sp, #124]
   8db4c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8db50:	29127fff 	stp	wzr, wzr, [sp, #144]
   8db54:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT; 
   8db58:	790583e2 	strh	w2, [sp, #704]
   8db5c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8db60:	17ffe208 	b	86380 <disasm+0x1c80>
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8db64:	120010a3 	and	w3, w5, #0x1f
		names="fcmeq\0";
   8db68:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8db6c:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8db70:	12001059 	and	w25, w2, #0x1f
   8db74:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8db78:	52800f82 	mov	w2, #0x7c                  	// #124
		names="fcmeq\0";
   8db7c:	9111e020 	add	x0, x1, #0x478
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8db80:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8db84:	52800017 	mov	w23, #0x0                   	// #0
   8db88:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8db8c:	52800014 	mov	w20, #0x0                   	// #0
   8db90:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8db94:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8db98:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8db9c:	528f6f43 	mov	w3, #0x7b7a                	// #31610
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dba0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dba4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dba8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8dbac:	790583e3 	strh	w3, [sp, #704]
   8dbb0:	390b0be2 	strb	w2, [sp, #706]
   8dbb4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8dbb8:	17ffe1f2 	b	86380 <disasm+0x1c80>
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dbbc:	120010a3 	and	w3, w5, #0x1f
		names="fmulx\0";
   8dbc0:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8dbc4:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dbc8:	12001059 	and	w25, w2, #0x1f
   8dbcc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8dbd0:	52800f82 	mov	w2, #0x7c                  	// #124
		names="fmulx\0";
   8dbd4:	9111c020 	add	x0, x1, #0x470
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dbd8:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dbdc:	52800017 	mov	w23, #0x0                   	// #0
   8dbe0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8dbe4:	52800014 	mov	w20, #0x0                   	// #0
   8dbe8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8dbec:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dbf0:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8dbf4:	528f6f43 	mov	w3, #0x7b7a                	// #31610
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dbf8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dbfc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dc00:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH1; args[1]=disasm_arg_VnH1; args[2]=disasm_arg_VmH1; 
   8dc04:	790583e3 	strh	w3, [sp, #704]
   8dc08:	390b0be2 	strb	w2, [sp, #706]
   8dc0c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8dc10:	17ffe1dc 	b	86380 <disasm+0x1c80>
		names="tbl\0tbx\0";
   8dc14:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8dc18:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dc1c:	12000098 	and	w24, w4, #0x1
   8dc20:	12001059 	and	w25, w2, #0x1f
   8dc24:	120010a4 	and	w4, w5, #0x1f
   8dc28:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn416b; args[2]=disasm_arg_VmT; 
   8dc2c:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="tbl\0tbx\0";
   8dc30:	9133c060 	add	x0, x3, #0xcf0
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dc34:	12000141 	and	w1, w10, #0x1
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn416b; args[2]=disasm_arg_VmT; 
   8dc38:	128bdb43 	mov	w3, #0xffffa125            	// #-24283
		z=0;
   8dc3c:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dc40:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8dc44:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8dc48:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dc4c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8dc50:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dc54:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dc58:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn416b; args[2]=disasm_arg_VmT; 
   8dc5c:	790583e3 	strh	w3, [sp, #704]
   8dc60:	390b0be2 	strb	w2, [sp, #706]
   8dc64:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8dc68:	17ffe1c6 	b	86380 <disasm+0x1c80>
		names="tbl\0tbx\0";
   8dc6c:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8dc70:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dc74:	12000098 	and	w24, w4, #0x1
   8dc78:	12001059 	and	w25, w2, #0x1f
   8dc7c:	120010a4 	and	w4, w5, #0x1f
   8dc80:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn316b; args[2]=disasm_arg_VmT; 
   8dc84:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="tbl\0tbx\0";
   8dc88:	9133c060 	add	x0, x3, #0xcf0
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dc8c:	12000141 	and	w1, w10, #0x1
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn316b; args[2]=disasm_arg_VmT; 
   8dc90:	128bfb43 	mov	w3, #0xffffa025            	// #-24539
		z=0;
   8dc94:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dc98:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8dc9c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8dca0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dca4:	290fffe4 	stp	w4, wzr, [sp, #124]
   8dca8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dcac:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dcb0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn316b; args[2]=disasm_arg_VmT; 
   8dcb4:	790583e3 	strh	w3, [sp, #704]
   8dcb8:	390b0be2 	strb	w2, [sp, #706]
   8dcbc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8dcc0:	17ffe1b0 	b	86380 <disasm+0x1c80>
		names="smov\0umov\0";
   8dcc4:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8dcc8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_12)&0x1); s=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dccc:	1200101a 	and	w26, w0, #0x1f
		names="smov\0umov\0";
   8dcd0:	91340060 	add	x0, x3, #0xd00
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8dcd4:	528e6163 	mov	w3, #0x730b                	// #29451
		op=((ic32_12)&0x1); s=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dcd8:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8dcdc:	72ae8523 	movk	w3, #0x7429, lsl #16
   8dce0:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_12)&0x1); s=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dce4:	12000141 	and	w1, w10, #0x1
   8dce8:	1200009b 	and	w27, w4, #0x1
   8dcec:	120010b4 	and	w20, w5, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dcf0:	52800017 	mov	w23, #0x0                   	// #0
   8dcf4:	52800018 	mov	w24, #0x0                   	// #0
	uint32_t i=0;
   8dcf8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dcfc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8dd00:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dd04:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dd08:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rt; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8dd0c:	b902c3e3 	str	w3, [sp, #704]
   8dd10:	390b13e2 	strb	w2, [sp, #708]
   8dd14:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8dd18:	17ffe19a 	b	86380 <disasm+0x1c80>
		names="tbl\0tbx\0";
   8dd1c:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8dd20:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dd24:	12000098 	and	w24, w4, #0x1
   8dd28:	12001059 	and	w25, w2, #0x1f
   8dd2c:	120010a4 	and	w4, w5, #0x1f
   8dd30:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn216b; args[2]=disasm_arg_VmT; 
   8dd34:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="tbl\0tbx\0";
   8dd38:	9133c060 	add	x0, x3, #0xcf0
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dd3c:	12000141 	and	w1, w10, #0x1
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn216b; args[2]=disasm_arg_VmT; 
   8dd40:	128c1b43 	mov	w3, #0xffff9f25            	// #-24795
		z=0;
   8dd44:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dd48:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8dd4c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8dd50:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dd54:	290fffe4 	stp	w4, wzr, [sp, #124]
   8dd58:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dd5c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dd60:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn216b; args[2]=disasm_arg_VmT; 
   8dd64:	790583e3 	strh	w3, [sp, #704]
   8dd68:	390b0be2 	strb	w2, [sp, #706]
   8dd6c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8dd70:	17ffe184 	b	86380 <disasm+0x1c80>
		names="tbl\0tbx\0";
   8dd74:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8dd78:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dd7c:	12000098 	and	w24, w4, #0x1
   8dd80:	12001059 	and	w25, w2, #0x1f
   8dd84:	120010a4 	and	w4, w5, #0x1f
   8dd88:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn116b; args[2]=disasm_arg_VmT; 
   8dd8c:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="tbl\0tbx\0";
   8dd90:	9133c060 	add	x0, x3, #0xcf0
		op=((ic32_12)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dd94:	12000141 	and	w1, w10, #0x1
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn116b; args[2]=disasm_arg_VmT; 
   8dd98:	128c3b43 	mov	w3, #0xffff9e25            	// #-25051
		z=0;
   8dd9c:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dda0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8dda4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8dda8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ddac:	290fffe4 	stp	w4, wzr, [sp, #124]
   8ddb0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ddb4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ddb8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vn116b; args[2]=disasm_arg_VmT; 
   8ddbc:	790583e3 	strh	w3, [sp, #704]
   8ddc0:	390b0be2 	strb	w2, [sp, #706]
   8ddc4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ddc8:	17ffe16e 	b	86380 <disasm+0x1c80>
		names="dup\0";
   8ddcc:	d0000021 	adrp	x1, 93000 <sd_init+0xce8>
		args[0]=disasm_arg_Vtjq; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8ddd0:	528e6ea3 	mov	w3, #0x7375                	// #29557
		names="dup\0";
   8ddd4:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ddd8:	12001059 	and	w25, w2, #0x1f
   8dddc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtjq; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8dde0:	72ae8523 	movk	w3, #0x7429, lsl #16
		names="dup\0";
   8dde4:	910fa020 	add	x0, x1, #0x3e8
		args[0]=disasm_arg_Vtjq; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8dde8:	52800562 	mov	w2, #0x2b                  	// #43
		q=((ic32_30)&0x1); j=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ddec:	12000098 	and	w24, w4, #0x1
   8ddf0:	120010b4 	and	w20, w5, #0x1f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ddf4:	52800017 	mov	w23, #0x0                   	// #0
   8ddf8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ddfc:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8de00:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8de04:	290fffff 	stp	wzr, wzr, [sp, #124]
   8de08:	29117fff 	stp	wzr, wzr, [sp, #136]
   8de0c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8de10:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtjq; args[1]=disasm_arg_Vnj; args[2]=disasm_arg_offs; args[3]=disasm_arg_FPidx; args[4]=disasm_arg_offe; 
   8de14:	b902c3e3 	str	w3, [sp, #704]
   8de18:	390b13e2 	strb	w2, [sp, #708]
   8de1c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8de20:	17ffe158 	b	86380 <disasm+0x1c80>
		names="st4\0ld4\0";
   8de24:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8de28:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8de2c:	1200101a 	and	w26, w0, #0x1f
		names="st4\0ld4\0";
   8de30:	91338060 	add	x0, x3, #0xce0
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8de34:	52852903 	mov	w3, #0x2948                	// #10568
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8de38:	12000098 	and	w24, w4, #0x1
   8de3c:	12001059 	and	w25, w2, #0x1f
   8de40:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8de44:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8de48:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8de4c:	120000e1 	and	w1, w7, #0x1
   8de50:	1200015b 	and	w27, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8de54:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8de58:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8de5c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8de60:	290fffe4 	stp	w4, wzr, [sp, #124]
   8de64:	29117fff 	stp	wzr, wzr, [sp, #136]
   8de68:	29127fff 	stp	wzr, wzr, [sp, #144]
   8de6c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8de70:	b902c3e3 	str	w3, [sp, #704]
   8de74:	390b13e2 	strb	w2, [sp, #708]
   8de78:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8de7c:	17ffe141 	b	86380 <disasm+0x1c80>
		names="st4\0ld4\0";
   8de80:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8de84:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8de88:	1200101a 	and	w26, w0, #0x1f
		names="st4\0ld4\0";
   8de8c:	91338060 	add	x0, x3, #0xce0
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8de90:	52852923 	mov	w3, #0x2949                	// #10569
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8de94:	12000098 	and	w24, w4, #0x1
   8de98:	12001059 	and	w25, w2, #0x1f
   8de9c:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8dea0:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8dea4:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dea8:	120000e1 	and	w1, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8deac:	52800017 	mov	w23, #0x0                   	// #0
   8deb0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8deb4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8deb8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8debc:	290fffe4 	stp	w4, wzr, [sp, #124]
   8dec0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dec4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dec8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8decc:	b902c3e3 	str	w3, [sp, #704]
   8ded0:	390b13e2 	strb	w2, [sp, #708]
   8ded4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ded8:	17ffe12a 	b	86380 <disasm+0x1c80>
		names="st2\0ld2\0";
   8dedc:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8dee0:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dee4:	1200101a 	and	w26, w0, #0x1f
		names="st2\0ld2\0";
   8dee8:	91334060 	add	x0, x3, #0xcd0
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8deec:	52852863 	mov	w3, #0x2943                	// #10563
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8def0:	12000098 	and	w24, w4, #0x1
   8def4:	12001059 	and	w25, w2, #0x1f
   8def8:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8defc:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8df00:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8df04:	120000e1 	and	w1, w7, #0x1
   8df08:	1200015b 	and	w27, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8df0c:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8df10:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8df14:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8df18:	290fffe4 	stp	w4, wzr, [sp, #124]
   8df1c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8df20:	29127fff 	stp	wzr, wzr, [sp, #144]
   8df24:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8df28:	b902c3e3 	str	w3, [sp, #704]
   8df2c:	390b13e2 	strb	w2, [sp, #708]
   8df30:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8df34:	17ffe113 	b	86380 <disasm+0x1c80>
		names="st2\0ld2\0";
   8df38:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8df3c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8df40:	1200101a 	and	w26, w0, #0x1f
		names="st2\0ld2\0";
   8df44:	91334060 	add	x0, x3, #0xcd0
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8df48:	52852883 	mov	w3, #0x2944                	// #10564
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8df4c:	12000098 	and	w24, w4, #0x1
   8df50:	12001059 	and	w25, w2, #0x1f
   8df54:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8df58:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8df5c:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8df60:	120000e1 	and	w1, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8df64:	52800017 	mov	w23, #0x0                   	// #0
   8df68:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8df6c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8df70:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8df74:	290fffe4 	stp	w4, wzr, [sp, #124]
   8df78:	29117fff 	stp	wzr, wzr, [sp, #136]
   8df7c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8df80:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8df84:	b902c3e3 	str	w3, [sp, #704]
   8df88:	390b13e2 	strb	w2, [sp, #708]
   8df8c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8df90:	17ffe0fc 	b	86380 <disasm+0x1c80>
		names="st4\0ld4\0";
   8df94:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8df98:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8df9c:	1200101a 	and	w26, w0, #0x1f
		names="st4\0ld4\0";
   8dfa0:	91338060 	add	x0, x3, #0xce0
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8dfa4:	528528e3 	mov	w3, #0x2947                	// #10567
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dfa8:	12000098 	and	w24, w4, #0x1
   8dfac:	12000697 	and	w23, w20, #0x3
   8dfb0:	120010a4 	and	w4, w5, #0x1f
   8dfb4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8dfb8:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8dfbc:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dfc0:	120000e1 	and	w1, w7, #0x1
   8dfc4:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8dfc8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8dfcc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8dfd0:	290fffe4 	stp	w4, wzr, [sp, #124]
   8dfd4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8dfd8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8dfdc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8dfe0:	b902c3e3 	str	w3, [sp, #704]
   8dfe4:	390b13e2 	strb	w2, [sp, #708]
   8dfe8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8dfec:	17ffe0e5 	b	86380 <disasm+0x1c80>
		names="st2\0ld2\0";
   8dff0:	d0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8dff4:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8dff8:	1200101a 	and	w26, w0, #0x1f
		names="st2\0ld2\0";
   8dffc:	91334060 	add	x0, x3, #0xcd0
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e000:	52852843 	mov	w3, #0x2942                	// #10562
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e004:	12000098 	and	w24, w4, #0x1
   8e008:	12000697 	and	w23, w20, #0x3
   8e00c:	120010a4 	and	w4, w5, #0x1f
   8e010:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e014:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e018:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e01c:	120000e1 	and	w1, w7, #0x1
   8e020:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e024:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e028:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e02c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8e030:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e034:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e038:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e03c:	b902c3e3 	str	w3, [sp, #704]
   8e040:	390b13e2 	strb	w2, [sp, #708]
   8e044:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e048:	17ffe0ce 	b	86380 <disasm+0x1c80>
		names="st4\0ld4\0";
   8e04c:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e050:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e054:	1200101a 	and	w26, w0, #0x1f
		names="st4\0ld4\0";
   8e058:	91338060 	add	x0, x3, #0xce0
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e05c:	528528c3 	mov	w3, #0x2946                	// #10566
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e060:	12000098 	and	w24, w4, #0x1
   8e064:	12000697 	and	w23, w20, #0x3
   8e068:	120010a4 	and	w4, w5, #0x1f
   8e06c:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e070:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e074:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e078:	120000e1 	and	w1, w7, #0x1
   8e07c:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e080:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e084:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e088:	290fffe4 	stp	w4, wzr, [sp, #124]
   8e08c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e090:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e094:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e098:	b902c3e3 	str	w3, [sp, #704]
   8e09c:	390b13e2 	strb	w2, [sp, #708]
   8e0a0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e0a4:	17ffe0b7 	b	86380 <disasm+0x1c80>
		names="st2\0ld2\0";
   8e0a8:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e0ac:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e0b0:	1200101a 	and	w26, w0, #0x1f
		names="st2\0ld2\0";
   8e0b4:	91334060 	add	x0, x3, #0xcd0
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e0b8:	52852823 	mov	w3, #0x2941                	// #10561
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e0bc:	12000098 	and	w24, w4, #0x1
   8e0c0:	12000697 	and	w23, w20, #0x3
   8e0c4:	120010a4 	and	w4, w5, #0x1f
   8e0c8:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e0cc:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e0d0:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e0d4:	120000e1 	and	w1, w7, #0x1
   8e0d8:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e0dc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e0e0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e0e4:	290fffe4 	stp	w4, wzr, [sp, #124]
   8e0e8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e0ec:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e0f0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e0f4:	b902c3e3 	str	w3, [sp, #704]
   8e0f8:	390b13e2 	strb	w2, [sp, #708]
   8e0fc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e100:	17ffe0a0 	b	86380 <disasm+0x1c80>
		names="st4\0ld4\0";
   8e104:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e108:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e10c:	1200101a 	and	w26, w0, #0x1f
		names="st4\0ld4\0";
   8e110:	91338060 	add	x0, x3, #0xce0
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i16; 
   8e114:	52852903 	mov	w3, #0x2948                	// #10568
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e118:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i16; 
   8e11c:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e120:	528008a2 	mov	w2, #0x45                  	// #69
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e124:	120000e1 	and	w1, w7, #0x1
   8e128:	12000098 	and	w24, w4, #0x1
   8e12c:	1200015b 	and	w27, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e130:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e134:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e138:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e13c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e140:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e144:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e148:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i16; 
   8e14c:	b902c3e3 	str	w3, [sp, #704]
   8e150:	390b13e2 	strb	w2, [sp, #708]
   8e154:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e158:	17ffe08a 	b	86380 <disasm+0x1c80>
		names="st4\0ld4\0";
   8e15c:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e160:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e164:	1200101a 	and	w26, w0, #0x1f
		names="st4\0ld4\0";
   8e168:	91338060 	add	x0, x3, #0xce0
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i32; 
   8e16c:	52852923 	mov	w3, #0x2949                	// #10569
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e170:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i32; 
   8e174:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e178:	52800942 	mov	w2, #0x4a                  	// #74
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e17c:	120000e1 	and	w1, w7, #0x1
   8e180:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e184:	52800017 	mov	w23, #0x0                   	// #0
   8e188:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e18c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e190:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e194:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e198:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e19c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e1a0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i32; 
   8e1a4:	b902c3e3 	str	w3, [sp, #704]
   8e1a8:	390b13e2 	strb	w2, [sp, #708]
   8e1ac:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e1b0:	17ffe074 	b	86380 <disasm+0x1c80>
		names="st2\0ld2\0";
   8e1b4:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e1b8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e1bc:	1200101a 	and	w26, w0, #0x1f
		names="st2\0ld2\0";
   8e1c0:	91334060 	add	x0, x3, #0xcd0
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8e1c4:	52852863 	mov	w3, #0x2943                	// #10563
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e1c8:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8e1cc:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e1d0:	52800702 	mov	w2, #0x38                  	// #56
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e1d4:	120000e1 	and	w1, w7, #0x1
   8e1d8:	12000098 	and	w24, w4, #0x1
   8e1dc:	1200015b 	and	w27, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e1e0:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e1e4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e1e8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e1ec:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e1f0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e1f4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e1f8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8e1fc:	b902c3e3 	str	w3, [sp, #704]
   8e200:	390b13e2 	strb	w2, [sp, #708]
   8e204:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e208:	17ffe05e 	b	86380 <disasm+0x1c80>
		names="st2\0ld2\0";
   8e20c:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e210:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e214:	1200101a 	and	w26, w0, #0x1f
		names="st2\0ld2\0";
   8e218:	91334060 	add	x0, x3, #0xcd0
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i16; 
   8e21c:	52852883 	mov	w3, #0x2944                	// #10564
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e220:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i16; 
   8e224:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e228:	528008a2 	mov	w2, #0x45                  	// #69
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e22c:	120000e1 	and	w1, w7, #0x1
   8e230:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e234:	52800017 	mov	w23, #0x0                   	// #0
   8e238:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e23c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e240:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e244:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e248:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e24c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e250:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i16; 
   8e254:	b902c3e3 	str	w3, [sp, #704]
   8e258:	390b13e2 	strb	w2, [sp, #708]
   8e25c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e260:	17ffe048 	b	86380 <disasm+0x1c80>
		names="st4\0ld4\0";
   8e264:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e268:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e26c:	1200101a 	and	w26, w0, #0x1f
		names="st4\0ld4\0";
   8e270:	91338060 	add	x0, x3, #0xce0
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8e274:	528528e3 	mov	w3, #0x2947                	// #10567
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e278:	12000697 	and	w23, w20, #0x3
   8e27c:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8e280:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e284:	52800702 	mov	w2, #0x38                  	// #56
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e288:	120000e1 	and	w1, w7, #0x1
   8e28c:	12000098 	and	w24, w4, #0x1
   8e290:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e294:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e298:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e29c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e2a0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e2a4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e2a8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8e2ac:	b902c3e3 	str	w3, [sp, #704]
   8e2b0:	390b13e2 	strb	w2, [sp, #708]
   8e2b4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e2b8:	17ffe032 	b	86380 <disasm+0x1c80>
		names="st2\0ld2\0";
   8e2bc:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e2c0:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e2c4:	1200101a 	and	w26, w0, #0x1f
		names="st2\0ld2\0";
   8e2c8:	91334060 	add	x0, x3, #0xcd0
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8e2cc:	52852843 	mov	w3, #0x2942                	// #10562
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e2d0:	12000697 	and	w23, w20, #0x3
   8e2d4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8e2d8:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e2dc:	528006e2 	mov	w2, #0x37                  	// #55
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e2e0:	120000e1 	and	w1, w7, #0x1
   8e2e4:	12000098 	and	w24, w4, #0x1
   8e2e8:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e2ec:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e2f0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e2f4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e2f8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e2fc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e300:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8e304:	b902c3e3 	str	w3, [sp, #704]
   8e308:	390b13e2 	strb	w2, [sp, #708]
   8e30c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e310:	17ffe01c 	b	86380 <disasm+0x1c80>
		names="st4\0ld4\0";
   8e314:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e318:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e31c:	1200101a 	and	w26, w0, #0x1f
		names="st4\0ld4\0";
   8e320:	91338060 	add	x0, x3, #0xce0
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8e324:	528528c3 	mov	w3, #0x2946                	// #10566
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e328:	12000697 	and	w23, w20, #0x3
   8e32c:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8e330:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e334:	528006e2 	mov	w2, #0x37                  	// #55
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e338:	120000e1 	and	w1, w7, #0x1
   8e33c:	12000098 	and	w24, w4, #0x1
   8e340:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e344:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e348:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e34c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e350:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e354:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e358:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8e35c:	b902c3e3 	str	w3, [sp, #704]
   8e360:	390b13e2 	strb	w2, [sp, #708]
   8e364:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e368:	17ffe006 	b	86380 <disasm+0x1c80>
		names="st2\0ld2\0";
   8e36c:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e370:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e374:	1200101a 	and	w26, w0, #0x1f
		names="st2\0ld2\0";
   8e378:	91334060 	add	x0, x3, #0xcd0
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i2; 
   8e37c:	52852823 	mov	w3, #0x2941                	// #10561
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e380:	12000697 	and	w23, w20, #0x3
   8e384:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i2; 
   8e388:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e38c:	528006c2 	mov	w2, #0x36                  	// #54
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e390:	120000e1 	and	w1, w7, #0x1
   8e394:	12000098 	and	w24, w4, #0x1
   8e398:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e39c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e3a0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e3a4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e3a8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e3ac:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e3b0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i2; 
   8e3b4:	b902c3e3 	str	w3, [sp, #704]
   8e3b8:	390b13e2 	strb	w2, [sp, #708]
   8e3bc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e3c0:	17ffdff0 	b	86380 <disasm+0x1c80>
		names="st3\0ld3\0";
   8e3c4:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e3c8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e3cc:	1200101a 	and	w26, w0, #0x1f
		names="st3\0ld3\0";
   8e3d0:	91330060 	add	x0, x3, #0xcc0
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e3d4:	52852763 	mov	w3, #0x293b                	// #10555
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e3d8:	12000098 	and	w24, w4, #0x1
   8e3dc:	12001059 	and	w25, w2, #0x1f
   8e3e0:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e3e4:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e3e8:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e3ec:	120000e1 	and	w1, w7, #0x1
   8e3f0:	1200015b 	and	w27, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e3f4:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e3f8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e3fc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e400:	290fffe4 	stp	w4, wzr, [sp, #124]
   8e404:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e408:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e40c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e410:	b902c3e3 	str	w3, [sp, #704]
   8e414:	390b13e2 	strb	w2, [sp, #708]
   8e418:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e41c:	17ffdfd9 	b	86380 <disasm+0x1c80>
		names="st3\0ld3\0";
   8e420:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e424:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e428:	1200101a 	and	w26, w0, #0x1f
		names="st3\0ld3\0";
   8e42c:	91330060 	add	x0, x3, #0xcc0
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e430:	52852783 	mov	w3, #0x293c                	// #10556
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e434:	12000098 	and	w24, w4, #0x1
   8e438:	12001059 	and	w25, w2, #0x1f
   8e43c:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e440:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e444:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e448:	120000e1 	and	w1, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e44c:	52800017 	mov	w23, #0x0                   	// #0
   8e450:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e454:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e458:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e45c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8e460:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e464:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e468:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e46c:	b902c3e3 	str	w3, [sp, #704]
   8e470:	390b13e2 	strb	w2, [sp, #708]
   8e474:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e478:	17ffdfc2 	b	86380 <disasm+0x1c80>
		names="st1\0ld1\0";
   8e47c:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e480:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e484:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8e488:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e48c:	52852663 	mov	w3, #0x2933                	// #10547
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e490:	12000098 	and	w24, w4, #0x1
   8e494:	12001059 	and	w25, w2, #0x1f
   8e498:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e49c:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e4a0:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e4a4:	120000e1 	and	w1, w7, #0x1
   8e4a8:	1200015b 	and	w27, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e4ac:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e4b0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e4b4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e4b8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8e4bc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e4c0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e4c4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e4c8:	b902c3e3 	str	w3, [sp, #704]
   8e4cc:	390b13e2 	strb	w2, [sp, #708]
   8e4d0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e4d4:	17ffdfab 	b	86380 <disasm+0x1c80>
		names="st1\0ld1\0";
   8e4d8:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e4dc:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e4e0:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8e4e4:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e4e8:	52852683 	mov	w3, #0x2934                	// #10548
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e4ec:	12000098 	and	w24, w4, #0x1
   8e4f0:	12001059 	and	w25, w2, #0x1f
   8e4f4:	120010a4 	and	w4, w5, #0x1f
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e4f8:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e4fc:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e500:	120000e1 	and	w1, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e504:	52800017 	mov	w23, #0x0                   	// #0
   8e508:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e50c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e510:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e514:	290fffe4 	stp	w4, wzr, [sp, #124]
   8e518:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e51c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e520:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e524:	b902c3e3 	str	w3, [sp, #704]
   8e528:	390b13e2 	strb	w2, [sp, #708]
   8e52c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e530:	17ffdf94 	b	86380 <disasm+0x1c80>
		names="st3\0ld3\0";
   8e534:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e538:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e53c:	1200101a 	and	w26, w0, #0x1f
		names="st3\0ld3\0";
   8e540:	91330060 	add	x0, x3, #0xcc0
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e544:	52852743 	mov	w3, #0x293a                	// #10554
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e548:	12000098 	and	w24, w4, #0x1
   8e54c:	12000697 	and	w23, w20, #0x3
   8e550:	120010a4 	and	w4, w5, #0x1f
   8e554:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e558:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e55c:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e560:	120000e1 	and	w1, w7, #0x1
   8e564:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e568:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e56c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e570:	290fffe4 	stp	w4, wzr, [sp, #124]
   8e574:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e578:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e57c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e580:	b902c3e3 	str	w3, [sp, #704]
   8e584:	390b13e2 	strb	w2, [sp, #708]
   8e588:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e58c:	17ffdf7d 	b	86380 <disasm+0x1c80>
		names="st1\0ld1\0";
   8e590:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e594:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e598:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8e59c:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e5a0:	52852643 	mov	w3, #0x2932                	// #10546
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e5a4:	12000098 	and	w24, w4, #0x1
   8e5a8:	12000697 	and	w23, w20, #0x3
   8e5ac:	120010a4 	and	w4, w5, #0x1f
   8e5b0:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e5b4:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e5b8:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e5bc:	120000e1 	and	w1, w7, #0x1
   8e5c0:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e5c4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e5c8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e5cc:	290fffe4 	stp	w4, wzr, [sp, #124]
   8e5d0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e5d4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e5d8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e5dc:	b902c3e3 	str	w3, [sp, #704]
   8e5e0:	390b13e2 	strb	w2, [sp, #708]
   8e5e4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e5e8:	17ffdf66 	b	86380 <disasm+0x1c80>
		names="st3\0ld3\0";
   8e5ec:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e5f0:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e5f4:	1200101a 	and	w26, w0, #0x1f
		names="st3\0ld3\0";
   8e5f8:	91330060 	add	x0, x3, #0xcc0
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e5fc:	52852723 	mov	w3, #0x2939                	// #10553
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e600:	12000098 	and	w24, w4, #0x1
   8e604:	12000697 	and	w23, w20, #0x3
   8e608:	120010a4 	and	w4, w5, #0x1f
   8e60c:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e610:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e614:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e618:	120000e1 	and	w1, w7, #0x1
   8e61c:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e620:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e624:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e628:	290fffe4 	stp	w4, wzr, [sp, #124]
   8e62c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e630:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e634:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e638:	b902c3e3 	str	w3, [sp, #704]
   8e63c:	390b13e2 	strb	w2, [sp, #708]
   8e640:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e644:	17ffdf4f 	b	86380 <disasm+0x1c80>
		names="st1\0ld1\0";
   8e648:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e64c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e650:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8e654:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e658:	52852623 	mov	w3, #0x2931                	// #10545
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e65c:	12000098 	and	w24, w4, #0x1
   8e660:	12000697 	and	w23, w20, #0x3
   8e664:	120010a4 	and	w4, w5, #0x1f
   8e668:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e66c:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e670:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e674:	120000e1 	and	w1, w7, #0x1
   8e678:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e67c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e680:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e684:	290fffe4 	stp	w4, wzr, [sp, #124]
   8e688:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e68c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e690:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8e694:	b902c3e3 	str	w3, [sp, #704]
   8e698:	390b13e2 	strb	w2, [sp, #708]
   8e69c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e6a0:	17ffdf38 	b	86380 <disasm+0x1c80>
		names="st3\0ld3\0";
   8e6a4:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e6a8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e6ac:	1200101a 	and	w26, w0, #0x1f
		names="st3\0ld3\0";
   8e6b0:	91330060 	add	x0, x3, #0xcc0
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i12; 
   8e6b4:	52852763 	mov	w3, #0x293b                	// #10555
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e6b8:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i12; 
   8e6bc:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e6c0:	528007e2 	mov	w2, #0x3f                  	// #63
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e6c4:	120000e1 	and	w1, w7, #0x1
   8e6c8:	12000098 	and	w24, w4, #0x1
   8e6cc:	1200015b 	and	w27, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e6d0:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e6d4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e6d8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e6dc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e6e0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e6e4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e6e8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i12; 
   8e6ec:	b902c3e3 	str	w3, [sp, #704]
   8e6f0:	390b13e2 	strb	w2, [sp, #708]
   8e6f4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e6f8:	17ffdf22 	b	86380 <disasm+0x1c80>
		names="st3\0ld3\0";
   8e6fc:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e700:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e704:	1200101a 	and	w26, w0, #0x1f
		names="st3\0ld3\0";
   8e708:	91330060 	add	x0, x3, #0xcc0
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i24; 
   8e70c:	52852783 	mov	w3, #0x293c                	// #10556
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e710:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i24; 
   8e714:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e718:	52800802 	mov	w2, #0x40                  	// #64
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e71c:	120000e1 	and	w1, w7, #0x1
   8e720:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e724:	52800017 	mov	w23, #0x0                   	// #0
   8e728:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e72c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e730:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e734:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e738:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e73c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e740:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i24; 
   8e744:	b902c3e3 	str	w3, [sp, #704]
   8e748:	390b13e2 	strb	w2, [sp, #708]
   8e74c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e750:	17ffdf0c 	b	86380 <disasm+0x1c80>
		names="st1\0ld1\0";
   8e754:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e758:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e75c:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8e760:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8e764:	52852663 	mov	w3, #0x2933                	// #10547
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e768:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8e76c:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e770:	528006e2 	mov	w2, #0x37                  	// #55
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e774:	120000e1 	and	w1, w7, #0x1
   8e778:	12000098 	and	w24, w4, #0x1
   8e77c:	1200015b 	and	w27, w10, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e780:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e784:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e788:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e78c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e790:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e794:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e798:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i4; 
   8e79c:	b902c3e3 	str	w3, [sp, #704]
   8e7a0:	390b13e2 	strb	w2, [sp, #708]
   8e7a4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e7a8:	17ffdef6 	b	86380 <disasm+0x1c80>
		names="st1\0ld1\0";
   8e7ac:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e7b0:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e7b4:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8e7b8:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8e7bc:	52852683 	mov	w3, #0x2934                	// #10548
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e7c0:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8e7c4:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e7c8:	52800702 	mov	w2, #0x38                  	// #56
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e7cc:	120000e1 	and	w1, w7, #0x1
   8e7d0:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e7d4:	52800017 	mov	w23, #0x0                   	// #0
   8e7d8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e7dc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e7e0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e7e4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e7e8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e7ec:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e7f0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i8; 
   8e7f4:	b902c3e3 	str	w3, [sp, #704]
   8e7f8:	390b13e2 	strb	w2, [sp, #708]
   8e7fc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e800:	17ffdee0 	b	86380 <disasm+0x1c80>
		names="st3\0ld3\0";
   8e804:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e808:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e80c:	1200101a 	and	w26, w0, #0x1f
		names="st3\0ld3\0";
   8e810:	91330060 	add	x0, x3, #0xcc0
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i6; 
   8e814:	52852743 	mov	w3, #0x293a                	// #10554
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e818:	12000697 	and	w23, w20, #0x3
   8e81c:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i6; 
   8e820:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e824:	528007c2 	mov	w2, #0x3e                  	// #62
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e828:	120000e1 	and	w1, w7, #0x1
   8e82c:	12000098 	and	w24, w4, #0x1
   8e830:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e834:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e838:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e83c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e840:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e844:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e848:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i6; 
   8e84c:	b902c3e3 	str	w3, [sp, #704]
   8e850:	390b13e2 	strb	w2, [sp, #708]
   8e854:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e858:	17ffdeca 	b	86380 <disasm+0x1c80>
		names="st1\0ld1\0";
   8e85c:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e860:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e864:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8e868:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i2; 
   8e86c:	52852643 	mov	w3, #0x2932                	// #10546
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e870:	12000697 	and	w23, w20, #0x3
   8e874:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i2; 
   8e878:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e87c:	528006c2 	mov	w2, #0x36                  	// #54
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e880:	120000e1 	and	w1, w7, #0x1
   8e884:	12000098 	and	w24, w4, #0x1
   8e888:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e88c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e890:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e894:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e898:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e89c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e8a0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i2; 
   8e8a4:	b902c3e3 	str	w3, [sp, #704]
   8e8a8:	390b13e2 	strb	w2, [sp, #708]
   8e8ac:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e8b0:	17ffdeb4 	b	86380 <disasm+0x1c80>
		names="st3\0ld3\0";
   8e8b4:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e8b8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e8bc:	1200101a 	and	w26, w0, #0x1f
		names="st3\0ld3\0";
   8e8c0:	91330060 	add	x0, x3, #0xcc0
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i3; 
   8e8c4:	52852723 	mov	w3, #0x2939                	// #10553
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e8c8:	12000697 	and	w23, w20, #0x3
   8e8cc:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i3; 
   8e8d0:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e8d4:	528007a2 	mov	w2, #0x3d                  	// #61
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e8d8:	120000e1 	and	w1, w7, #0x1
   8e8dc:	12000098 	and	w24, w4, #0x1
   8e8e0:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e8e4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e8e8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e8ec:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e8f0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e8f4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e8f8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i3; 
   8e8fc:	b902c3e3 	str	w3, [sp, #704]
   8e900:	390b13e2 	strb	w2, [sp, #708]
   8e904:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e908:	17ffde9e 	b	86380 <disasm+0x1c80>
		names="st1\0ld1\0";
   8e90c:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
   8e910:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e914:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8e918:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i1; 
   8e91c:	52852623 	mov	w3, #0x2931                	// #10545
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e920:	12000697 	and	w23, w20, #0x3
   8e924:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i1; 
   8e928:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8e92c:	528006a2 	mov	w2, #0x35                  	// #53
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e930:	120000e1 	and	w1, w7, #0x1
   8e934:	12000098 	and	w24, w4, #0x1
   8e938:	1200015b 	and	w27, w10, #0x1
	uint16_t op=0, om=0, j=0;
   8e93c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8e940:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e944:	290fffff 	stp	wzr, wzr, [sp, #124]
   8e948:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e94c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e950:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_i1; 
   8e954:	b902c3e3 	str	w3, [sp, #704]
   8e958:	390b13e2 	strb	w2, [sp, #708]
   8e95c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e960:	17ffde88 	b	86380 <disasm+0x1c80>
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e964:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
   8e968:	d284c4a2 	mov	x2, #0x2625                	// #9765
   8e96c:	f2a504e2 	movk	x2, #0x2827, lsl #16
		names="ld4r\0";
   8e970:	b0000021 	adrp	x1, 93000 <sd_init+0xce8>
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
   8e974:	f2c54522 	movk	x2, #0x2a29, lsl #32
		names="ld4r\0";
   8e978:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e97c:	120010a3 	and	w3, w5, #0x1f
   8e980:	12000697 	and	w23, w20, #0x3
   8e984:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
   8e988:	f2e5a562 	movk	x2, #0x2d2b, lsl #48
		names="ld4r\0";
   8e98c:	9132e020 	add	x0, x1, #0xcb8
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e990:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e994:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e998:	52800014 	mov	w20, #0x0                   	// #0
   8e99c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8e9a0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e9a4:	290fffe3 	stp	w3, wzr, [sp, #124]
   8e9a8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8e9ac:	29127fff 	stp	wzr, wzr, [sp, #144]
   8e9b0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
   8e9b4:	f90163e2 	str	x2, [sp, #704]
   8e9b8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8e9bc:	17ffde71 	b	86380 <disasm+0x1c80>
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e9c0:	120010a3 	and	w3, w5, #0x1f
		names="ld2r\0";
   8e9c4:	b0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8e9c8:	913ea021 	add	x1, x1, #0xfa8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e9cc:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
   8e9d0:	5284c4a3 	mov	w3, #0x2625                	// #9765
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e9d4:	12000697 	and	w23, w20, #0x3
   8e9d8:	12001059 	and	w25, w2, #0x1f
   8e9dc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
   8e9e0:	5285a562 	mov	w2, #0x2d2b                	// #11563
		names="ld2r\0";
   8e9e4:	9132c020 	add	x0, x1, #0xcb0
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
   8e9e8:	72a54523 	movk	w3, #0x2a29, lsl #16
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8e9ec:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8e9f0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8e9f4:	52800014 	mov	w20, #0x0                   	// #0
   8e9f8:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8e9fc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ea00:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ea04:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ea08:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
   8ea0c:	b902c3e3 	str	w3, [sp, #704]
   8ea10:	79058be2 	strh	w2, [sp, #708]
   8ea14:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ea18:	17ffde5a 	b	86380 <disasm+0x1c80>
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ea1c:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_z4; 
   8ea20:	d284c4a2 	mov	x2, #0x2625                	// #9765
   8ea24:	f2a504e2 	movk	x2, #0x2827, lsl #16
		names="ld4r\0";
   8ea28:	b0000021 	adrp	x1, 93000 <sd_init+0xce8>
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_z4; 
   8ea2c:	f2c54522 	movk	x2, #0x2a29, lsl #32
		names="ld4r\0";
   8ea30:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ea34:	12000697 	and	w23, w20, #0x3
   8ea38:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_z4; 
   8ea3c:	f2e9c562 	movk	x2, #0x4e2b, lsl #48
		names="ld4r\0";
   8ea40:	9132e020 	add	x0, x1, #0xcb8
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ea44:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ea48:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ea4c:	52800014 	mov	w20, #0x0                   	// #0
   8ea50:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8ea54:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ea58:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ea5c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ea60:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ea64:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_z4; 
   8ea68:	f90163e2 	str	x2, [sp, #704]
   8ea6c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ea70:	17ffde44 	b	86380 <disasm+0x1c80>
		names="ld2r\0";
   8ea74:	b0000021 	adrp	x1, 93000 <sd_init+0xce8>
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_z2; 
   8ea78:	5284c4a3 	mov	w3, #0x2625                	// #9765
		names="ld2r\0";
   8ea7c:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ea80:	12000697 	and	w23, w20, #0x3
   8ea84:	12001059 	and	w25, w2, #0x1f
   8ea88:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_z2; 
   8ea8c:	72a54523 	movk	w3, #0x2a29, lsl #16
		names="ld2r\0";
   8ea90:	9132c020 	add	x0, x1, #0xcb0
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_z2; 
   8ea94:	5289a562 	mov	w2, #0x4d2b                	// #19755
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ea98:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ea9c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8eaa0:	52800014 	mov	w20, #0x0                   	// #0
   8eaa4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8eaa8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eaac:	290fffff 	stp	wzr, wzr, [sp, #124]
   8eab0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8eab4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8eab8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_z2; 
   8eabc:	b902c3e3 	str	w3, [sp, #704]
   8eac0:	79058be2 	strh	w2, [sp, #708]
   8eac4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8eac8:	17ffde2e 	b	86380 <disasm+0x1c80>
		names="ld3r\0";
   8eacc:	b0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8ead0:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ead4:	1200101a 	and	w26, w0, #0x1f
		names="ld3r\0";
   8ead8:	9132a020 	add	x0, x1, #0xca8
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8eadc:	5284c4a1 	mov	w1, #0x2625                	// #9765
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eae0:	120010a3 	and	w3, w5, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8eae4:	72a524e1 	movk	w1, #0x2927, lsl #16
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eae8:	12000697 	and	w23, w20, #0x3
   8eaec:	12001059 	and	w25, w2, #0x1f
   8eaf0:	12000098 	and	w24, w4, #0x1
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8eaf4:	528005a2 	mov	w2, #0x2d                  	// #45
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eaf8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8eafc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8eb00:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eb04:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8eb08:	52856543 	mov	w3, #0x2b2a                	// #11050
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eb0c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8eb10:	29127fff 	stp	wzr, wzr, [sp, #144]
   8eb14:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8eb18:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   8eb1c:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8eb20:	79058be3 	strh	w3, [sp, #708]
   8eb24:	390b1be2 	strb	w2, [sp, #710]
   8eb28:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8eb2c:	17ffde15 	b	86380 <disasm+0x1c80>
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eb30:	120010a3 	and	w3, w5, #0x1f
		names="ld1r\0";
   8eb34:	b0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8eb38:	913ea021 	add	x1, x1, #0xfa8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eb3c:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8eb40:	528524a3 	mov	w3, #0x2925                	// #10533
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eb44:	12000697 	and	w23, w20, #0x3
   8eb48:	12001059 	and	w25, w2, #0x1f
   8eb4c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8eb50:	528005a2 	mov	w2, #0x2d                  	// #45
		names="ld1r\0";
   8eb54:	91328020 	add	x0, x1, #0xca0
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8eb58:	72a56543 	movk	w3, #0x2b2a, lsl #16
		q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eb5c:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eb60:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8eb64:	52800014 	mov	w20, #0x0                   	// #0
   8eb68:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8eb6c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eb70:	29117fff 	stp	wzr, wzr, [sp, #136]
   8eb74:	29127fff 	stp	wzr, wzr, [sp, #144]
   8eb78:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8eb7c:	b902c3e3 	str	w3, [sp, #704]
   8eb80:	390b13e2 	strb	w2, [sp, #708]
   8eb84:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8eb88:	17ffddfe 	b	86380 <disasm+0x1c80>
		names="ld3r\0";
   8eb8c:	b0000021 	adrp	x1, 93000 <sd_init+0xce8>
   8eb90:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eb94:	1200101a 	and	w26, w0, #0x1f
		names="ld3r\0";
   8eb98:	9132a020 	add	x0, x1, #0xca8
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_z3; 
   8eb9c:	5284c4a1 	mov	w1, #0x2625                	// #9765
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eba0:	12000697 	and	w23, w20, #0x3
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_z3; 
   8eba4:	72a524e1 	movk	w1, #0x2927, lsl #16
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eba8:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_z3; 
   8ebac:	52856543 	mov	w3, #0x2b2a                	// #11050
   8ebb0:	52800982 	mov	w2, #0x4c                  	// #76
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ebb4:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ebb8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ebbc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ebc0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ebc4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ebc8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ebcc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ebd0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_z3; 
   8ebd4:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   8ebd8:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_z3; 
   8ebdc:	79058be3 	strh	w3, [sp, #708]
   8ebe0:	390b1be2 	strb	w2, [sp, #710]
   8ebe4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ebe8:	17ffdde6 	b	86380 <disasm+0x1c80>
		names="ld1r\0";
   8ebec:	b0000021 	adrp	x1, 93000 <sd_init+0xce8>
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_z; 
   8ebf0:	528524a3 	mov	w3, #0x2925                	// #10533
		names="ld1r\0";
   8ebf4:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ebf8:	12000697 	and	w23, w20, #0x3
   8ebfc:	12001059 	and	w25, w2, #0x1f
   8ec00:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_z; 
   8ec04:	72a56543 	movk	w3, #0x2b2a, lsl #16
		names="ld1r\0";
   8ec08:	91328020 	add	x0, x1, #0xca0
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_z; 
   8ec0c:	52800962 	mov	w2, #0x4b                  	// #75
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ec10:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ec14:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ec18:	52800014 	mov	w20, #0x0                   	// #0
   8ec1c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8ec20:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ec24:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ec28:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ec2c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ec30:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_z; 
   8ec34:	b902c3e3 	str	w3, [sp, #704]
   8ec38:	390b13e2 	strb	w2, [sp, #708]
   8ec3c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ec40:	17ffddd0 	b	86380 <disasm+0x1c80>
		names="st4\0ld4\0";
   8ec44:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ec48:	12001059 	and	w25, w2, #0x1f
		names="st4\0ld4\0";
   8ec4c:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ec50:	52852902 	mov	w2, #0x2948                	// #10568
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ec54:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ec58:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ec5c:	120000e1 	and	w1, w7, #0x1
   8ec60:	12000098 	and	w24, w4, #0x1
   8ec64:	1200015b 	and	w27, w10, #0x1
		names="st4\0ld4\0";
   8ec68:	91338060 	add	x0, x3, #0xce0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ec6c:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ec70:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ec74:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ec78:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ec7c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ec80:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ec84:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ec88:	b902c3e2 	str	w2, [sp, #704]
   8ec8c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ec90:	17ffddbc 	b	86380 <disasm+0x1c80>
		names="st4\0ld4\0";
   8ec94:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ec98:	12001059 	and	w25, w2, #0x1f
		names="st4\0ld4\0";
   8ec9c:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8eca0:	52852922 	mov	w2, #0x2949                	// #10569
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eca4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8eca8:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ecac:	120000e1 	and	w1, w7, #0x1
   8ecb0:	12000098 	and	w24, w4, #0x1
		names="st4\0ld4\0";
   8ecb4:	91338060 	add	x0, x3, #0xce0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ecb8:	52800017 	mov	w23, #0x0                   	// #0
   8ecbc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ecc0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ecc4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ecc8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8eccc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ecd0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ecd4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ecd8:	b902c3e2 	str	w2, [sp, #704]
   8ecdc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ece0:	17ffdda8 	b	86380 <disasm+0x1c80>
		names="st2\0ld2\0";
   8ece4:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ece8:	12001059 	and	w25, w2, #0x1f
		names="st2\0ld2\0";
   8ecec:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ecf0:	52852862 	mov	w2, #0x2943                	// #10563
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ecf4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ecf8:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ecfc:	120000e1 	and	w1, w7, #0x1
   8ed00:	12000098 	and	w24, w4, #0x1
   8ed04:	1200015b 	and	w27, w10, #0x1
		names="st2\0ld2\0";
   8ed08:	91334060 	add	x0, x3, #0xcd0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ed0c:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ed10:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ed14:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ed18:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ed1c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ed20:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ed24:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ed28:	b902c3e2 	str	w2, [sp, #704]
   8ed2c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ed30:	17ffdd94 	b	86380 <disasm+0x1c80>
		names="st2\0ld2\0";
   8ed34:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ed38:	12001059 	and	w25, w2, #0x1f
		names="st2\0ld2\0";
   8ed3c:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ed40:	52852882 	mov	w2, #0x2944                	// #10564
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ed44:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ed48:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ed4c:	120000e1 	and	w1, w7, #0x1
   8ed50:	12000098 	and	w24, w4, #0x1
		names="st2\0ld2\0";
   8ed54:	91334060 	add	x0, x3, #0xcd0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ed58:	52800017 	mov	w23, #0x0                   	// #0
   8ed5c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ed60:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ed64:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ed68:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ed6c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ed70:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ed74:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ed78:	b902c3e2 	str	w2, [sp, #704]
   8ed7c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ed80:	17ffdd80 	b	86380 <disasm+0x1c80>
		names="st4\0ld4\0";
   8ed84:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ed88:	12001059 	and	w25, w2, #0x1f
		names="st4\0ld4\0";
   8ed8c:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ed90:	528528e2 	mov	w2, #0x2947                	// #10567
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ed94:	12000697 	and	w23, w20, #0x3
   8ed98:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ed9c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eda0:	120000e1 	and	w1, w7, #0x1
   8eda4:	12000098 	and	w24, w4, #0x1
   8eda8:	1200015b 	and	w27, w10, #0x1
		names="st4\0ld4\0";
   8edac:	91338060 	add	x0, x3, #0xce0
	uint16_t op=0, om=0, j=0;
   8edb0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8edb4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8edb8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8edbc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8edc0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8edc4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8edc8:	b902c3e2 	str	w2, [sp, #704]
   8edcc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8edd0:	17ffdd6c 	b	86380 <disasm+0x1c80>
		names="st2\0ld2\0";
   8edd4:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8edd8:	12001059 	and	w25, w2, #0x1f
		names="st2\0ld2\0";
   8eddc:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ede0:	52852842 	mov	w2, #0x2942                	// #10562
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ede4:	12000697 	and	w23, w20, #0x3
   8ede8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8edec:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8edf0:	120000e1 	and	w1, w7, #0x1
   8edf4:	12000098 	and	w24, w4, #0x1
   8edf8:	1200015b 	and	w27, w10, #0x1
		names="st2\0ld2\0";
   8edfc:	91334060 	add	x0, x3, #0xcd0
	uint16_t op=0, om=0, j=0;
   8ee00:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ee04:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ee08:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ee0c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ee10:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ee14:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ee18:	b902c3e2 	str	w2, [sp, #704]
   8ee1c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ee20:	17ffdd58 	b	86380 <disasm+0x1c80>
		names="st4\0ld4\0";
   8ee24:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ee28:	12001059 	and	w25, w2, #0x1f
		names="st4\0ld4\0";
   8ee2c:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ee30:	528528c2 	mov	w2, #0x2946                	// #10566
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ee34:	12000697 	and	w23, w20, #0x3
   8ee38:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ee3c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ee40:	120000e1 	and	w1, w7, #0x1
   8ee44:	12000098 	and	w24, w4, #0x1
   8ee48:	1200015b 	and	w27, w10, #0x1
		names="st4\0ld4\0";
   8ee4c:	91338060 	add	x0, x3, #0xce0
	uint16_t op=0, om=0, j=0;
   8ee50:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ee54:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ee58:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ee5c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ee60:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ee64:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt4B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ee68:	b902c3e2 	str	w2, [sp, #704]
   8ee6c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ee70:	17ffdd44 	b	86380 <disasm+0x1c80>
		names="st2\0ld2\0";
   8ee74:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ee78:	12001059 	and	w25, w2, #0x1f
		names="st2\0ld2\0";
   8ee7c:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ee80:	52852822 	mov	w2, #0x2941                	// #10561
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ee84:	12000697 	and	w23, w20, #0x3
   8ee88:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ee8c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ee90:	120000e1 	and	w1, w7, #0x1
   8ee94:	12000098 	and	w24, w4, #0x1
   8ee98:	1200015b 	and	w27, w10, #0x1
		names="st2\0ld2\0";
   8ee9c:	91334060 	add	x0, x3, #0xcd0
	uint16_t op=0, om=0, j=0;
   8eea0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8eea4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eea8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8eeac:	29117fff 	stp	wzr, wzr, [sp, #136]
   8eeb0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8eeb4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8eeb8:	b902c3e2 	str	w2, [sp, #704]
   8eebc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8eec0:	17ffdd30 	b	86380 <disasm+0x1c80>
		names="st3\0ld3\0";
   8eec4:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eec8:	12001059 	and	w25, w2, #0x1f
		names="st3\0ld3\0";
   8eecc:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8eed0:	52852762 	mov	w2, #0x293b                	// #10555
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eed4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8eed8:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8eedc:	120000e1 	and	w1, w7, #0x1
   8eee0:	12000098 	and	w24, w4, #0x1
   8eee4:	1200015b 	and	w27, w10, #0x1
		names="st3\0ld3\0";
   8eee8:	91330060 	add	x0, x3, #0xcc0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eeec:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8eef0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8eef4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8eef8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8eefc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ef00:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ef04:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3S; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ef08:	b902c3e2 	str	w2, [sp, #704]
   8ef0c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ef10:	17ffdd1c 	b	86380 <disasm+0x1c80>
		names="st3\0ld3\0";
   8ef14:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ef18:	12001059 	and	w25, w2, #0x1f
		names="st3\0ld3\0";
   8ef1c:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ef20:	52852782 	mov	w2, #0x293c                	// #10556
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ef24:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ef28:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ef2c:	120000e1 	and	w1, w7, #0x1
   8ef30:	12000098 	and	w24, w4, #0x1
		names="st3\0ld3\0";
   8ef34:	91330060 	add	x0, x3, #0xcc0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ef38:	52800017 	mov	w23, #0x0                   	// #0
   8ef3c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ef40:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ef44:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ef48:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ef4c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ef50:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ef54:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3D; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ef58:	b902c3e2 	str	w2, [sp, #704]
   8ef5c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ef60:	17ffdd08 	b	86380 <disasm+0x1c80>
		names="st1\0ld1\0";
   8ef64:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ef68:	12001059 	and	w25, w2, #0x1f
		names="st1\0ld1\0";
   8ef6c:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ef70:	52852662 	mov	w2, #0x2933                	// #10547
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ef74:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8ef78:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ef7c:	120000e1 	and	w1, w7, #0x1
   8ef80:	12000098 	and	w24, w4, #0x1
   8ef84:	1200015b 	and	w27, w10, #0x1
		names="st1\0ld1\0";
   8ef88:	91318060 	add	x0, x3, #0xc60
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ef8c:	52800017 	mov	w23, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ef90:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ef94:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ef98:	290fffff 	stp	wzr, wzr, [sp, #124]
   8ef9c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8efa0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8efa4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtS; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8efa8:	b902c3e2 	str	w2, [sp, #704]
   8efac:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8efb0:	17ffdcf4 	b	86380 <disasm+0x1c80>
		names="st1\0ld1\0";
   8efb4:	b0000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8efb8:	12001059 	and	w25, w2, #0x1f
		names="st1\0ld1\0";
   8efbc:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8efc0:	52852682 	mov	w2, #0x2934                	// #10548
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8efc4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8efc8:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8efcc:	120000e1 	and	w1, w7, #0x1
   8efd0:	12000098 	and	w24, w4, #0x1
		names="st1\0ld1\0";
   8efd4:	91318060 	add	x0, x3, #0xc60
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8efd8:	52800017 	mov	w23, #0x0                   	// #0
   8efdc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8efe0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8efe4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8efe8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8efec:	29117fff 	stp	wzr, wzr, [sp, #136]
   8eff0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8eff4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtD; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8eff8:	b902c3e2 	str	w2, [sp, #704]
   8effc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f000:	17ffdce0 	b	86380 <disasm+0x1c80>
		names="st3\0ld3\0";
   8f004:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f008:	12001059 	and	w25, w2, #0x1f
		names="st3\0ld3\0";
   8f00c:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f010:	52852742 	mov	w2, #0x293a                	// #10554
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f014:	12000697 	and	w23, w20, #0x3
   8f018:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f01c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f020:	120000e1 	and	w1, w7, #0x1
   8f024:	12000098 	and	w24, w4, #0x1
   8f028:	1200015b 	and	w27, w10, #0x1
		names="st3\0ld3\0";
   8f02c:	91330060 	add	x0, x3, #0xcc0
	uint16_t op=0, om=0, j=0;
   8f030:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f034:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f038:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f03c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f040:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f044:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3H; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f048:	b902c3e2 	str	w2, [sp, #704]
   8f04c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f050:	17ffdccc 	b	86380 <disasm+0x1c80>
		names="st1\0ld1\0";
   8f054:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f058:	12001059 	and	w25, w2, #0x1f
		names="st1\0ld1\0";
   8f05c:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f060:	52852642 	mov	w2, #0x2932                	// #10546
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f064:	12000697 	and	w23, w20, #0x3
   8f068:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f06c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f070:	120000e1 	and	w1, w7, #0x1
   8f074:	12000098 	and	w24, w4, #0x1
   8f078:	1200015b 	and	w27, w10, #0x1
		names="st1\0ld1\0";
   8f07c:	91318060 	add	x0, x3, #0xc60
	uint16_t op=0, om=0, j=0;
   8f080:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f084:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f088:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f08c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f090:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f094:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtH; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f098:	b902c3e2 	str	w2, [sp, #704]
   8f09c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f0a0:	17ffdcb8 	b	86380 <disasm+0x1c80>
		names="st3\0ld3\0";
   8f0a4:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f0a8:	12001059 	and	w25, w2, #0x1f
		names="st3\0ld3\0";
   8f0ac:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f0b0:	52852722 	mov	w2, #0x2939                	// #10553
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f0b4:	12000697 	and	w23, w20, #0x3
   8f0b8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f0bc:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f0c0:	120000e1 	and	w1, w7, #0x1
   8f0c4:	12000098 	and	w24, w4, #0x1
   8f0c8:	1200015b 	and	w27, w10, #0x1
		names="st3\0ld3\0";
   8f0cc:	91330060 	add	x0, x3, #0xcc0
	uint16_t op=0, om=0, j=0;
   8f0d0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f0d4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f0d8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f0dc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f0e0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f0e4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt3B; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f0e8:	b902c3e2 	str	w2, [sp, #704]
   8f0ec:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f0f0:	17ffdca4 	b	86380 <disasm+0x1c80>
		names="st1\0ld1\0";
   8f0f4:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f0f8:	12001059 	and	w25, w2, #0x1f
		names="st1\0ld1\0";
   8f0fc:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f100:	52852622 	mov	w2, #0x2931                	// #10545
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f104:	12000697 	and	w23, w20, #0x3
   8f108:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f10c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); s=((ic32_12)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f110:	120000e1 	and	w1, w7, #0x1
   8f114:	12000098 	and	w24, w4, #0x1
   8f118:	1200015b 	and	w27, w10, #0x1
		names="st1\0ld1\0";
   8f11c:	91318060 	add	x0, x3, #0xc60
	uint16_t op=0, om=0, j=0;
   8f120:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f124:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f128:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f12c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f130:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f134:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtB; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f138:	b902c3e2 	str	w2, [sp, #704]
   8f13c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f140:	17ffdc90 	b	86380 <disasm+0x1c80>
		names="ld4r\0";
   8f144:	90000021 	adrp	x1, 93000 <sd_init+0xce8>
   8f148:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f14c:	1200101a 	and	w26, w0, #0x1f
		names="ld4r\0";
   8f150:	9132e020 	add	x0, x1, #0xcb8
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f154:	5284c4a1 	mov	w1, #0x2625                	// #9765
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f158:	12000697 	and	w23, w20, #0x3
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f15c:	72a504e1 	movk	w1, #0x2827, lsl #16
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f160:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f164:	52854523 	mov	w3, #0x2a29                	// #10793
   8f168:	52800562 	mov	w2, #0x2b                  	// #43
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f16c:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f170:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f174:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f178:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f17c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f180:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f184:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f188:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f18c:	b902c3e1 	str	w1, [sp, #704]
	uint16_t op=0, om=0, j=0;
   8f190:	52800001 	mov	w1, #0x0                   	// #0
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f194:	79058be3 	strh	w3, [sp, #708]
   8f198:	390b1be2 	strb	w2, [sp, #710]
   8f19c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f1a0:	17ffdc78 	b	86380 <disasm+0x1c80>
		names="ld2r\0";
   8f1a4:	90000021 	adrp	x1, 93000 <sd_init+0xce8>
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8f1a8:	5284c4a3 	mov	w3, #0x2625                	// #9765
		names="ld2r\0";
   8f1ac:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f1b0:	12000697 	and	w23, w20, #0x3
   8f1b4:	12001059 	and	w25, w2, #0x1f
   8f1b8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8f1bc:	72a54523 	movk	w3, #0x2a29, lsl #16
		names="ld2r\0";
   8f1c0:	9132c020 	add	x0, x1, #0xcb0
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8f1c4:	52800562 	mov	w2, #0x2b                  	// #43
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f1c8:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f1cc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f1d0:	52800014 	mov	w20, #0x0                   	// #0
   8f1d4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8f1d8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f1dc:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f1e0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f1e4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f1e8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8f1ec:	b902c3e3 	str	w3, [sp, #704]
   8f1f0:	390b13e2 	strb	w2, [sp, #708]
   8f1f4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f1f8:	17ffdc62 	b	86380 <disasm+0x1c80>
		names="ld3r\0";
   8f1fc:	90000021 	adrp	x1, 93000 <sd_init+0xce8>
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8f200:	5284c4a3 	mov	w3, #0x2625                	// #9765
		names="ld3r\0";
   8f204:	913ea021 	add	x1, x1, #0xfa8
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f208:	12000697 	and	w23, w20, #0x3
   8f20c:	12001059 	and	w25, w2, #0x1f
   8f210:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8f214:	72a524e3 	movk	w3, #0x2927, lsl #16
		names="ld3r\0";
   8f218:	9132a020 	add	x0, x1, #0xca8
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8f21c:	52856542 	mov	w2, #0x2b2a                	// #11050
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f220:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f224:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f228:	52800014 	mov	w20, #0x0                   	// #0
   8f22c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8f230:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f234:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f238:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f23c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f240:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8f244:	b902c3e3 	str	w3, [sp, #704]
   8f248:	79058be2 	strh	w2, [sp, #708]
   8f24c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f250:	17ffdc4c 	b	86380 <disasm+0x1c80>
		names="ld1r\0";
   8f254:	90000021 	adrp	x1, 93000 <sd_init+0xce8>
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f258:	12001059 	and	w25, w2, #0x1f
		names="ld1r\0";
   8f25c:	913ea021 	add	x1, x1, #0xfa8
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f260:	528524a2 	mov	w2, #0x2925                	// #10533
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f264:	12000697 	and	w23, w20, #0x3
   8f268:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f26c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		names="ld1r\0";
   8f270:	91328020 	add	x0, x1, #0xca0
		q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f274:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f278:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f27c:	52800014 	mov	w20, #0x0                   	// #0
   8f280:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   8f284:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f288:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f28c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f290:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f294:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f298:	b902c3e2 	str	w2, [sp, #704]
   8f29c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f2a0:	17ffdc38 	b	86380 <disasm+0x1c80>
		names="st2\0st1\0ld2\0ld1\0";
   8f2a4:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8f2a8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f2ac:	121f0181 	and	w1, w12, #0x2
   8f2b0:	1200016b 	and	w11, w11, #0x1
   8f2b4:	1200101a 	and	w26, w0, #0x1f
		names="st2\0st1\0ld2\0ld1\0";
   8f2b8:	91322060 	add	x0, x3, #0xc88
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
   8f2bc:	5284c4a3 	mov	w3, #0x2625                	// #9765
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f2c0:	12000098 	and	w24, w4, #0x1
   8f2c4:	12000697 	and	w23, w20, #0x3
   8f2c8:	120010a4 	and	w4, w5, #0x1f
   8f2cc:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
   8f2d0:	72a54523 	movk	w3, #0x2a29, lsl #16
   8f2d4:	5285a562 	mov	w2, #0x2d2b                	// #11563
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f2d8:	2a0b0021 	orr	w1, w1, w11
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f2dc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f2e0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f2e4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f2e8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8f2ec:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f2f0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f2f4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Xm; 
   8f2f8:	b902c3e3 	str	w3, [sp, #704]
   8f2fc:	79058be2 	strh	w2, [sp, #708]
   8f300:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f304:	17ffdc1f 	b	86380 <disasm+0x1c80>
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f308:	12000098 	and	w24, w4, #0x1
   8f30c:	120010a4 	and	w4, w5, #0x1f
   8f310:	121f0181 	and	w1, w12, #0x2
   8f314:	1200016b 	and	w11, w11, #0x1
		names="st3\0st1\0ld3\0ld1\0";
   8f318:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8f31c:	913ea063 	add	x3, x3, #0xfa8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f320:	290fffe4 	stp	w4, wzr, [sp, #124]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8f324:	5284c4a4 	mov	w4, #0x2625                	// #9765
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f328:	12000697 	and	w23, w20, #0x3
   8f32c:	12001059 	and	w25, w2, #0x1f
   8f330:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8f334:	528005a2 	mov	w2, #0x2d                  	// #45
		names="st3\0st1\0ld3\0ld1\0";
   8f338:	9131c060 	add	x0, x3, #0xc70
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8f33c:	72a524e4 	movk	w4, #0x2927, lsl #16
   8f340:	52856543 	mov	w3, #0x2b2a                	// #11050
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f344:	2a0b0021 	orr	w1, w1, w11
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f348:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f34c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f350:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f354:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f358:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f35c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Xm; 
   8f360:	b902c3e4 	str	w4, [sp, #704]
   8f364:	79058be3 	strh	w3, [sp, #708]
   8f368:	390b1be2 	strb	w2, [sp, #710]
   8f36c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f370:	17ffdc04 	b	86380 <disasm+0x1c80>
		names="st1\0ld1\0";
   8f374:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8f378:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f37c:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8f380:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8f384:	528524a3 	mov	w3, #0x2925                	// #10533
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f388:	12000098 	and	w24, w4, #0x1
   8f38c:	12000697 	and	w23, w20, #0x3
   8f390:	120010a4 	and	w4, w5, #0x1f
   8f394:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8f398:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8f39c:	528005a2 	mov	w2, #0x2d                  	// #45
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f3a0:	120000e1 	and	w1, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f3a4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f3a8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f3ac:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f3b0:	290fffe4 	stp	w4, wzr, [sp, #124]
   8f3b4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f3b8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f3bc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Xm; 
   8f3c0:	b902c3e3 	str	w3, [sp, #704]
   8f3c4:	390b13e2 	strb	w2, [sp, #708]
   8f3c8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f3cc:	17ffdbed 	b	86380 <disasm+0x1c80>
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f3d0:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
   8f3d4:	d284c4a2 	mov	x2, #0x2625                	// #9765
   8f3d8:	f2a504e2 	movk	x2, #0x2827, lsl #16
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f3dc:	121f0181 	and	w1, w12, #0x2
   8f3e0:	1200016b 	and	w11, w11, #0x1
		names="st4\0st1\0ld4\0ld1\0";
   8f3e4:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
   8f3e8:	f2c54522 	movk	x2, #0x2a29, lsl #32
		names="st4\0st1\0ld4\0ld1\0";
   8f3ec:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f3f0:	12000098 	and	w24, w4, #0x1
   8f3f4:	12000697 	and	w23, w20, #0x3
   8f3f8:	120010a4 	and	w4, w5, #0x1f
   8f3fc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
   8f400:	f2e5a562 	movk	x2, #0x2d2b, lsl #48
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); m=((ic32_16)&0x1f); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f404:	2a0b0021 	orr	w1, w1, w11
		names="st4\0st1\0ld4\0ld1\0";
   8f408:	91312060 	add	x0, x3, #0xc48
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f40c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f410:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f414:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f418:	290fffe4 	stp	w4, wzr, [sp, #124]
   8f41c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f420:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f424:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Xm; 
   8f428:	f90163e2 	str	x2, [sp, #704]
   8f42c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f430:	17ffdbd4 	b	86380 <disasm+0x1c80>
		names="st2\0st1\0ld2\0ld1\0";
   8f434:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8f438:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f43c:	121f0181 	and	w1, w12, #0x2
   8f440:	1200016b 	and	w11, w11, #0x1
   8f444:	1200101a 	and	w26, w0, #0x1f
		names="st2\0st1\0ld2\0ld1\0";
   8f448:	91322060 	add	x0, x3, #0xc88
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Qi2; 
   8f44c:	5284c4a3 	mov	w3, #0x2625                	// #9765
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f450:	12000697 	and	w23, w20, #0x3
   8f454:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Qi2; 
   8f458:	72a54523 	movk	w3, #0x2a29, lsl #16
   8f45c:	5285e562 	mov	w2, #0x2f2b                	// #12075
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f460:	2a0b0021 	orr	w1, w1, w11
   8f464:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f468:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f46c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f470:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f474:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f478:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f47c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f480:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; args[5]=disasm_arg_Qi2; 
   8f484:	b902c3e3 	str	w3, [sp, #704]
   8f488:	79058be2 	strh	w2, [sp, #708]
   8f48c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f490:	17ffdbbc 	b	86380 <disasm+0x1c80>
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f494:	121f0181 	and	w1, w12, #0x2
   8f498:	1200016b 	and	w11, w11, #0x1
		names="st3\0st1\0ld3\0ld1\0";
   8f49c:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f4a0:	12000098 	and	w24, w4, #0x1
		names="st3\0st1\0ld3\0ld1\0";
   8f4a4:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Qi3; 
   8f4a8:	5284c4a4 	mov	w4, #0x2625                	// #9765
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f4ac:	12000697 	and	w23, w20, #0x3
   8f4b0:	12001059 	and	w25, w2, #0x1f
   8f4b4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Qi3; 
   8f4b8:	72a524e4 	movk	w4, #0x2927, lsl #16
		names="st3\0st1\0ld3\0ld1\0";
   8f4bc:	9131c060 	add	x0, x3, #0xc70
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Qi3; 
   8f4c0:	528005c2 	mov	w2, #0x2e                  	// #46
   8f4c4:	52856543 	mov	w3, #0x2b2a                	// #11050
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f4c8:	2a0b0021 	orr	w1, w1, w11
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f4cc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f4d0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f4d4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f4d8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f4dc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f4e0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f4e4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; args[6]=disasm_arg_Qi3; 
   8f4e8:	b902c3e4 	str	w4, [sp, #704]
   8f4ec:	79058be3 	strh	w3, [sp, #708]
   8f4f0:	390b1be2 	strb	w2, [sp, #710]
   8f4f4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f4f8:	17ffdba2 	b	86380 <disasm+0x1c80>
		names="st1\0ld1\0";
   8f4fc:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8f500:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f504:	1200101a 	and	w26, w0, #0x1f
		names="st1\0ld1\0";
   8f508:	91318060 	add	x0, x3, #0xc60
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Qi1; 
   8f50c:	528524a3 	mov	w3, #0x2925                	// #10533
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f510:	12000697 	and	w23, w20, #0x3
   8f514:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Qi1; 
   8f518:	72a56543 	movk	w3, #0x2b2a, lsl #16
   8f51c:	52800602 	mov	w2, #0x30                  	// #48
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f520:	120000e1 	and	w1, w7, #0x1
   8f524:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f528:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f52c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f530:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f534:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f538:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f53c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f540:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; args[4]=disasm_arg_Qi1; 
   8f544:	b902c3e3 	str	w3, [sp, #704]
   8f548:	390b13e2 	strb	w2, [sp, #708]
   8f54c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f550:	17ffdb8c 	b	86380 <disasm+0x1c80>
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f554:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Qi; 
   8f558:	d284c4a2 	mov	x2, #0x2625                	// #9765
   8f55c:	f2a504e2 	movk	x2, #0x2827, lsl #16
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f560:	121f0181 	and	w1, w12, #0x2
   8f564:	1200016b 	and	w11, w11, #0x1
		names="st4\0st1\0ld4\0ld1\0";
   8f568:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Qi; 
   8f56c:	f2c54522 	movk	x2, #0x2a29, lsl #32
		names="st4\0st1\0ld4\0ld1\0";
   8f570:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f574:	12000697 	and	w23, w20, #0x3
   8f578:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Qi; 
   8f57c:	f2e58562 	movk	x2, #0x2c2b, lsl #48
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f580:	2a0b0021 	orr	w1, w1, w11
   8f584:	12000098 	and	w24, w4, #0x1
		names="st4\0st1\0ld4\0ld1\0";
   8f588:	91312060 	add	x0, x3, #0xc48
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f58c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f590:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f594:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f598:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f59c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f5a0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f5a4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; args[7]=disasm_arg_Qi; 
   8f5a8:	f90163e2 	str	x2, [sp, #704]
   8f5ac:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f5b0:	17ffdb74 	b	86380 <disasm+0x1c80>
		names="st2\0st1\0ld2\0ld1\0";
   8f5b4:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8f5b8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f5bc:	121f0181 	and	w1, w12, #0x2
   8f5c0:	1200016b 	and	w11, w11, #0x1
   8f5c4:	1200101a 	and	w26, w0, #0x1f
		names="st2\0st1\0ld2\0ld1\0";
   8f5c8:	91322060 	add	x0, x3, #0xc88
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8f5cc:	5284c4a3 	mov	w3, #0x2625                	// #9765
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f5d0:	12000697 	and	w23, w20, #0x3
   8f5d4:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8f5d8:	72a54523 	movk	w3, #0x2a29, lsl #16
   8f5dc:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f5e0:	2a0b0021 	orr	w1, w1, w11
   8f5e4:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f5e8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f5ec:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f5f0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f5f4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f5f8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f5fc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f600:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   8f604:	b902c3e3 	str	w3, [sp, #704]
   8f608:	390b13e2 	strb	w2, [sp, #708]
   8f60c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f610:	17ffdb5c 	b	86380 <disasm+0x1c80>
		names="st3\0st1\0ld3\0ld1\0";
   8f614:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8f618:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f61c:	121f0181 	and	w1, w12, #0x2
   8f620:	1200016b 	and	w11, w11, #0x1
   8f624:	1200101a 	and	w26, w0, #0x1f
		names="st3\0st1\0ld3\0ld1\0";
   8f628:	9131c060 	add	x0, x3, #0xc70
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8f62c:	5284c4a3 	mov	w3, #0x2625                	// #9765
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f630:	12000697 	and	w23, w20, #0x3
   8f634:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8f638:	72a524e3 	movk	w3, #0x2927, lsl #16
   8f63c:	52856542 	mov	w2, #0x2b2a                	// #11050
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f640:	2a0b0021 	orr	w1, w1, w11
   8f644:	12000098 	and	w24, w4, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f648:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f64c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f650:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f654:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f658:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f65c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f660:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_offs; args[4]=disasm_arg_XnS; args[5]=disasm_arg_offe; 
   8f664:	b902c3e3 	str	w3, [sp, #704]
   8f668:	79058be2 	strh	w2, [sp, #708]
   8f66c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f670:	17ffdb44 	b	86380 <disasm+0x1c80>
		names="st1\0ld1\0";
   8f674:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f678:	12001059 	and	w25, w2, #0x1f
		names="st1\0ld1\0";
   8f67c:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f680:	528524a2 	mov	w2, #0x2925                	// #10533
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f684:	12000697 	and	w23, w20, #0x3
   8f688:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f68c:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_22)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f690:	120000e1 	and	w1, w7, #0x1
   8f694:	12000098 	and	w24, w4, #0x1
		names="st1\0ld1\0";
   8f698:	91318060 	add	x0, x3, #0xc60
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f69c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f6a0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f6a4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f6a8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f6ac:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f6b0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f6b4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f6b8:	b902c3e2 	str	w2, [sp, #704]
   8f6bc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f6c0:	17ffdb30 	b	86380 <disasm+0x1c80>
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f6c4:	121f0181 	and	w1, w12, #0x2
   8f6c8:	1200016b 	and	w11, w11, #0x1
		names="st4\0st1\0ld4\0ld1\0";
   8f6cc:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f6d0:	12000098 	and	w24, w4, #0x1
		names="st4\0st1\0ld4\0ld1\0";
   8f6d4:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f6d8:	5284c4a4 	mov	w4, #0x2625                	// #9765
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f6dc:	12000697 	and	w23, w20, #0x3
   8f6e0:	12001059 	and	w25, w2, #0x1f
   8f6e4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f6e8:	72a504e4 	movk	w4, #0x2827, lsl #16
		names="st4\0st1\0ld4\0ld1\0";
   8f6ec:	91312060 	add	x0, x3, #0xc48
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f6f0:	52800562 	mov	w2, #0x2b                  	// #43
   8f6f4:	52854523 	mov	w3, #0x2a29                	// #10793
		op=((ic32_21)&0x2)|((ic32_13)&0x1); q=((ic32_30)&0x1); z=((ic32_10)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f6f8:	2a0b0021 	orr	w1, w1, w11
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f6fc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f700:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f704:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f708:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f70c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f710:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f714:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_Vt2T; args[2]=disasm_arg_Vt3T; args[3]=disasm_arg_Vt4T; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f718:	b902c3e4 	str	w4, [sp, #704]
   8f71c:	79058be3 	strh	w3, [sp, #708]
   8f720:	390b1be2 	strb	w2, [sp, #710]
   8f724:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f728:	17ffdb16 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_15)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f72c:	121d0021 	and	w1, w1, #0x8
   8f730:	121f058c 	and	w12, w12, #0x6
   8f734:	2a0c0021 	orr	w1, w1, w12
   8f738:	120000c6 	and	w6, w6, #0x1
		names="?\0?\0ldxrb\0ldaxrb\0stllrb\0stlrb\0ldlarb\0ldarb\0?\0?\0ldxrh\0ldaxrh\0stllrh\0stlrh\0ldlarh\0ldarh\0";
   8f73c:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_15)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f740:	12001059 	and	w25, w2, #0x1f
		names="?\0?\0ldxrb\0ldaxrb\0stllrb\0stlrb\0ldlarb\0ldarb\0?\0?\0ldxrh\0ldaxrh\0stllrh\0stlrh\0ldlarh\0ldarh\0";
   8f744:	913ea063 	add	x3, x3, #0xfa8
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f748:	52852a62 	mov	w2, #0x2953                	// #10579
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_15)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f74c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f750:	72a56542 	movk	w2, #0x2b2a, lsl #16
		op=((ic32_27)&0x8)|((ic32_21)&0x6)|((ic32_15)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f754:	2a060021 	orr	w1, w1, w6
		names="?\0?\0ldxrb\0ldaxrb\0stllrb\0stlrb\0ldlarb\0ldarb\0?\0?\0ldxrh\0ldaxrh\0stllrh\0stlrh\0ldlarh\0ldarh\0";
   8f758:	912fc060 	add	x0, x3, #0xbf0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f75c:	52800017 	mov	w23, #0x0                   	// #0
   8f760:	52800018 	mov	w24, #0x0                   	// #0
   8f764:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f768:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f76c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f770:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f774:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f778:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f77c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wt; args[1]=disasm_arg_offs; args[2]=disasm_arg_XnS; args[3]=disasm_arg_offe; 
   8f780:	b902c3e2 	str	w2, [sp, #704]
   8f784:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f788:	17ffdafe 	b	86380 <disasm+0x1c80>
		op=((ic32_21)&0x2)|((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f78c:	1200009b 	and	w27, w4, #0x1
   8f790:	120010a4 	and	w4, w5, #0x1f
   8f794:	121f0181 	and	w1, w12, #0x2
   8f798:	120000c6 	and	w6, w6, #0x1
		names="casp\0caspl\0caspa\0caspal\0";
   8f79c:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8f7a0:	913ea063 	add	x3, x3, #0xfa8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f7a4:	29117fe4 	stp	w4, wzr, [sp, #136]
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rd1; args[2]=disasm_arg_Rt; args[3]=disasm_arg_Rt1; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f7a8:	528a09e4 	mov	w4, #0x504f                	// #20559
		op=((ic32_21)&0x2)|((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f7ac:	12001059 	and	w25, w2, #0x1f
   8f7b0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rd1; args[2]=disasm_arg_Rt; args[3]=disasm_arg_Rt1; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f7b4:	52800562 	mov	w2, #0x2b                  	// #43
		names="casp\0caspl\0caspa\0caspal\0";
   8f7b8:	912f4060 	add	x0, x3, #0xbd0
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rd1; args[2]=disasm_arg_Rt; args[3]=disasm_arg_Rt1; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f7bc:	72aa2164 	movk	w4, #0x510b, lsl #16
   8f7c0:	52854523 	mov	w3, #0x2a29                	// #10793
		op=((ic32_21)&0x2)|((ic32_15)&0x1); s=((ic32_30)&0x1); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f7c4:	2a060021 	orr	w1, w1, w6
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f7c8:	52800017 	mov	w23, #0x0                   	// #0
   8f7cc:	52800018 	mov	w24, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8f7d0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8f7d4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f7d8:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f7dc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f7e0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Rd; args[1]=disasm_arg_Rd1; args[2]=disasm_arg_Rt; args[3]=disasm_arg_Rt1; args[4]=disasm_arg_offs; args[5]=disasm_arg_XnS; args[6]=disasm_arg_offe; 
   8f7e4:	b902c3e4 	str	w4, [sp, #704]
   8f7e8:	79058be3 	strh	w3, [sp, #708]
   8f7ec:	390b1be2 	strb	w2, [sp, #710]
   8f7f0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f7f4:	17ffdae3 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f7f8:	121e0021 	and	w1, w1, #0x4
   8f7fc:	12000631 	and	w17, w17, #0x3
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
   8f800:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8f804:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f808:	120010a4 	and	w4, w5, #0x1f
   8f80c:	12001059 	and	w25, w2, #0x1f
   8f810:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_VmTs2; 
   8f814:	12800c42 	mov	w2, #0xffffff9d            	// #-99
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
   8f818:	912b6060 	add	x0, x3, #0xad8
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f81c:	2a110021 	orr	w1, w1, w17
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_VmTs2; 
   8f820:	528f2a83 	mov	w3, #0x7954                	// #31060
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f824:	120001b4 	and	w20, w13, #0x1
		z=1;
   8f828:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f82c:	52800018 	mov	w24, #0x0                   	// #0
   8f830:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f834:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f838:	290fffe4 	stp	w4, wzr, [sp, #124]
   8f83c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f840:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f844:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_VmTs2; 
   8f848:	790583e3 	strh	w3, [sp, #704]
   8f84c:	390b0be2 	strb	w2, [sp, #706]
   8f850:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f854:	17ffdacb 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f858:	121e0021 	and	w1, w1, #0x4
   8f85c:	12000631 	and	w17, w17, #0x3
   8f860:	121f0294 	and	w20, w20, #0x2
   8f864:	1200018c 	and	w12, w12, #0x1
		names="fmla\0fmls\0fmul\0sqrdmulh\0?\0?\0fmulx\0sqrdmlah\0";
   8f868:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8f86c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f870:	120010a4 	and	w4, w5, #0x1f
   8f874:	12001059 	and	w25, w2, #0x1f
   8f878:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_VmTs2; 
   8f87c:	12800c42 	mov	w2, #0xffffff9d            	// #-99
		names="fmla\0fmls\0fmul\0sqrdmulh\0?\0?\0fmulx\0sqrdmlah\0";
   8f880:	912e8060 	add	x0, x3, #0xba0
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f884:	2a110021 	orr	w1, w1, w17
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_VmTs2; 
   8f888:	528f2a83 	mov	w3, #0x7954                	// #31060
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f88c:	2a0c0294 	orr	w20, w20, w12
		z=0;
   8f890:	52800017 	mov	w23, #0x0                   	// #0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f894:	52800018 	mov	w24, #0x0                   	// #0
   8f898:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f89c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f8a0:	290fffe4 	stp	w4, wzr, [sp, #124]
   8f8a4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f8a8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f8ac:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_VmTs2; 
   8f8b0:	790583e3 	strh	w3, [sp, #704]
   8f8b4:	390b0be2 	strb	w2, [sp, #706]
   8f8b8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f8bc:	17ffdab1 	b	86380 <disasm+0x1c80>
		names="fcvtzs\0fcvtzu\0";
   8f8c0:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8f8c4:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f8c8:	120002a1 	and	w1, w21, #0x1
   8f8cc:	12001059 	and	w25, w2, #0x1f
   8f8d0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shrshift; 
   8f8d4:	12800da2 	mov	w2, #0xffffff92            	// #-110
		names="fcvtzs\0fcvtzu\0";
   8f8d8:	912e4060 	add	x0, x3, #0xb90
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f8dc:	120018b4 	and	w20, w5, #0x7f
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shrshift; 
   8f8e0:	128cd1a3 	mov	w3, #0xffff9972            	// #-26254
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f8e4:	52800017 	mov	w23, #0x0                   	// #0
   8f8e8:	52800018 	mov	w24, #0x0                   	// #0
   8f8ec:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f8f0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f8f4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f8f8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f8fc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f900:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shrshift; 
   8f904:	790583e3 	strh	w3, [sp, #704]
   8f908:	390b0be2 	strb	w2, [sp, #706]
   8f90c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f910:	17ffda9c 	b	86380 <disasm+0x1c80>
		names="scvtf\0ucvtf\0";
   8f914:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8f918:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f91c:	120002a1 	and	w1, w21, #0x1
   8f920:	12001059 	and	w25, w2, #0x1f
   8f924:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPjt2; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shrshift; 
   8f928:	12800da2 	mov	w2, #0xffffff92            	// #-110
		names="scvtf\0ucvtf\0";
   8f92c:	912e0060 	add	x0, x3, #0xb80
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f930:	120018b4 	and	w20, w5, #0x7f
		args[0]=disasm_arg_FPjt2; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shrshift; 
   8f934:	128ccce3 	mov	w3, #0xffff9998            	// #-26216
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f938:	52800017 	mov	w23, #0x0                   	// #0
   8f93c:	52800018 	mov	w24, #0x0                   	// #0
   8f940:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f944:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f948:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f94c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f950:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f954:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPjt2; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shrshift; 
   8f958:	790583e3 	strh	w3, [sp, #704]
   8f95c:	390b0be2 	strb	w2, [sp, #706]
   8f960:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f964:	17ffda87 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f968:	121e0021 	and	w1, w1, #0x4
   8f96c:	120005ad 	and	w13, w13, #0x3
		names="?\0?\0sqshrn\0sqrshrn\0sqshrun\0sqrshrun\0uqshrn\0uqrshrn\0";
   8f970:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8f974:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f978:	12001059 	and	w25, w2, #0x1f
   8f97c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_FPnj; args[2]=disasm_arg_shrshift; 
   8f980:	12800da2 	mov	w2, #0xffffff92            	// #-110
		names="?\0?\0sqshrn\0sqrshrn\0sqshrun\0sqrshrun\0uqshrn\0uqrshrn\0";
   8f984:	912d2060 	add	x0, x3, #0xb48
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f988:	2a0d0021 	orr	w1, w1, w13
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_FPnj; args[2]=disasm_arg_shrshift; 
   8f98c:	128d31a3 	mov	w3, #0xffff9672            	// #-27022
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f990:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f994:	52800017 	mov	w23, #0x0                   	// #0
   8f998:	52800018 	mov	w24, #0x0                   	// #0
   8f99c:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8f9a0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f9a4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8f9a8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8f9ac:	29127fff 	stp	wzr, wzr, [sp, #144]
   8f9b0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPjt; args[1]=disasm_arg_FPnj; args[2]=disasm_arg_shrshift; 
   8f9b4:	790583e3 	strh	w3, [sp, #704]
   8f9b8:	390b0be2 	strb	w2, [sp, #706]
   8f9bc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8f9c0:	17ffda70 	b	86380 <disasm+0x1c80>
		op=((ic32_26)&0x8)|((ic32_12)&0x7); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f9c4:	531a7c01 	lsr	w1, w0, #26
   8f9c8:	1200094a 	and	w10, w10, #0x7
   8f9cc:	121d0021 	and	w1, w1, #0x8
		names="sshr\0ssra\0srshr\0srsra\0?\0shl\0?\0sqshl\0ushr\0usra\0urshr\0ursra\0sri\0sli\0sqshlu\0uqshl\0";
   8f9d0:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8f9d4:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_26)&0x8)|((ic32_12)&0x7); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f9d8:	12001059 	and	w25, w2, #0x1f
   8f9dc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shrshift; 
   8f9e0:	12800da2 	mov	w2, #0xffffff92            	// #-110
		names="sshr\0ssra\0srshr\0srsra\0?\0shl\0?\0sqshl\0ushr\0usra\0urshr\0ursra\0sri\0sli\0sqshlu\0uqshl\0";
   8f9e4:	912be060 	add	x0, x3, #0xaf8
		op=((ic32_26)&0x8)|((ic32_12)&0x7); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f9e8:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shrshift; 
   8f9ec:	128dcde3 	mov	w3, #0xffff9190            	// #-28272
		op=((ic32_26)&0x8)|((ic32_12)&0x7); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8f9f0:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8f9f4:	52800017 	mov	w23, #0x0                   	// #0
   8f9f8:	52800018 	mov	w24, #0x0                   	// #0
   8f9fc:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8fa00:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fa04:	290fffff 	stp	wzr, wzr, [sp, #124]
   8fa08:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fa0c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fa10:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shrshift; 
   8fa14:	790583e3 	strh	w3, [sp, #704]
   8fa18:	390b0be2 	strb	w2, [sp, #706]
   8fa1c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fa20:	17ffda58 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fa24:	121e0021 	and	w1, w1, #0x4
   8fa28:	12000631 	and	w17, w17, #0x3
   8fa2c:	121e01ef 	and	w15, w15, #0x4
   8fa30:	12000508 	and	w8, w8, #0x3
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
   8fa34:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8fa38:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fa3c:	12000ca4 	and	w4, w5, #0xf
   8fa40:	12001059 	and	w25, w2, #0x1f
   8fa44:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_VmHs; 
   8fa48:	12800c62 	mov	w2, #0xffffff9c            	// #-100
		names="fmla\0fmls\0fmul\0?\0?\0?\0fmulx\0";
   8fa4c:	912b6060 	add	x0, x3, #0xad8
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fa50:	2a110021 	orr	w1, w1, w17
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_VmHs; 
   8fa54:	528eeec3 	mov	w3, #0x7776                	// #30582
		op=((ic32_27)&0x4)|((ic32_14)&0x3); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fa58:	2a0801f4 	orr	w20, w15, w8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fa5c:	52800017 	mov	w23, #0x0                   	// #0
   8fa60:	52800018 	mov	w24, #0x0                   	// #0
   8fa64:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8fa68:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fa6c:	290fffe4 	stp	w4, wzr, [sp, #124]
   8fa70:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fa74:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fa78:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_VmHs; 
   8fa7c:	790583e3 	strh	w3, [sp, #704]
   8fa80:	390b0be2 	strb	w2, [sp, #706]
   8fa84:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fa88:	17ffda3e 	b	86380 <disasm+0x1c80>
		op=((ic32_24)&0x20)|((ic32_11)&0x1f); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fa8c:	121b02d6 	and	w22, w22, #0x20
   8fa90:	120011ad 	and	w13, w13, #0x1f
		names="?\0sqadd\0?\0?\0?\0sqsub\0cmgt\0cmge\0sshl\0sqshl\0srshl\0sqrshl\0?\0?\0?\0?\0add\0cmtst\0?\0?\0?\0?\0sqdmulh\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0uqadd\0?\0?\0?\0uqsub\0cmhi\0cmhs\0ushl\0uqshl\0urshl\0uqrshl\0?\0?\0?\0?\0sub\0cmeq\0?\0?\0?\0?\0sqrdmulh\0";
   8fa94:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8fa98:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_24)&0x20)|((ic32_11)&0x1f); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fa9c:	2a0d02c1 	orr	w1, w22, w13
   8faa0:	120010a4 	and	w4, w5, #0x1f
   8faa4:	12001059 	and	w25, w2, #0x1f
   8faa8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_FPz3m; 
   8faac:	12800e02 	mov	w2, #0xffffff8f            	// #-113
		names="?\0sqadd\0?\0?\0?\0sqsub\0cmgt\0cmge\0sshl\0sqshl\0srshl\0sqrshl\0?\0?\0?\0?\0add\0cmtst\0?\0?\0?\0?\0sqdmulh\0?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0uqadd\0?\0?\0?\0uqsub\0cmhi\0cmhs\0ushl\0uqshl\0urshl\0uqrshl\0?\0?\0?\0?\0sub\0cmeq\0?\0?\0?\0?\0sqrdmulh\0";
   8fab0:	91284060 	add	x0, x3, #0xa10
		op=((ic32_24)&0x20)|((ic32_11)&0x1f); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fab4:	120004f7 	and	w23, w7, #0x3
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_FPz3m; 
   8fab8:	128f0f23 	mov	w3, #0xffff8786            	// #-30842
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fabc:	52800018 	mov	w24, #0x0                   	// #0
   8fac0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fac4:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8fac8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8facc:	290fffe4 	stp	w4, wzr, [sp, #124]
   8fad0:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fad4:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fad8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_FPz3m; 
   8fadc:	790583e3 	strh	w3, [sp, #704]
   8fae0:	390b0be2 	strb	w2, [sp, #706]
   8fae4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fae8:	17ffda26 	b	86380 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8faec:	121c02e1 	and	w1, w23, #0x10
   8faf0:	121d0108 	and	w8, w8, #0x8
   8faf4:	2a080021 	orr	w1, w1, w8
   8faf8:	12000946 	and	w6, w10, #0x7
		names="?\0?\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0?\0?\0?\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0?\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0fcvtpu\0fcvtzu\0?\0frsqrte\0";
   8fafc:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8fb00:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fb04:	12001059 	and	w25, w2, #0x1f
   8fb08:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; 
   8fb0c:	528f2a82 	mov	w2, #0x7954                	// #31060
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fb10:	2a060021 	orr	w1, w1, w6
   8fb14:	120000f7 	and	w23, w7, #0x1
		names="?\0?\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0?\0?\0?\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0?\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0fcvtpu\0fcvtzu\0?\0frsqrte\0";
   8fb18:	91244060 	add	x0, x3, #0x910
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fb1c:	52800018 	mov	w24, #0x0                   	// #0
   8fb20:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fb24:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8fb28:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fb2c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8fb30:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fb34:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fb38:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; 
   8fb3c:	790583e2 	strh	w2, [sp, #704]
   8fb40:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fb44:	17ffda0f 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fb48:	121e0021 	and	w1, w1, #0x4
   8fb4c:	1200056b 	and	w11, w11, #0x3
		names="?\0?\0sqxtn\0?\0?\0sqxtun\0uqxtn\0fcvtxn\0";
   8fb50:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8fb54:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fb58:	12001059 	and	w25, w2, #0x1f
   8fb5c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz4n; 
   8fb60:	128eef22 	mov	w2, #0xffff8886            	// #-30586
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fb64:	2a0b0021 	orr	w1, w1, w11
   8fb68:	120004f7 	and	w23, w7, #0x3
		names="?\0?\0sqxtn\0?\0?\0sqxtun\0uqxtn\0fcvtxn\0";
   8fb6c:	9127a060 	add	x0, x3, #0x9e8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fb70:	52800018 	mov	w24, #0x0                   	// #0
   8fb74:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fb78:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8fb7c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fb80:	290fffff 	stp	wzr, wzr, [sp, #124]
   8fb84:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fb88:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fb8c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz4n; 
   8fb90:	790583e2 	strh	w2, [sp, #704]
   8fb94:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fb98:	17ffd9fa 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_14)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fb9c:	121e0021 	and	w1, w1, #0x4
   8fba0:	12000631 	and	w17, w17, #0x3
		names="suqadd\0sqabs\0abs\0?\0usqadd\0sqneg\0neg\0";
   8fba4:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8fba8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_14)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fbac:	12001059 	and	w25, w2, #0x1f
   8fbb0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; 
   8fbb4:	128f0f22 	mov	w2, #0xffff8786            	// #-30842
		op=((ic32_27)&0x4)|((ic32_14)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fbb8:	2a110021 	orr	w1, w1, w17
   8fbbc:	120004f7 	and	w23, w7, #0x3
		names="suqadd\0sqabs\0abs\0?\0usqadd\0sqneg\0neg\0";
   8fbc0:	91270060 	add	x0, x3, #0x9c0
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fbc4:	52800018 	mov	w24, #0x0                   	// #0
   8fbc8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fbcc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8fbd0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fbd4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8fbd8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fbdc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fbe0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; 
   8fbe4:	790583e2 	strh	w2, [sp, #704]
   8fbe8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fbec:	17ffd9e5 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fbf0:	121e0021 	and	w1, w1, #0x4
   8fbf4:	1200054a 	and	w10, w10, #0x3
		names="cmgt\0cmeq\0cmlt\0abs\0cmge\0cmle\0?\0neg\0";
   8fbf8:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8fbfc:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fc00:	12001059 	and	w25, w2, #0x1f
   8fc04:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_simd0; 
   8fc08:	12800fe2 	mov	w2, #0xffffff80            	// #-128
		names="cmgt\0cmeq\0cmlt\0abs\0cmge\0cmle\0?\0neg\0";
   8fc0c:	91266060 	add	x0, x3, #0x998
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fc10:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_simd0; 
   8fc14:	128f0f23 	mov	w3, #0xffff8786            	// #-30842
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fc18:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fc1c:	52800018 	mov	w24, #0x0                   	// #0
   8fc20:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fc24:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8fc28:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fc2c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8fc30:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fc34:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fc38:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz3t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_simd0; 
   8fc3c:	790583e3 	strh	w3, [sp, #704]
   8fc40:	390b0be2 	strb	w2, [sp, #706]
   8fc44:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fc48:	17ffd9ce 	b	86380 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fc4c:	121c02e1 	and	w1, w23, #0x10
   8fc50:	121d0108 	and	w8, w8, #0x8
   8fc54:	2a080021 	orr	w1, w1, w8
   8fc58:	12000946 	and	w6, w10, #0x7
		names="?\0?\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0?\0?\0?\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0?\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0fcvtpu\0fcvtzu\0?\0frsqrte\0";
   8fc5c:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8fc60:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fc64:	12001059 	and	w25, w2, #0x1f
   8fc68:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; 
   8fc6c:	528eeec2 	mov	w2, #0x7776                	// #30582
		op=((ic32_25)&0x10)|((ic32_20)&0x8)|((ic32_12)&0x7); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fc70:	2a060021 	orr	w1, w1, w6
		names="?\0?\0fcvtns\0fcvtms\0fcvtas\0scvtf\0?\0?\0?\0?\0fcvtps\0fcvtzs\0?\0frecpe\0?\0frecpx\0?\0?\0fcvtnu\0fcvtmu\0fcvtau\0ucvtf\0?\0?\0?\0?\0fcvtpu\0fcvtzu\0?\0frsqrte\0";
   8fc74:	91244060 	add	x0, x3, #0x910
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fc78:	52800017 	mov	w23, #0x0                   	// #0
   8fc7c:	52800018 	mov	w24, #0x0                   	// #0
   8fc80:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fc84:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8fc88:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fc8c:	290fffff 	stp	wzr, wzr, [sp, #124]
   8fc90:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fc94:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fc98:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; 
   8fc9c:	790583e2 	strh	w2, [sp, #704]
   8fca0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fca4:	17ffd9b7 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fca8:	121e0021 	and	w1, w1, #0x4
   8fcac:	1200054a 	and	w10, w10, #0x3
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0";
   8fcb0:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8fcb4:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fcb8:	12001059 	and	w25, w2, #0x1f
   8fcbc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_simd0; 
   8fcc0:	12800fe2 	mov	w2, #0xffffff80            	// #-128
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0";
   8fcc4:	9123a060 	add	x0, x3, #0x8e8
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fcc8:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_simd0; 
   8fccc:	528f2a83 	mov	w3, #0x7954                	// #31060
		op=((ic32_27)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fcd0:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fcd4:	52800018 	mov	w24, #0x0                   	// #0
   8fcd8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fcdc:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8fce0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fce4:	290fffff 	stp	wzr, wzr, [sp, #124]
   8fce8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fcec:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fcf0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_simd0; 
   8fcf4:	790583e3 	strh	w3, [sp, #704]
   8fcf8:	390b0be2 	strb	w2, [sp, #706]
   8fcfc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fd00:	17ffd9a0 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fd04:	121e0021 	and	w1, w1, #0x4
   8fd08:	1200054a 	and	w10, w10, #0x3
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0";
   8fd0c:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8fd10:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fd14:	12001059 	and	w25, w2, #0x1f
   8fd18:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_simd0; 
   8fd1c:	12800fe2 	mov	w2, #0xffffff80            	// #-128
		names="fcmgt\0fcmeq\0fcmlt\0?\0fcmge\0fcmle\0";
   8fd20:	9123a060 	add	x0, x3, #0x8e8
		op=((ic32_27)&0x4)|((ic32_12)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fd24:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_simd0; 
   8fd28:	528eeec3 	mov	w3, #0x7776                	// #30582
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fd2c:	52800017 	mov	w23, #0x0                   	// #0
   8fd30:	52800018 	mov	w24, #0x0                   	// #0
   8fd34:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8fd38:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8fd3c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fd40:	290fffff 	stp	wzr, wzr, [sp, #124]
   8fd44:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fd48:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fd4c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_simd0; 
   8fd50:	790583e3 	strh	w3, [sp, #704]
   8fd54:	390b0be2 	strb	w2, [sp, #706]
   8fd58:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fd5c:	17ffd989 	b	86380 <disasm+0x1c80>
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fd60:	531a7c01 	lsr	w1, w0, #26
   8fd64:	121f056b 	and	w11, w11, #0x6
   8fd68:	121d0021 	and	w1, w1, #0x8
   8fd6c:	12000146 	and	w6, w10, #0x1
   8fd70:	2a0b0021 	orr	w1, w1, w11
   8fd74:	121f0294 	and	w20, w20, #0x2
   8fd78:	1200018c 	and	w12, w12, #0x1
		names="smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0smull2\0sqdmull2\0?\0?\0umlal2\0?\0umlsl2\0?\0umull2\0";
   8fd7c:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8fd80:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fd84:	120010a4 	and	w4, w5, #0x1f
   8fd88:	12001059 	and	w25, w2, #0x1f
   8fd8c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8fd90:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0smull2\0sqdmull2\0?\0?\0umlal2\0?\0umlsl2\0?\0umull2\0";
   8fd94:	91212060 	add	x0, x3, #0x848
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fd98:	2a060021 	orr	w1, w1, w6
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8fd9c:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fda0:	2a0c0294 	orr	w20, w20, w12
		z=2;q=1;
   8fda4:	52800057 	mov	w23, #0x2                   	// #2
   8fda8:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fdac:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8fdb0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fdb4:	290fffe4 	stp	w4, wzr, [sp, #124]
   8fdb8:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fdbc:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fdc0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8fdc4:	790583e3 	strh	w3, [sp, #704]
   8fdc8:	390b0be2 	strb	w2, [sp, #706]
   8fdcc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fdd0:	17ffd96c 	b	86380 <disasm+0x1c80>
		names="sshll2\0usshll2\0";
   8fdd4:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8fdd8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fddc:	120002a1 	and	w1, w21, #0x1
   8fde0:	12001059 	and	w25, w2, #0x1f
   8fde4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shlshift; 
   8fde8:	12800d42 	mov	w2, #0xffffff95            	// #-107
		names="sshll2\0usshll2\0";
   8fdec:	91236060 	add	x0, x3, #0x8d8
		op=((ic32_29)&0x1); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fdf0:	120018b4 	and	w20, w5, #0x7f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shlshift; 
   8fdf4:	128d0d83 	mov	w3, #0xffff9793            	// #-26733
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fdf8:	52800017 	mov	w23, #0x0                   	// #0
		q=1;
   8fdfc:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fe00:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8fe04:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fe08:	290fffff 	stp	wzr, wzr, [sp, #124]
   8fe0c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fe10:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fe14:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shlshift; 
   8fe18:	790583e3 	strh	w3, [sp, #704]
   8fe1c:	390b0be2 	strb	w2, [sp, #706]
   8fe20:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fe24:	17ffd957 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fe28:	121e0021 	and	w1, w1, #0x4
   8fe2c:	120005ad 	and	w13, w13, #0x3
		names="?\0rshrn2\0sqshrn2\0sqrshrn2\0sqshrun2\0sqrshrun2\0uqshrn2\0uqrshrn2\0";
   8fe30:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8fe34:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fe38:	12001059 	and	w25, w2, #0x1f
   8fe3c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shrshift; 
   8fe40:	12800da2 	mov	w2, #0xffffff92            	// #-110
		names="?\0rshrn2\0sqshrn2\0sqrshrn2\0sqshrun2\0sqrshrun2\0uqshrn2\0uqrshrn2\0";
   8fe44:	91226060 	add	x0, x3, #0x898
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fe48:	2a0d0021 	orr	w1, w1, w13
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shrshift; 
   8fe4c:	128d0d83 	mov	w3, #0xffff9793            	// #-26733
		op=((ic32_27)&0x4)|((ic32_11)&0x3); j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fe50:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fe54:	52800017 	mov	w23, #0x0                   	// #0
		q=1;
   8fe58:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fe5c:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8fe60:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fe64:	290fffff 	stp	wzr, wzr, [sp, #124]
   8fe68:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fe6c:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fe70:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtj2; args[1]=disasm_arg_VnTa; args[2]=disasm_arg_shrshift; 
   8fe74:	790583e3 	strh	w3, [sp, #704]
   8fe78:	390b0be2 	strb	w2, [sp, #706]
   8fe7c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fe80:	17ffd940 	b	86380 <disasm+0x1c80>
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fe84:	531a7c01 	lsr	w1, w0, #26
   8fe88:	121f056b 	and	w11, w11, #0x6
   8fe8c:	121d0021 	and	w1, w1, #0x8
   8fe90:	12000146 	and	w6, w10, #0x1
   8fe94:	2a0b0021 	orr	w1, w1, w11
   8fe98:	121e01ef 	and	w15, w15, #0x4
   8fe9c:	12000508 	and	w8, w8, #0x3
		names="smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0smull2\0sqdmull2\0?\0?\0umlal2\0?\0umlsl2\0?\0umull2\0";
   8fea0:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8fea4:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fea8:	12000ca4 	and	w4, w5, #0xf
   8feac:	12001059 	and	w25, w2, #0x1f
   8feb0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8feb4:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0smull2\0sqdmull2\0?\0?\0umlal2\0?\0umlsl2\0?\0umull2\0";
   8feb8:	91212060 	add	x0, x3, #0x848
		z=1;q=1;
   8febc:	52800037 	mov	w23, #0x1                   	// #1
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8fec0:	128f6e23 	mov	w3, #0xffff848e            	// #-31602
		op=((ic32_26)&0x8)|((ic32_13)&0x6)|((ic32_12)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fec4:	2a060021 	orr	w1, w1, w6
   8fec8:	2a0801f4 	orr	w20, w15, w8
		z=1;q=1;
   8fecc:	2a1703f8 	mov	w24, w23
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fed0:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   8fed4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fed8:	290fffe4 	stp	w4, wzr, [sp, #124]
   8fedc:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fee0:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fee4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vtz; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmTs; 
   8fee8:	790583e3 	strh	w3, [sp, #704]
   8feec:	390b0be2 	strb	w2, [sp, #706]
   8fef0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8fef4:	17ffd923 	b	86380 <disasm+0x1c80>
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8fef8:	121c02e1 	and	w1, w23, #0x10
   8fefc:	12000d4a 	and	w10, w10, #0xf
		names="saddl2\0saddw2\0ssubl2\0ssubw2\0addhn2\0sabal2\0subhn2\0sabdl2\0smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0?\0sqdmull2\0pmull2\0?\0uaddl2\0uaddw2\0usubl2\0usubw2\0raddhn2\0uabal2\0rsubhn2\0uabdl2\0umlal2\0?\0umlsl2\0?\0?\0?\0umull2\0";
   8ff00:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8ff04:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ff08:	120010a4 	and	w4, w5, #0x1f
   8ff0c:	12001059 	and	w25, w2, #0x1f
   8ff10:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8ff14:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="saddl2\0saddw2\0ssubl2\0ssubw2\0addhn2\0sabal2\0subhn2\0sabdl2\0smlal2\0sqdmlal2\0smlsl2\0sqdmlsl2\0?\0sqdmull2\0pmull2\0?\0uaddl2\0uaddw2\0usubl2\0usubw2\0raddhn2\0uabal2\0rsubhn2\0uabdl2\0umlal2\0?\0umlsl2\0?\0?\0?\0umull2\0";
   8ff18:	911e0060 	add	x0, x3, #0x780
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ff1c:	2a0a0021 	orr	w1, w1, w10
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8ff20:	128f6aa3 	mov	w3, #0xffff84aa            	// #-31574
		op=((ic32_25)&0x10)|((ic32_12)&0xf); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ff24:	120004f7 	and	w23, w7, #0x3
		q=1;
   8ff28:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ff2c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ff30:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ff34:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ff38:	290fffe4 	stp	w4, wzr, [sp, #124]
   8ff3c:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ff40:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ff44:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8ff48:	790583e3 	strh	w3, [sp, #704]
   8ff4c:	390b0be2 	strb	w2, [sp, #706]
   8ff50:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ff54:	17ffd90b 	b	86380 <disasm+0x1c80>
		names="pmull2\0umull2\0";
   8ff58:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8ff5c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_29)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ff60:	120002a1 	and	w1, w21, #0x1
   8ff64:	120010a4 	and	w4, w5, #0x1f
   8ff68:	12001059 	and	w25, w2, #0x1f
   8ff6c:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT4; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8ff70:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="pmull2\0umull2\0";
   8ff74:	911dc060 	add	x0, x3, #0x770
		op=((ic32_29)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ff78:	120004f7 	and	w23, w7, #0x3
		args[0]=disasm_arg_VtT4; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8ff7c:	128f6a63 	mov	w3, #0xffff84ac            	// #-31572
		q=1;
   8ff80:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ff84:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ff88:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ff8c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ff90:	290fffe4 	stp	w4, wzr, [sp, #124]
   8ff94:	29117fff 	stp	wzr, wzr, [sp, #136]
   8ff98:	29127fff 	stp	wzr, wzr, [sp, #144]
   8ff9c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT4; args[1]=disasm_arg_VnT; args[2]=disasm_arg_VmT; 
   8ffa0:	790583e3 	strh	w3, [sp, #704]
   8ffa4:	390b0be2 	strb	w2, [sp, #706]
   8ffa8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8ffac:	17ffd8f5 	b	86380 <disasm+0x1c80>
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ffb0:	121f0301 	and	w1, w24, #0x2
   8ffb4:	1200016b 	and	w11, w11, #0x1
		names="addhn2\0subhn2\0raddhn2\0rsubhn2\0";
   8ffb8:	90000023 	adrp	x3, 93000 <sd_init+0xce8>
   8ffbc:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ffc0:	120010a4 	and	w4, w5, #0x1f
   8ffc4:	12001059 	and	w25, w2, #0x1f
   8ffc8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT3; 
   8ffcc:	12800a82 	mov	w2, #0xffffffab            	// #-85
		names="addhn2\0subhn2\0raddhn2\0rsubhn2\0";
   8ffd0:	911d4060 	add	x0, x3, #0x750
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ffd4:	2a0b0021 	orr	w1, w1, w11
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT3; 
   8ffd8:	128edb43 	mov	w3, #0xffff8925            	// #-30427
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   8ffdc:	120004f7 	and	w23, w7, #0x3
		q=1;
   8ffe0:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8ffe4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   8ffe8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   8ffec:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   8fff0:	290fffe4 	stp	w4, wzr, [sp, #124]
   8fff4:	29117fff 	stp	wzr, wzr, [sp, #136]
   8fff8:	29127fff 	stp	wzr, wzr, [sp, #144]
   8fffc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT3; 
   90000:	790583e3 	strh	w3, [sp, #704]
   90004:	390b0be2 	strb	w2, [sp, #706]
   90008:	a9435bf5 	ldp	x21, x22, [sp, #48]
   9000c:	17ffd8dd 	b	86380 <disasm+0x1c80>
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90010:	121f0301 	and	w1, w24, #0x2
   90014:	1200016b 	and	w11, w11, #0x1
		names="saddw2\0ssubw2\0uaddw2\0usubw2\0";
   90018:	f0000003 	adrp	x3, 93000 <sd_init+0xce8>
   9001c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90020:	120010a4 	and	w4, w5, #0x1f
   90024:	12001059 	and	w25, w2, #0x1f
   90028:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT; 
   9002c:	12800f42 	mov	w2, #0xffffff85            	// #-123
		names="saddw2\0ssubw2\0uaddw2\0usubw2\0";
   90030:	911cc060 	add	x0, x3, #0x730
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90034:	2a0b0021 	orr	w1, w1, w11
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT; 
   90038:	128ecaa3 	mov	w3, #0xffff89aa            	// #-30294
		op=((ic32_28)&0x2)|((ic32_13)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   9003c:	120004f7 	and	w23, w7, #0x3
		q=1;
   90040:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90044:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   90048:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   9004c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90050:	290fffe4 	stp	w4, wzr, [sp, #124]
   90054:	29117fff 	stp	wzr, wzr, [sp, #136]
   90058:	29127fff 	stp	wzr, wzr, [sp, #144]
   9005c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT3; args[1]=disasm_arg_VnT3; args[2]=disasm_arg_VmT; 
   90060:	790583e3 	strh	w3, [sp, #704]
   90064:	390b0be2 	strb	w2, [sp, #706]
   90068:	a9435bf5 	ldp	x21, x22, [sp, #48]
   9006c:	17ffd8c5 	b	86380 <disasm+0x1c80>
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90070:	121e0021 	and	w1, w1, #0x4
   90074:	1200056b 	and	w11, w11, #0x3
		names="?\0xtn2\0sqxtn2\0?\0?\0sqxtun2\0uqxtn2\0fcvtxn2\0";
   90078:	f0000003 	adrp	x3, 93000 <sd_init+0xce8>
   9007c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90080:	12001059 	and	w25, w2, #0x1f
   90084:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; 
   90088:	128edb42 	mov	w2, #0xffff8925            	// #-30427
		op=((ic32_27)&0x4)|((ic32_13)&0x3); z=((ic32_22)&0x3); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   9008c:	2a0b0021 	orr	w1, w1, w11
   90090:	120004f7 	and	w23, w7, #0x3
		names="?\0xtn2\0sqxtn2\0?\0?\0sqxtun2\0uqxtn2\0fcvtxn2\0";
   90094:	911c0060 	add	x0, x3, #0x700
		q=1;
   90098:	52800038 	mov	w24, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   9009c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   900a0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   900a4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   900a8:	290fffff 	stp	wzr, wzr, [sp, #124]
   900ac:	29117fff 	stp	wzr, wzr, [sp, #136]
   900b0:	29127fff 	stp	wzr, wzr, [sp, #144]
   900b4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_VtT; args[1]=disasm_arg_VnT3; 
   900b8:	790583e2 	strh	w2, [sp, #704]
   900bc:	a9435bf5 	ldp	x21, x22, [sp, #48]
   900c0:	17ffd8b0 	b	86380 <disasm+0x1c80>
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   900c4:	121f0294 	and	w20, w20, #0x2
   900c8:	1200018c 	and	w12, w12, #0x1
		names="sqrdmlah\0sqrdmlsh\0";
   900cc:	f0000003 	adrp	x3, 93000 <sd_init+0xce8>
   900d0:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   900d4:	120010a4 	and	w4, w5, #0x1f
   900d8:	12001059 	and	w25, w2, #0x1f
   900dc:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   900e0:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sqrdmlah\0sqrdmlsh\0";
   900e4:	911ac060 	add	x0, x3, #0x6b0
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   900e8:	2a0c0294 	orr	w20, w20, w12
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   900ec:	128f0e43 	mov	w3, #0xffff878d            	// #-30835
		op=((ic32_13)&0x1); j=((ic32_10)&0x2)|((ic32_21)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   900f0:	12000161 	and	w1, w11, #0x1
		z=2;
   900f4:	52800057 	mov	w23, #0x2                   	// #2
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   900f8:	52800018 	mov	w24, #0x0                   	// #0
   900fc:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   90100:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90104:	290fffe4 	stp	w4, wzr, [sp, #124]
   90108:	29117fff 	stp	wzr, wzr, [sp, #136]
   9010c:	29127fff 	stp	wzr, wzr, [sp, #144]
   90110:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   90114:	790583e3 	strh	w3, [sp, #704]
   90118:	390b0be2 	strb	w2, [sp, #706]
   9011c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   90120:	17ffd898 	b	86380 <disasm+0x1c80>
		names="uqshl\0";
   90124:	f0000001 	adrp	x1, 93000 <sd_init+0xce8>
   90128:	913ea021 	add	x1, x1, #0xfa8
		j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   9012c:	12001059 	and	w25, w2, #0x1f
   90130:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPjt2; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shlshift; 
   90134:	128ccce3 	mov	w3, #0xffff9998            	// #-26216
		names="uqshl\0";
   90138:	911be020 	add	x0, x1, #0x6f8
		args[0]=disasm_arg_FPjt2; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shlshift; 
   9013c:	12800d42 	mov	w2, #0xffffff95            	// #-107
		j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90140:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90144:	52800017 	mov	w23, #0x0                   	// #0
   90148:	52800018 	mov	w24, #0x0                   	// #0
   9014c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   90150:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   90154:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90158:	290fffff 	stp	wzr, wzr, [sp, #124]
   9015c:	29117fff 	stp	wzr, wzr, [sp, #136]
   90160:	29127fff 	stp	wzr, wzr, [sp, #144]
   90164:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPjt2; args[1]=disasm_arg_FPjn2; args[2]=disasm_arg_shlshift; 
   90168:	790583e3 	strh	w3, [sp, #704]
   9016c:	390b0be2 	strb	w2, [sp, #706]
   90170:	a9435bf5 	ldp	x21, x22, [sp, #48]
   90174:	17ffd883 	b	86380 <disasm+0x1c80>
		names="sqshlu\0";
   90178:	f0000001 	adrp	x1, 93000 <sd_init+0xce8>
   9017c:	913ea021 	add	x1, x1, #0xfa8
		j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90180:	12001059 	and	w25, w2, #0x1f
   90184:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shlshift; 
   90188:	128dcde3 	mov	w3, #0xffff9190            	// #-28272
		names="sqshlu\0";
   9018c:	911bc020 	add	x0, x1, #0x6f0
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shlshift; 
   90190:	12800d42 	mov	w2, #0xffffff95            	// #-107
		j=((ic32_16)&0x7f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90194:	120018b4 	and	w20, w5, #0x7f
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90198:	52800017 	mov	w23, #0x0                   	// #0
   9019c:	52800018 	mov	w24, #0x0                   	// #0
   901a0:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   901a4:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   901a8:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   901ac:	290fffff 	stp	wzr, wzr, [sp, #124]
   901b0:	29117fff 	stp	wzr, wzr, [sp, #136]
   901b4:	29127fff 	stp	wzr, wzr, [sp, #144]
   901b8:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Dt; args[1]=disasm_arg_Dn; args[2]=disasm_arg_shlshift; 
   901bc:	790583e3 	strh	w3, [sp, #704]
   901c0:	390b0be2 	strb	w2, [sp, #706]
   901c4:	a9435bf5 	ldp	x21, x22, [sp, #48]
   901c8:	17ffd86e 	b	86380 <disasm+0x1c80>
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   901cc:	121e01ef 	and	w15, w15, #0x4
   901d0:	12000508 	and	w8, w8, #0x3
		names="sqrdmlah\0sqrdmlsh\0";
   901d4:	f0000003 	adrp	x3, 93000 <sd_init+0xce8>
   901d8:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   901dc:	12000ca4 	and	w4, w5, #0xf
   901e0:	12001059 	and	w25, w2, #0x1f
   901e4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   901e8:	12800c82 	mov	w2, #0xffffff9b            	// #-101
		names="sqrdmlah\0sqrdmlsh\0";
   901ec:	911ac060 	add	x0, x3, #0x6b0
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   901f0:	2a0801f4 	orr	w20, w15, w8
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   901f4:	128f0e43 	mov	w3, #0xffff878d            	// #-30835
		op=((ic32_13)&0x1); j=((ic32_9)&0x4)|((ic32_20)&0x3); m=((ic32_16)&0xf); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   901f8:	12000161 	and	w1, w11, #0x1
		z=1;
   901fc:	52800037 	mov	w23, #0x1                   	// #1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90200:	52800018 	mov	w24, #0x0                   	// #0
   90204:	5280001b 	mov	w27, #0x0                   	// #0
	uint32_t i=0;
   90208:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   9020c:	290fffe4 	stp	w4, wzr, [sp, #124]
   90210:	29117fff 	stp	wzr, wzr, [sp, #136]
   90214:	29127fff 	stp	wzr, wzr, [sp, #144]
   90218:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz4t; args[1]=disasm_arg_FPz3n; args[2]=disasm_arg_VmTs; 
   9021c:	790583e3 	strh	w3, [sp, #704]
   90220:	390b0be2 	strb	w2, [sp, #706]
   90224:	a9435bf5 	ldp	x21, x22, [sp, #48]
   90228:	17ffd856 	b	86380 <disasm+0x1c80>
		op=((ic32_21)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   9022c:	121e0181 	and	w1, w12, #0x4
   90230:	1200054a 	and	w10, w10, #0x3
		names="?\0faddp\0?\0fmaxp\0fminnmp\0?\0?\0fminp\0";
   90234:	f0000003 	adrp	x3, 93000 <sd_init+0xce8>
   90238:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_21)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   9023c:	12001059 	and	w25, w2, #0x1f
   90240:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vnz; 
   90244:	128e7562 	mov	w2, #0xffff8c54            	// #-29612
		op=((ic32_21)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90248:	2a0a0021 	orr	w1, w1, w10
   9024c:	120000f7 	and	w23, w7, #0x1
		names="?\0faddp\0?\0fmaxp\0fminnmp\0?\0?\0fminp\0";
   90250:	911b2060 	add	x0, x3, #0x6c8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90254:	52800018 	mov	w24, #0x0                   	// #0
   90258:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   9025c:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   90260:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90264:	290fffff 	stp	wzr, wzr, [sp, #124]
   90268:	29117fff 	stp	wzr, wzr, [sp, #136]
   9026c:	29127fff 	stp	wzr, wzr, [sp, #144]
   90270:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vnz; 
   90274:	790583e2 	strh	w2, [sp, #704]
   90278:	a9435bf5 	ldp	x21, x22, [sp, #48]
   9027c:	17ffd841 	b	86380 <disasm+0x1c80>
		names="sqrdmlah\0sqrdmlsh\0";
   90280:	f0000003 	adrp	x3, 93000 <sd_init+0xce8>
   90284:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_11)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90288:	120010a4 	and	w4, w5, #0x1f
   9028c:	12001059 	and	w25, w2, #0x1f
   90290:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPz2t; args[1]=disasm_arg_FPz2n; args[2]=disasm_arg_FPz2m; 
   90294:	12800f82 	mov	w2, #0xffffff83            	// #-125
		names="sqrdmlah\0sqrdmlsh\0";
   90298:	911ac060 	add	x0, x3, #0x6b0
		op=((ic32_11)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   9029c:	120001a1 	and	w1, w13, #0x1
		args[0]=disasm_arg_FPz2t; args[1]=disasm_arg_FPz2n; args[2]=disasm_arg_FPz2m; 
   902a0:	128fafc3 	mov	w3, #0xffff8281            	// #-32127
		op=((ic32_11)&0x1); z=((ic32_22)&0x3); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   902a4:	120004f7 	and	w23, w7, #0x3
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   902a8:	52800018 	mov	w24, #0x0                   	// #0
   902ac:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   902b0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   902b4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   902b8:	290fffe4 	stp	w4, wzr, [sp, #124]
   902bc:	29117fff 	stp	wzr, wzr, [sp, #136]
   902c0:	29127fff 	stp	wzr, wzr, [sp, #144]
   902c4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPz2t; args[1]=disasm_arg_FPz2n; args[2]=disasm_arg_FPz2m; 
   902c8:	790583e3 	strh	w3, [sp, #704]
   902cc:	390b0be2 	strb	w2, [sp, #706]
   902d0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   902d4:	17ffd82b 	b	86380 <disasm+0x1c80>
		names="fcmgt\0facgt\0";
   902d8:	f0000003 	adrp	x3, 93000 <sd_init+0xce8>
   902dc:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_11)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   902e0:	120010a4 	and	w4, w5, #0x1f
   902e4:	12001059 	and	w25, w2, #0x1f
   902e8:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   902ec:	52800ae2 	mov	w2, #0x57                  	// #87
		names="fcmgt\0facgt\0";
   902f0:	911a8060 	add	x0, x3, #0x6a0
		op=((ic32_11)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   902f4:	120001a1 	and	w1, w13, #0x1
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   902f8:	528f2a83 	mov	w3, #0x7954                	// #31060
		op=((ic32_11)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   902fc:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90300:	52800018 	mov	w24, #0x0                   	// #0
   90304:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   90308:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   9030c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90310:	290fffe4 	stp	w4, wzr, [sp, #124]
   90314:	29117fff 	stp	wzr, wzr, [sp, #136]
   90318:	29127fff 	stp	wzr, wzr, [sp, #144]
   9031c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   90320:	790583e3 	strh	w3, [sp, #704]
   90324:	390b0be2 	strb	w2, [sp, #706]
   90328:	a9435bf5 	ldp	x21, x22, [sp, #48]
   9032c:	17ffd815 	b	86380 <disasm+0x1c80>
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90330:	120010a3 	and	w3, w5, #0x1f
		names="fabd\0";
   90334:	f0000001 	adrp	x1, 93000 <sd_init+0xce8>
   90338:	913ea021 	add	x1, x1, #0xfa8
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   9033c:	12001059 	and	w25, w2, #0x1f
   90340:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   90344:	52800ae2 	mov	w2, #0x57                  	// #87
		names="fabd\0";
   90348:	911a6020 	add	x0, x1, #0x698
		z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   9034c:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90350:	52800018 	mov	w24, #0x0                   	// #0
   90354:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   90358:	52800014 	mov	w20, #0x0                   	// #0
   9035c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   90360:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90364:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   90368:	528f2a83 	mov	w3, #0x7954                	// #31060
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   9036c:	29117fff 	stp	wzr, wzr, [sp, #136]
   90370:	29127fff 	stp	wzr, wzr, [sp, #144]
   90374:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   90378:	790583e3 	strh	w3, [sp, #704]
   9037c:	390b0be2 	strb	w2, [sp, #706]
   90380:	a9435bf5 	ldp	x21, x22, [sp, #48]
   90384:	17ffd7ff 	b	86380 <disasm+0x1c80>
		names="fcmgt\0facgt\0";
   90388:	f0000003 	adrp	x3, 93000 <sd_init+0xce8>
   9038c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90390:	120010a4 	and	w4, w5, #0x1f
   90394:	12001059 	and	w25, w2, #0x1f
   90398:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   9039c:	52800f02 	mov	w2, #0x78                  	// #120
		names="fcmgt\0facgt\0";
   903a0:	911a8060 	add	x0, x3, #0x6a0
		op=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   903a4:	120001a1 	and	w1, w13, #0x1
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   903a8:	528eeec3 	mov	w3, #0x7776                	// #30582
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   903ac:	52800017 	mov	w23, #0x0                   	// #0
   903b0:	52800018 	mov	w24, #0x0                   	// #0
   903b4:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   903b8:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   903bc:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   903c0:	290fffe4 	stp	w4, wzr, [sp, #124]
   903c4:	29117fff 	stp	wzr, wzr, [sp, #136]
   903c8:	29127fff 	stp	wzr, wzr, [sp, #144]
   903cc:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   903d0:	790583e3 	strh	w3, [sp, #704]
   903d4:	390b0be2 	strb	w2, [sp, #706]
   903d8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   903dc:	17ffd7e9 	b	86380 <disasm+0x1c80>
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   903e0:	120010a3 	and	w3, w5, #0x1f
		names="fabd\0";
   903e4:	f0000001 	adrp	x1, 93000 <sd_init+0xce8>
   903e8:	913ea021 	add	x1, x1, #0xfa8
		m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   903ec:	12001059 	and	w25, w2, #0x1f
   903f0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   903f4:	52800f02 	mov	w2, #0x78                  	// #120
		names="fabd\0";
   903f8:	911a6020 	add	x0, x1, #0x698
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   903fc:	52800017 	mov	w23, #0x0                   	// #0
   90400:	52800018 	mov	w24, #0x0                   	// #0
   90404:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   90408:	52800014 	mov	w20, #0x0                   	// #0
   9040c:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   90410:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90414:	290fffe3 	stp	w3, wzr, [sp, #124]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   90418:	528eeec3 	mov	w3, #0x7776                	// #30582
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   9041c:	29117fff 	stp	wzr, wzr, [sp, #136]
   90420:	29127fff 	stp	wzr, wzr, [sp, #144]
   90424:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   90428:	790583e3 	strh	w3, [sp, #704]
   9042c:	390b0be2 	strb	w2, [sp, #706]
   90430:	a9435bf5 	ldp	x21, x22, [sp, #48]
   90434:	17ffd7d3 	b	86380 <disasm+0x1c80>
		names="fcmge\0facge\0";
   90438:	f0000003 	adrp	x3, 93000 <sd_init+0xce8>
   9043c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_11)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90440:	120010a4 	and	w4, w5, #0x1f
   90444:	12001059 	and	w25, w2, #0x1f
   90448:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   9044c:	52800ae2 	mov	w2, #0x57                  	// #87
		names="fcmge\0facge\0";
   90450:	911a2060 	add	x0, x3, #0x688
		op=((ic32_11)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90454:	120001a1 	and	w1, w13, #0x1
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   90458:	528f2a83 	mov	w3, #0x7954                	// #31060
		op=((ic32_11)&0x1); z=((ic32_22)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   9045c:	120000f7 	and	w23, w7, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90460:	52800018 	mov	w24, #0x0                   	// #0
   90464:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   90468:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   9046c:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90470:	290fffe4 	stp	w4, wzr, [sp, #124]
   90474:	29117fff 	stp	wzr, wzr, [sp, #136]
   90478:	29127fff 	stp	wzr, wzr, [sp, #144]
   9047c:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_FPn; args[2]=disasm_arg_FPm; 
   90480:	790583e3 	strh	w3, [sp, #704]
   90484:	390b0be2 	strb	w2, [sp, #706]
   90488:	a9435bf5 	ldp	x21, x22, [sp, #48]
   9048c:	17ffd7bd 	b	86380 <disasm+0x1c80>
		names="fcmge\0facge\0";
   90490:	f0000003 	adrp	x3, 93000 <sd_init+0xce8>
   90494:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90498:	120010a4 	and	w4, w5, #0x1f
   9049c:	12001059 	and	w25, w2, #0x1f
   904a0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   904a4:	52800f02 	mov	w2, #0x78                  	// #120
		names="fcmge\0facge\0";
   904a8:	911a2060 	add	x0, x3, #0x688
		op=((ic32_11)&0x1); m=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   904ac:	120001a1 	and	w1, w13, #0x1
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   904b0:	528eeec3 	mov	w3, #0x7776                	// #30582
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   904b4:	52800017 	mov	w23, #0x0                   	// #0
   904b8:	52800018 	mov	w24, #0x0                   	// #0
   904bc:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   904c0:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   904c4:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   904c8:	290fffe4 	stp	w4, wzr, [sp, #124]
   904cc:	29117fff 	stp	wzr, wzr, [sp, #136]
   904d0:	29127fff 	stp	wzr, wzr, [sp, #144]
   904d4:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Ht; args[1]=disasm_arg_Hn; args[2]=disasm_arg_Hm; 
   904d8:	790583e3 	strh	w3, [sp, #704]
   904dc:	390b0be2 	strb	w2, [sp, #706]
   904e0:	a9435bf5 	ldp	x21, x22, [sp, #48]
   904e4:	17ffd7a7 	b	86380 <disasm+0x1c80>
		names="fmaxnmp\0";
   904e8:	f0000001 	adrp	x1, 93000 <sd_init+0xce8>
   904ec:	913ea021 	add	x1, x1, #0xfa8
		z=((ic32_21)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   904f0:	12001059 	and	w25, w2, #0x1f
   904f4:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vnz; 
   904f8:	128e7562 	mov	w2, #0xffff8c54            	// #-29612
		names="fmaxnmp\0";
   904fc:	9119e020 	add	x0, x1, #0x678
		z=((ic32_21)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90500:	12000197 	and	w23, w12, #0x1
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90504:	52800018 	mov	w24, #0x0                   	// #0
   90508:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   9050c:	52800014 	mov	w20, #0x0                   	// #0
   90510:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   90514:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90518:	290fffff 	stp	wzr, wzr, [sp, #124]
   9051c:	29117fff 	stp	wzr, wzr, [sp, #136]
   90520:	29127fff 	stp	wzr, wzr, [sp, #144]
   90524:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vnz; 
   90528:	790583e2 	strh	w2, [sp, #704]
   9052c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   90530:	17ffd794 	b	86380 <disasm+0x1c80>
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90534:	53127c01 	lsr	w1, w0, #18
		names="ldaddh\0ldclrh\0ldeorh\0ldseth\0ldsmaxh\0ldsminh\0ldumaxh\0lduminh\0swph\0?\0?\0?\0?\0?\0?\0?\0ldaddlh\0ldclrlh\0ldeorlh\0ldsetlh\0ldsmaxlh\0ldsminlh\0ldumaxlh\0lduminlh\0swplh\0?\0?\0?\0?\0?\0?\0?\0ldaddah\0ldclrah\0ldeorah\0ldsetah\0ldsmaxah\0ldsminah\0ldumaxah\0lduminah\0swpah\0?\0?\0?\0?\0?\0?\0?\0ldaddalh\0ldclralh\0ldeoralh\0ldsetalh\0ldsmaxalh\0ldsminalh\0ldumaxalh\0lduminalh\0swpalh\0";
   90538:	f0000003 	adrp	x3, 93000 <sd_init+0xce8>
   9053c:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90540:	121c0421 	and	w1, w1, #0x30
   90544:	12000d4a 	and	w10, w10, #0xf
   90548:	1200101a 	and	w26, w0, #0x1f
		names="ldaddh\0ldclrh\0ldeorh\0ldseth\0ldsmaxh\0ldsminh\0ldumaxh\0lduminh\0swph\0?\0?\0?\0?\0?\0?\0?\0ldaddlh\0ldclrlh\0ldeorlh\0ldsetlh\0ldsmaxlh\0ldsminlh\0ldumaxlh\0lduminlh\0swplh\0?\0?\0?\0?\0?\0?\0?\0ldaddah\0ldclrah\0ldeorah\0ldsetah\0ldsmaxah\0ldsminah\0ldumaxah\0lduminah\0swpah\0?\0?\0?\0?\0?\0?\0?\0ldaddalh\0ldclralh\0ldeoralh\0ldsetalh\0ldsmaxalh\0ldsminalh\0ldumaxalh\0lduminalh\0swpalh\0";
   9054c:	91148060 	add	x0, x3, #0x520
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   90550:	528a6a43 	mov	w3, #0x5352                	// #21330
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90554:	120010a4 	and	w4, w5, #0x1f
   90558:	12001059 	and	w25, w2, #0x1f
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   9055c:	72a54523 	movk	w3, #0x2a29, lsl #16
   90560:	52800562 	mov	w2, #0x2b                  	// #43
		op=((ic32_18)&0x30)|((ic32_12)&0xf); d=((ic32_16)&0x1f); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90564:	2a0a0021 	orr	w1, w1, w10
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90568:	52800017 	mov	w23, #0x0                   	// #0
   9056c:	52800018 	mov	w24, #0x0                   	// #0
   90570:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   90574:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   90578:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   9057c:	290fffff 	stp	wzr, wzr, [sp, #124]
   90580:	29117fe4 	stp	w4, wzr, [sp, #136]
   90584:	29127fff 	stp	wzr, wzr, [sp, #144]
   90588:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Wd; args[1]=disasm_arg_Wt; args[2]=disasm_arg_offs; args[3]=disasm_arg_XnS; args[4]=disasm_arg_offe; 
   9058c:	b902c3e3 	str	w3, [sp, #704]
   90590:	390b13e2 	strb	w2, [sp, #708]
   90594:	a9435bf5 	ldp	x21, x22, [sp, #48]
   90598:	17ffd77a 	b	86380 <disasm+0x1c80>
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   9059c:	12001042 	and	w2, w2, #0x1f
   905a0:	121b09ad 	and	w13, w13, #0xe0
		names="fmov\0";
   905a4:	f0000001 	adrp	x1, 93000 <sd_init+0xce8>
   905a8:	913ea021 	add	x1, x1, #0xfa8
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   905ac:	2a0201b4 	orr	w20, w13, w2
   905b0:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_F64; 
   905b4:	128969c2 	mov	w2, #0xffffb4b1            	// #-19279
		names="fmov\0";
   905b8:	d101a020 	sub	x0, x1, #0x68
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   905bc:	52800017 	mov	w23, #0x0                   	// #0
   905c0:	52800018 	mov	w24, #0x0                   	// #0
   905c4:	52800019 	mov	w25, #0x0                   	// #0
   905c8:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   905cc:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   905d0:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   905d4:	290fffff 	stp	wzr, wzr, [sp, #124]
   905d8:	29117fff 	stp	wzr, wzr, [sp, #136]
   905dc:	29127fff 	stp	wzr, wzr, [sp, #144]
   905e0:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_F64; 
   905e4:	790583e2 	strh	w2, [sp, #704]
   905e8:	a9435bf5 	ldp	x21, x22, [sp, #48]
   905ec:	17ffd765 	b	86380 <disasm+0x1c80>
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   905f0:	12001042 	and	w2, w2, #0x1f
   905f4:	121b09ad 	and	w13, w13, #0xe0
		names="movi\0";
   905f8:	f0000001 	adrp	x1, 93000 <sd_init+0xce8>
   905fc:	913ea021 	add	x1, x1, #0xfa8
		j=((ic32_11)&0xe0)|((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90600:	2a0201b4 	orr	w20, w13, w2
   90604:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_imm64; 
   90608:	1289e9c2 	mov	w2, #0xffffb0b1            	// #-20303
		names="movi\0";
   9060c:	91004020 	add	x0, x1, #0x10
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90610:	52800017 	mov	w23, #0x0                   	// #0
   90614:	52800018 	mov	w24, #0x0                   	// #0
   90618:	52800019 	mov	w25, #0x0                   	// #0
   9061c:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   90620:	52800001 	mov	w1, #0x0                   	// #0
	uint32_t i=0;
   90624:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   90628:	290fffff 	stp	wzr, wzr, [sp, #124]
   9062c:	29117fff 	stp	wzr, wzr, [sp, #136]
   90630:	29127fff 	stp	wzr, wzr, [sp, #144]
   90634:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_Vt2d; args[1]=disasm_arg_imm64; 
   90638:	790583e2 	strh	w2, [sp, #704]
   9063c:	a9435bf5 	ldp	x21, x22, [sp, #48]
   90640:	17ffd750 	b	86380 <disasm+0x1c80>
		op=((ic32_21)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90644:	121e0181 	and	w1, w12, #0x4
   90648:	1200054a 	and	w10, w10, #0x3
		names="fmaxnmv\0?\0?\0fmaxv\0fminnmv\0?\0?\0fminv\0";
   9064c:	f0000003 	adrp	x3, 93000 <sd_init+0xce8>
   90650:	913ea063 	add	x3, x3, #0xfa8
		op=((ic32_21)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90654:	12001059 	and	w25, w2, #0x1f
   90658:	1200101a 	and	w26, w0, #0x1f
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vn4s; 
   9065c:	528dea82 	mov	w2, #0x6f54                	// #28500
		op=((ic32_21)&0x4)|((ic32_12)&0x3); z=((ic32_22)&0x1); n=((ic32_5)&0x1f); t=((ic32)&0x1f); 
   90660:	2a0a0021 	orr	w1, w1, w10
   90664:	120000f7 	and	w23, w7, #0x1
		names="fmaxnmv\0?\0?\0fmaxv\0fminnmv\0?\0?\0fminv\0";
   90668:	9113e060 	add	x0, x3, #0x4f8
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   9066c:	52800018 	mov	w24, #0x0                   	// #0
   90670:	5280001b 	mov	w27, #0x0                   	// #0
	uint16_t op=0, om=0, j=0;
   90674:	52800014 	mov	w20, #0x0                   	// #0
	uint32_t i=0;
   90678:	290effff 	stp	wzr, wzr, [sp, #116]
	uint8_t t=0, s=0, n=0, k=0, m=0, c=0, p=0, a=0, d=0, b=0, q=0, z=0, o=0;
   9067c:	290fffff 	stp	wzr, wzr, [sp, #124]
   90680:	29117fff 	stp	wzr, wzr, [sp, #136]
   90684:	29127fff 	stp	wzr, wzr, [sp, #144]
   90688:	b9009bff 	str	wzr, [sp, #152]
		args[0]=disasm_arg_FPt; args[1]=disasm_arg_Vn4s; 
   9068c:	790583e2 	strh	w2, [sp, #704]
   90690:	a9435bf5 	ldp	x21, x22, [sp, #48]
   90694:	17ffd73b 	b	86380 <disasm+0x1c80>
		*str=0;
   90698:	a9035bf5 	stp	x21, x22, [sp, #48]
   9069c:	a90463f7 	stp	x23, x24, [sp, #64]
   906a0:	a9056bf9 	stp	x25, x26, [sp, #80]
   906a4:	3900027f 	strb	wzr, [x19]
   906a8:	d4207d00 	brk	#0x3e8
   906ac:	d503201f 	nop

00000000000906b0 <dbg_decodeexc>:

/**
 * Decode exception cause
 */
void dbg_decodeexc(uint64_t type)
{
   906b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   906b4:	f100041f 	cmp	x0, #0x1
   906b8:	910003fd 	mov	x29, sp
   906bc:	a90153f3 	stp	x19, x20, [sp, #16]
	uint8_t cause=dbg_regs[33]>>26;
   906c0:	b000aa74 	adrp	x20, 15dd000 <allocated+0xfbdd0>
   906c4:	9109a294 	add	x20, x20, #0x268
   906c8:	f9408693 	ldr	x19, [x20, #264]
   906cc:	d35a8673 	ubfx	x19, x19, #26, #8

	// print out interruption type
	switch(type) {
   906d0:	54000e40 	b.eq	90898 <dbg_decodeexc+0x1e8>  // b.none
   906d4:	b4000da0 	cbz	x0, 90888 <dbg_decodeexc+0x1d8>
   906d8:	f100081f 	cmp	x0, #0x2
   906dc:	54000ce0 	b.eq	90878 <dbg_decodeexc+0x1c8>  // b.none
   906e0:	f1000c1f 	cmp	x0, #0x3
   906e4:	54000081 	b.ne	906f4 <dbg_decodeexc+0x44>  // b.any
		case 0: printf("Synchronous"); break;
		case 1: printf("IRQ"); break;
		case 2: printf("FIQ"); break;
		case 3: printf("SError"); break;
   906e8:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   906ec:	9109e000 	add	x0, x0, #0x278
   906f0:	97ffc1dc 	bl	80e60 <printf>
	}
	printf(": ");
   906f4:	d0000000 	adrp	x0, 92000 <sd_readblock+0x158>
   906f8:	91224000 	add	x0, x0, #0x890
   906fc:	97ffc1d9 	bl	80e60 <printf>
	// decode exception type (some, not all. See ARM DDI0487B_b chapter D10.2.28)
	switch(cause) {
   90700:	71008a7f 	cmp	w19, #0x22
   90704:	54000fc0 	b.eq	908fc <dbg_decodeexc+0x24c>  // b.none
   90708:	54000589 	b.ls	907b8 <dbg_decodeexc+0x108>  // b.plast
   9070c:	7100b27f 	cmp	w19, #0x2c
   90710:	54000fe0 	b.eq	9090c <dbg_decodeexc+0x25c>  // b.none
   90714:	54000829 	b.ls	90818 <dbg_decodeexc+0x168>  // b.plast
   90718:	7100c67f 	cmp	w19, #0x31
   9071c:	54001000 	b.eq	9091c <dbg_decodeexc+0x26c>  // b.none
   90720:	7100f27f 	cmp	w19, #0x3c
   90724:	54001040 	b.eq	9092c <dbg_decodeexc+0x27c>  // b.none
   90728:	7100c27f 	cmp	w19, #0x30
   9072c:	54001180 	b.eq	9095c <dbg_decodeexc+0x2ac>  // b.none
		case 0b100110: printf("Stack alignment fault"); break;
		case 0b101100: printf("Floating point"); break;
		case 0b110000: printf("Breakpoint, lower EL"); break;
		case 0b110001: printf("Breakpoint, same EL"); break;
		case 0b111100: printf("Breakpoint instruction"); break;
		default: printf("Unknown %x", cause); break;
   90730:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90734:	2a1303e1 	mov	w1, w19
   90738:	910f0000 	add	x0, x0, #0x3c0
   9073c:	97ffc1c9 	bl	80e60 <printf>
	}
	// decode data abort cause
	if(cause==0b100100 || cause==0b100101) {
   90740:	51009260 	sub	w0, w19, #0x24
   90744:	12001c00 	and	w0, w0, #0xff
   90748:	7100041f 	cmp	w0, #0x1
   9074c:	540004c8 	b.hi	907e4 <dbg_decodeexc+0x134>  // b.pmore
		printf(", ");
   90750:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90754:	9113a000 	add	x0, x0, #0x4e8
   90758:	97ffc1c2 	bl	80e60 <printf>
		switch((dbg_regs[33]>>2)&0x3) {
   9075c:	f9408680 	ldr	x0, [x20, #264]
   90760:	d3420c00 	ubfx	x0, x0, #2, #2
   90764:	f100081f 	cmp	x0, #0x2
   90768:	54000a80 	b.eq	908b8 <dbg_decodeexc+0x208>  // b.none
   9076c:	f1000c1f 	cmp	x0, #0x3
   90770:	540009c0 	b.eq	908a8 <dbg_decodeexc+0x1f8>  // b.none
   90774:	f100041f 	cmp	x0, #0x1
   90778:	540011a0 	b.eq	909ac <dbg_decodeexc+0x2fc>  // b.none
			case 0: printf("Address size fault"); break;
   9077c:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90780:	910f4000 	add	x0, x0, #0x3d0
   90784:	97ffc1b7 	bl	80e60 <printf>
			case 1: printf("Translation fault"); break;
			case 2: printf("Access flag fault"); break;
			case 3: printf("Permission fault"); break;
		}
		switch(dbg_regs[33]&0x3) {
   90788:	f9408680 	ldr	x0, [x20, #264]
   9078c:	92400400 	and	x0, x0, #0x3
   90790:	f100081f 	cmp	x0, #0x2
   90794:	54000aa0 	b.eq	908e8 <dbg_decodeexc+0x238>  // b.none
   90798:	f1000c1f 	cmp	x0, #0x3
   9079c:	540009e0 	b.eq	908d8 <dbg_decodeexc+0x228>  // b.none
   907a0:	f100041f 	cmp	x0, #0x1
   907a4:	54000920 	b.eq	908c8 <dbg_decodeexc+0x218>  // b.none
			case 0: printf(" at level 0"); break;
   907a8:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   907ac:	9110c000 	add	x0, x0, #0x430
   907b0:	97ffc1ac 	bl	80e60 <printf>
   907b4:	1400000c 	b	907e4 <dbg_decodeexc+0x134>
   907b8:	71003a7f 	cmp	w19, #0xe
   907bc:	54000c00 	b.eq	9093c <dbg_decodeexc+0x28c>  // b.none
   907c0:	54000409 	b.ls	90840 <dbg_decodeexc+0x190>  // b.plast
   907c4:	7100827f 	cmp	w19, #0x20
   907c8:	54000c20 	b.eq	9094c <dbg_decodeexc+0x29c>  // b.none
   907cc:	54000d08 	b.hi	9096c <dbg_decodeexc+0x2bc>  // b.pmore
   907d0:	7100567f 	cmp	w19, #0x15
   907d4:	54fffae1 	b.ne	90730 <dbg_decodeexc+0x80>  // b.any
		case 0b010101: printf("System call"); break;
   907d8:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   907dc:	910ac000 	add	x0, x0, #0x2b0
   907e0:	97ffc1a0 	bl	80e60 <printf>
			case 1: printf(" at level 1"); break;
			case 2: printf(" at level 2 %x", dbg_regs[31]); break;
			case 3: printf(" at level 3"); break;
		}
	}
	printf("\n");
   907e4:	d0000000 	adrp	x0, 92000 <sd_readblock+0x158>
   907e8:	91342000 	add	x0, x0, #0xd08
   907ec:	97ffc19d 	bl	80e60 <printf>
	printf("%x\n", dbg_regs[31]);
   907f0:	f9407e81 	ldr	x1, [x20, #248]
   907f4:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   907f8:	9111c000 	add	x0, x0, #0x470
   907fc:	97ffc199 	bl	80e60 <printf>
	// if the exception happened in the debugger, we stop to avoid infinite loop
	if(dbg_running) {
   90800:	b0009aa0 	adrp	x0, 13e5000 <core_state>
   90804:	39402000 	ldrb	w0, [x0, #8]
   90808:	350002a0 	cbnz	w0, 9085c <dbg_decodeexc+0x1ac>
		printf("Exception in debugger!\n"
			"  elr_el1: %x  spsr_el1: %x\n  esr_el1: %x  far_el1: %x\nsctlr_el1: %x  tcr_el1: %x\n",
			dbg_regs[31],dbg_regs[32],dbg_regs[33],dbg_regs[34],dbg_regs[35],dbg_regs[36]);
		while(1);
	}
}
   9080c:	a94153f3 	ldp	x19, x20, [sp, #16]
   90810:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90814:	d65f03c0 	ret
   90818:	7100967f 	cmp	w19, #0x25
   9081c:	54000b00 	b.eq	9097c <dbg_decodeexc+0x2cc>  // b.none
   90820:	71009a7f 	cmp	w19, #0x26
   90824:	54000b40 	b.eq	9098c <dbg_decodeexc+0x2dc>  // b.none
   90828:	7100927f 	cmp	w19, #0x24
   9082c:	54fff821 	b.ne	90730 <dbg_decodeexc+0x80>  // b.any
		case 0b100100: printf("Data abort, lower EL"); break;
   90830:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90834:	910c8000 	add	x0, x0, #0x320
   90838:	97ffc18a 	bl	80e60 <printf>
   9083c:	17ffffc5 	b	90750 <dbg_decodeexc+0xa0>
   90840:	34000af3 	cbz	w19, 9099c <dbg_decodeexc+0x2ec>
   90844:	7100067f 	cmp	w19, #0x1
   90848:	54fff741 	b.ne	90730 <dbg_decodeexc+0x80>  // b.any
		case 0b000001: printf("Trapped WFI/WFE"); break;
   9084c:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90850:	910a2000 	add	x0, x0, #0x288
   90854:	97ffc183 	bl	80e60 <printf>
   90858:	17ffffe3 	b	907e4 <dbg_decodeexc+0x134>
		printf("Exception in debugger!\n"
   9085c:	a94f8a81 	ldp	x1, x2, [x20, #248]
   90860:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90864:	a9509283 	ldp	x3, x4, [x20, #264]
   90868:	9111e000 	add	x0, x0, #0x478
   9086c:	a9519a85 	ldp	x5, x6, [x20, #280]
   90870:	97ffc17c 	bl	80e60 <printf>
		while(1);
   90874:	14000000 	b	90874 <dbg_decodeexc+0x1c4>
		case 2: printf("FIQ"); break;
   90878:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   9087c:	9109c000 	add	x0, x0, #0x270
   90880:	97ffc178 	bl	80e60 <printf>
   90884:	17ffff9c 	b	906f4 <dbg_decodeexc+0x44>
		case 0: printf("Synchronous"); break;
   90888:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   9088c:	91096000 	add	x0, x0, #0x258
   90890:	97ffc174 	bl	80e60 <printf>
   90894:	17ffff98 	b	906f4 <dbg_decodeexc+0x44>
		case 1: printf("IRQ"); break;
   90898:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   9089c:	9109a000 	add	x0, x0, #0x268
   908a0:	97ffc170 	bl	80e60 <printf>
   908a4:	17ffff94 	b	906f4 <dbg_decodeexc+0x44>
			case 3: printf("Permission fault"); break;
   908a8:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   908ac:	91106000 	add	x0, x0, #0x418
   908b0:	97ffc16c 	bl	80e60 <printf>
   908b4:	17ffffb5 	b	90788 <dbg_decodeexc+0xd8>
			case 2: printf("Access flag fault"); break;
   908b8:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   908bc:	91100000 	add	x0, x0, #0x400
   908c0:	97ffc168 	bl	80e60 <printf>
   908c4:	17ffffb1 	b	90788 <dbg_decodeexc+0xd8>
			case 1: printf(" at level 1"); break;
   908c8:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   908cc:	91110000 	add	x0, x0, #0x440
   908d0:	97ffc164 	bl	80e60 <printf>
   908d4:	17ffffc4 	b	907e4 <dbg_decodeexc+0x134>
			case 3: printf(" at level 3"); break;
   908d8:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   908dc:	91118000 	add	x0, x0, #0x460
   908e0:	97ffc160 	bl	80e60 <printf>
   908e4:	17ffffc0 	b	907e4 <dbg_decodeexc+0x134>
			case 2: printf(" at level 2 %x", dbg_regs[31]); break;
   908e8:	f9407e81 	ldr	x1, [x20, #248]
   908ec:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   908f0:	91114000 	add	x0, x0, #0x450
   908f4:	97ffc15b 	bl	80e60 <printf>
   908f8:	17ffffbb 	b	907e4 <dbg_decodeexc+0x134>
		case 0b100010: printf("Instruction alignment fault"); break;
   908fc:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90900:	910c0000 	add	x0, x0, #0x300
   90904:	97ffc157 	bl	80e60 <printf>
   90908:	17ffffb7 	b	907e4 <dbg_decodeexc+0x134>
		case 0b101100: printf("Floating point"); break;
   9090c:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90910:	910da000 	add	x0, x0, #0x368
   90914:	97ffc153 	bl	80e60 <printf>
   90918:	17ffffb3 	b	907e4 <dbg_decodeexc+0x134>
		case 0b110001: printf("Breakpoint, same EL"); break;
   9091c:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90920:	910e4000 	add	x0, x0, #0x390
   90924:	97ffc14f 	bl	80e60 <printf>
   90928:	17ffffaf 	b	907e4 <dbg_decodeexc+0x134>
		case 0b111100: printf("Breakpoint instruction"); break;
   9092c:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90930:	910ea000 	add	x0, x0, #0x3a8
   90934:	97ffc14b 	bl	80e60 <printf>
   90938:	17ffffab 	b	907e4 <dbg_decodeexc+0x134>
		case 0b001110: printf("Illegal execution"); break;
   9093c:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90940:	910a6000 	add	x0, x0, #0x298
   90944:	97ffc147 	bl	80e60 <printf>
   90948:	17ffffa7 	b	907e4 <dbg_decodeexc+0x134>
		case 0b100000: printf("Instruction abort, lower EL"); break;
   9094c:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90950:	910b0000 	add	x0, x0, #0x2c0
   90954:	97ffc143 	bl	80e60 <printf>
   90958:	17ffffa3 	b	907e4 <dbg_decodeexc+0x134>
		case 0b110000: printf("Breakpoint, lower EL"); break;
   9095c:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90960:	910de000 	add	x0, x0, #0x378
   90964:	97ffc13f 	bl	80e60 <printf>
   90968:	17ffff9f 	b	907e4 <dbg_decodeexc+0x134>
		case 0b100001: printf("Instruction abort, same EL"); break;
   9096c:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90970:	910b8000 	add	x0, x0, #0x2e0
   90974:	97ffc13b 	bl	80e60 <printf>
   90978:	17ffff9b 	b	907e4 <dbg_decodeexc+0x134>
		case 0b100101: printf("Data abort, same EL"); break;
   9097c:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90980:	910ce000 	add	x0, x0, #0x338
   90984:	97ffc137 	bl	80e60 <printf>
   90988:	17ffff72 	b	90750 <dbg_decodeexc+0xa0>
		case 0b100110: printf("Stack alignment fault"); break;
   9098c:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90990:	910d4000 	add	x0, x0, #0x350
   90994:	97ffc133 	bl	80e60 <printf>
   90998:	17ffff93 	b	907e4 <dbg_decodeexc+0x134>
		case 0b000000: printf("Unknown"); break;
   9099c:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   909a0:	910a0000 	add	x0, x0, #0x280
   909a4:	97ffc12f 	bl	80e60 <printf>
   909a8:	17ffff8f 	b	907e4 <dbg_decodeexc+0x134>
			case 1: printf("Translation fault"); break;
   909ac:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   909b0:	910fa000 	add	x0, x0, #0x3e8
   909b4:	97ffc12b 	bl	80e60 <printf>
   909b8:	17ffff74 	b	90788 <dbg_decodeexc+0xd8>
   909bc:	d503201f 	nop

00000000000909c0 <dbg_getline>:
 * \e[3~ = 1, delete
 * \e[D  = 2, cursor left
 * \e[C  = 3, cursor right
 */
void dbg_getline()
{
   909c0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	int32_t i,cmdidx=0,cmdlast=0;
	char c;
	cmd[0]=0;
   909c4:	b000aa61 	adrp	x1, 15dd000 <allocated+0xfbdd0>
	// prompt
	printf("\r> ");
   909c8:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
{
   909cc:	910003fd 	mov	x29, sp
   909d0:	a90363f7 	stp	x23, x24, [sp, #48]
   909d4:	910e6037 	add	x23, x1, #0x398
	printf("\r> ");
   909d8:	9113c000 	add	x0, x0, #0x4f0
	cmd[0]=0;
   909dc:	390e603f 	strb	wzr, [x1, #920]
	printf("\r> ");
   909e0:	d10006f8 	sub	x24, x23, #0x1
{
   909e4:	a90153f3 	stp	x19, x20, [sp, #16]
	int32_t i,cmdidx=0,cmdlast=0;
   909e8:	52800014 	mov	w20, #0x0                   	// #0
   909ec:	52800013 	mov	w19, #0x0                   	// #0
{
   909f0:	a9025bf5 	stp	x21, x22, [sp, #32]
   909f4:	aa0103f6 	mov	x22, x1
			cmdlast++;
			cmd[cmdidx++]=c;
		}
		cmd[cmdlast]=0;
		// display prompt and command line, place cursor with CSI code
		printf("\r> %s \r\e[%dC",cmd,cmdidx+2);
   909f8:	d0000035 	adrp	x21, 96000 <sd_init+0x3ce8>
	printf("\r> ");
   909fc:	97ffc119 	bl	80e60 <printf>
		printf("\r> %s \r\e[%dC",cmd,cmdidx+2);
   90a00:	9113e2b5 	add	x21, x21, #0x4f8
	while((c=uart_getc())!='\n') {
   90a04:	14000008 	b	90a24 <dbg_getline+0x64>
			if(cmdidx>0) {
   90a08:	52800042 	mov	w2, #0x2                   	// #2
   90a0c:	910e62c3 	add	x3, x22, #0x398
   90a10:	350006b3 	cbnz	w19, 90ae4 <dbg_getline+0x124>
		printf("\r> %s \r\e[%dC",cmd,cmdidx+2);
   90a14:	aa0303e1 	mov	x1, x3
   90a18:	aa1503e0 	mov	x0, x21
		cmd[cmdlast]=0;
   90a1c:	3834c87f 	strb	wzr, [x3, w20, sxtw]
		printf("\r> %s \r\e[%dC",cmd,cmdidx+2);
   90a20:	97ffc110 	bl	80e60 <printf>
	while((c=uart_getc())!='\n') {
   90a24:	97ffc69b 	bl	82490 <uart_getc>
   90a28:	12001c00 	and	w0, w0, #0xff
   90a2c:	7100281f 	cmp	w0, #0xa
   90a30:	54000820 	b.eq	90b34 <dbg_getline+0x174>  // b.none
		if(c==27) {
   90a34:	71006c1f 	cmp	w0, #0x1b
   90a38:	540002a0 	b.eq	90a8c <dbg_getline+0xcc>  // b.none
		if(c==8 || c==127) {
   90a3c:	7101fc1f 	cmp	w0, #0x7f
   90a40:	7a481804 	ccmp	w0, #0x8, #0x4, ne  // ne = any
   90a44:	54fffe20 	b.eq	90a08 <dbg_getline+0x48>  // b.none
		if(c==1) {
   90a48:	7100041f 	cmp	w0, #0x1
   90a4c:	54000420 	b.eq	90ad0 <dbg_getline+0x110>  // b.none
		if(c==2) {
   90a50:	7100081f 	cmp	w0, #0x2
   90a54:	540007e0 	b.eq	90b50 <dbg_getline+0x190>  // b.none
		if(c==3) {
   90a58:	71000c1f 	cmp	w0, #0x3
   90a5c:	54000880 	b.eq	90b6c <dbg_getline+0x1ac>  // b.none
			if(c<' ' || cmdlast>=sizeof(cmd)-1) {
   90a60:	7103fa9f 	cmp	w20, #0xfe
   90a64:	7a5f9800 	ccmp	w0, #0x1f, #0x0, ls  // ls = plast
   90a68:	54fffde9 	b.ls	90a24 <dbg_getline+0x64>  // b.plast
			if(cmdidx<cmdlast) {
   90a6c:	6b14027f 	cmp	w19, w20
   90a70:	54000acb 	b.lt	90bc8 <dbg_getline+0x208>  // b.tstop
   90a74:	910e62c3 	add	x3, x22, #0x398
			cmdlast++;
   90a78:	11000e62 	add	w2, w19, #0x3
   90a7c:	11000694 	add	w20, w20, #0x1
			cmd[cmdidx++]=c;
   90a80:	3833c860 	strb	w0, [x3, w19, sxtw]
   90a84:	11000673 	add	w19, w19, #0x1
   90a88:	17ffffe3 	b	90a14 <dbg_getline+0x54>
			c=uart_getc();
   90a8c:	97ffc681 	bl	82490 <uart_getc>
   90a90:	12001c00 	and	w0, w0, #0xff
			if(c=='[') {
   90a94:	71016c1f 	cmp	w0, #0x5b
   90a98:	54fffd21 	b.ne	90a3c <dbg_getline+0x7c>  // b.any
				c=uart_getc();
   90a9c:	97ffc67d 	bl	82490 <uart_getc>
   90aa0:	12001c00 	and	w0, w0, #0xff
				if(c=='C') c=3; else    // left
   90aa4:	71010c1f 	cmp	w0, #0x43
   90aa8:	54000620 	b.eq	90b6c <dbg_getline+0x1ac>  // b.none
				if(c=='D') c=2; else    // right
   90aac:	7101101f 	cmp	w0, #0x44
   90ab0:	54000500 	b.eq	90b50 <dbg_getline+0x190>  // b.none
				if(c=='3') {
   90ab4:	7100cc1f 	cmp	w0, #0x33
   90ab8:	54fffc21 	b.ne	90a3c <dbg_getline+0x7c>  // b.any
					c=uart_getc();
   90abc:	97ffc675 	bl	82490 <uart_getc>
   90ac0:	12001c00 	and	w0, w0, #0xff
					if(c=='~') c=1;     // delete
   90ac4:	7101f81f 	cmp	w0, #0x7e
   90ac8:	54fffba1 	b.ne	90a3c <dbg_getline+0x7c>  // b.any
   90acc:	d503201f 	nop
			if(cmdidx<cmdlast) {
   90ad0:	6b14027f 	cmp	w19, w20
   90ad4:	11000a62 	add	w2, w19, #0x2
   90ad8:	5400056b 	b.lt	90b84 <dbg_getline+0x1c4>  // b.tstop
   90adc:	910e62c3 	add	x3, x22, #0x398
   90ae0:	17ffffcd 	b	90a14 <dbg_getline+0x54>
				cmdidx--;
   90ae4:	51000664 	sub	w4, w19, #0x1
				for(i=cmdidx;i<cmdlast;i++) cmd[i]=cmd[i+1];
   90ae8:	6b04029f 	cmp	w20, w4
   90aec:	540001cd 	b.le	90b24 <dbg_getline+0x164>
   90af0:	93407e60 	sxtw	x0, w19
   90af4:	4b130282 	sub	w2, w20, w19
   90af8:	8b000042 	add	x2, x2, x0
   90afc:	910006e1 	add	x1, x23, #0x1
   90b00:	8b0002e0 	add	x0, x23, x0
   90b04:	8b010042 	add	x2, x2, x1
   90b08:	aa1703e3 	mov	x3, x23
   90b0c:	d503201f 	nop
   90b10:	39400001 	ldrb	w1, [x0]
   90b14:	91000400 	add	x0, x0, #0x1
   90b18:	381fe001 	sturb	w1, [x0, #-2]
   90b1c:	eb00005f 	cmp	x2, x0
   90b20:	54ffff81 	b.ne	90b10 <dbg_getline+0x150>  // b.any
				cmdlast--;
   90b24:	11000662 	add	w2, w19, #0x1
   90b28:	51000694 	sub	w20, w20, #0x1
				cmdidx--;
   90b2c:	2a0403f3 	mov	w19, w4
   90b30:	17ffffb9 	b	90a14 <dbg_getline+0x54>
	}
	printf("\n");
}
   90b34:	a94153f3 	ldp	x19, x20, [sp, #16]
	printf("\n");
   90b38:	d0000000 	adrp	x0, 92000 <sd_readblock+0x158>
}
   90b3c:	a9425bf5 	ldp	x21, x22, [sp, #32]
	printf("\n");
   90b40:	91342000 	add	x0, x0, #0xd08
}
   90b44:	a94363f7 	ldp	x23, x24, [sp, #48]
   90b48:	a8c47bfd 	ldp	x29, x30, [sp], #64
	printf("\n");
   90b4c:	17ffc0c5 	b	80e60 <printf>
			if(cmdidx>0) cmdidx--;
   90b50:	52800042 	mov	w2, #0x2                   	// #2
   90b54:	910e62c3 	add	x3, x22, #0x398
   90b58:	34fff5f3 	cbz	w19, 90a14 <dbg_getline+0x54>
   90b5c:	11000662 	add	w2, w19, #0x1
   90b60:	910e62c3 	add	x3, x22, #0x398
   90b64:	51000673 	sub	w19, w19, #0x1
   90b68:	17ffffab 	b	90a14 <dbg_getline+0x54>
			if(cmdidx<cmdlast) cmdidx++;
   90b6c:	6b14027f 	cmp	w19, w20
   90b70:	5400026a 	b.ge	90bbc <dbg_getline+0x1fc>  // b.tcont
   90b74:	11000e62 	add	w2, w19, #0x3
   90b78:	910e62c3 	add	x3, x22, #0x398
   90b7c:	11000673 	add	w19, w19, #0x1
   90b80:	17ffffa5 	b	90a14 <dbg_getline+0x54>
   90b84:	51000694 	sub	w20, w20, #0x1
   90b88:	93407e60 	sxtw	x0, w19
   90b8c:	4b130284 	sub	w4, w20, w19
   90b90:	910006e1 	add	x1, x23, #0x1
   90b94:	8b000084 	add	x4, x4, x0
   90b98:	aa1703e3 	mov	x3, x23
   90b9c:	8b0002e0 	add	x0, x23, x0
   90ba0:	8b010084 	add	x4, x4, x1
   90ba4:	d503201f 	nop
				for(i=cmdidx;i<cmdlast;i++) cmd[i]=cmd[i+1];
   90ba8:	39400401 	ldrb	w1, [x0, #1]
   90bac:	38001401 	strb	w1, [x0], #1
   90bb0:	eb00009f 	cmp	x4, x0
   90bb4:	54ffffa1 	b.ne	90ba8 <dbg_getline+0x1e8>  // b.any
   90bb8:	17ffff97 	b	90a14 <dbg_getline+0x54>
   90bbc:	11000a62 	add	w2, w19, #0x2
   90bc0:	910e62c3 	add	x3, x22, #0x398
   90bc4:	17ffff94 	b	90a14 <dbg_getline+0x54>
   90bc8:	51000684 	sub	w4, w20, #0x1
   90bcc:	93407e82 	sxtw	x2, w20
   90bd0:	4b130084 	sub	w4, w4, w19
   90bd4:	8b0202e1 	add	x1, x23, x2
   90bd8:	cb040042 	sub	x2, x2, x4
   90bdc:	aa1703e3 	mov	x3, x23
   90be0:	8b180044 	add	x4, x2, x24
   90be4:	d503201f 	nop
					cmd[i]=cmd[i-1];
   90be8:	385ff022 	ldurb	w2, [x1, #-1]
   90bec:	381ff422 	strb	w2, [x1], #-1
				for(i=cmdlast;i>cmdidx;i--)
   90bf0:	eb04003f 	cmp	x1, x4
   90bf4:	54ffffa1 	b.ne	90be8 <dbg_getline+0x228>  // b.any
   90bf8:	17ffffa0 	b	90a78 <dbg_getline+0xb8>
   90bfc:	d503201f 	nop

0000000000090c00 <dbg_getoffs>:
uint64_t dbg_getoffs(int32_t i)
{
	uint64_t base=0,ret=0;
	int32_t j=0,sign=0;
	// if starts with a register
	if(cmd[i]=='x' || cmd[i]=='r') {
   90c00:	b000aa64 	adrp	x4, 15dd000 <allocated+0xfbdd0>
   90c04:	910e6084 	add	x4, x4, #0x398
   90c08:	52800e41 	mov	w1, #0x72                  	// #114
   90c0c:	3860c882 	ldrb	w2, [x4, w0, sxtw]
   90c10:	7101e05f 	cmp	w2, #0x78
   90c14:	7a411044 	ccmp	w2, w1, #0x4, ne  // ne = any
   90c18:	54000721 	b.ne	90cfc <dbg_getoffs+0xfc>  // b.any
		i++; if(cmd[i]>='0' && cmd[i]<='9') { j=cmd[i]-'0'; }
   90c1c:	11000401 	add	w1, w0, #0x1
   90c20:	11000802 	add	w2, w0, #0x2
   90c24:	3861c881 	ldrb	w1, [x4, w1, sxtw]
   90c28:	3862c882 	ldrb	w2, [x4, w2, sxtw]
   90c2c:	5100c021 	sub	w1, w1, #0x30
   90c30:	12001c23 	and	w3, w1, #0xff
   90c34:	5100c042 	sub	w2, w2, #0x30
   90c38:	7100247f 	cmp	w3, #0x9
   90c3c:	12001c43 	and	w3, w2, #0xff
   90c40:	54000969 	b.ls	90d6c <dbg_getoffs+0x16c>  // b.plast
	int32_t j=0,sign=0;
   90c44:	7100287f 	cmp	w3, #0xa
   90c48:	1a9f3041 	csel	w1, w2, wzr, cc  // cc = lo, ul, last
		i++; if(cmd[i]>='0' && cmd[i]<='9') { j*=10; j+=cmd[i]-'0'; }
		if(j>=0 && j<37) base=dbg_regs[j];
   90c4c:	b000aa62 	adrp	x2, 15dd000 <allocated+0xfbdd0>
   90c50:	9109a042 	add	x2, x2, #0x268
   90c54:	f861d848 	ldr	x8, [x2, w1, sxtw #3]
		i++;
   90c58:	11000c01 	add	w1, w0, #0x3
		if(cmd[i]=='-') { i++; sign++; }
   90c5c:	3861c882 	ldrb	w2, [x4, w1, sxtw]
   90c60:	7100b45f 	cmp	w2, #0x2d
   90c64:	540009a0 	b.eq	90d98 <dbg_getoffs+0x198>  // b.none
		i++;
   90c68:	2a0103e0 	mov	w0, w1
	int32_t j=0,sign=0;
   90c6c:	52800009 	mov	w9, #0x0                   	// #0
		if(cmd[i]=='+') i++;
   90c70:	7100ac5f 	cmp	w2, #0x2b
   90c74:	54000481 	b.ne	90d04 <dbg_getoffs+0x104>  // b.any
   90c78:	11000400 	add	w0, w0, #0x1
   90c7c:	3860c882 	ldrb	w2, [x4, w0, sxtw]
	}
	// offset part
	if(cmd[i]=='0' && cmd[i+1]=='x') {
   90c80:	7100c05f 	cmp	w2, #0x30
   90c84:	54000441 	b.ne	90d0c <dbg_getoffs+0x10c>  // b.any
   90c88:	11000401 	add	w1, w0, #0x1
   90c8c:	52800003 	mov	w3, #0x0                   	// #0
   90c90:	3861c882 	ldrb	w2, [x4, w1, sxtw]
   90c94:	7101e05f 	cmp	w2, #0x78
   90c98:	54000461 	b.ne	90d24 <dbg_getoffs+0x124>  // b.any
		i+=2;
		// hex value
		while((cmd[i]>='0'&&cmd[i]<='9')||(cmd[i]>='a'&&cmd[i]<='f')||(cmd[i]>='A'&&cmd[i]<='F')) {
   90c9c:	8b20c080 	add	x0, x4, w0, sxtw
	uint64_t base=0,ret=0;
   90ca0:	d2800001 	mov	x1, #0x0                   	// #0
   90ca4:	d503201f 	nop
		while((cmd[i]>='0'&&cmd[i]<='9')||(cmd[i]>='a'&&cmd[i]<='f')||(cmd[i]>='A'&&cmd[i]<='F')) {
   90ca8:	39400802 	ldrb	w2, [x0, #2]
			ret <<= 4;
   90cac:	d37cec23 	lsl	x3, x1, #4
			if(cmd[i]>='0' && cmd[i]<='9') ret += cmd[i]-'0';
   90cb0:	51015c44 	sub	w4, w2, #0x57
		while((cmd[i]>='0'&&cmd[i]<='9')||(cmd[i]>='a'&&cmd[i]<='f')||(cmd[i]>='A'&&cmd[i]<='F')) {
   90cb4:	51018445 	sub	w5, w2, #0x61
			else if(cmd[i] >= 'a' && cmd[i] <= 'f') ret += cmd[i]-'a'+10;
			else if(cmd[i] >= 'A' && cmd[i] <= 'F') ret += cmd[i]-'A'+10;
   90cb8:	5100dc47 	sub	w7, w2, #0x37
		while((cmd[i]>='0'&&cmd[i]<='9')||(cmd[i]>='a'&&cmd[i]<='f')||(cmd[i]>='A'&&cmd[i]<='F')) {
   90cbc:	12001ca5 	and	w5, w5, #0xff
			if(cmd[i]>='0' && cmd[i]<='9') ret += cmd[i]-'0';
   90cc0:	8b24c066 	add	x6, x3, w4, sxtw
		while((cmd[i]>='0'&&cmd[i]<='9')||(cmd[i]>='a'&&cmd[i]<='f')||(cmd[i]>='A'&&cmd[i]<='F')) {
   90cc4:	5100c044 	sub	w4, w2, #0x30
   90cc8:	710014bf 	cmp	w5, #0x5
   90ccc:	51010442 	sub	w2, w2, #0x41
			if(cmd[i]>='0' && cmd[i]<='9') ret += cmd[i]-'0';
   90cd0:	8b24c063 	add	x3, x3, w4, sxtw
		while((cmd[i]>='0'&&cmd[i]<='9')||(cmd[i]>='a'&&cmd[i]<='f')||(cmd[i]>='A'&&cmd[i]<='F')) {
   90cd4:	12001c84 	and	w4, w4, #0xff
   90cd8:	12001c42 	and	w2, w2, #0xff
			else if(cmd[i] >= 'A' && cmd[i] <= 'F') ret += cmd[i]-'A'+10;
   90cdc:	93407ce7 	sxtw	x7, w7
		while((cmd[i]>='0'&&cmd[i]<='9')||(cmd[i]>='a'&&cmd[i]<='f')||(cmd[i]>='A'&&cmd[i]<='F')) {
   90ce0:	7a498880 	ccmp	w4, #0x9, #0x0, hi  // hi = pmore
   90ce4:	54000629 	b.ls	90da8 <dbg_getoffs+0x1a8>  // b.plast
   90ce8:	7100145f 	cmp	w2, #0x5
   90cec:	54000368 	b.hi	90d58 <dbg_getoffs+0x158>  // b.pmore
			else if(cmd[i] >= 'A' && cmd[i] <= 'F') ret += cmd[i]-'A'+10;
   90cf0:	8b0110e1 	add	x1, x7, x1, lsl #4
			i++;
   90cf4:	91000400 	add	x0, x0, #0x1
   90cf8:	17ffffec 	b	90ca8 <dbg_getoffs+0xa8>
	int32_t j=0,sign=0;
   90cfc:	52800009 	mov	w9, #0x0                   	// #0
	uint64_t base=0,ret=0;
   90d00:	d2800008 	mov	x8, #0x0                   	// #0
	if(cmd[i]=='0' && cmd[i+1]=='x') {
   90d04:	7100c05f 	cmp	w2, #0x30
   90d08:	54fffc00 	b.eq	90c88 <dbg_getoffs+0x88>  // b.none
		}
	} else {
		// decimal value
		while(cmd[i]>='0'&&cmd[i]<='9'){
   90d0c:	5100c043 	sub	w3, w2, #0x30
   90d10:	12001c61 	and	w1, w3, #0xff
   90d14:	7100243f 	cmp	w1, #0x9
   90d18:	54000508 	b.hi	90db8 <dbg_getoffs+0x1b8>  // b.pmore
   90d1c:	11000401 	add	w1, w0, #0x1
   90d20:	3861c882 	ldrb	w2, [x4, w1, sxtw]
   90d24:	8b20c080 	add	x0, x4, w0, sxtw
	uint64_t base=0,ret=0;
   90d28:	d2800001 	mov	x1, #0x0                   	// #0
   90d2c:	14000003 	b	90d38 <dbg_getoffs+0x138>
   90d30:	5100c043 	sub	w3, w2, #0x30
		while(cmd[i]>='0'&&cmd[i]<='9'){
   90d34:	39400402 	ldrb	w2, [x0, #1]
			ret *= 10;
   90d38:	8b010821 	add	x1, x1, x1, lsl #2
		while(cmd[i]>='0'&&cmd[i]<='9'){
   90d3c:	5100c044 	sub	w4, w2, #0x30
			ret += cmd[i++]-'0';
   90d40:	93407c63 	sxtw	x3, w3
		while(cmd[i]>='0'&&cmd[i]<='9'){
   90d44:	12001c84 	and	w4, w4, #0xff
			ret += cmd[i++]-'0';
   90d48:	8b010461 	add	x1, x3, x1, lsl #1
   90d4c:	91000400 	add	x0, x0, #0x1
		while(cmd[i]>='0'&&cmd[i]<='9'){
   90d50:	7100249f 	cmp	w4, #0x9
   90d54:	54fffee9 	b.ls	90d30 <dbg_getoffs+0x130>  // b.plast
		}
	}
	// return base + offset
	return sign? base-ret : base+ret;
   90d58:	cb010100 	sub	x0, x8, x1
   90d5c:	7100013f 	cmp	w9, #0x0
   90d60:	8b010101 	add	x1, x8, x1
   90d64:	9a800020 	csel	x0, x1, x0, eq  // eq = none
}
   90d68:	d65f03c0 	ret
		i++; if(cmd[i]>='0' && cmd[i]<='9') { j*=10; j+=cmd[i]-'0'; }
   90d6c:	7100247f 	cmp	w3, #0x9
   90d70:	54fff6e8 	b.hi	90c4c <dbg_getoffs+0x4c>  // b.pmore
   90d74:	0b010821 	add	w1, w1, w1, lsl #2
	uint64_t base=0,ret=0;
   90d78:	d2800008 	mov	x8, #0x0                   	// #0
		i++; if(cmd[i]>='0' && cmd[i]<='9') { j*=10; j+=cmd[i]-'0'; }
   90d7c:	0b010441 	add	w1, w2, w1, lsl #1
		if(j>=0 && j<37) base=dbg_regs[j];
   90d80:	7100903f 	cmp	w1, #0x24
   90d84:	54fff64d 	b.le	90c4c <dbg_getoffs+0x4c>
		i++;
   90d88:	11000c01 	add	w1, w0, #0x3
		if(cmd[i]=='-') { i++; sign++; }
   90d8c:	3861c882 	ldrb	w2, [x4, w1, sxtw]
   90d90:	7100b45f 	cmp	w2, #0x2d
   90d94:	54fff6a1 	b.ne	90c68 <dbg_getoffs+0x68>  // b.any
   90d98:	11001000 	add	w0, w0, #0x4
   90d9c:	52800029 	mov	w9, #0x1                   	// #1
   90da0:	3860c882 	ldrb	w2, [x4, w0, sxtw]
   90da4:	17ffffb3 	b	90c70 <dbg_getoffs+0x70>
			if(cmd[i]>='0' && cmd[i]<='9') ret += cmd[i]-'0';
   90da8:	7100249f 	cmp	w4, #0x9
   90dac:	91000400 	add	x0, x0, #0x1
   90db0:	9a8380c1 	csel	x1, x6, x3, hi  // hi = pmore
			i++;
   90db4:	17ffffbd 	b	90ca8 <dbg_getoffs+0xa8>
		while(cmd[i]>='0'&&cmd[i]<='9'){
   90db8:	d2800001 	mov	x1, #0x0                   	// #0
   90dbc:	17ffffe7 	b	90d58 <dbg_getoffs+0x158>

0000000000090dc0 <dbg_main>:

/**
 * main loop, get and parse commands
 */
void dbg_main()
{
   90dc0:	a9b47bfd 	stp	x29, x30, [sp, #-192]!
#if DISASSEMBLER
	char str[64];
#endif
	int32_t i;

	dbg_running++;
   90dc4:	b0009aa0 	adrp	x0, 13e5000 <core_state>
{
   90dc8:	910003fd 	mov	x29, sp
   90dcc:	a90573fb 	stp	x27, x28, [sp, #80]
   90dd0:	b000aa7c 	adrp	x28, 15dd000 <allocated+0xfbdd0>
   90dd4:	9109a381 	add	x1, x28, #0x268
	dbg_running++;
   90dd8:	39402000 	ldrb	w0, [x0, #8]
   90ddc:	b000aa7b 	adrp	x27, 15dd000 <allocated+0xfbdd0>
   90de0:	f90033e1 	str	x1, [sp, #96]
   90de4:	b0009aa1 	adrp	x1, 13e5000 <core_state>
   90de8:	910e637b 	add	x27, x27, #0x398
{
   90dec:	a9025bf5 	stp	x21, x22, [sp, #32]
				for(a=os;a<oe;a+=16) {
					// print out address
					printf("%8x: ", a);
					// hex representation
					for(i=0;i<16;i++) {
						printf("%2x%s ",*((uint8_t*)(a+i)),i%4==3?" ":"");
   90df0:	d0000015 	adrp	x21, 92000 <sd_readblock+0x158>
   90df4:	913242b5 	add	x21, x21, #0xc90
	dbg_running++;
   90df8:	11000400 	add	w0, w0, #0x1
   90dfc:	39002020 	strb	w0, [x1, #8]
{
   90e00:	a90153f3 	stp	x19, x20, [sp, #16]
   90e04:	a90363f7 	stp	x23, x24, [sp, #48]
   90e08:	a9046bf9 	stp	x25, x26, [sp, #64]
   90e0c:	d503201f 	nop
		dbg_getline();
   90e10:	97fffeec 	bl	909c0 <dbg_getline>
		if(cmd[0]==0 || cmd[0]=='?' || cmd[0]=='h') {
   90e14:	3940036a 	ldrb	w10, [x27]
   90e18:	52800d00 	mov	w0, #0x68                  	// #104
   90e1c:	7100fd5f 	cmp	w10, #0x3f
   90e20:	7a401944 	ccmp	w10, #0x0, #0x4, ne  // ne = any
   90e24:	7a401144 	ccmp	w10, w0, #0x4, ne  // ne = any
   90e28:	54000260 	b.eq	90e74 <dbg_main+0xb4>  // b.none
		if(cmd[0]=='c') {
   90e2c:	71018d5f 	cmp	w10, #0x63
   90e30:	54000c40 	b.eq	90fb8 <dbg_main+0x1f8>  // b.none
		if(cmd[0]=='r') {
   90e34:	7101c95f 	cmp	w10, #0x72
   90e38:	54000e00 	b.eq	90ff8 <dbg_main+0x238>  // b.none
		if(cmd[0]=='x' || cmd[0]=='i') {
   90e3c:	7101e15f 	cmp	w10, #0x78
   90e40:	52800d20 	mov	w0, #0x69                  	// #105
   90e44:	7a401144 	ccmp	w10, w0, #0x4, ne  // ne = any
   90e48:	540001e0 	b.eq	90e84 <dbg_main+0xc4>  // b.none
					printf("\n");
				}
			}
			continue;
		} else {
			printf("ERROR: unknown command.\n");
   90e4c:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90e50:	911a2000 	add	x0, x0, #0x688
   90e54:	97ffc003 	bl	80e60 <printf>
		dbg_getline();
   90e58:	97fffeda 	bl	909c0 <dbg_getline>
		if(cmd[0]==0 || cmd[0]=='?' || cmd[0]=='h') {
   90e5c:	3940036a 	ldrb	w10, [x27]
   90e60:	52800d00 	mov	w0, #0x68                  	// #104
   90e64:	7100fd5f 	cmp	w10, #0x3f
   90e68:	7a401944 	ccmp	w10, #0x0, #0x4, ne  // ne = any
   90e6c:	7a401144 	ccmp	w10, w0, #0x4, ne  // ne = any
   90e70:	54fffde1 	b.ne	90e2c <dbg_main+0x6c>  // b.any
			printf("Mini debugger commands:\n"
   90e74:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90e78:	91142000 	add	x0, x0, #0x508
   90e7c:	97ffbff9 	bl	80e60 <printf>
			continue;
   90e80:	17ffffe4 	b	90e10 <dbg_main+0x50>
			while(cmd[i]!=0 && cmd[i]!=' ') i++;    // skip command
   90e84:	39400760 	ldrb	w0, [x27, #1]
   90e88:	121a7801 	and	w1, w0, #0xffffffdf
   90e8c:	34001b81 	cbz	w1, 911fc <dbg_main+0x43c>
   90e90:	d2800041 	mov	x1, #0x2                   	// #2
   90e94:	d503201f 	nop
   90e98:	38616b60 	ldrb	w0, [x27, x1]
   90e9c:	2a0103eb 	mov	w11, w1
   90ea0:	91000421 	add	x1, x1, #0x1
   90ea4:	121a7802 	and	w2, w0, #0xffffffdf
   90ea8:	35ffff82 	cbnz	w2, 90e98 <dbg_main+0xd8>
			while(cmd[i]!=0 && cmd[i]==' ') i++;    // skip separators
   90eac:	7100801f 	cmp	w0, #0x20
   90eb0:	54000161 	b.ne	90edc <dbg_main+0x11c>  // b.any
   90eb4:	11000561 	add	w1, w11, #0x1
   90eb8:	b000aa62 	adrp	x2, 15dd000 <allocated+0xfbdd0>
   90ebc:	910e5c42 	add	x2, x2, #0x397
   90ec0:	93407c21 	sxtw	x1, w1
   90ec4:	d503201f 	nop
   90ec8:	2a0103eb 	mov	w11, w1
   90ecc:	91000421 	add	x1, x1, #0x1
   90ed0:	38616840 	ldrb	w0, [x2, x1]
   90ed4:	7100801f 	cmp	w0, #0x20
   90ed8:	54ffff80 	b.eq	90ec8 <dbg_main+0x108>  // b.none
			if(cmd[i]!=0) {
   90edc:	35000fc0 	cbnz	w0, 910d4 <dbg_main+0x314>
				if(cmd[0]=='i') {
   90ee0:	7101a55f 	cmp	w10, #0x69
					os=oe=dbg_regs[31]?dbg_regs[31]:dbg_regs[30];
   90ee4:	f94033e0 	ldr	x0, [sp, #96]
				if(cmd[0]=='i') {
   90ee8:	54001800 	b.eq	911e8 <dbg_main+0x428>  // b.none
					os=oe=dbg_regs[29];
   90eec:	f9407413 	ldr	x19, [x0, #232]
				if(oe<=os) oe=os+16;
   90ef0:	9100427a 	add	x26, x19, #0x10
   90ef4:	f90037fa 	str	x26, [sp, #104]
				for(a=os;a<oe;a+=16) {
   90ef8:	eb13035f 	cmp	x26, x19
   90efc:	54fff8a9 	b.ls	90e10 <dbg_main+0x50>  // b.plast
   90f00:	d0000038 	adrp	x24, 96000 <sd_init+0x3ce8>
   90f04:	d0000037 	adrp	x23, 96000 <sd_init+0x3ce8>
						printf("%2x%s ",*((uint8_t*)(a+i)),i%4==3?" ":"");
   90f08:	d0000036 	adrp	x22, 96000 <sd_init+0x3ce8>
   90f0c:	9119e318 	add	x24, x24, #0x678
   90f10:	911a02f7 	add	x23, x23, #0x680
   90f14:	aa1a03f4 	mov	x20, x26
   90f18:	911a82d6 	add	x22, x22, #0x6a0
   90f1c:	d0000001 	adrp	x1, 92000 <sd_readblock+0x158>
   90f20:	d0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   90f24:	91342021 	add	x1, x1, #0xd08
   90f28:	9119c000 	add	x0, x0, #0x670
						printf("%c",c<32||c>=127?'.':c);
   90f2c:	528005d9 	mov	w25, #0x2e                  	// #46
   90f30:	a90703e1 	stp	x1, x0, [sp, #112]
   90f34:	d503201f 	nop
					printf("%8x: ", a);
   90f38:	d280001c 	mov	x28, #0x0                   	// #0
   90f3c:	f9403fe0 	ldr	x0, [sp, #120]
   90f40:	aa1303e1 	mov	x1, x19
   90f44:	97ffbfc7 	bl	80e60 <printf>
						printf("%2x%s ",*((uint8_t*)(a+i)),i%4==3?" ":"");
   90f48:	12000780 	and	w0, w28, #0x3
   90f4c:	38736b81 	ldrb	w1, [x28, x19]
   90f50:	71000c1f 	cmp	w0, #0x3
   90f54:	9100079c 	add	x28, x28, #0x1
   90f58:	9a9602a2 	csel	x2, x21, x22, eq  // eq = none
   90f5c:	aa1803e0 	mov	x0, x24
   90f60:	97ffbfc0 	bl	80e60 <printf>
					for(i=0;i<16;i++) {
   90f64:	f100439f 	cmp	x28, #0x10
   90f68:	54ffff01 	b.ne	90f48 <dbg_main+0x188>  // b.any
   90f6c:	d503201f 	nop
						c=*((uint8_t*)(a+i));
   90f70:	38401661 	ldrb	w1, [x19], #1
						printf("%c",c<32||c>=127?'.':c);
   90f74:	aa1703e0 	mov	x0, x23
   90f78:	51008022 	sub	w2, w1, #0x20
   90f7c:	12001c42 	and	w2, w2, #0xff
   90f80:	71017c5f 	cmp	w2, #0x5f
   90f84:	1a993021 	csel	w1, w1, w25, cc  // cc = lo, ul, last
   90f88:	97ffbfb6 	bl	80e60 <printf>
					for(i=0;i<16;i++) {
   90f8c:	eb13029f 	cmp	x20, x19
   90f90:	54ffff01 	b.ne	90f70 <dbg_main+0x1b0>  // b.any
					printf("\n");
   90f94:	f9403be0 	ldr	x0, [sp, #112]
   90f98:	91004294 	add	x20, x20, #0x10
				for(a=os;a<oe;a+=16) {
   90f9c:	aa1a03f3 	mov	x19, x26
					printf("\n");
   90fa0:	97ffbfb0 	bl	80e60 <printf>
				for(a=os;a<oe;a+=16) {
   90fa4:	f94037e0 	ldr	x0, [sp, #104]
   90fa8:	eb00035f 	cmp	x26, x0
   90fac:	54fff322 	b.cs	90e10 <dbg_main+0x50>  // b.hs, b.nlast
   90fb0:	9100435a 	add	x26, x26, #0x10
   90fb4:	17ffffe1 	b	90f38 <dbg_main+0x178>
			asm volatile ("msr elr_el1, %0" : : "r" (dbg_regs[31]+4));
   90fb8:	f94033e0 	ldr	x0, [sp, #96]
   90fbc:	f9407c00 	ldr	x0, [x0, #248]
   90fc0:	91001000 	add	x0, x0, #0x4
   90fc4:	d5184020 	msr	elr_el1, x0
		}
	}
	dbg_running--;
   90fc8:	b0009aa0 	adrp	x0, 13e5000 <core_state>
   90fcc:	b0009aa1 	adrp	x1, 13e5000 <core_state>
}
   90fd0:	a94153f3 	ldp	x19, x20, [sp, #16]
	dbg_running--;
   90fd4:	39402000 	ldrb	w0, [x0, #8]
}
   90fd8:	a9425bf5 	ldp	x21, x22, [sp, #32]
	dbg_running--;
   90fdc:	51000400 	sub	w0, w0, #0x1
   90fe0:	39002020 	strb	w0, [x1, #8]
}
   90fe4:	a94363f7 	ldp	x23, x24, [sp, #48]
   90fe8:	a9446bf9 	ldp	x25, x26, [sp, #64]
   90fec:	a94573fb 	ldp	x27, x28, [sp, #80]
   90ff0:	a8cc7bfd 	ldp	x29, x30, [sp], #192
   90ff4:	d65f03c0 	ret
				if(i && i%3==0) printf("\n");
   90ff8:	52955560 	mov	w0, #0xaaab                	// #43691
   90ffc:	d2800013 	mov	x19, #0x0                   	// #0
   91000:	72b55540 	movk	w0, #0xaaaa, lsl #16
   91004:	b0000036 	adrp	x22, 96000 <sd_init+0x3ce8>
   91008:	b0000017 	adrp	x23, 92000 <sd_readblock+0x158>
   9100c:	9117c2d6 	add	x22, x22, #0x5f0
   91010:	913422f7 	add	x23, x23, #0xd08
   91014:	9ba07e60 	umull	x0, w19, w0
   91018:	2a1303f4 	mov	w20, w19
   9101c:	2a1303f8 	mov	w24, w19
   91020:	2a1303f9 	mov	w25, w19
   91024:	b40002d3 	cbz	x19, 9107c <dbg_main+0x2bc>
   91028:	d361fc00 	lsr	x0, x0, #33
   9102c:	0b000400 	add	w0, w0, w0, lsl #1
   91030:	6b13001f 	cmp	w0, w19
   91034:	540004a0 	b.eq	910c8 <dbg_main+0x308>  // b.none
				printf("x%d: %16x  ",i,dbg_regs[i]);
   91038:	2a1803e1 	mov	w1, w24
   9103c:	aa1603e0 	mov	x0, x22
				if(i<10) printf(" ");
   91040:	7100273f 	cmp	w25, #0x9
   91044:	540001cd 	b.le	9107c <dbg_main+0x2bc>
				printf("x%d: %16x  ",i,dbg_regs[i]);
   91048:	f94033e2 	ldr	x2, [sp, #96]
   9104c:	f8737842 	ldr	x2, [x2, x19, lsl #3]
   91050:	97ffbf84 	bl	80e60 <printf>
			for(i=0;i<31;i++) {
   91054:	71007a9f 	cmp	w20, #0x1e
   91058:	54000240 	b.eq	910a0 <dbg_main+0x2e0>  // b.none
   9105c:	91000673 	add	x19, x19, #0x1
				if(i && i%3==0) printf("\n");
   91060:	52955560 	mov	w0, #0xaaab                	// #43691
   91064:	2a1303f4 	mov	w20, w19
   91068:	72b55540 	movk	w0, #0xaaaa, lsl #16
   9106c:	2a1303f8 	mov	w24, w19
   91070:	2a1303f9 	mov	w25, w19
   91074:	9ba07e60 	umull	x0, w19, w0
   91078:	b5fffd93 	cbnz	x19, 91028 <dbg_main+0x268>
				if(i<10) printf(" ");
   9107c:	aa1503e0 	mov	x0, x21
   91080:	97ffbf78 	bl	80e60 <printf>
				printf("x%d: %16x  ",i,dbg_regs[i]);
   91084:	f94033e0 	ldr	x0, [sp, #96]
   91088:	2a1803e1 	mov	w1, w24
   9108c:	f8737802 	ldr	x2, [x0, x19, lsl #3]
   91090:	aa1603e0 	mov	x0, x22
   91094:	91000673 	add	x19, x19, #0x1
   91098:	97ffbf72 	bl	80e60 <printf>
   9109c:	17fffff1 	b	91060 <dbg_main+0x2a0>
			printf("elr_el1: %x  spsr_el1: %x\n  esr_el1: %x  far_el1: %x\nsctlr_el1: %x  tcr_el1: %x\n",
   910a0:	f94033e6 	ldr	x6, [sp, #96]
   910a4:	b0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   910a8:	91180000 	add	x0, x0, #0x600
   910ac:	a94f88c1 	ldp	x1, x2, [x6, #248]
   910b0:	f94084c3 	ldr	x3, [x6, #264]
   910b4:	f94088c4 	ldr	x4, [x6, #272]
   910b8:	f9408cc5 	ldr	x5, [x6, #280]
   910bc:	f94090c6 	ldr	x6, [x6, #288]
   910c0:	97ffbf68 	bl	80e60 <printf>
			continue;
   910c4:	17ffff53 	b	90e10 <dbg_main+0x50>
				if(i && i%3==0) printf("\n");
   910c8:	aa1703e0 	mov	x0, x23
   910cc:	97ffbf65 	bl	80e60 <printf>
   910d0:	17ffffda 	b	91038 <dbg_main+0x278>
				os=oe=dbg_getoffs(i);
   910d4:	2a0b03e0 	mov	w0, w11
   910d8:	97fffeca 	bl	90c00 <dbg_getoffs>
   910dc:	aa0003f3 	mov	x19, x0
				while(cmd[i]!=0 && cmd[i]!=' ') i++;    // skip 1st arg
   910e0:	386bcb60 	ldrb	w0, [x27, w11, sxtw]
   910e4:	121a7801 	and	w1, w0, #0xffffffdf
   910e8:	34000121 	cbz	w1, 9110c <dbg_main+0x34c>
   910ec:	1100056b 	add	w11, w11, #0x1
   910f0:	93407d61 	sxtw	x1, w11
   910f4:	d503201f 	nop
   910f8:	38616b60 	ldrb	w0, [x27, x1]
   910fc:	2a0103eb 	mov	w11, w1
   91100:	91000421 	add	x1, x1, #0x1
   91104:	121a7802 	and	w2, w0, #0xffffffdf
   91108:	35ffff82 	cbnz	w2, 910f8 <dbg_main+0x338>
				while(cmd[i]!=0 && cmd[i]==' ') i++;    // skip separators
   9110c:	7100801f 	cmp	w0, #0x20
   91110:	54000161 	b.ne	9113c <dbg_main+0x37c>  // b.any
   91114:	1100056b 	add	w11, w11, #0x1
   91118:	9000aa62 	adrp	x2, 15dd000 <allocated+0xfbdd0>
   9111c:	910e5c42 	add	x2, x2, #0x397
   91120:	93407d61 	sxtw	x1, w11
   91124:	d503201f 	nop
   91128:	2a0103eb 	mov	w11, w1
   9112c:	91000421 	add	x1, x1, #0x1
   91130:	38616840 	ldrb	w0, [x2, x1]
   91134:	7100801f 	cmp	w0, #0x20
   91138:	54ffff80 	b.eq	91128 <dbg_main+0x368>  // b.none
				if(cmd[i]!=0) {
   9113c:	34000160 	cbz	w0, 91168 <dbg_main+0x3a8>
					oe=dbg_getoffs(i);
   91140:	2a0b03e0 	mov	w0, w11
   91144:	97fffeaf 	bl	90c00 <dbg_getoffs>
   91148:	f90037e0 	str	x0, [sp, #104]
			if(cmd[0]=='i') {
   9114c:	7101a55f 	cmp	w10, #0x69
   91150:	54000120 	b.eq	91174 <dbg_main+0x3b4>  // b.none
				if(oe<=os) oe=os+16;
   91154:	f94037e0 	ldr	x0, [sp, #104]
   91158:	9100427a 	add	x26, x19, #0x10
   9115c:	eb00027f 	cmp	x19, x0
   91160:	54ffed03 	b.cc	90f00 <dbg_main+0x140>  // b.lo, b.ul, b.last
   91164:	17ffff63 	b	90ef0 <dbg_main+0x130>
				os=oe=dbg_getoffs(i);
   91168:	f90037f3 	str	x19, [sp, #104]
			if(cmd[0]=='i') {
   9116c:	7101a55f 	cmp	w10, #0x69
   91170:	54ffec01 	b.ne	90ef0 <dbg_main+0x130>  // b.any
				oe=(oe+3)&~3L;
   91174:	f94037e0 	ldr	x0, [sp, #104]
				os=os&~3L;
   91178:	927ef673 	and	x19, x19, #0xfffffffffffffffc
				oe=(oe+3)&~3L;
   9117c:	91000c14 	add	x20, x0, #0x3
   91180:	927ef694 	and	x20, x20, #0xfffffffffffffffc
				if(oe<=os) oe=os+4;
   91184:	eb14027f 	cmp	x19, x20
   91188:	54000282 	b.cs	911d8 <dbg_main+0x418>  // b.hs, b.nlast
   9118c:	b0000037 	adrp	x23, 96000 <sd_init+0x3ce8>
   91190:	b0000036 	adrp	x22, 96000 <sd_init+0x3ce8>
   91194:	911962f7 	add	x23, x23, #0x658
   91198:	9119a2d6 	add	x22, x22, #0x668
   9119c:	d503201f 	nop
					printf("%8x: %8x",os,*((uint32_t*)os));
   911a0:	b9400262 	ldr	w2, [x19]
   911a4:	aa1303e1 	mov	x1, x19
   911a8:	aa1703e0 	mov	x0, x23
   911ac:	97ffbf2d 	bl	80e60 <printf>
					os=disasm(os,str);
   911b0:	910203e1 	add	x1, sp, #0x80
   911b4:	aa1303e0 	mov	x0, x19
   911b8:	97ffcd52 	bl	84700 <disasm>
   911bc:	aa0003f3 	mov	x19, x0
					printf("\t%s\n",str);
   911c0:	910203e1 	add	x1, sp, #0x80
   911c4:	aa1603e0 	mov	x0, x22
   911c8:	97ffbf26 	bl	80e60 <printf>
				while(os<oe) {
   911cc:	eb14027f 	cmp	x19, x20
   911d0:	54fffe83 	b.cc	911a0 <dbg_main+0x3e0>  // b.lo, b.ul, b.last
   911d4:	17ffff0f 	b	90e10 <dbg_main+0x50>
				if(oe<=os) oe=os+4;
   911d8:	91001274 	add	x20, x19, #0x4
				while(os<oe) {
   911dc:	eb14027f 	cmp	x19, x20
   911e0:	54fffd63 	b.cc	9118c <dbg_main+0x3cc>  // b.lo, b.ul, b.last
   911e4:	17ffff0b 	b	90e10 <dbg_main+0x50>
					os=oe=dbg_regs[31]?dbg_regs[31]:dbg_regs[30];
   911e8:	f9407c13 	ldr	x19, [x0, #248]
   911ec:	b5000053 	cbnz	x19, 911f4 <dbg_main+0x434>
   911f0:	f9407813 	ldr	x19, [x0, #240]
			i=1;
   911f4:	f90037f3 	str	x19, [sp, #104]
   911f8:	17ffffdf 	b	91174 <dbg_main+0x3b4>
   911fc:	5280002b 	mov	w11, #0x1                   	// #1
   91200:	17ffff2b 	b	90eac <dbg_main+0xec>
   91204:	00000000 	.inst	0x00000000 ; undefined

0000000000091208 <dynamic_memory_alloc_init>:
#include "headers/project.h"

void dynamic_memory_alloc_init()
{
   91208:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	extern unsigned char _end;
	end_of_program = &_end;
   9120c:	9000ab80 	adrp	x0, 1601000 <__EL1_stack_core3+0x2a0>
   91210:	91358000 	add	x0, x0, #0xd60
{
   91214:	910003fd 	mov	x29, sp
   91218:	f9000bf3 	str	x19, [sp, #16]
	end_of_program = &_end;
   9121c:	90009ab3 	adrp	x19, 13e5000 <core_state>
   91220:	f9010a60 	str	x0, [x19, #528]
	end_of_cpu_memory = get_gpu_memory_address_start();
   91224:	940000e3 	bl	915b0 <get_gpu_memory_address_start>
	total_space_avaliable = (unsigned char *)end_of_cpu_memory - end_of_program;
   91228:	f9410a61 	ldr	x1, [x19, #528]
   9122c:	9000a286 	adrp	x6, 14e1000 <connected_chunk+0xfbdc8>
	chunk_size = 1024;
	number_of_chunks = total_space_avaliable / chunk_size;
   91230:	9000a284 	adrp	x4, 14e1000 <connected_chunk+0xfbdc8>
	end_of_cpu_memory = get_gpu_memory_address_start();
   91234:	90009aa5 	adrp	x5, 13e5000 <core_state>
	total_space_avaliable = (unsigned char *)end_of_cpu_memory - end_of_program;
   91238:	cb010001 	sub	x1, x0, x1
	chunk_size = 1024;
   9123c:	9000a282 	adrp	x2, 14e1000 <connected_chunk+0xfbdc8>
   91240:	d2808003 	mov	x3, #0x400                 	// #1024
	total_space_avaliable = (unsigned char *)end_of_cpu_memory - end_of_program;
   91244:	f90114c1 	str	x1, [x6, #552]
	end_of_cpu_memory = get_gpu_memory_address_start();
   91248:	f90110a0 	str	x0, [x5, #544]
	number_of_chunks = total_space_avaliable / chunk_size;
   9124c:	d34afc21 	lsr	x1, x1, #10
	chunk_size = 1024;
   91250:	f9010c43 	str	x3, [x2, #536]
	number_of_chunks = total_space_avaliable / chunk_size;
   91254:	f9011081 	str	x1, [x4, #544]
	for(uint64_t i = 0; i < number_of_chunks; i++) 
   91258:	b4000161 	cbz	x1, 91284 <dynamic_memory_alloc_init+0x7c>
   9125c:	9000a283 	adrp	x3, 14e1000 <connected_chunk+0xfbdc8>
   91260:	90009aa2 	adrp	x2, 13e5000 <core_state>
   91264:	9108c063 	add	x3, x3, #0x230
   91268:	9108e042 	add	x2, x2, #0x238
   9126c:	d2800000 	mov	x0, #0x0                   	// #0
	{
		allocated[i] = 0;
   91270:	3820687f 	strb	wzr, [x3, x0]
		connected_chunk[i] = 0;
   91274:	3820685f 	strb	wzr, [x2, x0]
	for(uint64_t i = 0; i < number_of_chunks; i++) 
   91278:	91000400 	add	x0, x0, #0x1
   9127c:	eb00003f 	cmp	x1, x0
   91280:	54ffff81 	b.ne	91270 <dynamic_memory_alloc_init+0x68>  // b.any
	}

}
   91284:	f9400bf3 	ldr	x19, [sp, #16]
   91288:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9128c:	d65f03c0 	ret

0000000000091290 <malloc>:
	//Remember to check if any chunk end hits MMIO_BASE
	
	amount_to_allocate = (((amount_to_allocate + 1024 - 1) / 1024) * 1024);
	uint64_t number_of_chunks_to_allocate = amount_to_allocate / 1024;

	for(uint64_t i = 0; i < number_of_chunks; i++)
   91290:	9000a281 	adrp	x1, 14e1000 <connected_chunk+0xfbdc8>
	amount_to_allocate = (((amount_to_allocate + 1024 - 1) / 1024) * 1024);
   91294:	910ffc00 	add	x0, x0, #0x3ff
   91298:	9276d409 	and	x9, x0, #0xfffffffffffffc00
	for(uint64_t i = 0; i < number_of_chunks; i++)
   9129c:	f9411028 	ldr	x8, [x1, #544]
	uint64_t number_of_chunks_to_allocate = amount_to_allocate / 1024;
   912a0:	d34afc02 	lsr	x2, x0, #10
	for(uint64_t i = 0; i < number_of_chunks; i++)
   912a4:	b40005c8 	cbz	x8, 9135c <malloc+0xcc>
   912a8:	9000a287 	adrp	x7, 14e1000 <connected_chunk+0xfbdc8>
   912ac:	90009aa5 	adrp	x5, 13e5000 <core_state>
   912b0:	9108c0e7 	add	x7, x7, #0x230
   912b4:	9108e0a5 	add	x5, x5, #0x238
   912b8:	d2800003 	mov	x3, #0x0                   	// #0
			uint8_t chunk_allocated_in_space = 0;
			for(uint64_t j = i; j < i + number_of_chunks_to_allocate; j++)
			{
				if(connected_chunk[j] == 1)
				{
					chunk_allocated_in_space = 1;
   912bc:	52800026 	mov	w6, #0x1                   	// #1
   912c0:	14000005 	b	912d4 <malloc+0x44>
	for(uint64_t i = 0; i < number_of_chunks; i++)
   912c4:	91000463 	add	x3, x3, #0x1
   912c8:	91000442 	add	x2, x2, #0x1
   912cc:	eb08007f 	cmp	x3, x8
   912d0:	54000460 	b.eq	9135c <malloc+0xcc>  // b.none
		if(allocated[i] == 0)
   912d4:	386368e0 	ldrb	w0, [x7, x3]
   912d8:	35ffff60 	cbnz	w0, 912c4 <malloc+0x34>
			for(uint64_t j = i; j < i + number_of_chunks_to_allocate; j++)
   912dc:	eb02007f 	cmp	x3, x2
   912e0:	540002c2 	b.cs	91338 <malloc+0xa8>  // b.hs, b.nlast
   912e4:	aa0303e0 	mov	x0, x3
			uint8_t chunk_allocated_in_space = 0;
   912e8:	52800001 	mov	w1, #0x0                   	// #0
   912ec:	d503201f 	nop
				if(connected_chunk[j] == 1)
   912f0:	386068a4 	ldrb	w4, [x5, x0]
			for(uint64_t j = i; j < i + number_of_chunks_to_allocate; j++)
   912f4:	91000400 	add	x0, x0, #0x1
					chunk_allocated_in_space = 1;
   912f8:	7100049f 	cmp	w4, #0x1
   912fc:	1a861021 	csel	w1, w1, w6, ne  // ne = any
			for(uint64_t j = i; j < i + number_of_chunks_to_allocate; j++)
   91300:	eb02001f 	cmp	x0, x2
   91304:	54ffff61 	b.ne	912f0 <malloc+0x60>  // b.any
				}
			}
			if(chunk_allocated_in_space == 0)
   91308:	35fffde1 	cbnz	w1, 912c4 <malloc+0x34>
   9130c:	aa0303e0 	mov	x0, x3
			{
				uint64_t temp = amount_to_allocate;
   91310:	aa0903e1 	mov	x1, x9
				for(uint64_t j = i; j < i + number_of_chunks_to_allocate; j++)
                        	{
					connected_chunk[j] = 1;
   91314:	52800024 	mov	w4, #0x1                   	// #1
					allocated[j] = 1; 
					if(temp == 1024)
					{
						connected_chunk[j] = 0;
   91318:	f110003f 	cmp	x1, #0x400
					allocated[j] = 1; 
   9131c:	382068e4 	strb	w4, [x7, x0]
						connected_chunk[j] = 0;
   91320:	1a9f1086 	csel	w6, w4, wzr, ne  // ne = any
   91324:	382068a6 	strb	w6, [x5, x0]
				for(uint64_t j = i; j < i + number_of_chunks_to_allocate; j++)
   91328:	91000400 	add	x0, x0, #0x1
					}
					temp -= 1024;
   9132c:	d1100021 	sub	x1, x1, #0x400
				for(uint64_t j = i; j < i + number_of_chunks_to_allocate; j++)
   91330:	eb02001f 	cmp	x0, x2
   91334:	54ffff23 	b.cc	91318 <malloc+0x88>  // b.lo, b.ul, b.last
                        	}
				unsigned char *x = end_of_program + (i << 10);
   91338:	90009aa0 	adrp	x0, 13e5000 <core_state>
				if(x[amount_to_allocate] < (uint64_t)end_of_cpu_memory)
   9133c:	90009aa1 	adrp	x1, 13e5000 <core_state>
				unsigned char *x = end_of_program + (i << 10);
   91340:	f9410800 	ldr	x0, [x0, #528]
				if(x[amount_to_allocate] < (uint64_t)end_of_cpu_memory)
   91344:	f9411022 	ldr	x2, [x1, #544]
				unsigned char *x = end_of_program + (i << 10);
   91348:	8b032800 	add	x0, x0, x3, lsl #10
				if(x[amount_to_allocate] < (uint64_t)end_of_cpu_memory)
   9134c:	38696801 	ldrb	w1, [x0, x9]
   91350:	eb01005f 	cmp	x2, x1
   91354:	54000049 	b.ls	9135c <malloc+0xcc>  // b.plast
				}
			}
		}
	}
	return NULL;
}
   91358:	d65f03c0 	ret
					return NULL;
   9135c:	d2800000 	mov	x0, #0x0                   	// #0
}
   91360:	d65f03c0 	ret
   91364:	d503201f 	nop

0000000000091368 <free>:
int free(void *p_to_free)
{
	//WARNING THIS FUNCTION FAILS SILENTLY (But it shouldn't fail XD)
	//TODO add compadibility with latest version of malloc
	uint64_t i = 0;
	i = ((p_to_free - (void *)end_of_program) >> 10);
   91368:	90009aa1 	adrp	x1, 13e5000 <core_state>
	allocated[i] = 0;
	//We also have to find out if it is a connected chunk to do this:
	if(connected_chunk[i] == 0) return 0;
   9136c:	90009aa2 	adrp	x2, 13e5000 <core_state>
   91370:	9108e042 	add	x2, x2, #0x238
	allocated[i] = 0;
   91374:	9000a283 	adrp	x3, 14e1000 <connected_chunk+0xfbdc8>
	i = ((p_to_free - (void *)end_of_program) >> 10);
   91378:	f9410821 	ldr	x1, [x1, #528]
	allocated[i] = 0;
   9137c:	9108c063 	add	x3, x3, #0x230
	i = ((p_to_free - (void *)end_of_program) >> 10);
   91380:	cb010000 	sub	x0, x0, x1
   91384:	934afc00 	asr	x0, x0, #10
	if(connected_chunk[i] == 0) return 0;
   91388:	38606841 	ldrb	w1, [x2, x0]
	allocated[i] = 0;
   9138c:	3820687f 	strb	wzr, [x3, x0]
	if(connected_chunk[i] == 0) return 0;
   91390:	350000c1 	cbnz	w1, 913a8 <free+0x40>
   91394:	14000009 	b	913b8 <free+0x50>
	for(; connected_chunk[i] == 1; i++)
	{
		connected_chunk[i] = 0;
   91398:	3820685f 	strb	wzr, [x2, x0]
		allocated[i] = 0;
   9139c:	3820687f 	strb	wzr, [x3, x0]
	for(; connected_chunk[i] == 1; i++)
   913a0:	91000400 	add	x0, x0, #0x1
   913a4:	38606841 	ldrb	w1, [x2, x0]
   913a8:	7100043f 	cmp	w1, #0x1
   913ac:	54ffff60 	b.eq	91398 <free+0x30>  // b.none
	}
	i++;
	allocated[i] = 0;	
   913b0:	8b000060 	add	x0, x3, x0
   913b4:	3900041f 	strb	wzr, [x0, #1]
	return 0;
}
   913b8:	52800000 	mov	w0, #0x0                   	// #0
   913bc:	d65f03c0 	ret

00000000000913c0 <set_ACT_LED>:
#include "headers/project.h"

void set_ACT_LED(bool on)
{
	mailbox[0] = 8*4;
   913c0:	9000aa62 	adrp	x2, 15dd000 <allocated+0xfbdd0>
   913c4:	91128041 	add	x1, x2, #0x4a0
   913c8:	52800403 	mov	w3, #0x20                  	// #32
	mailbox[7] = 0;
	mailbox[1] = 0;
	mailbox[2] = 0x00038041;
   913cc:	52900825 	mov	w5, #0x8041                	// #32833
	mailbox[0] = 8*4;
   913d0:	b904a043 	str	w3, [x2, #1184]
	mailbox[2] = 0x00038041;
   913d4:	72a00065 	movk	w5, #0x3, lsl #16
	mailbox[7] = 0;
   913d8:	b9001c3f 	str	wzr, [x1, #28]
	mailbox[3] = 8;
   913dc:	52800102 	mov	w2, #0x8                   	// #8
	mailbox[1] = 0;
   913e0:	b900043f 	str	wzr, [x1, #4]
	mailbox[4] = 8;
	mailbox[5] = 130;
   913e4:	52801044 	mov	w4, #0x82                  	// #130
	mailbox[2] = 0x00038041;
   913e8:	b9000825 	str	w5, [x1, #8]
{
   913ec:	12001c03 	and	w3, w0, #0xff
	mailbox[3] = 8;
   913f0:	b9000c22 	str	w2, [x1, #12]
	mailbox[6] = (uint32_t)on;
	mailbox_call(0x8);
   913f4:	2a0203e0 	mov	w0, w2
	mailbox[4] = 8;
   913f8:	b9001022 	str	w2, [x1, #16]
	mailbox[5] = 130;
   913fc:	b9001424 	str	w4, [x1, #20]
	mailbox[6] = (uint32_t)on;
   91400:	b9001823 	str	w3, [x1, #24]
	mailbox_call(0x8);
   91404:	14000167 	b	919a0 <mailbox_call>

0000000000091408 <core1_main>:
#include "headers/project.h"

void core1_main()
{
   91408:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
	*core1_ready = true;
   9140c:	90009a60 	adrp	x0, 13dd000 <_binary_src_audio_The_Amazons_bin_size+0x96300>
   91410:	52800021 	mov	w1, #0x1                   	// #1
{
   91414:	910003fd 	mov	x29, sp
	*core1_ready = true;
   91418:	f947cc00 	ldr	x0, [x0, #3992]
{
   9141c:	a90153f3 	stp	x19, x20, [sp, #16]
	{
		printf("[CORE 1] [INFO] Starting flash ACT LED\n");
		for(int32_t i = 0; i < 12; i++)
		{
			set_ACT_LED(true);
			wait_usec(100000);
   91420:	5290d414 	mov	w20, #0x86a0                	// #34464
{
   91424:	a9025bf5 	stp	x21, x22, [sp, #32]
   91428:	b0000036 	adrp	x22, 96000 <sd_init+0x3ce8>
   9142c:	b0000035 	adrp	x21, 96000 <sd_init+0x3ce8>
   91430:	a90363f7 	stp	x23, x24, [sp, #48]
   91434:	911c82d6 	add	x22, x22, #0x720
   91438:	b0000038 	adrp	x24, 96000 <sd_init+0x3ce8>
   9143c:	b0000037 	adrp	x23, 96000 <sd_init+0x3ce8>
   91440:	911b4318 	add	x24, x24, #0x6d0
   91444:	911be2f7 	add	x23, x23, #0x6f8
   91448:	911d62b5 	add	x21, x21, #0x758
	*core1_ready = true;
   9144c:	39000001 	strb	w1, [x0]
			wait_usec(100000);
   91450:	72a00034 	movk	w20, #0x1, lsl #16
	mmu_init();
   91454:	97ffc607 	bl	82c70 <mmu_init>
	printf("[CORE 1] [INFO] Hello from CORE 1!\n");
   91458:	b0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   9145c:	911aa000 	add	x0, x0, #0x6a8
   91460:	97ffbe80 	bl	80e60 <printf>
   91464:	d503201f 	nop
		printf("[CORE 1] [INFO] Starting flash ACT LED\n");
   91468:	52800193 	mov	w19, #0xc                   	// #12
   9146c:	aa1803e0 	mov	x0, x24
   91470:	97ffbe7c 	bl	80e60 <printf>
		for(int32_t i = 0; i < 12; i++)
   91474:	d503201f 	nop
			set_ACT_LED(true);
   91478:	52800020 	mov	w0, #0x1                   	// #1
   9147c:	97ffffd1 	bl	913c0 <set_ACT_LED>
			wait_usec(100000);
   91480:	2a1403e0 	mov	w0, w20
   91484:	97ffc7cf 	bl	833c0 <wait_usec>
			set_ACT_LED(false);
   91488:	52800000 	mov	w0, #0x0                   	// #0
   9148c:	97ffffcd 	bl	913c0 <set_ACT_LED>
			wait_usec(100000);
   91490:	2a1403e0 	mov	w0, w20
   91494:	97ffc7cb 	bl	833c0 <wait_usec>
		for(int32_t i = 0; i < 12; i++)
   91498:	71000673 	subs	w19, w19, #0x1
   9149c:	54fffee1 	b.ne	91478 <core1_main+0x70>  // b.any
		}
		printf("[CORE 1] [INFO] Flashing ACT LED Done\n");
   914a0:	aa1703e0 	mov	x0, x23
   914a4:	97ffbe6f 	bl	80e60 <printf>
		printf("[CORE 1] [INFO] Starting RGB flash on pins 16, 20, 21\n");
   914a8:	52800493 	mov	w19, #0x24                  	// #36
   914ac:	aa1603e0 	mov	x0, x22
   914b0:	97ffbe6c 	bl	80e60 <printf>
		for(int32_t i = 0; i < 36; i++)
   914b4:	d503201f 	nop
		{
			//A total loop takes 1 second
			//pin 16 is red
			//pin 20 is green
			//pin 21 is blue
			gpio_output(16, true);
   914b8:	52800021 	mov	w1, #0x1                   	// #1
   914bc:	52800200 	mov	w0, #0x10                  	// #16
   914c0:	97ffc782 	bl	832c8 <gpio_output>
			wait_usec(100);
   914c4:	52800c80 	mov	w0, #0x64                  	// #100
   914c8:	97ffc7be 	bl	833c0 <wait_usec>
			gpio_output(21, false);
   914cc:	52800001 	mov	w1, #0x0                   	// #0
   914d0:	528002a0 	mov	w0, #0x15                  	// #21
   914d4:	97ffc77d 	bl	832c8 <gpio_output>
			wait_usec(200);
   914d8:	52801900 	mov	w0, #0xc8                  	// #200
   914dc:	97ffc7b9 	bl	833c0 <wait_usec>
			gpio_output(20, true);
   914e0:	52800021 	mov	w1, #0x1                   	// #1
   914e4:	52800280 	mov	w0, #0x14                  	// #20
   914e8:	97ffc778 	bl	832c8 <gpio_output>
			wait_usec(100);
   914ec:	52800c80 	mov	w0, #0x64                  	// #100
   914f0:	97ffc7b4 	bl	833c0 <wait_usec>
			gpio_output(16, false);
   914f4:	52800001 	mov	w1, #0x0                   	// #0
   914f8:	52800200 	mov	w0, #0x10                  	// #16
   914fc:	97ffc773 	bl	832c8 <gpio_output>
			wait_usec(200);
   91500:	52801900 	mov	w0, #0xc8                  	// #200
   91504:	97ffc7af 	bl	833c0 <wait_usec>
			gpio_output(21, true);
   91508:	52800021 	mov	w1, #0x1                   	// #1
   9150c:	528002a0 	mov	w0, #0x15                  	// #21
   91510:	97ffc76e 	bl	832c8 <gpio_output>
			wait_usec(100);
   91514:	52800c80 	mov	w0, #0x64                  	// #100
   91518:	97ffc7aa 	bl	833c0 <wait_usec>
			gpio_output(20, false);
   9151c:	52800001 	mov	w1, #0x0                   	// #0
   91520:	52800280 	mov	w0, #0x14                  	// #20
   91524:	97ffc769 	bl	832c8 <gpio_output>
			wait_usec(200);
   91528:	52801900 	mov	w0, #0xc8                  	// #200
   9152c:	97ffc7a5 	bl	833c0 <wait_usec>
		for(int32_t i = 0; i < 36; i++)
   91530:	71000673 	subs	w19, w19, #0x1
   91534:	54fffc21 	b.ne	914b8 <core1_main+0xb0>  // b.any
		}
		printf("[CORE 1] [INFO] Finished RGB flash on pins 16, 20, 21\n");
   91538:	aa1503e0 	mov	x0, x21
   9153c:	97ffbe49 	bl	80e60 <printf>
		printf("[CORE 1] [INFO] Starting flash ACT LED\n");
   91540:	17ffffca 	b	91468 <core1_main+0x60>
   91544:	00000000 	.inst	0x00000000 ; undefined

0000000000091548 <get_gpu_memory_split>:
#include "headers/project.h"

uint32_t get_gpu_memory_split()
{
   91548:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
	mailbox[0] = 8 * 4;
   9154c:	9000aa60 	adrp	x0, 15dd000 <allocated+0xfbdd0>
   91550:	52800401 	mov	w1, #0x20                  	// #32
{
   91554:	910003fd 	mov	x29, sp
   91558:	f9000bf3 	str	x19, [sp, #16]
	mailbox[0] = 8 * 4;
   9155c:	91128013 	add	x19, x0, #0x4a0
   91560:	b904a001 	str	w1, [x0, #1184]
	mailbox[1] = 0;
	mailbox[2] = 0x10005;
   91564:	528000a2 	mov	w2, #0x5                   	// #5
   91568:	72a00022 	movk	w2, #0x1, lsl #16
	mailbox[3] = 8;
   9156c:	52800101 	mov	w1, #0x8                   	// #8
	mailbox[1] = 0;
   91570:	b900067f 	str	wzr, [x19, #4]
	mailbox[4] = 0;
	mailbox[5] = 0;
	mailbox[6] = 0;
	mailbox[7] = 0;
	if(!mailbox_call(MBOX_CH_PROP))
   91574:	2a0103e0 	mov	w0, w1
	mailbox[2] = 0x10005;
   91578:	b9000a62 	str	w2, [x19, #8]
	mailbox[3] = 8;
   9157c:	b9000e61 	str	w1, [x19, #12]
	mailbox[4] = 0;
   91580:	b900127f 	str	wzr, [x19, #16]
	mailbox[5] = 0;
   91584:	b900167f 	str	wzr, [x19, #20]
	mailbox[6] = 0;
   91588:	b9001a7f 	str	wzr, [x19, #24]
	mailbox[7] = 0;
   9158c:	b9001e7f 	str	wzr, [x19, #28]
	if(!mailbox_call(MBOX_CH_PROP))
   91590:	94000104 	bl	919a0 <mailbox_call>
   91594:	35000060 	cbnz	w0, 915a0 <get_gpu_memory_split+0x58>
	{
		mailbox[6]=512*1024*1024;
   91598:	52a40000 	mov	w0, #0x20000000            	// #536870912
   9159c:	b9001a60 	str	w0, [x19, #24]
	}
	return mailbox[6]; //Return the amount of GPU memory in bytes
   915a0:	b9401a60 	ldr	w0, [x19, #24]
}
   915a4:	f9400bf3 	ldr	x19, [sp, #16]
   915a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   915ac:	d65f03c0 	ret

00000000000915b0 <get_gpu_memory_address_start>:

uint64_t *get_gpu_memory_address_start()
{
   915b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   915b4:	910003fd 	mov	x29, sp
	return (uint64_t *)((uint64_t)(0x3F000000 - get_gpu_memory_split()));
   915b8:	97ffffe4 	bl	91548 <get_gpu_memory_split>
   915bc:	52a7e001 	mov	w1, #0x3f000000            	// #1056964608
}
   915c0:	4b000020 	sub	w0, w1, w0
   915c4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   915c8:	d65f03c0 	ret
   915cc:	00000000 	.inst	0x00000000 ; undefined

00000000000915d0 <init_audio_jack>:
#include "headers/project.h"

int init_audio_jack()
{
   915d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	*((volatile uint32_t *)(MMIO_BASE + 0x200000 + 0x10)) = (0x4 | 0x200000);
   915d4:	d2800202 	mov	x2, #0x10                  	// #16
   915d8:	f2a7e402 	movk	x2, #0x3f20, lsl #16

	*CM_PWMDIV = CM_PASS | 0x2000; //Set clock block 0
   915dc:	d2825201 	mov	x1, #0x1290                	// #4752
{
   915e0:	910003fd 	mov	x29, sp
	*CM_PWMDIV = CM_PASS | 0x2000; //Set clock block 0
   915e4:	f2a7e201 	movk	x1, #0x3f10, lsl #16
	*((volatile uint32_t *)(MMIO_BASE + 0x200000 + 0x10)) = (0x4 | 0x200000);
   915e8:	52800083 	mov	w3, #0x4                   	// #4

	*CM_PWMCTL = (CM_PASS | 0x10) | (0x01 + 0x05); //Set clock block 1
   915ec:	d2825000 	mov	x0, #0x1280                	// #4736
	*((volatile uint32_t *)(MMIO_BASE + 0x200000 + 0x10)) = (0x4 | 0x200000);
   915f0:	72a00403 	movk	w3, #0x20, lsl #16
   915f4:	b9000043 	str	w3, [x2]
	*CM_PWMDIV = CM_PASS | 0x2000; //Set clock block 0
   915f8:	52840002 	mov	w2, #0x2000                	// #8192
	*CM_PWMCTL = (CM_PASS | 0x10) | (0x01 + 0x05); //Set clock block 1
   915fc:	f2a7e200 	movk	x0, #0x3f10, lsl #16
	*CM_PWMDIV = CM_PASS | 0x2000; //Set clock block 0
   91600:	72ab4002 	movk	w2, #0x5a00, lsl #16

	*(PWM_BASE + 0x10) = 0x2C48;
   91604:	d2980803 	mov	x3, #0xc040                	// #49216
	*CM_PWMDIV = CM_PASS | 0x2000; //Set clock block 0
   91608:	b9000022 	str	w2, [x1]
	*CM_PWMCTL = (CM_PASS | 0x10) | (0x01 + 0x05); //Set clock block 1
   9160c:	528002c1 	mov	w1, #0x16                  	// #22
	*(PWM_BASE + 0x10) = 0x2C48;
   91610:	f2a7e403 	movk	x3, #0x3f20, lsl #16
	*CM_PWMCTL = (CM_PASS | 0x10) | (0x01 + 0x05); //Set clock block 1
   91614:	72ab4001 	movk	w1, #0x5a00, lsl #16
	*(PWM_BASE + 0x20) = 0x2C48;
   91618:	d2981002 	mov	x2, #0xc080                	// #49280
	*CM_PWMCTL = (CM_PASS | 0x10) | (0x01 + 0x05); //Set clock block 1
   9161c:	b9000001 	str	w1, [x0]
	*(PWM_BASE + 0x20) = 0x2C48;
   91620:	f2a7e402 	movk	x2, #0x3f20, lsl #16

	*(PWM_BASE + 0x0) = 0x20 + 0x100 + 0x2000 + 0x1 + 0x40;
   91624:	d2980001 	mov	x1, #0xc000                	// #49152
	*(PWM_BASE + 0x10) = 0x2C48;
   91628:	52858900 	mov	w0, #0x2c48                	// #11336
	*(PWM_BASE + 0x0) = 0x20 + 0x100 + 0x2000 + 0x1 + 0x40;
   9162c:	f2a7e401 	movk	x1, #0x3f20, lsl #16
	*(PWM_BASE + 0x10) = 0x2C48;
   91630:	b9000060 	str	w0, [x3]
	*(PWM_BASE + 0x20) = 0x2C48;
   91634:	b9000040 	str	w0, [x2]
	*(PWM_BASE + 0x0) = 0x20 + 0x100 + 0x2000 + 0x1 + 0x40;
   91638:	52842c20 	mov	w0, #0x2161                	// #8545
   9163c:	b9000020 	str	w0, [x1]

	printf("[INFO] Audio Init Finished");
   91640:	b0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   91644:	911e4000 	add	x0, x0, #0x790
   91648:	97ffbe06 	bl	80e60 <printf>

	return 0;
}
   9164c:	52800000 	mov	w0, #0x0                   	// #0
   91650:	a8c17bfd 	ldp	x29, x30, [sp], #16
   91654:	d65f03c0 	ret

0000000000091658 <play_16bit_unsigned_audio>:

//I really hope this works!
int32_t play_16bit_unsigned_audio(char *start, char *end)
{
   91658:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
	if(end < start) 
   9165c:	eb00003f 	cmp	x1, x0
{
   91660:	910003fd 	mov	x29, sp
	if(end < start) 
   91664:	54000323 	b.cc	916c8 <play_16bit_unsigned_audio+0x70>  // b.lo, b.ul, b.last
	{
		printf("[ERROR] End is less than start.");
		return 1;
	}
	if((start - end) % 2 == 0)
   91668:	cb010002 	sub	x2, x0, x1
   9166c:	360003a2 	tbz	w2, #0, 916e0 <play_16bit_unsigned_audio+0x88>
	{
		printf("[ERROR] Isn't a multiple of two so it isn't 16bit");
		return 2;
	}
	//FIFO write
	for(int32_t i = 0; &(start[i]) != end; i++)
   91670:	eb00003f 	cmp	x1, x0
   91674:	540001e0 	b.eq	916b0 <play_16bit_unsigned_audio+0x58>  // b.none
		uint8_t sample_high = start[i++];

		uint16_t sample = sample_low | (sample_high << 8);

		sample >>= 2;
		*PWM_FIF1 = sample;
   91678:	d2980c04 	mov	x4, #0xc060                	// #49248
		//FIFO wait
		while(*PWM_STA != 0x1);
   9167c:	d2980203 	mov	x3, #0xc010                	// #49168
		*PWM_FIF1 = sample;
   91680:	f2a7e404 	movk	x4, #0x3f20, lsl #16
		while(*PWM_STA != 0x1);
   91684:	f2a7e403 	movk	x3, #0x3f20, lsl #16
		uint8_t sample_low = start[i];
   91688:	39400002 	ldrb	w2, [x0]
		uint16_t sample = sample_low | (sample_high << 8);
   9168c:	2a022042 	orr	w2, w2, w2, lsl #8
		*PWM_FIF1 = sample;
   91690:	53027c42 	lsr	w2, w2, #2
   91694:	b9000082 	str	w2, [x4]
		while(*PWM_STA != 0x1);
   91698:	b9400062 	ldr	w2, [x3]
   9169c:	7100045f 	cmp	w2, #0x1
   916a0:	54ffffc1 	b.ne	91698 <play_16bit_unsigned_audio+0x40>  // b.any
   916a4:	91000800 	add	x0, x0, #0x2
	for(int32_t i = 0; &(start[i]) != end; i++)
   916a8:	eb00003f 	cmp	x1, x0
   916ac:	54fffee1 	b.ne	91688 <play_16bit_unsigned_audio+0x30>  // b.any
	}
	printf("[INFO] Completed Audio");
   916b0:	b0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   916b4:	91202000 	add	x0, x0, #0x808
   916b8:	97ffbdea 	bl	80e60 <printf>
	return 0;
   916bc:	52800000 	mov	w0, #0x0                   	// #0
}
   916c0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   916c4:	d65f03c0 	ret
		printf("[ERROR] End is less than start.");
   916c8:	b0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   916cc:	911ec000 	add	x0, x0, #0x7b0
   916d0:	97ffbde4 	bl	80e60 <printf>
		return 1;
   916d4:	52800020 	mov	w0, #0x1                   	// #1
}
   916d8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   916dc:	d65f03c0 	ret
		printf("[ERROR] Isn't a multiple of two so it isn't 16bit");
   916e0:	b0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   916e4:	911f4000 	add	x0, x0, #0x7d0
   916e8:	97ffbdde 	bl	80e60 <printf>
		return 2;
   916ec:	52800040 	mov	w0, #0x2                   	// #2
   916f0:	17fffff4 	b	916c0 <play_16bit_unsigned_audio+0x68>
   916f4:	00000000 	.inst	0x00000000 ; undefined

00000000000916f8 <hsv_to_rgb>:
#include "headers/project.h"

void hsv_to_rgb(double h, double s, double v, char *r, char *g, char *b)
{
	h = h > 360.0 ? 0.0 : h;
   916f8:	d2d00003 	mov	x3, #0x800000000000        	// #140737488355328
   916fc:	1e6e1005 	fmov	d5, #1.000000000000000000e+00
   91700:	f2e80ec3 	movk	x3, #0x4076, lsl #48
   91704:	9e670066 	fmov	d6, x3
   91708:	1e6138a3 	fsub	d3, d5, d1
   9170c:	1e662010 	fcmpe	d0, d6
   91710:	1e620867 	fmul	d7, d3, d2
   91714:	540001ed 	b.le	91750 <hsv_to_rgb+0x58>

	P = v*(1.0 - s);
	Q = v*(1.0 - s * fract);
	T = v*(1.0 - s*(1.0 - fract));

	if(0. <= h && h < 1.)
   91718:	d2dc0003 	mov	x3, #0xe00000000000        	// #246290604621824
   9171c:	f2e80de3 	movk	x3, #0x406f, lsl #48
   91720:	9e670060 	fmov	d0, x3
   91724:	1e6008e1 	fmul	d1, d7, d0
   91728:	1e600840 	fmul	d0, d2, d0
   9172c:	1e790024 	fcvtzu	w4, d1
   91730:	1e790003 	fcvtzu	w3, d0
   91734:	12001c85 	and	w5, w4, #0xff
   91738:	12001c63 	and	w3, w3, #0xff
	h = h > 360.0 ? 0.0 : h;
   9173c:	2a0503e4 	mov	w4, w5
	}
	else
	{
		temp_r = 0; temp_g = 0; temp_b = 0;
	}
	*r = (char)(255 * temp_r);
   91740:	39000003 	strb	w3, [x0]
	*g = (char)(255 * temp_g);
   91744:	39000025 	strb	w5, [x1]
	*b = (char)(255 * temp_b);
   91748:	39000044 	strb	w4, [x2]
}
   9174c:	d65f03c0 	ret
	(h == 360.0) ? (h = 0.0) : (h /= 60.0);
   91750:	1e662000 	fcmp	d0, d6
   91754:	54fffe20 	b.eq	91718 <hsv_to_rgb+0x20>  // b.none
   91758:	d2e809c3 	mov	x3, #0x404e000000000000    	// #4633641066610819072
   9175c:	9e670064 	fmov	d4, x3
   91760:	1e641800 	fdiv	d0, d0, d4
	fract = h - (int64_t)h;	
   91764:	5ee1b803 	fcvtzs	d3, d0
	if(0. <= h && h < 1.)
   91768:	1e602018 	fcmpe	d0, #0.0
	fract = h - (int64_t)h;	
   9176c:	5e61d863 	scvtf	d3, d3
   91770:	1e633803 	fsub	d3, d0, d3
	T = v*(1.0 - s*(1.0 - fract));
   91774:	1e6338a4 	fsub	d4, d5, d3
	Q = v*(1.0 - s * fract);
   91778:	1f419463 	fmsub	d3, d3, d1, d5
	T = v*(1.0 - s*(1.0 - fract));
   9177c:	1f419484 	fmsub	d4, d4, d1, d5
	Q = v*(1.0 - s * fract);
   91780:	1e620863 	fmul	d3, d3, d2
	T = v*(1.0 - s*(1.0 - fract));
   91784:	1e620884 	fmul	d4, d4, d2
	if(0. <= h && h < 1.)
   91788:	54000b2a 	b.ge	918ec <hsv_to_rgb+0x1f4>  // b.tcont
	else if(1. <= h && h < 2.)
   9178c:	1e6e1001 	fmov	d1, #1.000000000000000000e+00
   91790:	1e612010 	fcmpe	d0, d1
   91794:	5400028b 	b.lt	917e4 <hsv_to_rgb+0xec>  // b.tstop
   91798:	1e601001 	fmov	d1, #2.000000000000000000e+00
   9179c:	1e612010 	fcmpe	d0, d1
   917a0:	54000225 	b.pl	917e4 <hsv_to_rgb+0xec>  // b.nfrst
   917a4:	d2dc0003 	mov	x3, #0xe00000000000        	// #246290604621824
   917a8:	f2e80de3 	movk	x3, #0x406f, lsl #48
   917ac:	9e670061 	fmov	d1, x3
   917b0:	1e610863 	fmul	d3, d3, d1
   917b4:	1e610840 	fmul	d0, d2, d1
   917b8:	1e6108e1 	fmul	d1, d7, d1
   917bc:	1e790063 	fcvtzu	w3, d3
   917c0:	1e790005 	fcvtzu	w5, d0
   917c4:	1e790024 	fcvtzu	w4, d1
   917c8:	12001c63 	and	w3, w3, #0xff
	*r = (char)(255 * temp_r);
   917cc:	39000003 	strb	w3, [x0]
   917d0:	12001ca5 	and	w5, w5, #0xff
	*g = (char)(255 * temp_g);
   917d4:	39000025 	strb	w5, [x1]
   917d8:	12001c84 	and	w4, w4, #0xff
	*b = (char)(255 * temp_b);
   917dc:	39000044 	strb	w4, [x2]
}
   917e0:	d65f03c0 	ret
	else if (2. <= h && h < 3.)
   917e4:	1e601001 	fmov	d1, #2.000000000000000000e+00
   917e8:	1e612010 	fcmpe	d0, d1
   917ec:	5400008b 	b.lt	917fc <hsv_to_rgb+0x104>  // b.tstop
   917f0:	1e611001 	fmov	d1, #3.000000000000000000e+00
   917f4:	1e612010 	fcmpe	d0, d1
   917f8:	54000984 	b.mi	91928 <hsv_to_rgb+0x230>  // b.first
	else if (3. <= h && h < 4.)
   917fc:	1e611001 	fmov	d1, #3.000000000000000000e+00
   91800:	1e612010 	fcmpe	d0, d1
   91804:	5400028b 	b.lt	91854 <hsv_to_rgb+0x15c>  // b.tstop
   91808:	1e621001 	fmov	d1, #4.000000000000000000e+00
   9180c:	1e612010 	fcmpe	d0, d1
   91810:	54000225 	b.pl	91854 <hsv_to_rgb+0x15c>  // b.nfrst
   91814:	d2dc0003 	mov	x3, #0xe00000000000        	// #246290604621824
   91818:	f2e80de3 	movk	x3, #0x406f, lsl #48
   9181c:	9e670064 	fmov	d4, x3
   91820:	1e6408e1 	fmul	d1, d7, d4
   91824:	1e640863 	fmul	d3, d3, d4
   91828:	1e640844 	fmul	d4, d2, d4
   9182c:	1e790023 	fcvtzu	w3, d1
   91830:	1e790065 	fcvtzu	w5, d3
   91834:	1e790084 	fcvtzu	w4, d4
   91838:	12001c63 	and	w3, w3, #0xff
	*r = (char)(255 * temp_r);
   9183c:	39000003 	strb	w3, [x0]
   91840:	12001ca5 	and	w5, w5, #0xff
	*g = (char)(255 * temp_g);
   91844:	39000025 	strb	w5, [x1]
   91848:	12001c84 	and	w4, w4, #0xff
	*b = (char)(255 * temp_b);
   9184c:	39000044 	strb	w4, [x2]
}
   91850:	d65f03c0 	ret
	else if (4. <= h && h < 5.)
   91854:	1e621001 	fmov	d1, #4.000000000000000000e+00
   91858:	1e612010 	fcmpe	d0, d1
   9185c:	5400022b 	b.lt	918a0 <hsv_to_rgb+0x1a8>  // b.tstop
   91860:	1e629001 	fmov	d1, #5.000000000000000000e+00
   91864:	1e612010 	fcmpe	d0, d1
   91868:	540001c5 	b.pl	918a0 <hsv_to_rgb+0x1a8>  // b.nfrst
   9186c:	d2dc0003 	mov	x3, #0xe00000000000        	// #246290604621824
   91870:	f2e80de3 	movk	x3, #0x406f, lsl #48
   91874:	9e670060 	fmov	d0, x3
   91878:	1e600884 	fmul	d4, d4, d0
   9187c:	1e6008e1 	fmul	d1, d7, d0
   91880:	1e600840 	fmul	d0, d2, d0
   91884:	1e790024 	fcvtzu	w4, d1
   91888:	1e790083 	fcvtzu	w3, d4
   9188c:	1e790006 	fcvtzu	w6, d0
   91890:	12001c85 	and	w5, w4, #0xff
   91894:	12001c63 	and	w3, w3, #0xff
   91898:	12001cc4 	and	w4, w6, #0xff
   9189c:	17ffffa9 	b	91740 <hsv_to_rgb+0x48>
	else if (5. <= h && h < 6.)
   918a0:	1e629001 	fmov	d1, #5.000000000000000000e+00
   918a4:	1e612010 	fcmpe	d0, d1
   918a8:	5400060b 	b.lt	91968 <hsv_to_rgb+0x270>  // b.tstop
   918ac:	1e631001 	fmov	d1, #6.000000000000000000e+00
   918b0:	1e612010 	fcmpe	d0, d1
   918b4:	540005a5 	b.pl	91968 <hsv_to_rgb+0x270>  // b.nfrst
   918b8:	d2dc0003 	mov	x3, #0xe00000000000        	// #246290604621824
   918bc:	f2e80de3 	movk	x3, #0x406f, lsl #48
   918c0:	9e670065 	fmov	d5, x3
   918c4:	1e650840 	fmul	d0, d2, d5
   918c8:	1e6508e1 	fmul	d1, d7, d5
   918cc:	1e650863 	fmul	d3, d3, d5
   918d0:	1e790003 	fcvtzu	w3, d0
   918d4:	1e790025 	fcvtzu	w5, d1
   918d8:	1e790064 	fcvtzu	w4, d3
   918dc:	12001c63 	and	w3, w3, #0xff
   918e0:	12001ca5 	and	w5, w5, #0xff
   918e4:	12001c84 	and	w4, w4, #0xff
   918e8:	17ffff96 	b	91740 <hsv_to_rgb+0x48>
	if(0. <= h && h < 1.)
   918ec:	1e652010 	fcmpe	d0, d5
   918f0:	54fff4e5 	b.pl	9178c <hsv_to_rgb+0x94>  // b.nfrst
   918f4:	d2dc0003 	mov	x3, #0xe00000000000        	// #246290604621824
   918f8:	f2e80de3 	movk	x3, #0x406f, lsl #48
   918fc:	9e670061 	fmov	d1, x3
   91900:	1e610840 	fmul	d0, d2, d1
   91904:	1e610884 	fmul	d4, d4, d1
   91908:	1e6108e1 	fmul	d1, d7, d1
   9190c:	1e790084 	fcvtzu	w4, d4
   91910:	1e790003 	fcvtzu	w3, d0
   91914:	1e790026 	fcvtzu	w6, d1
   91918:	12001c85 	and	w5, w4, #0xff
   9191c:	12001c63 	and	w3, w3, #0xff
   91920:	12001cc4 	and	w4, w6, #0xff
   91924:	17ffff87 	b	91740 <hsv_to_rgb+0x48>
   91928:	d2dc0003 	mov	x3, #0xe00000000000        	// #246290604621824
   9192c:	f2e80de3 	movk	x3, #0x406f, lsl #48
   91930:	9e670061 	fmov	d1, x3
   91934:	1e6108e3 	fmul	d3, d7, d1
   91938:	1e610840 	fmul	d0, d2, d1
   9193c:	1e610884 	fmul	d4, d4, d1
   91940:	1e790063 	fcvtzu	w3, d3
   91944:	1e790005 	fcvtzu	w5, d0
   91948:	1e790084 	fcvtzu	w4, d4
   9194c:	12001c63 	and	w3, w3, #0xff
	*r = (char)(255 * temp_r);
   91950:	39000003 	strb	w3, [x0]
   91954:	12001ca5 	and	w5, w5, #0xff
	*g = (char)(255 * temp_g);
   91958:	39000025 	strb	w5, [x1]
   9195c:	12001c84 	and	w4, w4, #0xff
	*b = (char)(255 * temp_b);
   91960:	39000044 	strb	w4, [x2]
}
   91964:	d65f03c0 	ret
   91968:	52800003 	mov	w3, #0x0                   	// #0
	*r = (char)(255 * temp_r);
   9196c:	39000003 	strb	w3, [x0]
	*g = (char)(255 * temp_g);
   91970:	52800005 	mov	w5, #0x0                   	// #0
   91974:	39000025 	strb	w5, [x1]
	*b = (char)(255 * temp_b);
   91978:	52800004 	mov	w4, #0x0                   	// #0
   9197c:	39000044 	strb	w4, [x2]
}
   91980:	d65f03c0 	ret
   91984:	d503201f 	nop

0000000000091988 <rgb_to_hex>:



uint32_t rgb_to_hex(uint8_t r, uint8_t g, uint8_t b)
{
	return ((r & 0xff) << 16) + ((g & 0xff) << 8) + (b & 0xff);
   91988:	53181c21 	ubfiz	w1, w1, #8, #8
   9198c:	53101c00 	ubfiz	w0, w0, #16, #8
   91990:	0b010000 	add	w0, w0, w1
}
   91994:	0b220000 	add	w0, w0, w2, uxtb
   91998:	d65f03c0 	ret
   9199c:	00000000 	.inst	0x00000000 ; undefined

00000000000919a0 <mailbox_call>:
 */
int32_t mailbox_call(uint8_t ch)
{
	uint32_t r;
	/* wait until we can write to the mailbox */
	do{asm volatile("nop");}while(*MBOX_STATUS & MBOX_FULL);
   919a0:	d2971302 	mov	x2, #0xb898                	// #47256
{
   919a4:	12001c00 	and	w0, w0, #0xff
	do{asm volatile("nop");}while(*MBOX_STATUS & MBOX_FULL);
   919a8:	f2a7e002 	movk	x2, #0x3f00, lsl #16
   919ac:	d503201f 	nop
   919b0:	d503201f 	nop
   919b4:	b9400041 	ldr	w1, [x2]
   919b8:	37ffffc1 	tbnz	w1, #31, 919b0 <mailbox_call+0x10>
	/* write the address of our message to the mailbox with channel identifier */
	*MBOX_WRITE = (((uint32_t)((uint64_t)&mailbox)&~0xF) | (ch&0xF));
   919bc:	d2971403 	mov	x3, #0xb8a0                	// #47264
   919c0:	9000aa66 	adrp	x6, 15dd000 <allocated+0xfbdd0>
   919c4:	f2a7e003 	movk	x3, #0x3f00, lsl #16
   919c8:	911280c6 	add	x6, x6, #0x4a0
   919cc:	12000c01 	and	w1, w0, #0xf
	/* now wait for the response */
	while(1) {
		/* is there a response? */
		do{asm volatile("nop");}while(*MBOX_STATUS & MBOX_EMPTY);
   919d0:	d2971302 	mov	x2, #0xb898                	// #47256
		r=*MBOX_READ;
   919d4:	d2971004 	mov	x4, #0xb880                	// #47232
	*MBOX_WRITE = (((uint32_t)((uint64_t)&mailbox)&~0xF) | (ch&0xF));
   919d8:	2a0603e5 	mov	w5, w6
   919dc:	2a060021 	orr	w1, w1, w6
		do{asm volatile("nop");}while(*MBOX_STATUS & MBOX_EMPTY);
   919e0:	f2a7e002 	movk	x2, #0x3f00, lsl #16
		r=*MBOX_READ;
   919e4:	f2a7e004 	movk	x4, #0x3f00, lsl #16
	*MBOX_WRITE = (((uint32_t)((uint64_t)&mailbox)&~0xF) | (ch&0xF));
   919e8:	b9000061 	str	w1, [x3]
   919ec:	d503201f 	nop
		do{asm volatile("nop");}while(*MBOX_STATUS & MBOX_EMPTY);
   919f0:	d503201f 	nop
   919f4:	b9400041 	ldr	w1, [x2]
   919f8:	37f7ffc1 	tbnz	w1, #30, 919f0 <mailbox_call+0x50>
		r=*MBOX_READ;
   919fc:	b9400081 	ldr	w1, [x4]
		/* is it a response to our message? */
		if((unsigned char)(r&0xF)==ch && (r&~0xF)==(uint32_t)((uint64_t)&mailbox))
   91a00:	12000c23 	and	w3, w1, #0xf
   91a04:	6b00007f 	cmp	w3, w0
   91a08:	54ffff41 	b.ne	919f0 <mailbox_call+0x50>  // b.any
   91a0c:	121c6c21 	and	w1, w1, #0xfffffff0
   91a10:	6b0100bf 	cmp	w5, w1
   91a14:	54fffee1 	b.ne	919f0 <mailbox_call+0x50>  // b.any
			/* is it a valid successful response? */
			return mailbox[1]==MBOX_RESPONSE;
   91a18:	b94004c1 	ldr	w1, [x6, #4]
   91a1c:	52b00000 	mov	w0, #0x80000000            	// #-2147483648
   91a20:	6b00003f 	cmp	w1, w0
	}
	return 0;
}
   91a24:	1a9f17e0 	cset	w0, eq  // eq = none
   91a28:	d65f03c0 	ret
   91a2c:	d503201f 	nop

0000000000091a30 <mailbox_tag_write>:

bool mailbox_tag_write(uint32_t message) 
{
	uint32_t value;	// Temporary read value
	message &= ~(0xF); // Make sure 4 low channel bits are clear
   91a30:	121c6c00 	and	w0, w0, #0xfffffff0
	message |= 0x8; // OR the channel bits to the value
	do
	{
		value = MAILBOX_FOR_READ_WRITES->status_1; // Read mailbox1 status from GPU
   91a34:	d2971001 	mov	x1, #0xb880                	// #47232
	message |= 0x8; // OR the channel bits to the value
   91a38:	321d0002 	orr	w2, w0, #0x8
		value = MAILBOX_FOR_READ_WRITES->status_1; // Read mailbox1 status from GPU
   91a3c:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   91a40:	b9403820 	ldr	w0, [x1, #56]
	} 
	while ((value & MAIL_FULL) != 0); // Make sure arm mailbox is not full
   91a44:	37ffffe0 	tbnz	w0, #31, 91a40 <mailbox_tag_write+0x10>
	MAILBOX_FOR_READ_WRITES->write_1 = message; // Write value to mailbox
	return true; // Write success
}
   91a48:	52800020 	mov	w0, #0x1                   	// #1
	MAILBOX_FOR_READ_WRITES->write_1 = message; // Write value to mailbox
   91a4c:	b9002022 	str	w2, [x1, #32]
}
   91a50:	d65f03c0 	ret
   91a54:	d503201f 	nop

0000000000091a58 <mailbox_tag_read>:
	uint32_t value;	// Temporary read value
	do
	{
		do
		{
			value = MAILBOX_FOR_READ_WRITES->status_0; // Read mailbox0 status
   91a58:	d2971001 	mov	x1, #0xb880                	// #47232
   91a5c:	f2a7e001 	movk	x1, #0x3f00, lsl #16
   91a60:	b9401820 	ldr	w0, [x1, #24]
		} 
		while ((value & MAIL_EMPTY) != 0); // Wait for data in mailbox
   91a64:	37f7ffe0 	tbnz	w0, #30, 91a60 <mailbox_tag_read+0x8>
		value = MAILBOX_FOR_READ_WRITES->read_0; // Read the mailbox
   91a68:	b9400020 	ldr	w0, [x1]
	}
	while ((value & 0xF) != 0x8); // We have response back
   91a6c:	12000c02 	and	w2, w0, #0xf
   91a70:	7100205f 	cmp	w2, #0x8
   91a74:	54ffff61 	b.ne	91a60 <mailbox_tag_read+0x8>  // b.any
	value &= ~(0xF); // Lower 4 low channel bits are not part of message
	return value; // Return the value
}
   91a78:	121c6c00 	and	w0, w0, #0xfffffff0
   91a7c:	d65f03c0 	ret

0000000000091a80 <sd_status>:

/**
 * Wait for data or command ready
 */
int sd_status(uint32_t mask)
{
   91a80:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   91a84:	910003fd 	mov	x29, sp
   91a88:	a90153f3 	stp	x19, x20, [sp, #16]
	int32_t cnt = 500000; while((*EMMC_STATUS & mask) && !(*EMMC_INTERRUPT & INT_ERROR_MASK) && cnt--) wait_usec(1);
   91a8c:	d2800494 	mov	x20, #0x24                  	// #36
   91a90:	f2a7e614 	movk	x20, #0x3f30, lsl #16
   91a94:	b9400281 	ldr	w1, [x20]
   91a98:	6a01001f 	tst	w0, w1
   91a9c:	54000380 	b.eq	91b0c <sd_status+0x8c>  // b.none
   91aa0:	f9001bf7 	str	x23, [sp, #48]
   91aa4:	d2800617 	mov	x23, #0x30                  	// #48
   91aa8:	f2a7e617 	movk	x23, #0x3f30, lsl #16
   91aac:	a9025bf5 	stp	x21, x22, [sp, #32]
   91ab0:	52900016 	mov	w22, #0x8000                	// #32768
   91ab4:	b94002e1 	ldr	w1, [x23]
   91ab8:	72a02fd6 	movk	w22, #0x17e, lsl #16
   91abc:	6a16003f 	tst	w1, w22
   91ac0:	54000221 	b.ne	91b04 <sd_status+0x84>  // b.any
   91ac4:	529423f3 	mov	w19, #0xa11f                	// #41247
   91ac8:	2a0003f5 	mov	w21, w0
   91acc:	72a000f3 	movk	w19, #0x7, lsl #16
   91ad0:	14000007 	b	91aec <sd_status+0x6c>
   91ad4:	b94002e1 	ldr	w1, [x23]
   91ad8:	6a16003f 	tst	w1, w22
   91adc:	54000121 	b.ne	91b00 <sd_status+0x80>  // b.any
   91ae0:	51000673 	sub	w19, w19, #0x1
   91ae4:	3100067f 	cmn	w19, #0x1
   91ae8:	54000280 	b.eq	91b38 <sd_status+0xb8>  // b.none
   91aec:	52800020 	mov	w0, #0x1                   	// #1
   91af0:	97ffc634 	bl	833c0 <wait_usec>
   91af4:	b9400281 	ldr	w1, [x20]
   91af8:	6a15003f 	tst	w1, w21
   91afc:	54fffec1 	b.ne	91ad4 <sd_status+0x54>  // b.any
	return (cnt <= 0 || (*EMMC_INTERRUPT & INT_ERROR_MASK)) ? SD_ERROR : SD_OK;
   91b00:	340001d3 	cbz	w19, 91b38 <sd_status+0xb8>
   91b04:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91b08:	f9401bf7 	ldr	x23, [sp, #48]
   91b0c:	d2800601 	mov	x1, #0x30                  	// #48
   91b10:	f2a7e601 	movk	x1, #0x3f30, lsl #16
   91b14:	52900000 	mov	w0, #0x8000                	// #32768
   91b18:	72a02fc0 	movk	w0, #0x17e, lsl #16
   91b1c:	b9400021 	ldr	w1, [x1]
   91b20:	6a00003f 	tst	w1, w0
   91b24:	540000e1 	b.ne	91b40 <sd_status+0xc0>  // b.any
   91b28:	52800000 	mov	w0, #0x0                   	// #0
}
   91b2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   91b30:	a8c47bfd 	ldp	x29, x30, [sp], #64
   91b34:	d65f03c0 	ret
   91b38:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91b3c:	f9401bf7 	ldr	x23, [sp, #48]
	return (cnt <= 0 || (*EMMC_INTERRUPT & INT_ERROR_MASK)) ? SD_ERROR : SD_OK;
   91b40:	12800020 	mov	w0, #0xfffffffe            	// #-2
}
   91b44:	a94153f3 	ldp	x19, x20, [sp, #16]
   91b48:	a8c47bfd 	ldp	x29, x30, [sp], #64
   91b4c:	d65f03c0 	ret

0000000000091b50 <sd_int>:

/**
 * Wait for interrupt
 */
int32_t sd_int(uint32_t mask)
{
   91b50:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   91b54:	910003fd 	mov	x29, sp
   91b58:	a90153f3 	stp	x19, x20, [sp, #16]
	uint32_t r, m=mask | INT_ERROR_MASK;
	int32_t cnt = 1000000; while(!(*EMMC_INTERRUPT & m) && cnt--) wait_usec(1);
   91b5c:	d2800614 	mov	x20, #0x30                  	// #48
   91b60:	f2a7e614 	movk	x20, #0x3f30, lsl #16
{
   91b64:	a9025bf5 	stp	x21, x22, [sp, #32]
	uint32_t r, m=mask | INT_ERROR_MASK;
   91b68:	52900015 	mov	w21, #0x8000                	// #32768
{
   91b6c:	2a0003f6 	mov	w22, w0
	uint32_t r, m=mask | INT_ERROR_MASK;
   91b70:	72a02fd5 	movk	w21, #0x17e, lsl #16
   91b74:	2a150015 	orr	w21, w0, w21
	int32_t cnt = 1000000; while(!(*EMMC_INTERRUPT & m) && cnt--) wait_usec(1);
   91b78:	b9400280 	ldr	w0, [x20]
   91b7c:	6a0002bf 	tst	w21, w0
   91b80:	540003a1 	b.ne	91bf4 <sd_int+0xa4>  // b.any
   91b84:	528847f3 	mov	w19, #0x423f                	// #16959
   91b88:	72a001f3 	movk	w19, #0xf, lsl #16
   91b8c:	14000004 	b	91b9c <sd_int+0x4c>
   91b90:	51000673 	sub	w19, w19, #0x1
   91b94:	3100067f 	cmn	w19, #0x1
   91b98:	54000320 	b.eq	91bfc <sd_int+0xac>  // b.none
   91b9c:	52800020 	mov	w0, #0x1                   	// #1
   91ba0:	97ffc608 	bl	833c0 <wait_usec>
   91ba4:	b9400280 	ldr	w0, [x20]
   91ba8:	6a15001f 	tst	w0, w21
   91bac:	54ffff20 	b.eq	91b90 <sd_int+0x40>  // b.none
	r=*EMMC_INTERRUPT;
   91bb0:	b9400281 	ldr	w1, [x20]
	if(cnt<=0 || (r & INT_CMD_TIMEOUT) || (r & INT_DATA_TIMEOUT) ) { *EMMC_INTERRUPT=r; return SD_TIMEOUT; } else
   91bb4:	34000273 	cbz	w19, 91c00 <sd_int+0xb0>
   91bb8:	52a00220 	mov	w0, #0x110000              	// #1114112
   91bbc:	6a00003f 	tst	w1, w0
   91bc0:	54000201 	b.ne	91c00 <sd_int+0xb0>  // b.any
	if(r & INT_ERROR_MASK) { *EMMC_INTERRUPT=r; return SD_ERROR; }
   91bc4:	52900000 	mov	w0, #0x8000                	// #32768
   91bc8:	72a02fc0 	movk	w0, #0x17e, lsl #16
   91bcc:	6a00003f 	tst	w1, w0
   91bd0:	54000221 	b.ne	91c14 <sd_int+0xc4>  // b.any
	*EMMC_INTERRUPT=mask;
   91bd4:	d2800601 	mov	x1, #0x30                  	// #48
	return 0;
   91bd8:	52800000 	mov	w0, #0x0                   	// #0
	*EMMC_INTERRUPT=mask;
   91bdc:	f2a7e601 	movk	x1, #0x3f30, lsl #16
   91be0:	b9000036 	str	w22, [x1]
}
   91be4:	a94153f3 	ldp	x19, x20, [sp, #16]
   91be8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91bec:	a8c37bfd 	ldp	x29, x30, [sp], #48
   91bf0:	d65f03c0 	ret
	r=*EMMC_INTERRUPT;
   91bf4:	b9400281 	ldr	w1, [x20]
	if(cnt<=0 || (r & INT_CMD_TIMEOUT) || (r & INT_DATA_TIMEOUT) ) { *EMMC_INTERRUPT=r; return SD_TIMEOUT; } else
   91bf8:	17fffff0 	b	91bb8 <sd_int+0x68>
	r=*EMMC_INTERRUPT;
   91bfc:	b9400281 	ldr	w1, [x20]
	if(cnt<=0 || (r & INT_CMD_TIMEOUT) || (r & INT_DATA_TIMEOUT) ) { *EMMC_INTERRUPT=r; return SD_TIMEOUT; } else
   91c00:	d2800602 	mov	x2, #0x30                  	// #48
   91c04:	12800000 	mov	w0, #0xffffffff            	// #-1
   91c08:	f2a7e602 	movk	x2, #0x3f30, lsl #16
   91c0c:	b9000041 	str	w1, [x2]
   91c10:	17fffff5 	b	91be4 <sd_int+0x94>
	if(r & INT_ERROR_MASK) { *EMMC_INTERRUPT=r; return SD_ERROR; }
   91c14:	d2800602 	mov	x2, #0x30                  	// #48
   91c18:	12800020 	mov	w0, #0xfffffffe            	// #-2
   91c1c:	f2a7e602 	movk	x2, #0x3f30, lsl #16
   91c20:	b9000041 	str	w1, [x2]
   91c24:	17fffff0 	b	91be4 <sd_int+0x94>

0000000000091c28 <sd_cmd>:

/**
 * Send a command
 */
int32_t sd_cmd(uint32_t code, uint32_t arg)
{
   91c28:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   91c2c:	910003fd 	mov	x29, sp
   91c30:	a9025bf5 	stp	x21, x22, [sp, #32]
	int32_t r=0;
	sd_err=SD_OK;
   91c34:	9000aa75 	adrp	x21, 15dd000 <allocated+0xfbdd0>
{
   91c38:	2a0103f6 	mov	w22, w1
	sd_err=SD_OK;
   91c3c:	f9029ebf 	str	xzr, [x21, #1336]
{
   91c40:	a90153f3 	stp	x19, x20, [sp, #16]
   91c44:	2a0003f3 	mov	w19, w0
	if(code&CMD_NEED_APP) {
   91c48:	36f801a0 	tbz	w0, #31, 91c7c <sd_cmd+0x54>
		r=sd_cmd(CMD_APP_CMD|(sd_rca?CMD_RSPNS_48:0),sd_rca);
   91c4c:	9000aa74 	adrp	x20, 15dd000 <allocated+0xfbdd0>
   91c50:	52a6e042 	mov	w2, #0x37020000            	// #922877952
   91c54:	52a6e000 	mov	w0, #0x37000000            	// #922746880
		if(sd_rca && !r) { uart_puts("ERROR: failed to send SD APP command\n"); sd_err=SD_ERROR;return 0;}
		code &= ~CMD_NEED_APP;
   91c58:	12007a73 	and	w19, w19, #0x7fffffff
		r=sd_cmd(CMD_APP_CMD|(sd_rca?CMD_RSPNS_48:0),sd_rca);
   91c5c:	f942a281 	ldr	x1, [x20, #1344]
   91c60:	f100003f 	cmp	x1, #0x0
   91c64:	1a801040 	csel	w0, w2, w0, ne  // ne = any
   91c68:	97fffff0 	bl	91c28 <sd_cmd>
		if(sd_rca && !r) { uart_puts("ERROR: failed to send SD APP command\n"); sd_err=SD_ERROR;return 0;}
   91c6c:	f942a281 	ldr	x1, [x20, #1344]
   91c70:	f100003f 	cmp	x1, #0x0
   91c74:	7a401800 	ccmp	w0, #0x0, #0x0, ne  // ne = any
   91c78:	54000ca0 	b.eq	91e0c <sd_cmd+0x1e4>  // b.none
	}
	if(sd_status(SR_CMD_INHIBIT)) { uart_puts("ERROR: EMMC busy\n"); sd_err= SD_TIMEOUT;return 0;}
   91c7c:	52800020 	mov	w0, #0x1                   	// #1
   91c80:	97ffff80 	bl	91a80 <sd_status>
   91c84:	35000780 	cbnz	w0, 91d74 <sd_cmd+0x14c>
	uart_puts("EMMC: Sending command ");uart_hex(code);uart_puts(" arg ");uart_hex(arg);uart_send('\n');
   91c88:	b0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   91c8c:	91222000 	add	x0, x0, #0x888
   91c90:	a90363f7 	stp	x23, x24, [sp, #48]
   91c94:	97ffc20d 	bl	824c8 <uart_puts>
   91c98:	2a1303e0 	mov	w0, w19
   91c9c:	97ffc223 	bl	82528 <uart_hex>
   91ca0:	b0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   91ca4:	91228000 	add	x0, x0, #0x8a0
   91ca8:	97ffc208 	bl	824c8 <uart_puts>
   91cac:	2a1603e0 	mov	w0, w22
   91cb0:	97ffc21e 	bl	82528 <uart_hex>
   91cb4:	52800140 	mov	w0, #0xa                   	// #10
   91cb8:	97ffc1ec 	bl	82468 <uart_send>
	*EMMC_INTERRUPT=*EMMC_INTERRUPT; *EMMC_ARG1=arg; *EMMC_CMDTM=code;
   91cbc:	d2800600 	mov	x0, #0x30                  	// #48
   91cc0:	d2800102 	mov	x2, #0x8                   	// #8
   91cc4:	f2a7e600 	movk	x0, #0x3f30, lsl #16
   91cc8:	f2a7e602 	movk	x2, #0x3f30, lsl #16
   91ccc:	d2800181 	mov	x1, #0xc                   	// #12
	if(code==CMD_SEND_OP_COND) wait_usec(1000); else 
	if(code==CMD_SEND_IF_COND || code==CMD_APP_CMD) wait_usec(100);
   91cd0:	52a6e004 	mov	w4, #0x37000000            	// #922746880
	*EMMC_INTERRUPT=*EMMC_INTERRUPT; *EMMC_ARG1=arg; *EMMC_CMDTM=code;
   91cd4:	b9400003 	ldr	w3, [x0]
   91cd8:	f2a7e601 	movk	x1, #0x3f30, lsl #16
   91cdc:	b9000003 	str	w3, [x0]
	if(code==CMD_SEND_IF_COND || code==CMD_APP_CMD) wait_usec(100);
   91ce0:	6b04027f 	cmp	w19, w4
	*EMMC_INTERRUPT=*EMMC_INTERRUPT; *EMMC_ARG1=arg; *EMMC_CMDTM=code;
   91ce4:	b9000056 	str	w22, [x2]
	if(code==CMD_SEND_IF_COND || code==CMD_APP_CMD) wait_usec(100);
   91ce8:	1a9f17f7 	cset	w23, eq  // eq = none
	*EMMC_INTERRUPT=*EMMC_INTERRUPT; *EMMC_ARG1=arg; *EMMC_CMDTM=code;
   91cec:	b9000033 	str	w19, [x1]
	if(code==CMD_SEND_IF_COND || code==CMD_APP_CMD) wait_usec(100);
   91cf0:	52a10040 	mov	w0, #0x8020000             	// #134348800
   91cf4:	6b00027f 	cmp	w19, w0
   91cf8:	1a9f16f8 	csinc	w24, w23, wzr, ne  // ne = any
   91cfc:	350005f8 	cbnz	w24, 91db8 <sd_cmd+0x190>
	if((r=sd_int(INT_CMD_DONE))) {uart_puts("ERROR: failed to send EMMC command\n");sd_err=r;return 0;}
   91d00:	52800020 	mov	w0, #0x1                   	// #1
   91d04:	97ffff93 	bl	91b50 <sd_int>
   91d08:	2a0003f4 	mov	w20, w0
   91d0c:	35000620 	cbnz	w0, 91dd0 <sd_cmd+0x1a8>
	r=*EMMC_RESP0;
   91d10:	d2800200 	mov	x0, #0x10                  	// #16
	if(code==CMD_GO_IDLE || code==CMD_APP_CMD) return 0; else
   91d14:	7100027f 	cmp	w19, #0x0
	r=*EMMC_RESP0;
   91d18:	f2a7e600 	movk	x0, #0x3f30, lsl #16
	if(code==CMD_GO_IDLE || code==CMD_APP_CMD) return 0; else
   91d1c:	7a401ae0 	ccmp	w23, #0x0, #0x0, ne  // ne = any
	r=*EMMC_RESP0;
   91d20:	b9400000 	ldr	w0, [x0]
	if(code==CMD_GO_IDLE || code==CMD_APP_CMD) return 0; else
   91d24:	540003e1 	b.ne	91da0 <sd_cmd+0x178>  // b.any
	if(code==(CMD_APP_CMD|CMD_RSPNS_48)) return r&SR_APP_CMD; else
   91d28:	52a6e041 	mov	w1, #0x37020000            	// #922877952
   91d2c:	6b01027f 	cmp	w19, w1
   91d30:	54000680 	b.eq	91e00 <sd_cmd+0x1d8>  // b.none
	if(code==CMD_SEND_OP_COND) return r; else
	if(code==CMD_SEND_IF_COND) return r==arg? SD_OK : SD_ERROR; else
   91d34:	350007b8 	cbnz	w24, 91e28 <sd_cmd+0x200>
	if(code==CMD_ALL_SEND_CID) {r|=*EMMC_RESP3; r|=*EMMC_RESP2; r|=*EMMC_RESP1; return r; } else
   91d38:	52a04021 	mov	w1, #0x2010000             	// #33619968
   91d3c:	6b01027f 	cmp	w19, w1
   91d40:	540007e0 	b.eq	91e3c <sd_cmd+0x214>  // b.none
	if(code==CMD_SEND_REL_ADDR) {
   91d44:	52a06041 	mov	w1, #0x3020000             	// #50462720
   91d48:	6b01027f 	cmp	w19, w1
   91d4c:	54000940 	b.eq	91e74 <sd_cmd+0x24c>  // b.none
		sd_err=(((r&0x1fff))|((r&0x2000)<<6)|((r&0x4000)<<8)|((r&0x8000)<<8))&CMD_ERRORS_MASK;
		return r&CMD_RCA_MASK;
	}
	return r&CMD_ERRORS_MASK;
   91d50:	52980094 	mov	w20, #0xc004                	// #49156
   91d54:	72bfff34 	movk	w20, #0xfff9, lsl #16
   91d58:	0a140014 	and	w20, w0, w20
	// make gcc happy
	return 0;
}
   91d5c:	2a1403e0 	mov	w0, w20
   91d60:	a94153f3 	ldp	x19, x20, [sp, #16]
   91d64:	a9425bf5 	ldp	x21, x22, [sp, #32]
	return r&CMD_ERRORS_MASK;
   91d68:	a94363f7 	ldp	x23, x24, [sp, #48]
}
   91d6c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   91d70:	d65f03c0 	ret
	if(sd_status(SR_CMD_INHIBIT)) { uart_puts("ERROR: EMMC busy\n"); sd_err= SD_TIMEOUT;return 0;}
   91d74:	b0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   91d78:	91212000 	add	x0, x0, #0x848
   91d7c:	97ffc1d3 	bl	824c8 <uart_puts>
   91d80:	52800014 	mov	w20, #0x0                   	// #0
   91d84:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   91d88:	f9029ea0 	str	x0, [x21, #1336]
}
   91d8c:	2a1403e0 	mov	w0, w20
   91d90:	a94153f3 	ldp	x19, x20, [sp, #16]
   91d94:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91d98:	a8c47bfd 	ldp	x29, x30, [sp], #64
   91d9c:	d65f03c0 	ret
   91da0:	2a1403e0 	mov	w0, w20
   91da4:	a94153f3 	ldp	x19, x20, [sp, #16]
   91da8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91dac:	a94363f7 	ldp	x23, x24, [sp, #48]
   91db0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   91db4:	d65f03c0 	ret
	if(code==CMD_SEND_IF_COND || code==CMD_APP_CMD) wait_usec(100);
   91db8:	52800c80 	mov	w0, #0x64                  	// #100
   91dbc:	97ffc581 	bl	833c0 <wait_usec>
	if((r=sd_int(INT_CMD_DONE))) {uart_puts("ERROR: failed to send EMMC command\n");sd_err=r;return 0;}
   91dc0:	52800020 	mov	w0, #0x1                   	// #1
   91dc4:	97ffff63 	bl	91b50 <sd_int>
   91dc8:	2a0003f4 	mov	w20, w0
   91dcc:	34fffa20 	cbz	w0, 91d10 <sd_cmd+0xe8>
   91dd0:	b0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   91dd4:	91218000 	add	x0, x0, #0x860
   91dd8:	97ffc1bc 	bl	824c8 <uart_puts>
   91ddc:	93407e80 	sxtw	x0, w20
   91de0:	52800014 	mov	w20, #0x0                   	// #0
   91de4:	f9029ea0 	str	x0, [x21, #1336]
}
   91de8:	2a1403e0 	mov	w0, w20
   91dec:	a94153f3 	ldp	x19, x20, [sp, #16]
   91df0:	a9425bf5 	ldp	x21, x22, [sp, #32]
	if((r=sd_int(INT_CMD_DONE))) {uart_puts("ERROR: failed to send EMMC command\n");sd_err=r;return 0;}
   91df4:	a94363f7 	ldp	x23, x24, [sp, #48]
}
   91df8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   91dfc:	d65f03c0 	ret
	if(code==(CMD_APP_CMD|CMD_RSPNS_48)) return r&SR_APP_CMD; else
   91e00:	121b0014 	and	w20, w0, #0x20
   91e04:	a94363f7 	ldp	x23, x24, [sp, #48]
   91e08:	17ffffe1 	b	91d8c <sd_cmd+0x164>
		if(sd_rca && !r) { uart_puts("ERROR: failed to send SD APP command\n"); sd_err=SD_ERROR;return 0;}
   91e0c:	b0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   91e10:	91208000 	add	x0, x0, #0x820
   91e14:	97ffc1ad 	bl	824c8 <uart_puts>
   91e18:	52800014 	mov	w20, #0x0                   	// #0
   91e1c:	92800020 	mov	x0, #0xfffffffffffffffe    	// #-2
   91e20:	f9029ea0 	str	x0, [x21, #1336]
   91e24:	17ffffda 	b	91d8c <sd_cmd+0x164>
	if(code==CMD_SEND_IF_COND) return r==arg? SD_OK : SD_ERROR; else
   91e28:	6b16001f 	cmp	w0, w22
   91e2c:	12800034 	mov	w20, #0xfffffffe            	// #-2
   91e30:	1a9403f4 	csel	w20, wzr, w20, eq  // eq = none
   91e34:	a94363f7 	ldp	x23, x24, [sp, #48]
   91e38:	17ffffd5 	b	91d8c <sd_cmd+0x164>
	if(code==CMD_ALL_SEND_CID) {r|=*EMMC_RESP3; r|=*EMMC_RESP2; r|=*EMMC_RESP1; return r; } else
   91e3c:	d2800382 	mov	x2, #0x1c                  	// #28
   91e40:	d2800303 	mov	x3, #0x18                  	// #24
   91e44:	d2800281 	mov	x1, #0x14                  	// #20
   91e48:	f2a7e602 	movk	x2, #0x3f30, lsl #16
   91e4c:	f2a7e603 	movk	x3, #0x3f30, lsl #16
   91e50:	f2a7e601 	movk	x1, #0x3f30, lsl #16
   91e54:	b9400042 	ldr	w2, [x2]
   91e58:	b9400074 	ldr	w20, [x3]
   91e5c:	b9400021 	ldr	w1, [x1]
   91e60:	2a020000 	orr	w0, w0, w2
   91e64:	a94363f7 	ldp	x23, x24, [sp, #48]
   91e68:	2a010294 	orr	w20, w20, w1
   91e6c:	2a140014 	orr	w20, w0, w20
   91e70:	17ffffc7 	b	91d8c <sd_cmd+0x164>
		sd_err=(((r&0x1fff))|((r&0x2000)<<6)|((r&0x4000)<<8)|((r&0x8000)<<8))&CMD_ERRORS_MASK;
   91e74:	53185c01 	lsl	w1, w0, #8
   91e78:	531a6402 	lsl	w2, w0, #6
   91e7c:	120a0024 	and	w4, w1, #0x400000
   91e80:	12090023 	and	w3, w1, #0x800000
   91e84:	120d0042 	and	w2, w2, #0x80000
   91e88:	121e0001 	and	w1, w0, #0x4
   91e8c:	2a040042 	orr	w2, w2, w4
   91e90:	2a030021 	orr	w1, w1, w3
   91e94:	2a020021 	orr	w1, w1, w2
		return r&CMD_RCA_MASK;
   91e98:	12103c14 	and	w20, w0, #0xffff0000
		sd_err=(((r&0x1fff))|((r&0x2000)<<6)|((r&0x4000)<<8)|((r&0x8000)<<8))&CMD_ERRORS_MASK;
   91e9c:	f9029ea1 	str	x1, [x21, #1336]
		return r&CMD_RCA_MASK;
   91ea0:	a94363f7 	ldp	x23, x24, [sp, #48]
   91ea4:	17ffffba 	b	91d8c <sd_cmd+0x164>

0000000000091ea8 <sd_readblock>:
/**
 * read a block from sd card and return the number of bytes read
 * returns 0 on error.
 */
int32_t sd_readblock(uint32_t lba, unsigned char *buffer, uint32_t num)
{
   91ea8:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
	int32_t r,c=0,d;
	if(num<1) num=1;
   91eac:	7100005f 	cmp	w2, #0x0
{
   91eb0:	910003fd 	mov	x29, sp
   91eb4:	a90153f3 	stp	x19, x20, [sp, #16]
   91eb8:	aa0103f3 	mov	x19, x1
   91ebc:	2a0003f4 	mov	w20, w0
	uart_puts("sd_readblock lba ");uart_hex(lba);uart_puts(" num ");uart_hex(num);uart_send('\n');
   91ec0:	b0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   91ec4:	9122a000 	add	x0, x0, #0x8a8
{
   91ec8:	a9025bf5 	stp	x21, x22, [sp, #32]
	if(num<1) num=1;
   91ecc:	1a9f1456 	csinc	w22, w2, wzr, ne  // ne = any
	uart_puts("sd_readblock lba ");uart_hex(lba);uart_puts(" num ");uart_hex(num);uart_send('\n');
   91ed0:	97ffc17e 	bl	824c8 <uart_puts>
   91ed4:	2a1403e0 	mov	w0, w20
   91ed8:	97ffc194 	bl	82528 <uart_hex>
   91edc:	b0000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   91ee0:	91230000 	add	x0, x0, #0x8c0
   91ee4:	97ffc179 	bl	824c8 <uart_puts>
   91ee8:	2a1603e0 	mov	w0, w22
   91eec:	97ffc18f 	bl	82528 <uart_hex>
   91ef0:	52800140 	mov	w0, #0xa                   	// #10
   91ef4:	97ffc15d 	bl	82468 <uart_send>
	if(sd_status(SR_DAT_INHIBIT)) {sd_err=SD_TIMEOUT; return 0;}
   91ef8:	52800040 	mov	w0, #0x2                   	// #2
   91efc:	97fffee1 	bl	91a80 <sd_status>
   91f00:	35000820 	cbnz	w0, 92004 <sd_readblock+0x15c>
	uint32_t *buf=(uint32_t *)buffer;
	if(sd_scr[0] & SCR_SUPP_CCS) {
   91f04:	a90363f7 	stp	x23, x24, [sp, #48]
   91f08:	9000aa77 	adrp	x23, 15dd000 <allocated+0xfbdd0>
   91f0c:	2a0003f5 	mov	w21, w0
   91f10:	f942a6e0 	ldr	x0, [x23, #1352]
   91f14:	92400001 	and	x1, x0, #0x1
   91f18:	370004e0 	tbnz	w0, #0, 91fb4 <sd_readblock+0x10c>
		}
		*EMMC_BLKSIZECNT = (num << 16) | 512;
		sd_cmd(num == 1 ? CMD_READ_SINGLE : CMD_READ_MULTI,lba);
		if(sd_err) return 0;
	} else {
		*EMMC_BLKSIZECNT = (1 << 16) | 512;
   91f1c:	d2800080 	mov	x0, #0x4                   	// #4
   91f20:	52804002 	mov	w2, #0x200                 	// #512
   91f24:	f2a7e600 	movk	x0, #0x3f30, lsl #16
   91f28:	a9046bf9 	stp	x25, x26, [sp, #64]
   91f2c:	72a00022 	movk	w2, #0x1, lsl #16
   91f30:	f9002bfb 	str	x27, [sp, #80]
   91f34:	9000aa78 	adrp	x24, 15dd000 <allocated+0xfbdd0>
   91f38:	b9000002 	str	w2, [x0]
   91f3c:	53175a94 	lsl	w20, w20, #9
   91f40:	91080273 	add	x19, x19, #0x200
   91f44:	4b130299 	sub	w25, w20, w19
	}
	while( c < num ) {
		if(!(sd_scr[0] & SCR_SUPP_CCS)) {
			sd_cmd(CMD_READ_SINGLE,(lba+c)*512);
   91f48:	5280021a 	mov	w26, #0x10                  	// #16
			if(sd_err) return 0;
		}
		if((r=sd_int(INT_READ_RDY))){uart_puts("\rERROR: Timeout waiting for ready to read\n");sd_err=r;return 0;}
		for(d=0;d<128;d++) buf[d] = *EMMC_DATA;
   91f4c:	d2800414 	mov	x20, #0x20                  	// #32
			sd_cmd(CMD_READ_SINGLE,(lba+c)*512);
   91f50:	72a2245a 	movk	w26, #0x1122, lsl #16
		for(d=0;d<128;d++) buf[d] = *EMMC_DATA;
   91f54:	f2a7e614 	movk	x20, #0x3f30, lsl #16
		if(!(sd_scr[0] & SCR_SUPP_CCS)) {
   91f58:	b50000c1 	cbnz	x1, 91f70 <sd_readblock+0xc8>
			sd_cmd(CMD_READ_SINGLE,(lba+c)*512);
   91f5c:	0b130321 	add	w1, w25, w19
   91f60:	2a1a03e0 	mov	w0, w26
   91f64:	97ffff31 	bl	91c28 <sd_cmd>
			if(sd_err) return 0;
   91f68:	f9429f00 	ldr	x0, [x24, #1336]
   91f6c:	b5000780 	cbnz	x0, 9205c <sd_readblock+0x1b4>
		if((r=sd_int(INT_READ_RDY))){uart_puts("\rERROR: Timeout waiting for ready to read\n");sd_err=r;return 0;}
   91f70:	52800400 	mov	w0, #0x20                  	// #32
   91f74:	97fffef7 	bl	91b50 <sd_int>
   91f78:	93407c1b 	sxtw	x27, w0
   91f7c:	3500081b 	cbnz	w27, 9207c <sd_readblock+0x1d4>
   91f80:	d1080260 	sub	x0, x19, #0x200
   91f84:	d503201f 	nop
		for(d=0;d<128;d++) buf[d] = *EMMC_DATA;
   91f88:	b9400281 	ldr	w1, [x20]
   91f8c:	b8004401 	str	w1, [x0], #4
   91f90:	eb00027f 	cmp	x19, x0
   91f94:	54ffffa1 	b.ne	91f88 <sd_readblock+0xe0>  // b.any
		c++; buf+=128;
   91f98:	110006b5 	add	w21, w21, #0x1
   91f9c:	91080273 	add	x19, x19, #0x200
	while( c < num ) {
   91fa0:	6b1602bf 	cmp	w21, w22
   91fa4:	54000400 	b.eq	92024 <sd_readblock+0x17c>  // b.none
   91fa8:	f942a6e0 	ldr	x0, [x23, #1352]
   91fac:	92400001 	and	x1, x0, #0x1
   91fb0:	17ffffea 	b	91f58 <sd_readblock+0xb0>
		if(num > 1 && (sd_scr[0] & SCR_SUPP_SET_BLKCNT)) {
   91fb4:	710006df 	cmp	w22, #0x1
   91fb8:	540007a9 	b.ls	920ac <sd_readblock+0x204>  // b.plast
   91fbc:	9000aa78 	adrp	x24, 15dd000 <allocated+0xfbdd0>
   91fc0:	37c80880 	tbnz	w0, #25, 920d0 <sd_readblock+0x228>
		*EMMC_BLKSIZECNT = (num << 16) | 512;
   91fc4:	d2800082 	mov	x2, #0x4                   	// #4
   91fc8:	53103ec1 	lsl	w1, w22, #16
   91fcc:	f2a7e602 	movk	x2, #0x3f30, lsl #16
		sd_cmd(num == 1 ? CMD_READ_SINGLE : CMD_READ_MULTI,lba);
   91fd0:	52800640 	mov	w0, #0x32                  	// #50
		*EMMC_BLKSIZECNT = (num << 16) | 512;
   91fd4:	32170021 	orr	w1, w1, #0x200
		sd_cmd(num == 1 ? CMD_READ_SINGLE : CMD_READ_MULTI,lba);
   91fd8:	72a24440 	movk	w0, #0x1222, lsl #16
		*EMMC_BLKSIZECNT = (num << 16) | 512;
   91fdc:	b9000041 	str	w1, [x2]
		sd_cmd(num == 1 ? CMD_READ_SINGLE : CMD_READ_MULTI,lba);
   91fe0:	2a1403e1 	mov	w1, w20
   91fe4:	97ffff11 	bl	91c28 <sd_cmd>
		if(sd_err) return 0;
   91fe8:	f9429f00 	ldr	x0, [x24, #1336]
   91fec:	b50003c0 	cbnz	x0, 92064 <sd_readblock+0x1bc>
   91ff0:	f942a6e0 	ldr	x0, [x23, #1352]
   91ff4:	a9046bf9 	stp	x25, x26, [sp, #64]
   91ff8:	92400001 	and	x1, x0, #0x1
   91ffc:	f9002bfb 	str	x27, [sp, #80]
   92000:	17ffffcf 	b	91f3c <sd_readblock+0x94>
	if(sd_status(SR_DAT_INHIBIT)) {sd_err=SD_TIMEOUT; return 0;}
   92004:	f000aa41 	adrp	x1, 15dd000 <allocated+0xfbdd0>
   92008:	92800002 	mov	x2, #0xffffffffffffffff    	// #-1
   9200c:	52800000 	mov	w0, #0x0                   	// #0
   92010:	f9029c22 	str	x2, [x1, #1336]
	}
	if( num > 1 && !(sd_scr[0] & SCR_SUPP_SET_BLKCNT) && (sd_scr[0] & SCR_SUPP_CCS)) sd_cmd(CMD_STOP_TRANS,0);
	return sd_err!=SD_OK || c!=num? 0 : num*512;
}
   92014:	a94153f3 	ldp	x19, x20, [sp, #16]
   92018:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9201c:	a8c67bfd 	ldp	x29, x30, [sp], #96
   92020:	d65f03c0 	ret
	if( num > 1 && !(sd_scr[0] & SCR_SUPP_SET_BLKCNT) && (sd_scr[0] & SCR_SUPP_CCS)) sd_cmd(CMD_STOP_TRANS,0);
   92024:	710006bf 	cmp	w21, #0x1
   92028:	54000129 	b.ls	9204c <sd_readblock+0x1a4>  // b.plast
   9202c:	f942a6e0 	ldr	x0, [x23, #1352]
   92030:	92406400 	and	x0, x0, #0x3ffffff
   92034:	92679c00 	and	x0, x0, #0xfffffffffe000001
   92038:	f100041f 	cmp	x0, #0x1
   9203c:	54000081 	b.ne	9204c <sd_readblock+0x1a4>  // b.any
   92040:	52800001 	mov	w1, #0x0                   	// #0
   92044:	52a18060 	mov	w0, #0xc030000             	// #201523200
   92048:	97fffef8 	bl	91c28 <sd_cmd>
	return sd_err!=SD_OK || c!=num? 0 : num*512;
   9204c:	f9429f00 	ldr	x0, [x24, #1336]
   92050:	f100001f 	cmp	x0, #0x0
   92054:	7a5502c0 	ccmp	w22, w21, #0x0, eq  // eq = none
   92058:	54000480 	b.eq	920e8 <sd_readblock+0x240>  // b.none
   9205c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   92060:	f9402bfb 	ldr	x27, [sp, #80]
			if(sd_err) return 0;
   92064:	52800000 	mov	w0, #0x0                   	// #0
}
   92068:	a94153f3 	ldp	x19, x20, [sp, #16]
   9206c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   92070:	a94363f7 	ldp	x23, x24, [sp, #48]
   92074:	a8c67bfd 	ldp	x29, x30, [sp], #96
   92078:	d65f03c0 	ret
		if((r=sd_int(INT_READ_RDY))){uart_puts("\rERROR: Timeout waiting for ready to read\n");sd_err=r;return 0;}
   9207c:	90000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   92080:	91232000 	add	x0, x0, #0x8c8
   92084:	97ffc111 	bl	824c8 <uart_puts>
   92088:	f9029f1b 	str	x27, [x24, #1336]
   9208c:	52800000 	mov	w0, #0x0                   	// #0
}
   92090:	a94153f3 	ldp	x19, x20, [sp, #16]
   92094:	a9425bf5 	ldp	x21, x22, [sp, #32]
		if((r=sd_int(INT_READ_RDY))){uart_puts("\rERROR: Timeout waiting for ready to read\n");sd_err=r;return 0;}
   92098:	a94363f7 	ldp	x23, x24, [sp, #48]
   9209c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   920a0:	f9402bfb 	ldr	x27, [sp, #80]
}
   920a4:	a8c67bfd 	ldp	x29, x30, [sp], #96
   920a8:	d65f03c0 	ret
		*EMMC_BLKSIZECNT = (num << 16) | 512;
   920ac:	d2800081 	mov	x1, #0x4                   	// #4
   920b0:	52804002 	mov	w2, #0x200                 	// #512
   920b4:	f2a7e601 	movk	x1, #0x3f30, lsl #16
		sd_cmd(num == 1 ? CMD_READ_SINGLE : CMD_READ_MULTI,lba);
   920b8:	52800200 	mov	w0, #0x10                  	// #16
		*EMMC_BLKSIZECNT = (num << 16) | 512;
   920bc:	72a00022 	movk	w2, #0x1, lsl #16
		sd_cmd(num == 1 ? CMD_READ_SINGLE : CMD_READ_MULTI,lba);
   920c0:	72a22440 	movk	w0, #0x1122, lsl #16
   920c4:	f000aa58 	adrp	x24, 15dd000 <allocated+0xfbdd0>
		*EMMC_BLKSIZECNT = (num << 16) | 512;
   920c8:	b9000022 	str	w2, [x1]
		sd_cmd(num == 1 ? CMD_READ_SINGLE : CMD_READ_MULTI,lba);
   920cc:	17ffffc5 	b	91fe0 <sd_readblock+0x138>
			sd_cmd(CMD_SET_BLOCKCNT,num);
   920d0:	2a1603e1 	mov	w1, w22
   920d4:	52a2e040 	mov	w0, #0x17020000            	// #386007040
   920d8:	97fffed4 	bl	91c28 <sd_cmd>
			if(sd_err) return 0;
   920dc:	f9429f00 	ldr	x0, [x24, #1336]
   920e0:	b4fff720 	cbz	x0, 91fc4 <sd_readblock+0x11c>
   920e4:	17ffffe0 	b	92064 <sd_readblock+0x1bc>
	return sd_err!=SD_OK || c!=num? 0 : num*512;
   920e8:	53175ac0 	lsl	w0, w22, #9
   920ec:	a94363f7 	ldp	x23, x24, [sp, #48]
   920f0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   920f4:	f9402bfb 	ldr	x27, [sp, #80]
   920f8:	17ffffc7 	b	92014 <sd_readblock+0x16c>
   920fc:	d503201f 	nop

0000000000092100 <sd_clk>:

/**
 * set SD clock to frequency in Hz
 */
int32_t sd_clk(uint32_t f)
{
   92100:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   92104:	910003fd 	mov	x29, sp
   92108:	a90153f3 	stp	x19, x20, [sp, #16]
	uint32_t d,c=41666666/f,x,s=32,h=0;
	int32_t cnt = 100000;
	while((*EMMC_STATUS & (SR_CMD_INHIBIT|SR_DAT_INHIBIT)) && cnt--) wait_usec(1);
   9210c:	d2800494 	mov	x20, #0x24                  	// #36
   92110:	f2a7e614 	movk	x20, #0x3f30, lsl #16
{
   92114:	a9025bf5 	stp	x21, x22, [sp, #32]
	uint32_t d,c=41666666/f,x,s=32,h=0;
   92118:	52990d55 	mov	w21, #0xc86a                	// #51306
	while((*EMMC_STATUS & (SR_CMD_INHIBIT|SR_DAT_INHIBIT)) && cnt--) wait_usec(1);
   9211c:	b9400281 	ldr	w1, [x20]
	uint32_t d,c=41666666/f,x,s=32,h=0;
   92120:	72a04f75 	movk	w21, #0x27b, lsl #16
   92124:	1ac00ab5 	udiv	w21, w21, w0
	while((*EMMC_STATUS & (SR_CMD_INHIBIT|SR_DAT_INHIBIT)) && cnt--) wait_usec(1);
   92128:	f240043f 	tst	x1, #0x3
   9212c:	540001a0 	b.eq	92160 <sd_clk+0x60>  // b.none
   92130:	5290d3f3 	mov	w19, #0x869f                	// #34463
   92134:	72a00033 	movk	w19, #0x1, lsl #16
   92138:	14000004 	b	92148 <sd_clk+0x48>
   9213c:	51000673 	sub	w19, w19, #0x1
   92140:	3100067f 	cmn	w19, #0x1
   92144:	54000d40 	b.eq	922ec <sd_clk+0x1ec>  // b.none
   92148:	52800020 	mov	w0, #0x1                   	// #1
   9214c:	97ffc49d 	bl	833c0 <wait_usec>
   92150:	b9400280 	ldr	w0, [x20]
   92154:	f240041f 	tst	x0, #0x3
   92158:	54ffff21 	b.ne	9213c <sd_clk+0x3c>  // b.any
	if(cnt<=0) {
   9215c:	34000c93 	cbz	w19, 922ec <sd_clk+0x1ec>
		uart_puts("ERROR: timeout waiting for inhibit flag\n");
		return SD_ERROR;
	}

	*EMMC_CONTROL1 &= ~C1_CLK_EN; wait_usec(10);
   92160:	d2800582 	mov	x2, #0x2c                  	// #44
   92164:	a90363f7 	stp	x23, x24, [sp, #48]
   92168:	f2a7e602 	movk	x2, #0x3f30, lsl #16
   9216c:	52800140 	mov	w0, #0xa                   	// #10
   92170:	b9400041 	ldr	w1, [x2]
   92174:	121d7821 	and	w1, w1, #0xfffffffb
   92178:	b9000041 	str	w1, [x2]
   9217c:	97ffc491 	bl	833c0 <wait_usec>
	x=c-1; if(!x) s=0; else {
   92180:	710006b3 	subs	w19, w21, #0x1
   92184:	54000a40 	b.eq	922cc <sd_clk+0x1cc>  // b.none
		if(!(x & 0xffff0000u)) { x <<= 16; s -= 16; }
   92188:	72103e7f 	tst	w19, #0xffff0000
	uint32_t d,c=41666666/f,x,s=32,h=0;
   9218c:	52800400 	mov	w0, #0x20                  	// #32
		if(!(x & 0xffff0000u)) { x <<= 16; s -= 16; }
   92190:	54000061 	b.ne	9219c <sd_clk+0x9c>  // b.any
   92194:	53103e73 	lsl	w19, w19, #16
   92198:	52800200 	mov	w0, #0x10                  	// #16
		if(!(x & 0xff000000u)) { x <<= 8;  s -= 8; }
   9219c:	72081e7f 	tst	w19, #0xff000000
   921a0:	54000061 	b.ne	921ac <sd_clk+0xac>  // b.any
   921a4:	53185e73 	lsl	w19, w19, #8
   921a8:	51002000 	sub	w0, w0, #0x8
		if(!(x & 0xf0000000u)) { x <<= 4;  s -= 4; }
   921ac:	72040e7f 	tst	w19, #0xf0000000
   921b0:	54000061 	b.ne	921bc <sd_clk+0xbc>  // b.any
   921b4:	531c6e73 	lsl	w19, w19, #4
   921b8:	51001000 	sub	w0, w0, #0x4
		if(!(x & 0xc0000000u)) { x <<= 2;  s -= 2; }
   921bc:	7202067f 	tst	w19, #0xc0000000
   921c0:	54000061 	b.ne	921cc <sd_clk+0xcc>  // b.any
   921c4:	531e7673 	lsl	w19, w19, #2
   921c8:	51000800 	sub	w0, w0, #0x2
		if(!(x & 0x80000000u)) { x <<= 1;  s -= 1; }
		if(s>0) s--;
		if(s>7) s=7;
	}
	if(sd_hv>HOST_SPEC_V2) d=c; else d=(1<<s);
   921cc:	f000aa57 	adrp	x23, 15dd000 <allocated+0xfbdd0>
   921d0:	0b537c13 	add	w19, w0, w19, lsr #31
   921d4:	51000a73 	sub	w19, w19, #0x2
		if(s>7) s=7;
   921d8:	528000e0 	mov	w0, #0x7                   	// #7
	if(sd_hv>HOST_SPEC_V2) d=c; else d=(1<<s);
   921dc:	f942aee1 	ldr	x1, [x23, #1368]
   921e0:	6b00027f 	cmp	w19, w0
   921e4:	1a809273 	csel	w19, w19, w0, ls  // ls = plast
   921e8:	52800020 	mov	w0, #0x1                   	// #1
   921ec:	f100083f 	cmp	x1, #0x2
   921f0:	1ad32000 	lsl	w0, w0, w19
   921f4:	1a953015 	csel	w21, w0, w21, cc  // cc = lo, ul, last
	if(d<=2) {d=2;s=0;}
   921f8:	71000abf 	cmp	w21, #0x2
   921fc:	54000709 	b.ls	922dc <sd_clk+0x1dc>  // b.plast
   92200:	53181eb8 	ubfiz	w24, w21, #8, #8
	uart_puts("sd_clk divisor ");uart_hex(d);uart_puts(", shift ");uart_hex(s);uart_send('\n');
   92204:	90000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   92208:	9124a000 	add	x0, x0, #0x928
   9220c:	97ffc0af 	bl	824c8 <uart_puts>
	if(sd_hv>HOST_SPEC_V2) h=(d&0x300)>>2;
	d=(((d&0x0ff)<<8)|h);
	*EMMC_CONTROL1=(*EMMC_CONTROL1&0xffff003f)|d; wait_usec(10);
   92210:	d2800596 	mov	x22, #0x2c                  	// #44
	uart_puts("sd_clk divisor ");uart_hex(d);uart_puts(", shift ");uart_hex(s);uart_send('\n');
   92214:	2a1503e0 	mov	w0, w21
   92218:	97ffc0c4 	bl	82528 <uart_hex>
   9221c:	90000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   92220:	9124e000 	add	x0, x0, #0x938
   92224:	97ffc0a9 	bl	824c8 <uart_puts>
	*EMMC_CONTROL1=(*EMMC_CONTROL1&0xffff003f)|d; wait_usec(10);
   92228:	f2a7e616 	movk	x22, #0x3f30, lsl #16
	uart_puts("sd_clk divisor ");uart_hex(d);uart_puts(", shift ");uart_hex(s);uart_send('\n');
   9222c:	2a1303e0 	mov	w0, w19
   92230:	97ffc0be 	bl	82528 <uart_hex>
   92234:	52800140 	mov	w0, #0xa                   	// #10
   92238:	97ffc08c 	bl	82468 <uart_send>
	if(sd_hv>HOST_SPEC_V2) h=(d&0x300)>>2;
   9223c:	f942aee0 	ldr	x0, [x23, #1368]
   92240:	53027ea1 	lsr	w1, w21, #2
	*EMMC_CONTROL1=(*EMMC_CONTROL1&0xffff003f)|d; wait_usec(10);
   92244:	b94002c2 	ldr	w2, [x22]
	if(sd_hv>HOST_SPEC_V2) h=(d&0x300)>>2;
   92248:	121a0421 	and	w1, w1, #0xc0
   9224c:	f100041f 	cmp	x0, #0x1
	*EMMC_CONTROL1=(*EMMC_CONTROL1&0xffff003f)|d; wait_usec(10);
   92250:	52800140 	mov	w0, #0xa                   	// #10
   92254:	12105442 	and	w2, w2, #0xffff003f
	if(sd_hv>HOST_SPEC_V2) h=(d&0x300)>>2;
   92258:	1a9f8021 	csel	w1, w1, wzr, hi  // hi = pmore
	*EMMC_CONTROL1=(*EMMC_CONTROL1&0xffff003f)|d; wait_usec(10);
   9225c:	2a180042 	orr	w2, w2, w24
	*EMMC_CONTROL1 |= C1_CLK_EN; wait_usec(10);
	cnt=10000; while(!(*EMMC_CONTROL1 & C1_CLK_STABLE) && cnt--) wait_usec(10);
   92260:	aa1603f4 	mov	x20, x22
	*EMMC_CONTROL1=(*EMMC_CONTROL1&0xffff003f)|d; wait_usec(10);
   92264:	2a010041 	orr	w1, w2, w1
   92268:	b90002c1 	str	w1, [x22]
	cnt=10000; while(!(*EMMC_CONTROL1 & C1_CLK_STABLE) && cnt--) wait_usec(10);
   9226c:	5284e1f3 	mov	w19, #0x270f                	// #9999
	*EMMC_CONTROL1=(*EMMC_CONTROL1&0xffff003f)|d; wait_usec(10);
   92270:	97ffc454 	bl	833c0 <wait_usec>
	*EMMC_CONTROL1 |= C1_CLK_EN; wait_usec(10);
   92274:	b94002c1 	ldr	w1, [x22]
   92278:	52800140 	mov	w0, #0xa                   	// #10
   9227c:	321e0021 	orr	w1, w1, #0x4
   92280:	b90002c1 	str	w1, [x22]
   92284:	97ffc44f 	bl	833c0 <wait_usec>
	cnt=10000; while(!(*EMMC_CONTROL1 & C1_CLK_STABLE) && cnt--) wait_usec(10);
   92288:	b94002c0 	ldr	w0, [x22]
   9228c:	360800a0 	tbz	w0, #1, 922a0 <sd_clk+0x1a0>
   92290:	14000009 	b	922b4 <sd_clk+0x1b4>
   92294:	51000673 	sub	w19, w19, #0x1
   92298:	3100067f 	cmn	w19, #0x1
   9229c:	54000320 	b.eq	92300 <sd_clk+0x200>  // b.none
   922a0:	52800140 	mov	w0, #0xa                   	// #10
   922a4:	97ffc447 	bl	833c0 <wait_usec>
   922a8:	b9400280 	ldr	w0, [x20]
   922ac:	360fff40 	tbz	w0, #1, 92294 <sd_clk+0x194>
	if(cnt<=0) {
   922b0:	34000293 	cbz	w19, 92300 <sd_clk+0x200>
   922b4:	a94363f7 	ldp	x23, x24, [sp, #48]
		uart_puts("ERROR: failed to get stable clock\n");
		return SD_ERROR;
	}
	return SD_OK;
   922b8:	52800000 	mov	w0, #0x0                   	// #0
}
   922bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   922c0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   922c4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   922c8:	d65f03c0 	ret
   922cc:	52804018 	mov	w24, #0x200                 	// #512
	if(d<=2) {d=2;s=0;}
   922d0:	52800055 	mov	w21, #0x2                   	// #2
   922d4:	f000aa57 	adrp	x23, 15dd000 <allocated+0xfbdd0>
   922d8:	17ffffcb 	b	92204 <sd_clk+0x104>
   922dc:	52804018 	mov	w24, #0x200                 	// #512
   922e0:	52800013 	mov	w19, #0x0                   	// #0
   922e4:	52800055 	mov	w21, #0x2                   	// #2
   922e8:	17ffffc7 	b	92204 <sd_clk+0x104>
		uart_puts("ERROR: timeout waiting for inhibit flag\n");
   922ec:	90000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   922f0:	9123e000 	add	x0, x0, #0x8f8
   922f4:	97ffc075 	bl	824c8 <uart_puts>
		return SD_ERROR;
   922f8:	12800020 	mov	w0, #0xfffffffe            	// #-2
   922fc:	17fffff0 	b	922bc <sd_clk+0x1bc>
		uart_puts("ERROR: failed to get stable clock\n");
   92300:	90000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   92304:	91252000 	add	x0, x0, #0x948
   92308:	97ffc070 	bl	824c8 <uart_puts>
		return SD_ERROR;
   9230c:	12800020 	mov	w0, #0xfffffffe            	// #-2
   92310:	a94363f7 	ldp	x23, x24, [sp, #48]
   92314:	17ffffea 	b	922bc <sd_clk+0x1bc>

0000000000092318 <sd_init>:

/**
 * initialize EMMC to read SDHC card
 */
int sd_init()
{
   92318:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
	int64_t r,cnt,ccs=0;
	// GPIO_CD
	r=*GPFSEL4; r&=~(7<<(7*3)); *GPFSEL4=r;
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<15); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   9231c:	528012c0 	mov	w0, #0x96                  	// #150
{
   92320:	910003fd 	mov	x29, sp
   92324:	a9025bf5 	stp	x21, x22, [sp, #32]
	r=*GPFSEL4; r&=~(7<<(7*3)); *GPFSEL4=r;
   92328:	d2800216 	mov	x22, #0x10                  	// #16
   9232c:	f2a7e416 	movk	x22, #0x3f20, lsl #16
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<15); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   92330:	d2801295 	mov	x21, #0x94                  	// #148
{
   92334:	a90153f3 	stp	x19, x20, [sp, #16]
	r=*GPFSEL4; r&=~(7<<(7*3)); *GPFSEL4=r;
   92338:	b94002c1 	ldr	w1, [x22]
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<15); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   9233c:	f2a7e415 	movk	x21, #0x3f20, lsl #16
{
   92340:	a90363f7 	stp	x23, x24, [sp, #48]
	r=*GPFSEL4; r&=~(7<<(7*3)); *GPFSEL4=r;
   92344:	92407c21 	and	x1, x1, #0xffffffff
   92348:	9268f021 	and	x1, x1, #0xffffffffff1fffff
   9234c:	b90002c1 	str	w1, [x22]
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<15); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   92350:	52800057 	mov	w23, #0x2                   	// #2
   92354:	d2801394 	mov	x20, #0x9c                  	// #156
   92358:	b90002b7 	str	w23, [x21]
   9235c:	f2a7e414 	movk	x20, #0x3f20, lsl #16
	
	sd_hv = (*EMMC_SLOTISR_VER & HOST_SPEC_NUM) >> HOST_SPEC_NUM_SHIFT;
	uart_puts("EMMC: GPIO set up\n");
	// Reset the card.
	*EMMC_CONTROL0 = 0; *EMMC_CONTROL1 |= C1_SRST_HC;
	cnt=10000; do{wait_usec(10);} while( (*EMMC_CONTROL1 & C1_SRST_HC) && cnt-- );
   92360:	d284e213 	mov	x19, #0x2710                	// #10000
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<15); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   92364:	97ffc40f 	bl	833a0 <wait_cycles>
   92368:	52900000 	mov	w0, #0x8000                	// #32768
   9236c:	b9000280 	str	w0, [x20]
   92370:	528012c0 	mov	w0, #0x96                  	// #150
   92374:	97ffc40b 	bl	833a0 <wait_cycles>
   92378:	b90002bf 	str	wzr, [x21]
	r=*GPHEN1; r|=1<<15; *GPHEN1=r;
   9237c:	d2800d02 	mov	x2, #0x68                  	// #104
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<15); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   92380:	b900029f 	str	wzr, [x20]
	r=*GPHEN1; r|=1<<15; *GPHEN1=r;
   92384:	f2a7e402 	movk	x2, #0x3f20, lsl #16
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<16)|(1<<17); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   92388:	528012c0 	mov	w0, #0x96                  	// #150
	r=*GPHEN1; r|=1<<15; *GPHEN1=r;
   9238c:	b9400041 	ldr	w1, [x2]
   92390:	32110021 	orr	w1, w1, #0x8000
   92394:	b9000041 	str	w1, [x2]
	r=*GPFSEL4; r|=(7<<(8*3))|(7<<(9*3)); *GPFSEL4=r;
   92398:	b94002c1 	ldr	w1, [x22]
   9239c:	32081421 	orr	w1, w1, #0x3f000000
   923a0:	b90002c1 	str	w1, [x22]
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<16)|(1<<17); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   923a4:	b90002b7 	str	w23, [x21]
   923a8:	97ffc3fe 	bl	833a0 <wait_cycles>
   923ac:	52a00060 	mov	w0, #0x30000               	// #196608
   923b0:	b9000280 	str	w0, [x20]
   923b4:	528012c0 	mov	w0, #0x96                  	// #150
   923b8:	97ffc3fa 	bl	833a0 <wait_cycles>
   923bc:	b90002bf 	str	wzr, [x21]
	r=*GPFSEL5; r|=(7<<(0*3)) | (7<<(1*3)) | (7<<(2*3)) | (7<<(3*3)); *GPFSEL5=r;
   923c0:	d2800282 	mov	x2, #0x14                  	// #20
	*GPPUD=2; wait_cycles(150); *GPPUDCLK1=(1<<16)|(1<<17); wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   923c4:	b900029f 	str	wzr, [x20]
	r=*GPFSEL5; r|=(7<<(0*3)) | (7<<(1*3)) | (7<<(2*3)) | (7<<(3*3)); *GPFSEL5=r;
   923c8:	f2a7e402 	movk	x2, #0x3f20, lsl #16
	*GPPUD=2; wait_cycles(150);
   923cc:	528012c0 	mov	w0, #0x96                  	// #150
	r=*GPFSEL5; r|=(7<<(0*3)) | (7<<(1*3)) | (7<<(2*3)) | (7<<(3*3)); *GPFSEL5=r;
   923d0:	b9400041 	ldr	w1, [x2]
   923d4:	32002c21 	orr	w1, w1, #0xfff
   923d8:	b9000041 	str	w1, [x2]
	*GPPUD=2; wait_cycles(150);
   923dc:	b90002b7 	str	w23, [x21]
   923e0:	97ffc3f0 	bl	833a0 <wait_cycles>
	*GPPUDCLK1=(1<<18) | (1<<19) | (1<<20) | (1<<21);
   923e4:	52a00780 	mov	w0, #0x3c0000              	// #3932160
   923e8:	b9000280 	str	w0, [x20]
	wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   923ec:	528012c0 	mov	w0, #0x96                  	// #150
   923f0:	97ffc3ec 	bl	833a0 <wait_cycles>
   923f4:	b90002bf 	str	wzr, [x21]
	sd_hv = (*EMMC_SLOTISR_VER & HOST_SPEC_NUM) >> HOST_SPEC_NUM_SHIFT;
   923f8:	d2801f81 	mov	x1, #0xfc                  	// #252
	wait_cycles(150); *GPPUD=0; *GPPUDCLK1=0;
   923fc:	b900029f 	str	wzr, [x20]
	sd_hv = (*EMMC_SLOTISR_VER & HOST_SPEC_NUM) >> HOST_SPEC_NUM_SHIFT;
   92400:	f2a7e601 	movk	x1, #0x3f30, lsl #16
   92404:	f000aa42 	adrp	x2, 15dd000 <allocated+0xfbdd0>
	uart_puts("EMMC: GPIO set up\n");
   92408:	90000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   9240c:	9125c000 	add	x0, x0, #0x970
	sd_hv = (*EMMC_SLOTISR_VER & HOST_SPEC_NUM) >> HOST_SPEC_NUM_SHIFT;
   92410:	b9400021 	ldr	w1, [x1]
   92414:	d3505c21 	ubfx	x1, x1, #16, #8
   92418:	f902ac41 	str	x1, [x2, #1368]
	uart_puts("EMMC: GPIO set up\n");
   9241c:	97ffc02b 	bl	824c8 <uart_puts>
	*EMMC_CONTROL0 = 0; *EMMC_CONTROL1 |= C1_SRST_HC;
   92420:	d2800501 	mov	x1, #0x28                  	// #40
   92424:	d2800580 	mov	x0, #0x2c                  	// #44
   92428:	f2a7e601 	movk	x1, #0x3f30, lsl #16
   9242c:	f2a7e600 	movk	x0, #0x3f30, lsl #16
	cnt=10000; do{wait_usec(10);} while( (*EMMC_CONTROL1 & C1_SRST_HC) && cnt-- );
   92430:	aa0003f4 	mov	x20, x0
	*EMMC_CONTROL0 = 0; *EMMC_CONTROL1 |= C1_SRST_HC;
   92434:	b900003f 	str	wzr, [x1]
   92438:	b9400001 	ldr	w1, [x0]
   9243c:	32080021 	orr	w1, w1, #0x1000000
   92440:	b9000001 	str	w1, [x0]
	cnt=10000; do{wait_usec(10);} while( (*EMMC_CONTROL1 & C1_SRST_HC) && cnt-- );
   92444:	14000004 	b	92454 <sd_init+0x13c>
   92448:	d1000673 	sub	x19, x19, #0x1
   9244c:	b100067f 	cmn	x19, #0x1
   92450:	54001d40 	b.eq	927f8 <sd_init+0x4e0>  // b.none
   92454:	52800140 	mov	w0, #0xa                   	// #10
   92458:	97ffc3da 	bl	833c0 <wait_usec>
   9245c:	b9400280 	ldr	w0, [x20]
   92460:	37c7ff40 	tbnz	w0, #24, 92448 <sd_init+0x130>
	if(cnt<=0) {
   92464:	b4001cb3 	cbz	x19, 927f8 <sd_init+0x4e0>
		uart_puts("ERROR: failed to reset EMMC\n");
		return SD_ERROR;
	}
	uart_puts("EMMC: reset OK\n");
   92468:	90000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   9246c:	9126a000 	add	x0, x0, #0x9a8
   92470:	97ffc016 	bl	824c8 <uart_puts>
	*EMMC_CONTROL1 |= C1_CLK_INTLEN | C1_TOUNIT_MAX;
   92474:	b9400281 	ldr	w1, [x20]
   92478:	52800022 	mov	w2, #0x1                   	// #1
   9247c:	72a001c2 	movk	w2, #0xe, lsl #16
	wait_usec(10);
   92480:	52800140 	mov	w0, #0xa                   	// #10
	*EMMC_CONTROL1 |= C1_CLK_INTLEN | C1_TOUNIT_MAX;
   92484:	2a020021 	orr	w1, w1, w2
   92488:	b9000281 	str	w1, [x20]
	wait_usec(10);
   9248c:	97ffc3cd 	bl	833c0 <wait_usec>
	// Set clock to setup frequency.
	if((r=sd_clk(400000))) return r;
   92490:	52835000 	mov	w0, #0x1a80                	// #6784
   92494:	72a000c0 	movk	w0, #0x6, lsl #16
   92498:	97ffff1a 	bl	92100 <sd_clk>
   9249c:	2a0003f4 	mov	w20, w0
   924a0:	340000e0 	cbz	w0, 924bc <sd_init+0x1a4>
		uart_puts("CCS ");
	uart_send('\n');
	sd_scr[0]&=~SCR_SUPP_CCS;
	sd_scr[0]|=ccs;
	return SD_OK;
}
   924a4:	2a1403e0 	mov	w0, w20
   924a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   924ac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   924b0:	a94363f7 	ldp	x23, x24, [sp, #48]
   924b4:	a8c77bfd 	ldp	x29, x30, [sp], #112
   924b8:	d65f03c0 	ret
	*EMMC_INT_EN   = 0xffffffff;
   924bc:	d2800703 	mov	x3, #0x38                  	// #56
	*EMMC_INT_MASK = 0xffffffff;
   924c0:	d2800682 	mov	x2, #0x34                  	// #52
	*EMMC_INT_EN   = 0xffffffff;
   924c4:	f2a7e603 	movk	x3, #0x3f30, lsl #16
	*EMMC_INT_MASK = 0xffffffff;
   924c8:	f2a7e602 	movk	x2, #0x3f30, lsl #16
   924cc:	a9046bf9 	stp	x25, x26, [sp, #64]
	*EMMC_INT_EN   = 0xffffffff;
   924d0:	12800001 	mov	w1, #0xffffffff            	// #-1
	sd_scr[0]=sd_scr[1]=sd_rca=sd_err=0;
   924d4:	f000aa55 	adrp	x21, 15dd000 <allocated+0xfbdd0>
   924d8:	911522b9 	add	x25, x21, #0x548
	*EMMC_INT_EN   = 0xffffffff;
   924dc:	b9000061 	str	w1, [x3]
	sd_scr[0]=sd_scr[1]=sd_rca=sd_err=0;
   924e0:	f000aa53 	adrp	x19, 15dd000 <allocated+0xfbdd0>
   924e4:	f000aa56 	adrp	x22, 15dd000 <allocated+0xfbdd0>
	*EMMC_INT_MASK = 0xffffffff;
   924e8:	b9000041 	str	w1, [x2]
	sd_cmd(CMD_GO_IDLE,0);
   924ec:	52800001 	mov	w1, #0x0                   	// #0
	sd_scr[0]=sd_scr[1]=sd_rca=sd_err=0;
   924f0:	f902a6bf 	str	xzr, [x21, #1352]
   924f4:	f9029e7f 	str	xzr, [x19, #1336]
   924f8:	f902a2df 	str	xzr, [x22, #1344]
   924fc:	f900073f 	str	xzr, [x25, #8]
	sd_cmd(CMD_GO_IDLE,0);
   92500:	97fffdca 	bl	91c28 <sd_cmd>
	if(sd_err) return sd_err;
   92504:	f9429e74 	ldr	x20, [x19, #1336]
   92508:	b5000a54 	cbnz	x20, 92650 <sd_init+0x338>
	sd_cmd(CMD_SEND_IF_COND,0x000001AA);
   9250c:	52803541 	mov	w1, #0x1aa                 	// #426
   92510:	52a10040 	mov	w0, #0x8020000             	// #134348800
   92514:	97fffdc5 	bl	91c28 <sd_cmd>
	cnt=6; r=0; while(!(r&ACMD41_CMD_COMPLETE) && cnt--) {
   92518:	d28000d4 	mov	x20, #0x6                   	// #6
	if(sd_err) return sd_err;
   9251c:	f9429e60 	ldr	x0, [x19, #1336]
   92520:	b5000960 	cbnz	x0, 9264c <sd_init+0x334>
		uart_puts("EMMC: CMD_SEND_OP_COND returned ");
   92524:	90000038 	adrp	x24, 96000 <sd_init+0x3ce8>
   92528:	9126e318 	add	x24, x24, #0x9b8
   9252c:	a90573fb 	stp	x27, x28, [sp, #80]
		r=sd_cmd(CMD_SEND_OP_COND,ACMD41_ARG_HC);
   92530:	5290001b 	mov	w27, #0x8000                	// #32768
			uart_puts("COMPLETE ");
   92534:	90000020 	adrp	x0, 96000 <sd_init+0x3ce8>
		r=sd_cmd(CMD_SEND_OP_COND,ACMD41_ARG_HC);
   92538:	72aa3ffb 	movk	w27, #0x51ff, lsl #16
			uart_puts("COMPLETE ");
   9253c:	91278000 	add	x0, x0, #0x9e0
   92540:	f90037e0 	str	x0, [sp, #104]
	cnt=6; r=0; while(!(r&ACMD41_CMD_COMPLETE) && cnt--) {
   92544:	d1000694 	sub	x20, x20, #0x1
		wait_cycles(400);
   92548:	52803200 	mov	w0, #0x190                 	// #400
	cnt=6; r=0; while(!(r&ACMD41_CMD_COMPLETE) && cnt--) {
   9254c:	b100069f 	cmn	x20, #0x1
   92550:	54000a40 	b.eq	92698 <sd_init+0x380>  // b.none
		wait_cycles(400);
   92554:	97ffc393 	bl	833a0 <wait_cycles>
		if(sd_err!=SD_TIMEOUT && sd_err!=SD_OK ) {
   92558:	9114e27a 	add	x26, x19, #0x538
		r=sd_cmd(CMD_SEND_OP_COND,ACMD41_ARG_HC);
   9255c:	2a1b03e1 	mov	w1, w27
   92560:	52b52040 	mov	w0, #0xa9020000            	// #-1459486720
   92564:	97fffdb1 	bl	91c28 <sd_cmd>
   92568:	93407c17 	sxtw	x23, w0
		if(r&ACMD41_CMD_CCS)
   9256c:	120202e1 	and	w1, w23, #0x40000000
		r=sd_cmd(CMD_SEND_OP_COND,ACMD41_ARG_HC);
   92570:	aa1703fc 	mov	x28, x23
		uart_puts("EMMC: CMD_SEND_OP_COND returned ");
   92574:	aa1803e0 	mov	x0, x24
		if(r&ACMD41_CMD_CCS)
   92578:	b90067e1 	str	w1, [sp, #100]
		uart_puts("EMMC: CMD_SEND_OP_COND returned ");
   9257c:	97ffbfd3 	bl	824c8 <uart_puts>
		if(r&ACMD41_CMD_COMPLETE)
   92580:	37f80877 	tbnz	w23, #31, 9268c <sd_init+0x374>
		if(r&ACMD41_VOLTAGE)
   92584:	72112380 	ands	w0, w28, #0xff8000
   92588:	b90063e0 	str	w0, [sp, #96]
   9258c:	54000701 	b.ne	9266c <sd_init+0x354>  // b.any
		if(r&ACMD41_CMD_CCS)
   92590:	37f0077c 	tbnz	w28, #30, 9267c <sd_init+0x364>
		uart_hex(r>>32);
   92594:	937ffee0 	asr	x0, x23, #63
   92598:	97ffbfe4 	bl	82528 <uart_hex>
		uart_hex(r);
   9259c:	2a1c03e0 	mov	w0, w28
   925a0:	97ffbfe2 	bl	82528 <uart_hex>
		uart_send('\n');
   925a4:	52800140 	mov	w0, #0xa                   	// #10
   925a8:	97ffbfb0 	bl	82468 <uart_send>
		if(sd_err!=SD_TIMEOUT && sd_err!=SD_OK ) {
   925ac:	f9429e60 	ldr	x0, [x19, #1336]
   925b0:	d1000400 	sub	x0, x0, #0x1
   925b4:	b1000c1f 	cmn	x0, #0x3
   925b8:	540010c9 	b.ls	927d0 <sd_init+0x4b8>  // b.plast
	cnt=6; r=0; while(!(r&ACMD41_CMD_COMPLETE) && cnt--) {
   925bc:	36fffc5c 	tbz	w28, #31, 92544 <sd_init+0x22c>
	if(!(r&ACMD41_CMD_COMPLETE) || !cnt ) return SD_TIMEOUT;
   925c0:	b40006d4 	cbz	x20, 92698 <sd_init+0x380>
	if(!(r&ACMD41_VOLTAGE)) return SD_ERROR;
   925c4:	b94063e0 	ldr	w0, [sp, #96]
   925c8:	34001220 	cbz	w0, 9280c <sd_init+0x4f4>
	sd_cmd(CMD_ALL_SEND_CID,0);
   925cc:	52800001 	mov	w1, #0x0                   	// #0
   925d0:	52a04020 	mov	w0, #0x2010000             	// #33619968
   925d4:	97fffd95 	bl	91c28 <sd_cmd>
	sd_rca = sd_cmd(CMD_SEND_REL_ADDR,0);
   925d8:	52800001 	mov	w1, #0x0                   	// #0
   925dc:	52a06040 	mov	w0, #0x3020000             	// #50462720
   925e0:	97fffd92 	bl	91c28 <sd_cmd>
   925e4:	93407c01 	sxtw	x1, w0
	uart_puts("EMMC: CMD_SEND_REL_ADDR returned ");
   925e8:	90000022 	adrp	x2, 96000 <sd_init+0x3ce8>
	sd_rca = sd_cmd(CMD_SEND_REL_ADDR,0);
   925ec:	f902a2c1 	str	x1, [x22, #1344]
	uart_puts("EMMC: CMD_SEND_REL_ADDR returned ");
   925f0:	9128c040 	add	x0, x2, #0xa30
   925f4:	97ffbfb5 	bl	824c8 <uart_puts>
	uart_hex(sd_rca>>32);
   925f8:	b94546c0 	ldr	w0, [x22, #1348]
   925fc:	97ffbfcb 	bl	82528 <uart_hex>
	uart_hex(sd_rca);
   92600:	b94542c0 	ldr	w0, [x22, #1344]
   92604:	97ffbfc9 	bl	82528 <uart_hex>
	uart_send('\n');
   92608:	52800140 	mov	w0, #0xa                   	// #10
   9260c:	97ffbf97 	bl	82468 <uart_send>
	if(sd_err) return sd_err;
   92610:	f9400354 	ldr	x20, [x26]
   92614:	b50000d4 	cbnz	x20, 9262c <sd_init+0x314>
	if((r=sd_clk(25000000))) return r;
   92618:	528f0800 	mov	w0, #0x7840                	// #30784
   9261c:	72a02fa0 	movk	w0, #0x17d, lsl #16
   92620:	97fffeb8 	bl	92100 <sd_clk>
   92624:	2a0003f4 	mov	w20, w0
   92628:	340004a0 	cbz	w0, 926bc <sd_init+0x3a4>
}
   9262c:	2a1403e0 	mov	w0, w20
   92630:	a94153f3 	ldp	x19, x20, [sp, #16]
   92634:	a9425bf5 	ldp	x21, x22, [sp, #32]
   92638:	a94363f7 	ldp	x23, x24, [sp, #48]
   9263c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   92640:	a94573fb 	ldp	x27, x28, [sp, #80]
   92644:	a8c77bfd 	ldp	x29, x30, [sp], #112
   92648:	d65f03c0 	ret
	if(sd_err) return sd_err;
   9264c:	2a0003f4 	mov	w20, w0
}
   92650:	2a1403e0 	mov	w0, w20
   92654:	a94153f3 	ldp	x19, x20, [sp, #16]
   92658:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9265c:	a94363f7 	ldp	x23, x24, [sp, #48]
	if(sd_err) return sd_err;
   92660:	a9446bf9 	ldp	x25, x26, [sp, #64]
}
   92664:	a8c77bfd 	ldp	x29, x30, [sp], #112
   92668:	d65f03c0 	ret
			uart_puts("VOLTAGE ");
   9266c:	90000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   92670:	9127c000 	add	x0, x0, #0x9f0
   92674:	97ffbf95 	bl	824c8 <uart_puts>
		if(r&ACMD41_CMD_CCS)
   92678:	36f7f8fc 	tbz	w28, #30, 92594 <sd_init+0x27c>
			uart_puts("CCS ");
   9267c:	90000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   92680:	91280000 	add	x0, x0, #0xa00
   92684:	97ffbf91 	bl	824c8 <uart_puts>
   92688:	17ffffc3 	b	92594 <sd_init+0x27c>
			uart_puts("COMPLETE ");
   9268c:	f94037e0 	ldr	x0, [sp, #104]
   92690:	97ffbf8e 	bl	824c8 <uart_puts>
   92694:	17ffffbc 	b	92584 <sd_init+0x26c>
	if(!(r&ACMD41_CMD_COMPLETE) || !cnt ) return SD_TIMEOUT;
   92698:	12800014 	mov	w20, #0xffffffff            	// #-1
}
   9269c:	2a1403e0 	mov	w0, w20
   926a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   926a4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   926a8:	a94363f7 	ldp	x23, x24, [sp, #48]
   926ac:	a9446bf9 	ldp	x25, x26, [sp, #64]
   926b0:	a94573fb 	ldp	x27, x28, [sp, #80]
   926b4:	a8c77bfd 	ldp	x29, x30, [sp], #112
   926b8:	d65f03c0 	ret
	sd_cmd(CMD_CARD_SELECT,sd_rca);
   926bc:	b94542c1 	ldr	w1, [x22, #1344]
   926c0:	52a0e060 	mov	w0, #0x7030000             	// #117637120
   926c4:	97fffd59 	bl	91c28 <sd_cmd>
	if(sd_err) return sd_err;
   926c8:	f9400354 	ldr	x20, [x26]
   926cc:	b5fffb14 	cbnz	x20, 9262c <sd_init+0x314>
	if(sd_status(SR_DAT_INHIBIT)) return SD_TIMEOUT;
   926d0:	52800040 	mov	w0, #0x2                   	// #2
   926d4:	97fffceb 	bl	91a80 <sd_status>
   926d8:	35fffe00 	cbnz	w0, 92698 <sd_init+0x380>
	*EMMC_BLKSIZECNT = (1<<16) | 8;
   926dc:	d2800082 	mov	x2, #0x4                   	// #4
   926e0:	52800103 	mov	w3, #0x8                   	// #8
   926e4:	f2a7e602 	movk	x2, #0x3f30, lsl #16
   926e8:	72a00023 	movk	w3, #0x1, lsl #16
	sd_cmd(CMD_SEND_SCR,0);
   926ec:	52800200 	mov	w0, #0x10                  	// #16
   926f0:	52800001 	mov	w1, #0x0                   	// #0
	*EMMC_BLKSIZECNT = (1<<16) | 8;
   926f4:	b9000043 	str	w3, [x2]
	sd_cmd(CMD_SEND_SCR,0);
   926f8:	72b66440 	movk	w0, #0xb322, lsl #16
   926fc:	97fffd4b 	bl	91c28 <sd_cmd>
	if(sd_err) return sd_err;
   92700:	f9400354 	ldr	x20, [x26]
   92704:	b5fff954 	cbnz	x20, 9262c <sd_init+0x314>
	if(sd_int(INT_READ_RDY)) return SD_TIMEOUT;
   92708:	52800400 	mov	w0, #0x20                  	// #32
   9270c:	97fffd11 	bl	91b50 <sd_int>
   92710:	2a0003f4 	mov	w20, w0
   92714:	35fffc20 	cbnz	w0, 92698 <sd_init+0x380>
		if( *EMMC_STATUS & SR_READ_AVAILABLE )
   92718:	d2800498 	mov	x24, #0x24                  	// #36
			sd_scr[r++] = *EMMC_DATA;
   9271c:	d280041a 	mov	x26, #0x20                  	// #32
	r=0; cnt=100000; while(r<2 && cnt) {
   92720:	d2800017 	mov	x23, #0x0                   	// #0
		if( *EMMC_STATUS & SR_READ_AVAILABLE )
   92724:	f2a7e618 	movk	x24, #0x3f30, lsl #16
			sd_scr[r++] = *EMMC_DATA;
   92728:	f2a7e61a 	movk	x26, #0x3f30, lsl #16
		if( *EMMC_STATUS & SR_READ_AVAILABLE )
   9272c:	b9400300 	ldr	w0, [x24]
			sd_scr[r++] = *EMMC_DATA;
   92730:	910006e1 	add	x1, x23, #0x1
		if( *EMMC_STATUS & SR_READ_AVAILABLE )
   92734:	365805c0 	tbz	w0, #11, 927ec <sd_init+0x4d4>
			sd_scr[r++] = *EMMC_DATA;
   92738:	b9400340 	ldr	w0, [x26]
	r=0; cnt=100000; while(r<2 && cnt) {
   9273c:	f100083f 	cmp	x1, #0x2
			sd_scr[r++] = *EMMC_DATA;
   92740:	2a0003e0 	mov	w0, w0
   92744:	f8377b20 	str	x0, [x25, x23, lsl #3]
   92748:	aa0103f7 	mov	x23, x1
	r=0; cnt=100000; while(r<2 && cnt) {
   9274c:	54ffff01 	b.ne	9272c <sd_init+0x414>  // b.any
	if(sd_scr[0] & SCR_SD_BUS_WIDTH_4) {
   92750:	f9400320 	ldr	x0, [x25]
   92754:	36500180 	tbz	w0, #10, 92784 <sd_init+0x46c>
		sd_cmd(CMD_SET_BUS_WIDTH,sd_rca|2);
   92758:	f942a2c1 	ldr	x1, [x22, #1344]
   9275c:	52b0c040 	mov	w0, #0x86020000            	// #-2046689280
   92760:	321f0021 	orr	w1, w1, #0x2
   92764:	97fffd31 	bl	91c28 <sd_cmd>
		if(sd_err) return sd_err;
   92768:	f9429e60 	ldr	x0, [x19, #1336]
   9276c:	b5000580 	cbnz	x0, 9281c <sd_init+0x504>
		*EMMC_CONTROL0 |= C0_HCTL_DWITDH;
   92770:	d2800501 	mov	x1, #0x28                  	// #40
   92774:	f2a7e601 	movk	x1, #0x3f30, lsl #16
   92778:	b9400020 	ldr	w0, [x1]
   9277c:	321f0000 	orr	w0, w0, #0x2
   92780:	b9000020 	str	w0, [x1]
	uart_puts("EMMC: supports ");
   92784:	90000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   92788:	91296000 	add	x0, x0, #0xa58
   9278c:	97ffbf4f 	bl	824c8 <uart_puts>
	if(sd_scr[0] & SCR_SUPP_SET_BLKCNT)
   92790:	f942a6a0 	ldr	x0, [x21, #1352]
   92794:	37c80540 	tbnz	w0, #25, 9283c <sd_init+0x524>
	if(ccs)
   92798:	b94067e0 	ldr	w0, [sp, #100]
   9279c:	35000480 	cbnz	w0, 9282c <sd_init+0x514>
	uart_send('\n');
   927a0:	52800140 	mov	w0, #0xa                   	// #10
   927a4:	97ffbf31 	bl	82468 <uart_send>
	sd_scr[0]&=~SCR_SUPP_CCS;
   927a8:	f942a6a0 	ldr	x0, [x21, #1352]
	if(r&ACMD41_CMD_CCS) ccs=SCR_SUPP_CCS;
   927ac:	b94067e1 	ldr	w1, [sp, #100]
	sd_scr[0]&=~SCR_SUPP_CCS;
   927b0:	927ff800 	and	x0, x0, #0xfffffffffffffffe
	if(r&ACMD41_CMD_CCS) ccs=SCR_SUPP_CCS;
   927b4:	7100003f 	cmp	w1, #0x0
   927b8:	9a9f07e1 	cset	x1, ne  // ne = any
	sd_scr[0]|=ccs;
   927bc:	aa010000 	orr	x0, x0, x1
   927c0:	f902a6a0 	str	x0, [x21, #1352]
	return SD_OK;
   927c4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   927c8:	a94573fb 	ldp	x27, x28, [sp, #80]
   927cc:	17ffff36 	b	924a4 <sd_init+0x18c>
			uart_puts("ERROR: EMMC ACMD41 returned error\n");
   927d0:	90000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   927d4:	91282000 	add	x0, x0, #0xa08
   927d8:	97ffbf3c 	bl	824c8 <uart_puts>
			return sd_err;
   927dc:	b9400354 	ldr	w20, [x26]
   927e0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   927e4:	a94573fb 	ldp	x27, x28, [sp, #80]
   927e8:	17ffff2f 	b	924a4 <sd_init+0x18c>
			wait_usec(1);
   927ec:	52800020 	mov	w0, #0x1                   	// #1
   927f0:	97ffc2f4 	bl	833c0 <wait_usec>
   927f4:	17ffffce 	b	9272c <sd_init+0x414>
		uart_puts("ERROR: failed to reset EMMC\n");
   927f8:	90000020 	adrp	x0, 96000 <sd_init+0x3ce8>
		return SD_ERROR;
   927fc:	12800034 	mov	w20, #0xfffffffe            	// #-2
		uart_puts("ERROR: failed to reset EMMC\n");
   92800:	91262000 	add	x0, x0, #0x988
   92804:	97ffbf31 	bl	824c8 <uart_puts>
		return SD_ERROR;
   92808:	17ffff27 	b	924a4 <sd_init+0x18c>
	if(!(r&ACMD41_VOLTAGE)) return SD_ERROR;
   9280c:	12800034 	mov	w20, #0xfffffffe            	// #-2
   92810:	a9446bf9 	ldp	x25, x26, [sp, #64]
   92814:	a94573fb 	ldp	x27, x28, [sp, #80]
   92818:	17ffff23 	b	924a4 <sd_init+0x18c>
		if(sd_err) return sd_err;
   9281c:	2a0003f4 	mov	w20, w0
   92820:	a9446bf9 	ldp	x25, x26, [sp, #64]
   92824:	a94573fb 	ldp	x27, x28, [sp, #80]
   92828:	17ffff1f 	b	924a4 <sd_init+0x18c>
		uart_puts("CCS ");
   9282c:	90000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   92830:	91280000 	add	x0, x0, #0xa00
   92834:	97ffbf25 	bl	824c8 <uart_puts>
   92838:	17ffffda 	b	927a0 <sd_init+0x488>
		uart_puts("SET_BLKCNT ");
   9283c:	90000020 	adrp	x0, 96000 <sd_init+0x3ce8>
   92840:	9129a000 	add	x0, x0, #0xa68
   92844:	97ffbf21 	bl	824c8 <uart_puts>
   92848:	17ffffd4 	b	92798 <sd_init+0x480>
